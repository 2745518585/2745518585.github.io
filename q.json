{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"source/BingSiteAuth.xml","path":"BingSiteAuth.xml","modified":0,"renderable":0},{"_id":"source/post-images/Balanced-tree-Treap-1.png","path":"post-images/Balanced-tree-Treap-1.png","modified":0,"renderable":0},{"_id":"source/post-images/Balanced-tree-Treap-2.png","path":"post-images/Balanced-tree-Treap-2.png","modified":0,"renderable":0},{"_id":"source/post-images/Balanced-tree-Treap-3.png","path":"post-images/Balanced-tree-Treap-3.png","modified":0,"renderable":0},{"_id":"source/post-images/P1231-solution-1.png","path":"post-images/P1231-solution-1.png","modified":0,"renderable":0},{"_id":"source/post-images/P2065-solution-1.png","path":"post-images/P2065-solution-1.png","modified":0,"renderable":0},{"_id":"source/post-images/P2065-solution-2.png","path":"post-images/P2065-solution-2.png","modified":0,"renderable":0},{"_id":"source/post-images/P2774-solution-1.png","path":"post-images/P2774-solution-1.png","modified":0,"renderable":0},{"_id":"source/post-images/P2754-solution-1.png","path":"post-images/P2754-solution-1.png","modified":0,"renderable":0},{"_id":"source/post-images/Slope-optimization-DP-1.png","path":"post-images/Slope-optimization-DP-1.png","modified":0,"renderable":0},{"_id":"source/post-images/Slope-optimization-DP-3.png","path":"post-images/Slope-optimization-DP-3.png","modified":0,"renderable":0},{"_id":"source/post-images/Slope-optimization-DP-2.png","path":"post-images/Slope-optimization-DP-2.png","modified":0,"renderable":0},{"_id":"source/post-images/Slope-optimization-DP-4.png","path":"post-images/Slope-optimization-DP-4.png","modified":0,"renderable":0},{"_id":"source/post-images/Slope-optimization-DP-5.png","path":"post-images/Slope-optimization-DP-5.png","modified":0,"renderable":0},{"_id":"source/post-images/Sustainable-segment-tree-1.jpg","path":"post-images/Sustainable-segment-tree-1.jpg","modified":0,"renderable":0},{"_id":"source/post-images/Sustainable-segment-tree-2.jpg","path":"post-images/Sustainable-segment-tree-2.jpg","modified":0,"renderable":0},{"_id":"source/post-images/Tree-chain-subdivision-1.png","path":"post-images/Tree-chain-subdivision-1.png","modified":0,"renderable":0},{"_id":"source/post-images/Tree-chain-subdivision-2.png","path":"post-images/Tree-chain-subdivision-2.png","modified":0,"renderable":0},{"_id":"source/post-images/Tree-chain-subdivision-3.png","path":"post-images/Tree-chain-subdivision-3.png","modified":0,"renderable":0},{"_id":"source/post-images/Upper-and-lower-bound-network-flow-1.png","path":"post-images/Upper-and-lower-bound-network-flow-1.png","modified":0,"renderable":0},{"_id":"source/post-images/Upper-and-lower-bound-network-flow-2.png","path":"post-images/Upper-and-lower-bound-network-flow-2.png","modified":0,"renderable":0},{"_id":"source/post-images/Upper-and-lower-bound-network-flow-3.png","path":"post-images/Upper-and-lower-bound-network-flow-3.png","modified":0,"renderable":0},{"_id":"source/post-images/Upper-and-lower-bound-network-flow-4.png","path":"post-images/Upper-and-lower-bound-network-flow-4.png","modified":0,"renderable":0},{"_id":"source/post-images/Upper-and-lower-bound-network-flow-5.png","path":"post-images/Upper-and-lower-bound-network-flow-5.png","modified":0,"renderable":0},{"_id":"source/post-images/maximum-flow-Dinic-1.png","path":"post-images/maximum-flow-Dinic-1.png","modified":0,"renderable":0},{"_id":"source/post-images/maximum-flow-Dinic-2.png","path":"post-images/maximum-flow-Dinic-2.png","modified":0,"renderable":0},{"_id":"source/post-images/maximum-flow-Dinic-4.png","path":"post-images/maximum-flow-Dinic-4.png","modified":0,"renderable":0},{"_id":"source/post-images/maximum-flow-Dinic-5.png","path":"post-images/maximum-flow-Dinic-5.png","modified":0,"renderable":0},{"_id":"source/post-images/maximum-flow-Dinic-3.png","path":"post-images/maximum-flow-Dinic-3.png","modified":0,"renderable":0},{"_id":"source/post-images/p4638-solution-1.png","path":"post-images/p4638-solution-1.png","modified":0,"renderable":0},{"_id":"source/post-images/wc-2023-travels-1.png","path":"post-images/wc-2023-travels-1.png","modified":0,"renderable":0},{"_id":"themes/next/source/404.html","path":"404.html","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo-algolia-nebula-blue-full.svg","path":"images/logo-algolia-nebula-blue-full.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/comments-buttons.js","path":"js/comments-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/comments.js","path":"js/comments.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/config.js","path":"js/config.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/pjax.js","path":"js/pjax.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schedule.js","path":"js/schedule.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/css/noscript.styl","path":"css/noscript.styl","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/fancybox.js","path":"js/third-party/fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/pace.js","path":"js/third-party/pace.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/quicklink.js","path":"js/third-party/quicklink.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/rating.js","path":"js/third-party/rating.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/LICENSE","path":"lib/pdf/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/README.md","path":"lib/pdf/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/chat/chatra.js","path":"js/third-party/chat/chatra.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/chat/gitter.js","path":"js/third-party/chat/gitter.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/chat/tidio.js","path":"js/third-party/chat/tidio.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/google-analytics.js","path":"js/third-party/analytics/google-analytics.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/baidu-analytics.js","path":"js/third-party/analytics/baidu-analytics.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/growingio.js","path":"js/third-party/analytics/growingio.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/matomo.js","path":"js/third-party/analytics/matomo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/changyan.js","path":"js/third-party/comments/changyan.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/disqus.js","path":"js/third-party/comments/disqus.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/disqusjs.js","path":"js/third-party/comments/disqusjs.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/gitalk.js","path":"js/third-party/comments/gitalk.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/isso.js","path":"js/third-party/comments/isso.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/livere.js","path":"js/third-party/comments/livere.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/utterances.js","path":"js/third-party/comments/utterances.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/math/katex.js","path":"js/third-party/math/katex.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/statistics/firestore.js","path":"js/third-party/statistics/firestore.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/math/mathjax.js","path":"js/third-party/math/mathjax.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/statistics/lean-analytics.js","path":"js/third-party/statistics/lean-analytics.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/search/algolia-search.js","path":"js/third-party/search/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/search/local-search.js","path":"js/third-party/search/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/tags/mermaid.js","path":"js/third-party/tags/mermaid.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/tags/pdf.js","path":"js/third-party/tags/pdf.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/build/pdf.js","path":"lib/pdf/build/pdf.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/build/pdf.js.map","path":"lib/pdf/build/pdf.js.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/build/pdf.sandbox.js","path":"lib/pdf/build/pdf.sandbox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/build/pdf.sandbox.js.map","path":"lib/pdf/build/pdf.sandbox.js.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/build/pdf.worker.js","path":"lib/pdf/build/pdf.worker.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/build/pdf.worker.js.map","path":"lib/pdf/build/pdf.worker.js.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/debugger.css","path":"lib/pdf/web/debugger.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/debugger.js","path":"lib/pdf/web/debugger.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/compressed.tracemonkey-pldi-09.pdf","path":"lib/pdf/web/compressed.tracemonkey-pldi-09.pdf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/viewer.css","path":"lib/pdf/web/viewer.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/viewer.html","path":"lib/pdf/web/viewer.html","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/viewer.js","path":"lib/pdf/web/viewer.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/viewer.js.map","path":"lib/pdf/web/viewer.js.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/78-EUC-H.bcmap","path":"lib/pdf/web/cmaps/78-EUC-H.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/78-EUC-V.bcmap","path":"lib/pdf/web/cmaps/78-EUC-V.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/78-H.bcmap","path":"lib/pdf/web/cmaps/78-H.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/78-RKSJ-H.bcmap","path":"lib/pdf/web/cmaps/78-RKSJ-H.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/78-V.bcmap","path":"lib/pdf/web/cmaps/78-V.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/78-RKSJ-V.bcmap","path":"lib/pdf/web/cmaps/78-RKSJ-V.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/78ms-RKSJ-H.bcmap","path":"lib/pdf/web/cmaps/78ms-RKSJ-H.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/78ms-RKSJ-V.bcmap","path":"lib/pdf/web/cmaps/78ms-RKSJ-V.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/83pv-RKSJ-H.bcmap","path":"lib/pdf/web/cmaps/83pv-RKSJ-H.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/90ms-RKSJ-H.bcmap","path":"lib/pdf/web/cmaps/90ms-RKSJ-H.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/90ms-RKSJ-V.bcmap","path":"lib/pdf/web/cmaps/90ms-RKSJ-V.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/90msp-RKSJ-H.bcmap","path":"lib/pdf/web/cmaps/90msp-RKSJ-H.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/90msp-RKSJ-V.bcmap","path":"lib/pdf/web/cmaps/90msp-RKSJ-V.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/90pv-RKSJ-H.bcmap","path":"lib/pdf/web/cmaps/90pv-RKSJ-H.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/90pv-RKSJ-V.bcmap","path":"lib/pdf/web/cmaps/90pv-RKSJ-V.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/Add-H.bcmap","path":"lib/pdf/web/cmaps/Add-H.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/Add-RKSJ-H.bcmap","path":"lib/pdf/web/cmaps/Add-RKSJ-H.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/Add-RKSJ-V.bcmap","path":"lib/pdf/web/cmaps/Add-RKSJ-V.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/Add-V.bcmap","path":"lib/pdf/web/cmaps/Add-V.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/Adobe-CNS1-0.bcmap","path":"lib/pdf/web/cmaps/Adobe-CNS1-0.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/Adobe-CNS1-1.bcmap","path":"lib/pdf/web/cmaps/Adobe-CNS1-1.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/Adobe-CNS1-2.bcmap","path":"lib/pdf/web/cmaps/Adobe-CNS1-2.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/Adobe-CNS1-3.bcmap","path":"lib/pdf/web/cmaps/Adobe-CNS1-3.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/Adobe-CNS1-4.bcmap","path":"lib/pdf/web/cmaps/Adobe-CNS1-4.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/Adobe-CNS1-5.bcmap","path":"lib/pdf/web/cmaps/Adobe-CNS1-5.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/Adobe-CNS1-6.bcmap","path":"lib/pdf/web/cmaps/Adobe-CNS1-6.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/Adobe-CNS1-UCS2.bcmap","path":"lib/pdf/web/cmaps/Adobe-CNS1-UCS2.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/Adobe-GB1-0.bcmap","path":"lib/pdf/web/cmaps/Adobe-GB1-0.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/Adobe-GB1-1.bcmap","path":"lib/pdf/web/cmaps/Adobe-GB1-1.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/Adobe-GB1-2.bcmap","path":"lib/pdf/web/cmaps/Adobe-GB1-2.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/Adobe-GB1-3.bcmap","path":"lib/pdf/web/cmaps/Adobe-GB1-3.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/Adobe-GB1-4.bcmap","path":"lib/pdf/web/cmaps/Adobe-GB1-4.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/Adobe-GB1-UCS2.bcmap","path":"lib/pdf/web/cmaps/Adobe-GB1-UCS2.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/Adobe-Japan1-0.bcmap","path":"lib/pdf/web/cmaps/Adobe-Japan1-0.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/Adobe-Japan1-1.bcmap","path":"lib/pdf/web/cmaps/Adobe-Japan1-1.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/Adobe-GB1-5.bcmap","path":"lib/pdf/web/cmaps/Adobe-GB1-5.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/Adobe-Japan1-2.bcmap","path":"lib/pdf/web/cmaps/Adobe-Japan1-2.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/Adobe-Japan1-4.bcmap","path":"lib/pdf/web/cmaps/Adobe-Japan1-4.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/Adobe-Japan1-3.bcmap","path":"lib/pdf/web/cmaps/Adobe-Japan1-3.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/Adobe-Japan1-6.bcmap","path":"lib/pdf/web/cmaps/Adobe-Japan1-6.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/Adobe-Japan1-5.bcmap","path":"lib/pdf/web/cmaps/Adobe-Japan1-5.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/Adobe-Japan1-UCS2.bcmap","path":"lib/pdf/web/cmaps/Adobe-Japan1-UCS2.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/Adobe-Korea1-0.bcmap","path":"lib/pdf/web/cmaps/Adobe-Korea1-0.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/Adobe-Korea1-1.bcmap","path":"lib/pdf/web/cmaps/Adobe-Korea1-1.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/Adobe-Korea1-2.bcmap","path":"lib/pdf/web/cmaps/Adobe-Korea1-2.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/Adobe-Korea1-UCS2.bcmap","path":"lib/pdf/web/cmaps/Adobe-Korea1-UCS2.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/B5-H.bcmap","path":"lib/pdf/web/cmaps/B5-H.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/B5-V.bcmap","path":"lib/pdf/web/cmaps/B5-V.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/B5pc-H.bcmap","path":"lib/pdf/web/cmaps/B5pc-H.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/B5pc-V.bcmap","path":"lib/pdf/web/cmaps/B5pc-V.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/CNS-EUC-H.bcmap","path":"lib/pdf/web/cmaps/CNS-EUC-H.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/CNS-EUC-V.bcmap","path":"lib/pdf/web/cmaps/CNS-EUC-V.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/CNS1-V.bcmap","path":"lib/pdf/web/cmaps/CNS1-V.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/CNS1-H.bcmap","path":"lib/pdf/web/cmaps/CNS1-H.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/CNS2-H.bcmap","path":"lib/pdf/web/cmaps/CNS2-H.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/CNS2-V.bcmap","path":"lib/pdf/web/cmaps/CNS2-V.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/ETHK-B5-H.bcmap","path":"lib/pdf/web/cmaps/ETHK-B5-H.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/ETHK-B5-V.bcmap","path":"lib/pdf/web/cmaps/ETHK-B5-V.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/ETen-B5-H.bcmap","path":"lib/pdf/web/cmaps/ETen-B5-H.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/ETen-B5-V.bcmap","path":"lib/pdf/web/cmaps/ETen-B5-V.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/ETenms-B5-V.bcmap","path":"lib/pdf/web/cmaps/ETenms-B5-V.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/ETenms-B5-H.bcmap","path":"lib/pdf/web/cmaps/ETenms-B5-H.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/EUC-H.bcmap","path":"lib/pdf/web/cmaps/EUC-H.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/EUC-V.bcmap","path":"lib/pdf/web/cmaps/EUC-V.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/Ext-H.bcmap","path":"lib/pdf/web/cmaps/Ext-H.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/Ext-RKSJ-H.bcmap","path":"lib/pdf/web/cmaps/Ext-RKSJ-H.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/Ext-RKSJ-V.bcmap","path":"lib/pdf/web/cmaps/Ext-RKSJ-V.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/GB-EUC-H.bcmap","path":"lib/pdf/web/cmaps/GB-EUC-H.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/Ext-V.bcmap","path":"lib/pdf/web/cmaps/Ext-V.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/GB-EUC-V.bcmap","path":"lib/pdf/web/cmaps/GB-EUC-V.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/GB-H.bcmap","path":"lib/pdf/web/cmaps/GB-H.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/GB-V.bcmap","path":"lib/pdf/web/cmaps/GB-V.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/GBK-EUC-H.bcmap","path":"lib/pdf/web/cmaps/GBK-EUC-H.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/GBK-EUC-V.bcmap","path":"lib/pdf/web/cmaps/GBK-EUC-V.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/GBK2K-H.bcmap","path":"lib/pdf/web/cmaps/GBK2K-H.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/GBK2K-V.bcmap","path":"lib/pdf/web/cmaps/GBK2K-V.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/GBKp-EUC-H.bcmap","path":"lib/pdf/web/cmaps/GBKp-EUC-H.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/GBKp-EUC-V.bcmap","path":"lib/pdf/web/cmaps/GBKp-EUC-V.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/GBT-EUC-H.bcmap","path":"lib/pdf/web/cmaps/GBT-EUC-H.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/GBT-EUC-V.bcmap","path":"lib/pdf/web/cmaps/GBT-EUC-V.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/GBT-H.bcmap","path":"lib/pdf/web/cmaps/GBT-H.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/GBT-V.bcmap","path":"lib/pdf/web/cmaps/GBT-V.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/GBTpc-EUC-H.bcmap","path":"lib/pdf/web/cmaps/GBTpc-EUC-H.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/GBTpc-EUC-V.bcmap","path":"lib/pdf/web/cmaps/GBTpc-EUC-V.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/GBpc-EUC-H.bcmap","path":"lib/pdf/web/cmaps/GBpc-EUC-H.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/GBpc-EUC-V.bcmap","path":"lib/pdf/web/cmaps/GBpc-EUC-V.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/H.bcmap","path":"lib/pdf/web/cmaps/H.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/HKdla-B5-H.bcmap","path":"lib/pdf/web/cmaps/HKdla-B5-H.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/HKdla-B5-V.bcmap","path":"lib/pdf/web/cmaps/HKdla-B5-V.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/HKdlb-B5-H.bcmap","path":"lib/pdf/web/cmaps/HKdlb-B5-H.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/HKdlb-B5-V.bcmap","path":"lib/pdf/web/cmaps/HKdlb-B5-V.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/HKgccs-B5-H.bcmap","path":"lib/pdf/web/cmaps/HKgccs-B5-H.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/HKm314-B5-H.bcmap","path":"lib/pdf/web/cmaps/HKm314-B5-H.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/HKgccs-B5-V.bcmap","path":"lib/pdf/web/cmaps/HKgccs-B5-V.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/HKm314-B5-V.bcmap","path":"lib/pdf/web/cmaps/HKm314-B5-V.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/HKm471-B5-H.bcmap","path":"lib/pdf/web/cmaps/HKm471-B5-H.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/HKm471-B5-V.bcmap","path":"lib/pdf/web/cmaps/HKm471-B5-V.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/HKscs-B5-H.bcmap","path":"lib/pdf/web/cmaps/HKscs-B5-H.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/HKscs-B5-V.bcmap","path":"lib/pdf/web/cmaps/HKscs-B5-V.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/Hankaku.bcmap","path":"lib/pdf/web/cmaps/Hankaku.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/Hiragana.bcmap","path":"lib/pdf/web/cmaps/Hiragana.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/KSC-EUC-H.bcmap","path":"lib/pdf/web/cmaps/KSC-EUC-H.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/KSC-EUC-V.bcmap","path":"lib/pdf/web/cmaps/KSC-EUC-V.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/KSC-H.bcmap","path":"lib/pdf/web/cmaps/KSC-H.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/KSC-Johab-H.bcmap","path":"lib/pdf/web/cmaps/KSC-Johab-H.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/KSC-Johab-V.bcmap","path":"lib/pdf/web/cmaps/KSC-Johab-V.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/KSC-V.bcmap","path":"lib/pdf/web/cmaps/KSC-V.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/KSCms-UHC-H.bcmap","path":"lib/pdf/web/cmaps/KSCms-UHC-H.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/KSCms-UHC-HW-H.bcmap","path":"lib/pdf/web/cmaps/KSCms-UHC-HW-H.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/KSCms-UHC-HW-V.bcmap","path":"lib/pdf/web/cmaps/KSCms-UHC-HW-V.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/KSCms-UHC-V.bcmap","path":"lib/pdf/web/cmaps/KSCms-UHC-V.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/KSCpc-EUC-H.bcmap","path":"lib/pdf/web/cmaps/KSCpc-EUC-H.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/KSCpc-EUC-V.bcmap","path":"lib/pdf/web/cmaps/KSCpc-EUC-V.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/Katakana.bcmap","path":"lib/pdf/web/cmaps/Katakana.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/LICENSE","path":"lib/pdf/web/cmaps/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/NWP-H.bcmap","path":"lib/pdf/web/cmaps/NWP-H.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/NWP-V.bcmap","path":"lib/pdf/web/cmaps/NWP-V.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/RKSJ-H.bcmap","path":"lib/pdf/web/cmaps/RKSJ-H.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/RKSJ-V.bcmap","path":"lib/pdf/web/cmaps/RKSJ-V.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/Roman.bcmap","path":"lib/pdf/web/cmaps/Roman.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/UniCNS-UCS2-H.bcmap","path":"lib/pdf/web/cmaps/UniCNS-UCS2-H.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/UniCNS-UCS2-V.bcmap","path":"lib/pdf/web/cmaps/UniCNS-UCS2-V.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/UniCNS-UTF16-H.bcmap","path":"lib/pdf/web/cmaps/UniCNS-UTF16-H.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/UniCNS-UTF16-V.bcmap","path":"lib/pdf/web/cmaps/UniCNS-UTF16-V.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/UniCNS-UTF32-H.bcmap","path":"lib/pdf/web/cmaps/UniCNS-UTF32-H.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/UniCNS-UTF32-V.bcmap","path":"lib/pdf/web/cmaps/UniCNS-UTF32-V.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/UniCNS-UTF8-H.bcmap","path":"lib/pdf/web/cmaps/UniCNS-UTF8-H.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/UniCNS-UTF8-V.bcmap","path":"lib/pdf/web/cmaps/UniCNS-UTF8-V.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/UniGB-UCS2-H.bcmap","path":"lib/pdf/web/cmaps/UniGB-UCS2-H.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/UniGB-UCS2-V.bcmap","path":"lib/pdf/web/cmaps/UniGB-UCS2-V.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/UniGB-UTF16-H.bcmap","path":"lib/pdf/web/cmaps/UniGB-UTF16-H.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/UniGB-UTF16-V.bcmap","path":"lib/pdf/web/cmaps/UniGB-UTF16-V.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/UniGB-UTF32-H.bcmap","path":"lib/pdf/web/cmaps/UniGB-UTF32-H.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/UniGB-UTF32-V.bcmap","path":"lib/pdf/web/cmaps/UniGB-UTF32-V.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/UniGB-UTF8-H.bcmap","path":"lib/pdf/web/cmaps/UniGB-UTF8-H.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/UniGB-UTF8-V.bcmap","path":"lib/pdf/web/cmaps/UniGB-UTF8-V.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/UniJIS-UCS2-H.bcmap","path":"lib/pdf/web/cmaps/UniJIS-UCS2-H.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/UniJIS-UCS2-HW-H.bcmap","path":"lib/pdf/web/cmaps/UniJIS-UCS2-HW-H.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/UniJIS-UCS2-HW-V.bcmap","path":"lib/pdf/web/cmaps/UniJIS-UCS2-HW-V.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/UniJIS-UCS2-V.bcmap","path":"lib/pdf/web/cmaps/UniJIS-UCS2-V.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/UniJIS-UTF16-H.bcmap","path":"lib/pdf/web/cmaps/UniJIS-UTF16-H.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/UniJIS-UTF16-V.bcmap","path":"lib/pdf/web/cmaps/UniJIS-UTF16-V.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/UniJIS-UTF32-H.bcmap","path":"lib/pdf/web/cmaps/UniJIS-UTF32-H.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/UniJIS-UTF32-V.bcmap","path":"lib/pdf/web/cmaps/UniJIS-UTF32-V.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/UniJIS-UTF8-H.bcmap","path":"lib/pdf/web/cmaps/UniJIS-UTF8-H.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/UniJIS-UTF8-V.bcmap","path":"lib/pdf/web/cmaps/UniJIS-UTF8-V.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/UniJIS2004-UTF16-H.bcmap","path":"lib/pdf/web/cmaps/UniJIS2004-UTF16-H.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/UniJIS2004-UTF16-V.bcmap","path":"lib/pdf/web/cmaps/UniJIS2004-UTF16-V.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/UniJIS2004-UTF32-H.bcmap","path":"lib/pdf/web/cmaps/UniJIS2004-UTF32-H.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/UniJIS2004-UTF32-V.bcmap","path":"lib/pdf/web/cmaps/UniJIS2004-UTF32-V.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/UniJIS2004-UTF8-H.bcmap","path":"lib/pdf/web/cmaps/UniJIS2004-UTF8-H.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/UniJIS2004-UTF8-V.bcmap","path":"lib/pdf/web/cmaps/UniJIS2004-UTF8-V.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/UniJISPro-UCS2-HW-V.bcmap","path":"lib/pdf/web/cmaps/UniJISPro-UCS2-HW-V.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/UniJISPro-UCS2-V.bcmap","path":"lib/pdf/web/cmaps/UniJISPro-UCS2-V.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/UniJISPro-UTF8-V.bcmap","path":"lib/pdf/web/cmaps/UniJISPro-UTF8-V.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/UniJISX0213-UTF32-H.bcmap","path":"lib/pdf/web/cmaps/UniJISX0213-UTF32-H.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/UniJISX0213-UTF32-V.bcmap","path":"lib/pdf/web/cmaps/UniJISX0213-UTF32-V.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/UniJISX02132004-UTF32-H.bcmap","path":"lib/pdf/web/cmaps/UniJISX02132004-UTF32-H.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/UniJISX02132004-UTF32-V.bcmap","path":"lib/pdf/web/cmaps/UniJISX02132004-UTF32-V.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/UniKS-UCS2-H.bcmap","path":"lib/pdf/web/cmaps/UniKS-UCS2-H.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/UniKS-UCS2-V.bcmap","path":"lib/pdf/web/cmaps/UniKS-UCS2-V.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/UniKS-UTF16-H.bcmap","path":"lib/pdf/web/cmaps/UniKS-UTF16-H.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/UniKS-UTF16-V.bcmap","path":"lib/pdf/web/cmaps/UniKS-UTF16-V.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/UniKS-UTF32-H.bcmap","path":"lib/pdf/web/cmaps/UniKS-UTF32-H.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/UniKS-UTF32-V.bcmap","path":"lib/pdf/web/cmaps/UniKS-UTF32-V.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/UniKS-UTF8-H.bcmap","path":"lib/pdf/web/cmaps/UniKS-UTF8-H.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/UniKS-UTF8-V.bcmap","path":"lib/pdf/web/cmaps/UniKS-UTF8-V.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/V.bcmap","path":"lib/pdf/web/cmaps/V.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/cmaps/WP-Symbol.bcmap","path":"lib/pdf/web/cmaps/WP-Symbol.bcmap","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/annotation-check.svg","path":"lib/pdf/web/images/annotation-check.svg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/annotation-comment.svg","path":"lib/pdf/web/images/annotation-comment.svg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/annotation-insert.svg","path":"lib/pdf/web/images/annotation-insert.svg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/annotation-help.svg","path":"lib/pdf/web/images/annotation-help.svg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/annotation-key.svg","path":"lib/pdf/web/images/annotation-key.svg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/annotation-newparagraph.svg","path":"lib/pdf/web/images/annotation-newparagraph.svg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/annotation-noicon.svg","path":"lib/pdf/web/images/annotation-noicon.svg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/annotation-note.svg","path":"lib/pdf/web/images/annotation-note.svg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/annotation-paragraph.svg","path":"lib/pdf/web/images/annotation-paragraph.svg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/findbarButton-next-rtl.png","path":"lib/pdf/web/images/findbarButton-next-rtl.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/findbarButton-next-rtl@2x.png","path":"lib/pdf/web/images/findbarButton-next-rtl@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/findbarButton-next.png","path":"lib/pdf/web/images/findbarButton-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/findbarButton-next.svg","path":"lib/pdf/web/images/findbarButton-next.svg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/findbarButton-next@2x.png","path":"lib/pdf/web/images/findbarButton-next@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/findbarButton-previous-rtl.png","path":"lib/pdf/web/images/findbarButton-previous-rtl.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/findbarButton-previous-rtl@2x.png","path":"lib/pdf/web/images/findbarButton-previous-rtl@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/findbarButton-previous.png","path":"lib/pdf/web/images/findbarButton-previous.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/findbarButton-previous.svg","path":"lib/pdf/web/images/findbarButton-previous.svg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/findbarButton-previous@2x.png","path":"lib/pdf/web/images/findbarButton-previous@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/grab.cur","path":"lib/pdf/web/images/grab.cur","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/grabbing.cur","path":"lib/pdf/web/images/grabbing.cur","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/loading-dark.svg","path":"lib/pdf/web/images/loading-dark.svg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/loading-icon.gif","path":"lib/pdf/web/images/loading-icon.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/loading-small.png","path":"lib/pdf/web/images/loading-small.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/loading-small@2x.png","path":"lib/pdf/web/images/loading-small@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/loading.svg","path":"lib/pdf/web/images/loading.svg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/secondaryToolbarButton-documentProperties.png","path":"lib/pdf/web/images/secondaryToolbarButton-documentProperties.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/secondaryToolbarButton-documentProperties.svg","path":"lib/pdf/web/images/secondaryToolbarButton-documentProperties.svg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/secondaryToolbarButton-firstPage.png","path":"lib/pdf/web/images/secondaryToolbarButton-firstPage.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/secondaryToolbarButton-documentProperties@2x.png","path":"lib/pdf/web/images/secondaryToolbarButton-documentProperties@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/secondaryToolbarButton-firstPage.svg","path":"lib/pdf/web/images/secondaryToolbarButton-firstPage.svg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/secondaryToolbarButton-firstPage@2x.png","path":"lib/pdf/web/images/secondaryToolbarButton-firstPage@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/secondaryToolbarButton-handTool.png","path":"lib/pdf/web/images/secondaryToolbarButton-handTool.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/secondaryToolbarButton-handTool.svg","path":"lib/pdf/web/images/secondaryToolbarButton-handTool.svg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/secondaryToolbarButton-handTool@2x.png","path":"lib/pdf/web/images/secondaryToolbarButton-handTool@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/secondaryToolbarButton-lastPage.png","path":"lib/pdf/web/images/secondaryToolbarButton-lastPage.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/secondaryToolbarButton-lastPage@2x.png","path":"lib/pdf/web/images/secondaryToolbarButton-lastPage@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/secondaryToolbarButton-lastPage.svg","path":"lib/pdf/web/images/secondaryToolbarButton-lastPage.svg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/secondaryToolbarButton-rotateCcw.png","path":"lib/pdf/web/images/secondaryToolbarButton-rotateCcw.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/secondaryToolbarButton-rotateCcw.svg","path":"lib/pdf/web/images/secondaryToolbarButton-rotateCcw.svg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/secondaryToolbarButton-rotateCcw@2x.png","path":"lib/pdf/web/images/secondaryToolbarButton-rotateCcw@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/secondaryToolbarButton-rotateCw.png","path":"lib/pdf/web/images/secondaryToolbarButton-rotateCw.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/secondaryToolbarButton-rotateCw.svg","path":"lib/pdf/web/images/secondaryToolbarButton-rotateCw.svg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/secondaryToolbarButton-rotateCw@2x.png","path":"lib/pdf/web/images/secondaryToolbarButton-rotateCw@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/secondaryToolbarButton-scrollHorizontal.png","path":"lib/pdf/web/images/secondaryToolbarButton-scrollHorizontal.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/secondaryToolbarButton-scrollHorizontal.svg","path":"lib/pdf/web/images/secondaryToolbarButton-scrollHorizontal.svg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/secondaryToolbarButton-scrollPage.svg","path":"lib/pdf/web/images/secondaryToolbarButton-scrollPage.svg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/secondaryToolbarButton-scrollHorizontal@2x.png","path":"lib/pdf/web/images/secondaryToolbarButton-scrollHorizontal@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/secondaryToolbarButton-scrollVertical.png","path":"lib/pdf/web/images/secondaryToolbarButton-scrollVertical.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/secondaryToolbarButton-scrollVertical.svg","path":"lib/pdf/web/images/secondaryToolbarButton-scrollVertical.svg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/secondaryToolbarButton-scrollVertical@2x.png","path":"lib/pdf/web/images/secondaryToolbarButton-scrollVertical@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/secondaryToolbarButton-scrollWrapped.png","path":"lib/pdf/web/images/secondaryToolbarButton-scrollWrapped.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/secondaryToolbarButton-scrollWrapped.svg","path":"lib/pdf/web/images/secondaryToolbarButton-scrollWrapped.svg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/secondaryToolbarButton-scrollWrapped@2x.png","path":"lib/pdf/web/images/secondaryToolbarButton-scrollWrapped@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/secondaryToolbarButton-selectTool.png","path":"lib/pdf/web/images/secondaryToolbarButton-selectTool.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/secondaryToolbarButton-selectTool.svg","path":"lib/pdf/web/images/secondaryToolbarButton-selectTool.svg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/secondaryToolbarButton-selectTool@2x.png","path":"lib/pdf/web/images/secondaryToolbarButton-selectTool@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/secondaryToolbarButton-spreadEven.png","path":"lib/pdf/web/images/secondaryToolbarButton-spreadEven.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/secondaryToolbarButton-spreadEven.svg","path":"lib/pdf/web/images/secondaryToolbarButton-spreadEven.svg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/secondaryToolbarButton-spreadNone.png","path":"lib/pdf/web/images/secondaryToolbarButton-spreadNone.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/secondaryToolbarButton-spreadEven@2x.png","path":"lib/pdf/web/images/secondaryToolbarButton-spreadEven@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/secondaryToolbarButton-spreadNone.svg","path":"lib/pdf/web/images/secondaryToolbarButton-spreadNone.svg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/secondaryToolbarButton-spreadNone@2x.png","path":"lib/pdf/web/images/secondaryToolbarButton-spreadNone@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/secondaryToolbarButton-spreadOdd.png","path":"lib/pdf/web/images/secondaryToolbarButton-spreadOdd.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/secondaryToolbarButton-spreadOdd.svg","path":"lib/pdf/web/images/secondaryToolbarButton-spreadOdd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/shadow.png","path":"lib/pdf/web/images/shadow.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/secondaryToolbarButton-spreadOdd@2x.png","path":"lib/pdf/web/images/secondaryToolbarButton-spreadOdd@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/texture.png","path":"lib/pdf/web/images/texture.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-bookmark.png","path":"lib/pdf/web/images/toolbarButton-bookmark.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-bookmark.svg","path":"lib/pdf/web/images/toolbarButton-bookmark.svg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-currentOutlineItem.svg","path":"lib/pdf/web/images/toolbarButton-currentOutlineItem.svg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-bookmark@2x.png","path":"lib/pdf/web/images/toolbarButton-bookmark@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-download.png","path":"lib/pdf/web/images/toolbarButton-download.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-download.svg","path":"lib/pdf/web/images/toolbarButton-download.svg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-download@2x.png","path":"lib/pdf/web/images/toolbarButton-download@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-editorFreeText.svg","path":"lib/pdf/web/images/toolbarButton-editorFreeText.svg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-editorNone.svg","path":"lib/pdf/web/images/toolbarButton-editorNone.svg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-menuArrow.svg","path":"lib/pdf/web/images/toolbarButton-menuArrow.svg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-menuArrows.png","path":"lib/pdf/web/images/toolbarButton-menuArrows.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-menuArrows@2x.png","path":"lib/pdf/web/images/toolbarButton-menuArrows@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-openFile.png","path":"lib/pdf/web/images/toolbarButton-openFile.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-openFile.svg","path":"lib/pdf/web/images/toolbarButton-openFile.svg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-openFile@2x.png","path":"lib/pdf/web/images/toolbarButton-openFile@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-pageDown-rtl.png","path":"lib/pdf/web/images/toolbarButton-pageDown-rtl.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-pageDown-rtl@2x.png","path":"lib/pdf/web/images/toolbarButton-pageDown-rtl@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-pageDown.png","path":"lib/pdf/web/images/toolbarButton-pageDown.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-pageDown.svg","path":"lib/pdf/web/images/toolbarButton-pageDown.svg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-pageDown@2x.png","path":"lib/pdf/web/images/toolbarButton-pageDown@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-pageUp-rtl.png","path":"lib/pdf/web/images/toolbarButton-pageUp-rtl.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-pageUp-rtl@2x.png","path":"lib/pdf/web/images/toolbarButton-pageUp-rtl@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-pageUp.png","path":"lib/pdf/web/images/toolbarButton-pageUp.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-pageUp.svg","path":"lib/pdf/web/images/toolbarButton-pageUp.svg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-pageUp@2x.png","path":"lib/pdf/web/images/toolbarButton-pageUp@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-presentationMode.png","path":"lib/pdf/web/images/toolbarButton-presentationMode.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-presentationMode.svg","path":"lib/pdf/web/images/toolbarButton-presentationMode.svg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-presentationMode@2x.png","path":"lib/pdf/web/images/toolbarButton-presentationMode@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-print.png","path":"lib/pdf/web/images/toolbarButton-print.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-print.svg","path":"lib/pdf/web/images/toolbarButton-print.svg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-print@2x.png","path":"lib/pdf/web/images/toolbarButton-print@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-search.png","path":"lib/pdf/web/images/toolbarButton-search.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-search.svg","path":"lib/pdf/web/images/toolbarButton-search.svg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-search@2x.png","path":"lib/pdf/web/images/toolbarButton-search@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-secondaryToolbarToggle-rtl.png","path":"lib/pdf/web/images/toolbarButton-secondaryToolbarToggle-rtl.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-secondaryToolbarToggle-rtl@2x.png","path":"lib/pdf/web/images/toolbarButton-secondaryToolbarToggle-rtl@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-secondaryToolbarToggle.png","path":"lib/pdf/web/images/toolbarButton-secondaryToolbarToggle.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-secondaryToolbarToggle.svg","path":"lib/pdf/web/images/toolbarButton-secondaryToolbarToggle.svg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-secondaryToolbarToggle@2x.png","path":"lib/pdf/web/images/toolbarButton-secondaryToolbarToggle@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-sidebarToggle-rtl.png","path":"lib/pdf/web/images/toolbarButton-sidebarToggle-rtl.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-sidebarToggle-rtl@2x.png","path":"lib/pdf/web/images/toolbarButton-sidebarToggle-rtl@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-sidebarToggle.png","path":"lib/pdf/web/images/toolbarButton-sidebarToggle.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-sidebarToggle.svg","path":"lib/pdf/web/images/toolbarButton-sidebarToggle.svg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-viewAttachments.png","path":"lib/pdf/web/images/toolbarButton-viewAttachments.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-sidebarToggle@2x.png","path":"lib/pdf/web/images/toolbarButton-sidebarToggle@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-viewAttachments.svg","path":"lib/pdf/web/images/toolbarButton-viewAttachments.svg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-viewAttachments@2x.png","path":"lib/pdf/web/images/toolbarButton-viewAttachments@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-viewLayers.svg","path":"lib/pdf/web/images/toolbarButton-viewLayers.svg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-viewOutline-rtl.png","path":"lib/pdf/web/images/toolbarButton-viewOutline-rtl.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-viewOutline-rtl@2x.png","path":"lib/pdf/web/images/toolbarButton-viewOutline-rtl@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-viewOutline.png","path":"lib/pdf/web/images/toolbarButton-viewOutline.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-viewOutline.svg","path":"lib/pdf/web/images/toolbarButton-viewOutline.svg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-viewOutline@2x.png","path":"lib/pdf/web/images/toolbarButton-viewOutline@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-viewThumbnail.png","path":"lib/pdf/web/images/toolbarButton-viewThumbnail.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-viewThumbnail.svg","path":"lib/pdf/web/images/toolbarButton-viewThumbnail.svg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-viewThumbnail@2x.png","path":"lib/pdf/web/images/toolbarButton-viewThumbnail@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-zoomIn.png","path":"lib/pdf/web/images/toolbarButton-zoomIn.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-zoomIn.svg","path":"lib/pdf/web/images/toolbarButton-zoomIn.svg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-zoomIn@2x.png","path":"lib/pdf/web/images/toolbarButton-zoomIn@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-zoomOut.png","path":"lib/pdf/web/images/toolbarButton-zoomOut.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-zoomOut.svg","path":"lib/pdf/web/images/toolbarButton-zoomOut.svg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-zoomOut@2x.png","path":"lib/pdf/web/images/toolbarButton-zoomOut@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/treeitem-collapsed-rtl.png","path":"lib/pdf/web/images/treeitem-collapsed-rtl.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/treeitem-collapsed-rtl@2x.png","path":"lib/pdf/web/images/treeitem-collapsed-rtl@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/treeitem-collapsed.png","path":"lib/pdf/web/images/treeitem-collapsed.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/treeitem-collapsed.svg","path":"lib/pdf/web/images/treeitem-collapsed.svg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/treeitem-collapsed@2x.png","path":"lib/pdf/web/images/treeitem-collapsed@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/treeitem-expanded.png","path":"lib/pdf/web/images/treeitem-expanded.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/treeitem-expanded.svg","path":"lib/pdf/web/images/treeitem-expanded.svg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/images/treeitem-expanded@2x.png","path":"lib/pdf/web/images/treeitem-expanded@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/locale.properties","path":"lib/pdf/web/locale/locale.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/standard_fonts/FoxitDingbats.pfb","path":"lib/pdf/web/standard_fonts/FoxitDingbats.pfb","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/standard_fonts/FoxitFixed.pfb","path":"lib/pdf/web/standard_fonts/FoxitFixed.pfb","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/standard_fonts/FoxitFixedBold.pfb","path":"lib/pdf/web/standard_fonts/FoxitFixedBold.pfb","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/standard_fonts/FoxitFixedItalic.pfb","path":"lib/pdf/web/standard_fonts/FoxitFixedItalic.pfb","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/standard_fonts/FoxitFixedBoldItalic.pfb","path":"lib/pdf/web/standard_fonts/FoxitFixedBoldItalic.pfb","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/standard_fonts/FoxitSans.pfb","path":"lib/pdf/web/standard_fonts/FoxitSans.pfb","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/standard_fonts/FoxitSansBold.pfb","path":"lib/pdf/web/standard_fonts/FoxitSansBold.pfb","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/standard_fonts/FoxitSansBoldItalic.pfb","path":"lib/pdf/web/standard_fonts/FoxitSansBoldItalic.pfb","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/standard_fonts/FoxitSansItalic.pfb","path":"lib/pdf/web/standard_fonts/FoxitSansItalic.pfb","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/standard_fonts/FoxitSerif.pfb","path":"lib/pdf/web/standard_fonts/FoxitSerif.pfb","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/standard_fonts/FoxitSerifBold.pfb","path":"lib/pdf/web/standard_fonts/FoxitSerifBold.pfb","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/standard_fonts/FoxitSerifBoldItalic.pfb","path":"lib/pdf/web/standard_fonts/FoxitSerifBoldItalic.pfb","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/standard_fonts/FoxitSerifItalic.pfb","path":"lib/pdf/web/standard_fonts/FoxitSerifItalic.pfb","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/standard_fonts/FoxitSymbol.pfb","path":"lib/pdf/web/standard_fonts/FoxitSymbol.pfb","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/standard_fonts/LICENSE_FOXIT","path":"lib/pdf/web/standard_fonts/LICENSE_FOXIT","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/standard_fonts/LICENSE_LIBERATION","path":"lib/pdf/web/standard_fonts/LICENSE_LIBERATION","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/standard_fonts/LiberationSans-Bold.ttf","path":"lib/pdf/web/standard_fonts/LiberationSans-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/standard_fonts/LiberationSans-BoldItalic.ttf","path":"lib/pdf/web/standard_fonts/LiberationSans-BoldItalic.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/standard_fonts/LiberationSans-Italic.ttf","path":"lib/pdf/web/standard_fonts/LiberationSans-Italic.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/standard_fonts/LiberationSans-Regular.ttf","path":"lib/pdf/web/standard_fonts/LiberationSans-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/ach/viewer.properties","path":"lib/pdf/web/locale/ach/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/ak/viewer.properties","path":"lib/pdf/web/locale/ak/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/af/viewer.properties","path":"lib/pdf/web/locale/af/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/an/viewer.properties","path":"lib/pdf/web/locale/an/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/ar/viewer.properties","path":"lib/pdf/web/locale/ar/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/ast/viewer.properties","path":"lib/pdf/web/locale/ast/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/bg/viewer.properties","path":"lib/pdf/web/locale/bg/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/az/viewer.properties","path":"lib/pdf/web/locale/az/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/be/viewer.properties","path":"lib/pdf/web/locale/be/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/bn/viewer.properties","path":"lib/pdf/web/locale/bn/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/bn-BD/viewer.properties","path":"lib/pdf/web/locale/bn-BD/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/bn-IN/viewer.properties","path":"lib/pdf/web/locale/bn-IN/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/bo/viewer.properties","path":"lib/pdf/web/locale/bo/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/br/viewer.properties","path":"lib/pdf/web/locale/br/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/brx/viewer.properties","path":"lib/pdf/web/locale/brx/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/bs/viewer.properties","path":"lib/pdf/web/locale/bs/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/ca/viewer.properties","path":"lib/pdf/web/locale/ca/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/cak/viewer.properties","path":"lib/pdf/web/locale/cak/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/ckb/viewer.properties","path":"lib/pdf/web/locale/ckb/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/cs/viewer.properties","path":"lib/pdf/web/locale/cs/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/csb/viewer.properties","path":"lib/pdf/web/locale/csb/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/cy/viewer.properties","path":"lib/pdf/web/locale/cy/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/da/viewer.properties","path":"lib/pdf/web/locale/da/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/de/viewer.properties","path":"lib/pdf/web/locale/de/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/dsb/viewer.properties","path":"lib/pdf/web/locale/dsb/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/el/viewer.properties","path":"lib/pdf/web/locale/el/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/en-CA/viewer.properties","path":"lib/pdf/web/locale/en-CA/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/en-GB/viewer.properties","path":"lib/pdf/web/locale/en-GB/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/en-US/viewer.properties","path":"lib/pdf/web/locale/en-US/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/eo/viewer.properties","path":"lib/pdf/web/locale/eo/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/es-AR/viewer.properties","path":"lib/pdf/web/locale/es-AR/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/es-CL/viewer.properties","path":"lib/pdf/web/locale/es-CL/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/es-ES/viewer.properties","path":"lib/pdf/web/locale/es-ES/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/es-MX/viewer.properties","path":"lib/pdf/web/locale/es-MX/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/et/viewer.properties","path":"lib/pdf/web/locale/et/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/eu/viewer.properties","path":"lib/pdf/web/locale/eu/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/fa/viewer.properties","path":"lib/pdf/web/locale/fa/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/ff/viewer.properties","path":"lib/pdf/web/locale/ff/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/fi/viewer.properties","path":"lib/pdf/web/locale/fi/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/fr/viewer.properties","path":"lib/pdf/web/locale/fr/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/fy-NL/viewer.properties","path":"lib/pdf/web/locale/fy-NL/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/ga-IE/viewer.properties","path":"lib/pdf/web/locale/ga-IE/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/gd/viewer.properties","path":"lib/pdf/web/locale/gd/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/gl/viewer.properties","path":"lib/pdf/web/locale/gl/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/gn/viewer.properties","path":"lib/pdf/web/locale/gn/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/gu-IN/viewer.properties","path":"lib/pdf/web/locale/gu-IN/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/he/viewer.properties","path":"lib/pdf/web/locale/he/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/hi-IN/viewer.properties","path":"lib/pdf/web/locale/hi-IN/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/hr/viewer.properties","path":"lib/pdf/web/locale/hr/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/hsb/viewer.properties","path":"lib/pdf/web/locale/hsb/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/hto/viewer.properties","path":"lib/pdf/web/locale/hto/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/hu/viewer.properties","path":"lib/pdf/web/locale/hu/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/hy-AM/viewer.properties","path":"lib/pdf/web/locale/hy-AM/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/hye/viewer.properties","path":"lib/pdf/web/locale/hye/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/ia/viewer.properties","path":"lib/pdf/web/locale/ia/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/id/viewer.properties","path":"lib/pdf/web/locale/id/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/is/viewer.properties","path":"lib/pdf/web/locale/is/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/it/viewer.properties","path":"lib/pdf/web/locale/it/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/ja/viewer.properties","path":"lib/pdf/web/locale/ja/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/ka/viewer.properties","path":"lib/pdf/web/locale/ka/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/kab/viewer.properties","path":"lib/pdf/web/locale/kab/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/kk/viewer.properties","path":"lib/pdf/web/locale/kk/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/km/viewer.properties","path":"lib/pdf/web/locale/km/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/kn/viewer.properties","path":"lib/pdf/web/locale/kn/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/ko/viewer.properties","path":"lib/pdf/web/locale/ko/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/ks/viewer.properties","path":"lib/pdf/web/locale/ks/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/kok/viewer.properties","path":"lib/pdf/web/locale/kok/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/ku/viewer.properties","path":"lib/pdf/web/locale/ku/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/lg/viewer.properties","path":"lib/pdf/web/locale/lg/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/lij/viewer.properties","path":"lib/pdf/web/locale/lij/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/lo/viewer.properties","path":"lib/pdf/web/locale/lo/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/lt/viewer.properties","path":"lib/pdf/web/locale/lt/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/ltg/viewer.properties","path":"lib/pdf/web/locale/ltg/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/lv/viewer.properties","path":"lib/pdf/web/locale/lv/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/meh/viewer.properties","path":"lib/pdf/web/locale/meh/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/mk/viewer.properties","path":"lib/pdf/web/locale/mk/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/mn/viewer.properties","path":"lib/pdf/web/locale/mn/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/mr/viewer.properties","path":"lib/pdf/web/locale/mr/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/ms/viewer.properties","path":"lib/pdf/web/locale/ms/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/my/viewer.properties","path":"lib/pdf/web/locale/my/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/nb-NO/viewer.properties","path":"lib/pdf/web/locale/nb-NO/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/nl/viewer.properties","path":"lib/pdf/web/locale/nl/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/ne-NP/viewer.properties","path":"lib/pdf/web/locale/ne-NP/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/nn-NO/viewer.properties","path":"lib/pdf/web/locale/nn-NO/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/nso/viewer.properties","path":"lib/pdf/web/locale/nso/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/oc/viewer.properties","path":"lib/pdf/web/locale/oc/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/pl/viewer.properties","path":"lib/pdf/web/locale/pl/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/pt-BR/viewer.properties","path":"lib/pdf/web/locale/pt-BR/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/pt-PT/viewer.properties","path":"lib/pdf/web/locale/pt-PT/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/pa-IN/viewer.properties","path":"lib/pdf/web/locale/pa-IN/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/ro/viewer.properties","path":"lib/pdf/web/locale/ro/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/rm/viewer.properties","path":"lib/pdf/web/locale/rm/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/ru/viewer.properties","path":"lib/pdf/web/locale/ru/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/rw/viewer.properties","path":"lib/pdf/web/locale/rw/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/sah/viewer.properties","path":"lib/pdf/web/locale/sah/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/sat/viewer.properties","path":"lib/pdf/web/locale/sat/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/sc/viewer.properties","path":"lib/pdf/web/locale/sc/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/scn/viewer.properties","path":"lib/pdf/web/locale/scn/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/sco/viewer.properties","path":"lib/pdf/web/locale/sco/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/si/viewer.properties","path":"lib/pdf/web/locale/si/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/sk/viewer.properties","path":"lib/pdf/web/locale/sk/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/son/viewer.properties","path":"lib/pdf/web/locale/son/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/sl/viewer.properties","path":"lib/pdf/web/locale/sl/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/sq/viewer.properties","path":"lib/pdf/web/locale/sq/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/sr/viewer.properties","path":"lib/pdf/web/locale/sr/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/sv-SE/viewer.properties","path":"lib/pdf/web/locale/sv-SE/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/sw/viewer.properties","path":"lib/pdf/web/locale/sw/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/szl/viewer.properties","path":"lib/pdf/web/locale/szl/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/ta/viewer.properties","path":"lib/pdf/web/locale/ta/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/ta-LK/viewer.properties","path":"lib/pdf/web/locale/ta-LK/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/te/viewer.properties","path":"lib/pdf/web/locale/te/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/tg/viewer.properties","path":"lib/pdf/web/locale/tg/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/th/viewer.properties","path":"lib/pdf/web/locale/th/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/tl/viewer.properties","path":"lib/pdf/web/locale/tl/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/tn/viewer.properties","path":"lib/pdf/web/locale/tn/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/tr/viewer.properties","path":"lib/pdf/web/locale/tr/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/trs/viewer.properties","path":"lib/pdf/web/locale/trs/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/tsz/viewer.properties","path":"lib/pdf/web/locale/tsz/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/uk/viewer.properties","path":"lib/pdf/web/locale/uk/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/ur/viewer.properties","path":"lib/pdf/web/locale/ur/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/vi/viewer.properties","path":"lib/pdf/web/locale/vi/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/uz/viewer.properties","path":"lib/pdf/web/locale/uz/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/wo/viewer.properties","path":"lib/pdf/web/locale/wo/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/xh/viewer.properties","path":"lib/pdf/web/locale/xh/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/zam/viewer.properties","path":"lib/pdf/web/locale/zam/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/zh-CN/viewer.properties","path":"lib/pdf/web/locale/zh-CN/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/zh-TW/viewer.properties","path":"lib/pdf/web/locale/zh-TW/viewer.properties","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pdf/web/locale/zu/viewer.properties","path":"lib/pdf/web/locale/zu/viewer.properties","modified":0,"renderable":1}],"Cache":[{"_id":"source/BingSiteAuth.xml","hash":"79299edd2d8c811668124bb4d7d2045d33070bf4","modified":1648305372586},{"_id":"source/_posts/Aho-Corasick-automaton.md","hash":"c9a151377e6dc8ab5a26b3226842d767d11ecd1f","modified":1669643267403},{"_id":"source/google7c80d6fa20e2e726.html","hash":"d8c2f5ca93d27797f40adb484d3657f44fb03e19","modified":1677132973586},{"_id":"source/baidu_verify_code-O2ehcy1PsR.html","hash":"667aea97e669c196459790eee47ae10b5075d9e2","modified":1677132978130},{"_id":"source/_posts/CF1495F-solution.md","hash":"5518ec01f09fb7ca6c5c3faa5d6c17314af06773","modified":1677233508635},{"_id":"source/_posts/Balanced-tree-Treap.md","hash":"c92d82d5cbf33a86d77bb7d4c4b4c3f5a10d55c6","modified":1678845420442},{"_id":"source/_posts/Balanced-tree-Splay.md","hash":"d11b32ec94cb44d8a35b8c1aa4ad2960240700fd","modified":1669643267412},{"_id":"source/_posts/Orita-about.md","hash":"0f3cd96891a03c043f0cf6d7005fe29c3762a85a","modified":1675243153519},{"_id":"source/_posts/Monotone-queue-optimization-knapsack.md","hash":"0739eb96f0102abafaec586c5c33b4d56a5dfe23","modified":1669643267407},{"_id":"source/_posts/Monotone-queue-dp.md","hash":"7e2d5b96aaaaaa899cd2ddf4255a0ccc51df426d","modified":1669643267406},{"_id":"source/_posts/P1231-solution.md","hash":"01e53cef0dfe829fba624ee12c61594d1533749e","modified":1678845420433},{"_id":"source/_posts/P1251-solution.md","hash":"c6b6dc827f61545b90399f70272b467c09f8aa0e","modified":1669643267407},{"_id":"source/_posts/P1343-solution.md","hash":"aecefd7d5a83bdfa614bbfb6d2b9af2447ef887a","modified":1669643267407},{"_id":"source/_posts/P1402-solution.md","hash":"53acdedb923f3ebd41e8122e24d81831661dc23d","modified":1669643267407},{"_id":"source/_posts/P2120-solution.md","hash":"704310cd3c3f53fc9b6a19b9649dee22cf581029","modified":1669643267407},{"_id":"source/_posts/P2472-solution.md","hash":"ccd5d478c1bca830ee4f65a188f4285fa152d939","modified":1669643267407},{"_id":"source/_posts/P2754-solution.md","hash":"4d682fc4d2b67157a55a1deac0fa1177160afef2","modified":1669643721975},{"_id":"source/_posts/P2604-solution.md","hash":"622962da53559668732f56fd0d39635deb53e4a7","modified":1669643267407},{"_id":"source/_posts/P2065-solution.md","hash":"d464d4f343c694a73695b51a6926e4dd934e99c7","modified":1678845420433},{"_id":"source/_posts/P2763-solution.md","hash":"eb5464ab5cd2bbac883063066888ba39bd6a0698","modified":1669643267411},{"_id":"source/_posts/P2936-solution.md","hash":"d48b09a2b2bdce3b26def4a7b8d2db6d858f60e1","modified":1669643267410},{"_id":"source/_posts/P2740-solution.md","hash":"dca40b761d275bdf18abd22d546e92adcd8f183f","modified":1669643267410},{"_id":"source/_posts/P2774-solution.md","hash":"b82a1e145c0b586d494e8bd940fca22c88428aee","modified":1669643721977},{"_id":"source/_posts/P3195-solution.md","hash":"847d444ff16ab50dd0b92f55d9701b534018b43b","modified":1669643267410},{"_id":"source/_posts/P3355-solution.md","hash":"f3bb887331985bf16b97ffd10d332b8eaf50fb19","modified":1669643267410},{"_id":"source/_posts/P3254-solution.md","hash":"00617b26103430c6411bf94047bd07bf673a5080","modified":1669643267410},{"_id":"source/_posts/P3628-solution.md","hash":"973055950ffbeb95506047575b67d99d843e8415","modified":1669643267411},{"_id":"source/_posts/P3356-solution.md","hash":"132c6b60b75647d752d660188f26151be1b70ba1","modified":1677233112001},{"_id":"source/_posts/P3648-solution.md","hash":"0bd62a5154a0defa0ae93b909a0b315704dd2532","modified":1669643267411},{"_id":"source/_posts/P4012-solution.md","hash":"fcd51081ee788c8d54e890ddda06befe50a3cbf1","modified":1677233112001},{"_id":"source/_posts/P4014-solution.md","hash":"ef3c3dcbee50449f691adb36aca397a5d6d66885","modified":1677233112001},{"_id":"source/_posts/P4015-solution.md","hash":"f01c99bdf6f28f3da9bb5c2bd6e41cc40d8b8f34","modified":1669643267412},{"_id":"source/_posts/P4304-solution.md","hash":"f347141375835ef930f07fb35a61cf9048772ca3","modified":1669643267412},{"_id":"source/_posts/P4072-solution.md","hash":"4c92717ca6dfb0cb146a284146c21bdde151388d","modified":1669643267412},{"_id":"source/_posts/P5030-solution.md","hash":"11dd855cd12edc03f782be571f12884c137e72c0","modified":1669643267412},{"_id":"source/_posts/P5785-solution.md","hash":"c930912ab8cab31632fcca9451c3f8ed0d5a4941","modified":1669643267412},{"_id":"source/_posts/P8251-solution.md","hash":"be6f12ea62d246b5102ea79e2b095b50de8d73d2","modified":1669643267412},{"_id":"source/_posts/P4360-solution.md","hash":"3dcda20a2d987d97436cef6778ee5b64dcf62be5","modified":1669643267412},{"_id":"source/_posts/Quadrilateral-inequality-optimization-linear-DP.md","hash":"21a898db22205d56de335bc422ad7f991845ed53","modified":1669643267402},{"_id":"source/_posts/P4638-solution.md","hash":"4bf3fb0ad00069714f4867e299257f7707988dde","modified":1678845420442},{"_id":"source/_posts/Scan-line.md","hash":"ba97fa4231bdf4128b0bb74c4e5a4c0d3ec5e4f8","modified":1669643267412},{"_id":"source/_posts/Slope-optimization-DP-problemlist.md","hash":"9da42642e47d297d7873988f0ab3b32eca232489","modified":1677233112024},{"_id":"source/_posts/Sustainable-segment-tree.md","hash":"f7af7091e2893720876cf43354bd8ac0461277c8","modified":1669643721975},{"_id":"source/_posts/Slope-optimization-DP.md","hash":"f7ef3554fcee7170727e9dd5cab2bdabd2631966","modified":1677233112024},{"_id":"source/_posts/Upper-and-lower-bound-network-flow.md","hash":"3a3fe27522412f05b69b96ffa131e43a13b7f708","modified":1678845420442},{"_id":"source/_posts/Tree-chain-subdivision.md","hash":"b398b1620fbf6345daee718783e555e9dd8a49d1","modified":1678845420428},{"_id":"source/_posts/maximum-flow-ISAP.md","hash":"e6a67ceb4b3504eedfbe8dfbd62ba32357f75f2d","modified":1677233112024},{"_id":"source/_posts/generate-Gridea's-sitemap.md","hash":"b0fe326e71f9ab3bfad9f9fdfd49029478951c44","modified":1669643267406},{"_id":"source/_posts/maximum-flow-Dinic.md","hash":"25d0de02d472de775a7d8c0493b6d670850e182a","modified":1678845420442},{"_id":"source/_posts/csp-s-2022-travels.md","hash":"e3d59bcd76aa7843f3548a6ccadc6e456cd38e4e","modified":1678100693875},{"_id":"source/_posts/maximum-flow-problemlist.md","hash":"b49749c1dc8030689a73f107d1d3a50c124aa2f9","modified":1677233112024},{"_id":"source/_posts/minimum-cost-maximum-flow-Dinic.md","hash":"2425c745adce0905255be43f77205313ededbb07","modified":1677233111988},{"_id":"source/_posts/minimum-cost-maximum-flow-EK.md","hash":"d3790e20063dfec7cc94f23965c2c1ef896a30f1","modified":1677233112024},{"_id":"source/_posts/minimum-cost-maximum-flow-problemlist.md","hash":"9a12446e43e0361e4c0944b7e3293a33e508c7f9","modified":1677233112001},{"_id":"source/categories/index.md","hash":"de70f9254d802435068ef253dac447faf273ffdb","modified":1660140288000},{"_id":"source/_posts/retirement-record.md","hash":"825d0bbb3f71e03c526e88ab01962f4f789268b8","modified":1670323935260},{"_id":"source/_posts/wc-2023-travels.md","hash":"daef49325226aeb9cc51261572a360aedbe730c4","modified":1678100697635},{"_id":"source/_posts/noip-2022-travels.md","hash":"0568f8649a909727485da11dfeb690d438b3e475","modified":1672467450860},{"_id":"source/post-images/Balanced-tree-Treap-1.png","hash":"a1b88c8b3f15d640d80787b84ea064e288d016c4","modified":1645420980000},{"_id":"source/post-images/Balanced-tree-Treap-2.png","hash":"de1ca6b964f7fa51257ef1c96c48e49dc4d2de17","modified":1645421138000},{"_id":"source/post-images/P2065-solution-1.png","hash":"c8de8de459a7f5507a73ab21ef7fd0b3e3bb024c","modified":1646716868000},{"_id":"source/post-images/P1231-solution-1.png","hash":"454d85b6c440471aef6cb21e59528f5c6d49961c","modified":1650084672000},{"_id":"source/post-images/P2065-solution-2.png","hash":"a5260af654eb71d1d44b1d3633eb65369b5cc2ad","modified":1646716748000},{"_id":"source/post-images/P2774-solution-1.png","hash":"976e1ebec68dfde3a4ac90b82c534c34e0450674","modified":1651929940000},{"_id":"source/post-images/Slope-optimization-DP-3.png","hash":"3421bf02b63b121f92f3cf9404857f15a8cb9d8d","modified":1648996842000},{"_id":"source/post-images/Slope-optimization-DP-1.png","hash":"444eb5a2a30553f46a1245d1b5ed021cd213493c","modified":1648996388000},{"_id":"source/post-images/Slope-optimization-DP-2.png","hash":"c396d06098e2780e97d23255034e0157f0c1b2df","modified":1648996402000},{"_id":"source/post-images/Slope-optimization-DP-4.png","hash":"e611ea26ad0d09ba7c62c718f3e9cdfb4123480a","modified":1649029108000},{"_id":"source/post-images/Slope-optimization-DP-5.png","hash":"bdd40fa3fc9e80d9ded4e387d61ab12ce701f29d","modified":1649029648000},{"_id":"source/post-images/Tree-chain-subdivision-1.png","hash":"22edfeb0c0299a3743bc723a05d5592280a474c4","modified":1651927014000},{"_id":"source/post-images/Sustainable-segment-tree-2.jpg","hash":"96f72f3b4dbb74867fc3cbf4a3f04118765ba274","modified":1648270192000},{"_id":"source/post-images/Sustainable-segment-tree-1.jpg","hash":"b29799720404f5935f41048aabd1e4e0d1fd3f30","modified":1648270186000},{"_id":"source/post-images/Tree-chain-subdivision-3.png","hash":"3dcc5f8a7523ac01c7e401b853da0c2ccc387259","modified":1651927038000},{"_id":"source/post-images/Upper-and-lower-bound-network-flow-4.png","hash":"03e44bb52d52d9c7eba08ad4c4380b1412ff769f","modified":1646027050000},{"_id":"source/post-images/Upper-and-lower-bound-network-flow-2.png","hash":"d40eedcda26e0692c4db635d05b7db9d40ca5476","modified":1646025554000},{"_id":"source/post-images/Upper-and-lower-bound-network-flow-1.png","hash":"71cde2ff7af676f754b5a0e3206ffea62cf728ce","modified":1646025488000},{"_id":"source/post-images/Upper-and-lower-bound-network-flow-3.png","hash":"b0f174cc491730ab7f0d35cd0858eecd31248a08","modified":1646026904000},{"_id":"source/post-images/Tree-chain-subdivision-2.png","hash":"66f20243eb37135d2dd32dae90fa92c693171301","modified":1651927030000},{"_id":"source/post-images/maximum-flow-Dinic-2.png","hash":"100e358c6e132cf113bfe38df000ef633eb6472d","modified":1644904620000},{"_id":"source/post-images/maximum-flow-Dinic-5.png","hash":"c1607fe770badd25c1a0a5799aea9e17b53a1e70","modified":1644904858000},{"_id":"source/post-images/maximum-flow-Dinic-1.png","hash":"482ad2c0c1533db20dd1d6ddf3f8dd751874f11a","modified":1644904568000},{"_id":"source/post-images/Upper-and-lower-bound-network-flow-5.png","hash":"f5af25eb0a06e239d14843685aa18dc7e0030e06","modified":1646028130000},{"_id":"source/tags/index.md","hash":"6f455e38704121ca6e5c3bb30a1e0f2c11387543","modified":1660140302000},{"_id":"source/post-images/maximum-flow-Dinic-4.png","hash":"95072ce48b499a13db43cd7d818b9128effe4446","modified":1644904790000},{"_id":"source/post-images/maximum-flow-Dinic-3.png","hash":"bfe066a4c2bf63d4993dfd07b2b80a5f7689825a","modified":1644904764000},{"_id":"source/post-images/p4638-solution-1.png","hash":"011029901a13c8d22b69b28a38d382ab2ac852b2","modified":1646890320000},{"_id":"source/post-images/Balanced-tree-Treap-3.png","hash":"72ca57885f8f7397bd4df1d0bad520dad01389f7","modified":1645530944000},{"_id":"source/post-images/P2754-solution-1.png","hash":"eb191e2f78ef6e1fe36b17623973f63090d2bd9b","modified":1650106156000},{"_id":"source/post-images/wc-2023-travels-1.png","hash":"fe125de2be75273edd16eaa68a8c58289148fffd","modified":1673944599977},{"_id":"source/post-images/124.221.194.184_1.png","hash":"386995b8e6b7a4f90805b74607b07931c8848cb5","modified":1671199972000},{"_id":"source/post-images/124.221.194.184_0.png","hash":"0a798b2c757f2997983703d8b094c472e944f771","modified":1671199972000},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1667112702000},{"_id":"themes/next/.gitattributes","hash":"ec43734985e1cafd53d88ded3020103f7416123c","modified":1667112702000},{"_id":"themes/next/.eslintrc.json","hash":"9c0762486f24a8c5e60f8b6c875e4c4728942649","modified":1667112702000},{"_id":"themes/next/.gitignore","hash":"417520c4dbbeab9c7e3ab10d944da0886366a0ee","modified":1667112702000},{"_id":"themes/next/_config.yml","hash":"bab4b1a012a884628ce2664526c952dc588cba1f","modified":1678851668862},{"_id":"themes/next/_vendors.yml","hash":"618ea653d36f4444a0768513788a3f11beaddd16","modified":1667112702000},{"_id":"themes/next/package.json","hash":"4cdf28232ac2e9f5aca6aac62edb7569a5a2905b","modified":1667112702000},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1667112702000},{"_id":"themes/next/renovate.json","hash":"cb29cc16e61b0b8a6dac34657d76822ae29ad5aa","modified":1667112702000},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1667112702000},{"_id":"themes/next/LICENSE.md","hash":"68fc9a03d50fd4b5ea97092b05967d1819dea2c4","modified":1667112702000},{"_id":"themes/next/.github/config.yml","hash":"7984e665e9de481a0e0e51fca5668337713f810b","modified":1667112702000},{"_id":"themes/next/README.md","hash":"56638e4978154a2f2a3f03ba84047b77b4a499cc","modified":1667112702000},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1667112702000},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"21cbff565a0445d3a880fff1ee417e309740a9ab","modified":1667112702000},{"_id":"themes/next/.github/labeler.yml","hash":"5c4bc2bd561e6d9b33ee118cc12218c5de46f72d","modified":1667112702000},{"_id":"themes/next/.github/release.yml","hash":"112310b81f959747f8eaafc2ca2150e1dcf916d8","modified":1667112702000},{"_id":"themes/next/.githooks/install.js","hash":"4d77dbddf2eac1f3fc78f151d12ed22208ed655b","modified":1667112702000},{"_id":"themes/next/.githooks/pre-commit","hash":"f473eac1aaaa96c947d67988bbed140bbab1a821","modified":1667112702000},{"_id":"themes/next/.github/label-commenter-config.yml","hash":"1097fc47beeacfc1edb0248c27b17bf64bde3565","modified":1667112702000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"3e9fbb78e3dee0ca1dc886d0c28b0148ba0ca499","modified":1667112702000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"330656d93b6c03df9fb1f2f0e3534c971969473b","modified":1667112702000},{"_id":"themes/next/languages/README.md","hash":"b2567e32805dda79601157351a07e5ca9fe01315","modified":1667112702000},{"_id":"themes/next/languages/bn.yml","hash":"fccbf2855392186e11daa8590121073594037b7b","modified":1667112702000},{"_id":"themes/next/languages/de.yml","hash":"4be7b8b76c81bf1853eb36d2e874b17546a0e792","modified":1667112702000},{"_id":"themes/next/languages/en.yml","hash":"814d81c27fed736055ee300e0a6505b26ff4313c","modified":1667112702000},{"_id":"themes/next/languages/ar.yml","hash":"bca66db21c015dbd32970d8708b898518a773e1e","modified":1667112702000},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1667112702000},{"_id":"themes/next/languages/es.yml","hash":"b813da5aed9d73b809133db4dfb08f90ec56afd9","modified":1667112702000},{"_id":"themes/next/languages/fa.yml","hash":"6456d40dd42f44101d9d6e7054e9884e9163f948","modified":1667112702000},{"_id":"themes/next/languages/fr.yml","hash":"b15dc05afdc94de02e5d3fee4f8d3dc5594dd37e","modified":1667112702000},{"_id":"themes/next/languages/it.yml","hash":"c1eeab4992c76bfd436bb205ce58b1cfeef55ee6","modified":1667112702000},{"_id":"themes/next/languages/id.yml","hash":"14e794db4eca36b257994d81eb513e61d1edcbd6","modified":1667112702000},{"_id":"themes/next/languages/ja.yml","hash":"d48c4157e0e02e847aac7b513580d3364c81948c","modified":1667112702000},{"_id":"themes/next/languages/ko.yml","hash":"819c19eb9d142e5411f77cf3821d90f740ee114a","modified":1667112702000},{"_id":"themes/next/languages/pt-BR.yml","hash":"a1f27b3a592fc58f17d247f5563ff4a90a3da5f2","modified":1667112702000},{"_id":"themes/next/docs/AUTHORS.md","hash":"a648823121563c34a177ae91f5a774b5e29f01a0","modified":1667112702000},{"_id":"themes/next/languages/nl.yml","hash":"ecb8e39c6225f3c068a5fdd569ee7dafd5c41a1f","modified":1667112702000},{"_id":"themes/next/languages/pt.yml","hash":"63a3e1e728ba5e6e22150de7331bb8a654f34960","modified":1667112702000},{"_id":"themes/next/languages/ru.yml","hash":"8c2b6361f2de17561c1a3eede2bf47b4e2ba6ce5","modified":1667112702000},{"_id":"themes/next/languages/tk.yml","hash":"519239e35c3bda7b62b00ff5d34644f45b16fe6a","modified":1667112702000},{"_id":"themes/next/languages/si.yml","hash":"615d18d044f44df476d6bfbf73f7b0edc2632168","modified":1667112702000},{"_id":"themes/next/languages/tr.yml","hash":"0bebba73d6f06c7dad61f80c0d7ad5f6f1791a01","modified":1667112702000},{"_id":"themes/next/languages/vi.yml","hash":"c669c34da544a563ceae3e196addc9df6a78e024","modified":1667112702000},{"_id":"themes/next/languages/uk.yml","hash":"7dd24580c0865c5a7bc4d391855045366a598936","modified":1667112702000},{"_id":"themes/next/languages/zh-CN.yml","hash":"0e988aa92b6c3a8eb043504d379b4dba933a32d1","modified":1678851753977},{"_id":"themes/next/languages/zh-TW.yml","hash":"92256b90028de9a1e79c6bc0e5885b93e7fb4b17","modified":1667112702000},{"_id":"themes/next/languages/zh-HK.yml","hash":"f195bb0502ffe66e850077a1af1033455ea65f93","modified":1667112702000},{"_id":"themes/next/layout/_layout.njk","hash":"20e4160cd0deb4fa272cc3aed0f43520b3cf4a9c","modified":1667112702000},{"_id":"themes/next/layout/category.njk","hash":"c68b7343d0f8145010f93351908cc36ef6212ec1","modified":1667112702000},{"_id":"themes/next/layout/archive.njk","hash":"d759f4d2cf5ddc6875ea250113a00662c1caf6d1","modified":1667112702000},{"_id":"themes/next/layout/index.njk","hash":"dd63e488ae8cc144335a5958acedf6a16edd7a92","modified":1667112702000},{"_id":"themes/next/layout/page.njk","hash":"6c40aa438c658eb7f0cd0f6a759f18b43e7e8f93","modified":1667112702000},{"_id":"themes/next/layout/post.njk","hash":"6abeb85fb3e4c382ed4bb6049b12a807e6226e67","modified":1667112702000},{"_id":"themes/next/test/index.js","hash":"6bf0289846538be3e9a63809af98f00e1fbdd90b","modified":1667112702000},{"_id":"themes/next/layout/tag.njk","hash":"9e16ba20c28a7f2c6bc75aa427f48122301a30aa","modified":1667112702000},{"_id":"themes/next/docs/LICENSE.txt","hash":"f5b14f791b7cfa1d16da981d929152e088a5d1b8","modified":1667112702000},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1667112702000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/config.yml","hash":"c40ae7903b6cc99f94c9d45ac7ba8c2850bb1309","modified":1667112702000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"fc4dce84ed9a5d21d3a8833ff6d776c46f876115","modified":1667112702000},{"_id":"themes/next/.github/workflows/labeler.yml","hash":"e9d51e93f239a2d4b69722c69db3463b4baf0f4c","modified":1667112702000},{"_id":"themes/next/.github/workflows/label-commenter.yml","hash":"434cc0674290958b1e9bbc46c3486f073c0722db","modified":1667112702000},{"_id":"themes/next/.github/workflows/lock.yml","hash":"e48d1ced9a673d3f0911a700d3e68c0f4ca79263","modified":1667112702000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"4ecac91716eac59d7c2bc53cf6e95612d44da97b","modified":1667112702000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"8cc5b5c116f6a052865a324512362f145d699202","modified":1667112702000},{"_id":"themes/next/.github/workflows/linter.yml","hash":"2ab8720e4b9534e48ba324b73b0b58cb54df689f","modified":1667112702000},{"_id":"themes/next/.github/workflows/pr-reminder.yml","hash":"3ab3e8d9dc0e1d9bd54f44fba476792fb1ee190d","modified":1667112702000},{"_id":"themes/next/.github/workflows/tester.yml","hash":"80a20c3a7522249f051a48239db41d1317e9b552","modified":1667112702000},{"_id":"themes/next/layout/_macro/post-collapse.njk","hash":"1a30d751871dabfa80940042ddb1f77d07d830b9","modified":1667112702000},{"_id":"themes/next/docs/ru/README.md","hash":"6c82bfd2ec8248c248da701f091b548a7a133580","modified":1667112702000},{"_id":"themes/next/layout/_macro/sidebar.njk","hash":"eb786e8b35e354287cda345c524cd35ec955f692","modified":1667112702000},{"_id":"themes/next/layout/_third-party/fancybox.njk","hash":"844559f46e2ff1c8be234d5763703106e2072a7b","modified":1667112702000},{"_id":"themes/next/layout/_macro/post.njk","hash":"6244d554a83e3fe7815891b1d771d1ad69d30006","modified":1678420623764},{"_id":"themes/next/layout/_third-party/index.njk","hash":"d41eeb262978e34de4679d8971a9e7ac5d90ecbc","modified":1667112702000},{"_id":"themes/next/layout/_third-party/pace.njk","hash":"d7ad5714079f7f65446f880baf14722435ca9061","modified":1667112702000},{"_id":"themes/next/layout/_third-party/rating.njk","hash":"1bcdbc7fde26d6d9ef4e7fa43ffcff5a9506b20e","modified":1667112702000},{"_id":"themes/next/layout/_scripts/index.njk","hash":"6668878a0f9a1166c6a879755f54a08d942da870","modified":1667112702000},{"_id":"themes/next/layout/_scripts/vendors.njk","hash":"be80b9fe415a9a09d74c28e230995fd292dfc123","modified":1667112702000},{"_id":"themes/next/layout/_third-party/quicklink.njk","hash":"0efed71ed530447718c4ea5bbd5fc8695b0b0d5f","modified":1667112702000},{"_id":"themes/next/layout/_partials/footer.njk","hash":"107e27ac75a50b3f82f7b0c69c66e57773df3e82","modified":1667138906000},{"_id":"themes/next/layout/_partials/comments.njk","hash":"bc2c9b123f87a8350e6fc8656553ea6e7206e2ab","modified":1670499848197},{"_id":"themes/next/layout/_partials/languages.njk","hash":"e43f22198cccb5f6e306b1ce0d28d12a4fb891f8","modified":1667112702000},{"_id":"themes/next/layout/_partials/pagination.njk","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1667112702000},{"_id":"themes/next/layout/_partials/widgets.njk","hash":"852a750524decf1efa587cd52b09e387ed8315de","modified":1667112702000},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"7a06d443f374bd1e84294067a0ac796afd9fbe60","modified":1667112702000},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"872f01cb10e422a648ea505436532e776e92926b","modified":1667112702000},{"_id":"themes/next/scripts/events/index.js","hash":"3ce10d4cce94e3d4c482c2e18bb6f0f0ca380d3d","modified":1667112702000},{"_id":"themes/next/scripts/filters/minify.js","hash":"f160e39943e39d7276da86adb47c3f08e5f22c7a","modified":1667112702000},{"_id":"themes/next/scripts/filters/locals.js","hash":"9eb5310664759931287dd28ea39165dfb67f12ed","modified":1669641101511},{"_id":"themes/next/scripts/filters/post.js","hash":"30e03a1d4828259f82d46e64cbfe2955b6cff9a9","modified":1667112702000},{"_id":"themes/next/scripts/helpers/engine.js","hash":"d292b78485e8e8055712b0ed6de7cf559c5fbdcd","modified":1667112702000},{"_id":"themes/next/scripts/helpers/font.js","hash":"3394185a7f0393c16ce52c8028f90da3e9239c55","modified":1667112702000},{"_id":"themes/next/scripts/helpers/navigation.js","hash":"78107021101553c3d23e89290f7530b60cf4aa86","modified":1667112702000},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"a11b71ba0c5012e2cdcab31c15439156b215563e","modified":1667112702000},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"226fccbe9c93265e65a300e3cb4bf6f9065cfdd7","modified":1667112702000},{"_id":"themes/next/scripts/helpers/next-vendors.js","hash":"afdd6a188a74c188f0dd154fac70efd4080ca262","modified":1667112702000},{"_id":"themes/next/scripts/tags/button.js","hash":"c6ad2ed544fbb25ecb5d820c36e76302504271b7","modified":1667112702000},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"935a311142a409c1896b3ae3f01fe7a9e2db1134","modified":1667112702000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"9ed799c329abf830f623689d7e136991256a24ca","modified":1667112702000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"92c19d796bdb3320df9caea59bf52df7a95d9da9","modified":1667112702000},{"_id":"themes/next/scripts/tags/index.js","hash":"17f9451ce1f10f78437f52218757d38d4e1591b0","modified":1667112702000},{"_id":"themes/next/scripts/tags/label.js","hash":"8a73348186113bae0a51ea2f891c1bb882fab05a","modified":1667112702000},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"4fb01ca650fa8b256b8d48f50dc1b18350bd3d6d","modified":1667112702000},{"_id":"themes/next/scripts/tags/link-grid.js","hash":"18a483c2d5afd701f6080ffdddf2d1321370336c","modified":1667112702000},{"_id":"themes/next/scripts/tags/pdf.js","hash":"344636b6fd7e27e8831c1e194039afc0d61931cd","modified":1667112702000},{"_id":"themes/next/scripts/tags/note.js","hash":"7b94ddb46b7d4b0fe815f2fbe4bd375f07f55363","modified":1667716808000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"0eabe51da40b4b13e16419c8fe02452d9a4fef73","modified":1667112702000},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"a089f7a8368ab0b7d7b9b7ec0ac3767a453435df","modified":1667112702000},{"_id":"themes/next/test/tags/center-quote.js","hash":"7667342fd1a1417eaf6a254012b84ae40e8d13dd","modified":1667112702000},{"_id":"themes/next/docs/zh-CN/README.md","hash":"ccf27b9249524b9fec1c15497b4353c8d1748c6c","modified":1667112702000},{"_id":"themes/next/test/tags/caniuse.js","hash":"aa5e728445caeaf7c2ccd0f3fcb2cad0c93ca6d1","modified":1667112702000},{"_id":"themes/next/test/helpers/next-url.js","hash":"a91d880cb75e0a8e65a7be4c7362b2c8ebfb7c4f","modified":1667112702000},{"_id":"themes/next/test/helpers/index.js","hash":"63ba28afed697f7b3574436b1133b8ecc9c0c357","modified":1667112702000},{"_id":"themes/next/test/tags/index.js","hash":"e8779e54f0979b221858f8bb74dd081bb503b910","modified":1667112702000},{"_id":"themes/next/test/tags/label.js","hash":"4ebf3698c258ca978b997acbdd0dece44069c09d","modified":1667112702000},{"_id":"themes/next/test/helpers/font.js","hash":"342ef3c6fd2dcca2a8802a516ed6d7f389fd2ca2","modified":1667112702000},{"_id":"themes/next/test/tags/mermaid.js","hash":"ab77be5f3c6d9a57c7b9dda6decf1906a736fef9","modified":1667112702000},{"_id":"themes/next/test/tags/group-pictures.js","hash":"19c5486415f722a9f16e8032d537cfe56acb3141","modified":1669643721975},{"_id":"themes/next/test/tags/button.js","hash":"48f2aa4c513e9e24bd6a811410520b74cd7ea88b","modified":1667112702000},{"_id":"themes/next/test/tags/pdf.js","hash":"fd6ea5123560a90f7e7c1eface23dbe1455db25f","modified":1667112702000},{"_id":"themes/next/scripts/tags/video.js","hash":"2ee926448583be8f95af1f2884ae2c9c4830151d","modified":1667112702000},{"_id":"themes/next/test/tags/video.js","hash":"b796fc4dceb20a30e730c322bb5474c0162464cc","modified":1667112702000},{"_id":"themes/next/test/tags/link-grid.js","hash":"43d298fafb7c45a874b766d443843bd26346e689","modified":1667112702000},{"_id":"themes/next/test/tags/tabs.js","hash":"d63722919f9da2e44d6b952801e10a2915ea9c12","modified":1667112702000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"2811689d51e8a7a694b83e38f25f77117ffcb6eb","modified":1669637913585},{"_id":"themes/next/source/images/avatar.gif","hash":"7b3d4ce93b9b18d30b415e7514b8712ee93fe1e7","modified":1669637865603},{"_id":"themes/next/test/tags/note.js","hash":"3dcfcd65bf9f326972ea7571fdb1444200f5d07e","modified":1667716858000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"ac4b6dd39f7698fbca609af9f9d4ba0bd12f8f5b","modified":1644816371095},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"96f04a71f9eb4316d23c92f09446992ac75f42f6","modified":1669637937080},{"_id":"themes/next/test/validate/index.js","hash":"5a95ccc8598667535bd022e988055c0e019f3670","modified":1667112702000},{"_id":"themes/next/source/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1655348348000},{"_id":"themes/next/source/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1667112702000},{"_id":"themes/next/source/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1667112702000},{"_id":"themes/next/source/js/motion.js","hash":"f7c825cbff11885fa0dffa64824fd00e505d6a8d","modified":1667112702000},{"_id":"themes/next/source/images/logo.svg","hash":"5b023ae92fd36b22cc095afe408a08d2cae802fa","modified":1669637998729},{"_id":"themes/next/source/js/next-boot.js","hash":"da0f07f9eaaa83de70128b0feaea3fdadb90457a","modified":1667112702000},{"_id":"themes/next/source/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":1667112702000},{"_id":"themes/next/source/js/utils.js","hash":"200088bfd042f5304b2a04befab0829148845e0e","modified":1667112702000},{"_id":"themes/next/source/css/_colors.styl","hash":"3c6798c10cc220d83481cb3f3782e78558cee789","modified":1667112702000},{"_id":"themes/next/source/css/_mixins.styl","hash":"32d31cb5a155681c19f5ad0bb56dcb08429f93ef","modified":1667698632000},{"_id":"themes/next/source/css/main.styl","hash":"78ce791cc4ac95386cf6839ca72f5f7b51f86ee9","modified":1667112702000},{"_id":"themes/next/source/css/noscript.styl","hash":"263eddabfae40e54c0591e7baa8403ade8cdd56d","modified":1667112702000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.njk","hash":"6215309aee028dcb734452beec448c5afb6c63fc","modified":1667112702000},{"_id":"themes/next/layout/_third-party/analytics/cloudflare.njk","hash":"a5b8297c2c383124dd6a56e256ecc0c0dcf489be","modified":1667112702000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.njk","hash":"d89066ff53879693f023e540d59c86137172c529","modified":1667112702000},{"_id":"themes/next/layout/_third-party/analytics/growingio.njk","hash":"8afaa772c390bd9d53a5cff9645ac3168334eb98","modified":1667112702000},{"_id":"themes/next/layout/_third-party/analytics/index.njk","hash":"314805f0186e9f6208c845f0757fdb7891c540f6","modified":1667112702000},{"_id":"themes/next/layout/_third-party/analytics/microsoft-clarity.njk","hash":"9dc00fcb0a05899f048eace9f9160b78956655d5","modified":1667112702000},{"_id":"themes/next/layout/_third-party/analytics/matomo.njk","hash":"4e89648a8ec8194c5823064cbca39c938a799006","modified":1667112702000},{"_id":"themes/next/layout/_third-party/chat/chatra.njk","hash":"d7263fca16d0278ccf1f6aa1c6df6902a6344a09","modified":1667112702000},{"_id":"themes/next/layout/_third-party/chat/gitter.njk","hash":"f8cc14b7aa949999a1faaeb7855e2f20b59a386d","modified":1667112702000},{"_id":"themes/next/source/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1667112702000},{"_id":"themes/next/layout/_third-party/chat/tidio.njk","hash":"02aab857c27fc103216029be991688b12a73a525","modified":1667112702000},{"_id":"themes/next/layout/_third-party/comments/disqus.njk","hash":"9375b19a89b7fa9474e558d085af5448d4c5c50c","modified":1667112702000},{"_id":"themes/next/layout/_third-party/comments/changyan.njk","hash":"d1c950f8fbdf85e7a3eae5463767a89e858e8220","modified":1667112702000},{"_id":"themes/next/layout/_third-party/comments/disqusjs.njk","hash":"0749cb6902baecdfd01f779a2a2513f6d2f6a823","modified":1667112702000},{"_id":"themes/next/layout/_third-party/comments/gitalk.njk","hash":"b63b7e2ede0d3e66e732fa1a06bda9b19e1e85d4","modified":1667112702000},{"_id":"themes/next/layout/_third-party/comments/isso.njk","hash":"64cc3bdaf644fd32c0d0a247f29f5b6904da9af3","modified":1667112702000},{"_id":"themes/next/layout/_third-party/comments/livere.njk","hash":"3b13b09fba84ec6000886890a6710736a2b8fafe","modified":1667112702000},{"_id":"themes/next/layout/_third-party/math/index.njk","hash":"abf37fc55aa86702118e8fdf5bf2d389dd589aa0","modified":1667112702000},{"_id":"themes/next/layout/_third-party/math/katex.njk","hash":"1ebf658690468ea197bdd0416eb7cfa4bd0b083a","modified":1667112702000},{"_id":"themes/next/layout/_third-party/comments/utterances.njk","hash":"5a94032bc3512a10ad4328fc19ec07b819a1d687","modified":1667112702000},{"_id":"themes/next/layout/_third-party/math/mathjax.njk","hash":"3677017fd4572b158311f5f5d870590ab25184e0","modified":1667112702000},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.njk","hash":"a4bc501da0f22f7e420f0ca47e83988ce90b1368","modified":1667112702000},{"_id":"themes/next/layout/_third-party/search/localsearch.njk","hash":"e45ea3542cdc9ed7ec8447b5e6f35df4c5e82758","modified":1667112702000},{"_id":"themes/next/layout/_third-party/search/algolia-search.njk","hash":"24ed76e0c72a25ac152820c750a05826a706b6f4","modified":1667112702000},{"_id":"themes/next/layout/_third-party/statistics/index.njk","hash":"568ddf7955d11d93fb5e842b403a7ac8b1b7fdb1","modified":1667112702000},{"_id":"themes/next/layout/_third-party/statistics/firestore.njk","hash":"d32ebe94560fa95824478ebbff531bffc47b194d","modified":1667112702000},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.njk","hash":"2446e748cdc102c78492216319ac02148db7daf6","modified":1667112702000},{"_id":"themes/next/layout/_third-party/tags/mermaid.njk","hash":"099e031f52fb8e47b3af5b2684737efc9e643ee7","modified":1667112702000},{"_id":"themes/next/layout/_third-party/tags/pdf.njk","hash":"2c81984cc4f5123103460442f6e046f5b6c97127","modified":1667112702000},{"_id":"themes/next/layout/_partials/head/head-unique.njk","hash":"8da52a144060db1a0a088ccb2e6cc8376d1fce70","modified":1667112702000},{"_id":"themes/next/layout/_partials/head/head.njk","hash":"5388b157bba4a40b9312f4a45c6678974ccf0837","modified":1669639489945},{"_id":"themes/next/layout/_partials/header/brand.njk","hash":"aff4613756456be26415febc668860fdab8d33c5","modified":1667112702000},{"_id":"themes/next/layout/_partials/header/index.njk","hash":"650de421a8ce4cf685428ffbe0087ff84cbd1356","modified":1667112702000},{"_id":"themes/next/layout/_partials/header/menu-item.njk","hash":"41a8b0cc16f60fa085cb719d07216d86b6bc4bf8","modified":1667112702000},{"_id":"themes/next/layout/_partials/header/menu.njk","hash":"ee6fc2f111572d3eeab0a2fecbb2d6b3e37ab26b","modified":1667112702000},{"_id":"themes/next/layout/_partials/page/breadcrumb.njk","hash":"89825e75cc45e9709fa6ba89883669eedaff6f46","modified":1667112702000},{"_id":"themes/next/layout/_partials/header/sub-menu.njk","hash":"06480d8ec5f0b87eafd47f082f07968d7282dd5c","modified":1667112702000},{"_id":"themes/next/layout/_partials/page/categories.njk","hash":"17156d99941f28a225951ffdcfa9a115e20dc2d2","modified":1667112702000},{"_id":"themes/next/layout/_partials/page/schedule.njk","hash":"0f4bc8e257da60f77c0c1738607b2bde55810684","modified":1667112702000},{"_id":"themes/next/layout/_partials/page/page-header.njk","hash":"7ed4f102a1825195cff8d7995bf9219f323a9034","modified":1667112702000},{"_id":"themes/next/layout/_partials/page/tags.njk","hash":"a18d1598e36cc72f2b0b24c3cc3c5990dfaa3254","modified":1667112702000},{"_id":"themes/next/layout/_partials/search/index.njk","hash":"8f6f256ab3b351ffc80f1f3f1d9834e9a7cfac31","modified":1667112702000},{"_id":"themes/next/layout/_partials/search/algolia-search.njk","hash":"efb2b6f19df02ba5ae623a1f274fff52aed21e6f","modified":1667112702000},{"_id":"themes/next/layout/_partials/search/localsearch.njk","hash":"661f7acae43f0be694266323320f977d84119abe","modified":1667112702000},{"_id":"themes/next/layout/_partials/post/post-copyright.njk","hash":"133942922e34abae9e4de7ea5591d77c0caa4b37","modified":1667112702000},{"_id":"themes/next/layout/_partials/post/post-followme.njk","hash":"c1e33b4889f75acc490af3c8bde0ec56c518ff41","modified":1667112702000},{"_id":"themes/next/layout/_partials/post/post-footer.njk","hash":"bde2c7356d9362972bde41cc206d5816f8ed714d","modified":1667112702000},{"_id":"themes/next/layout/_partials/post/post-meta.njk","hash":"0edc7204b3199015b950f61fddb4f0fa95702756","modified":1667138816000},{"_id":"themes/next/layout/_partials/post/post-related.njk","hash":"f18ee93e6071c6a432136a1be927a472ba4e7a99","modified":1667138886000},{"_id":"themes/next/layout/_partials/post/post-reward.njk","hash":"002b51d0cae3f2e2e008bdc58be90c728282de5b","modified":1667112702000},{"_id":"themes/next/layout/_partials/sidebar/site-overview.njk","hash":"3d8591bb92df77ceb9d5b07bc76da1ca89e5bd76","modified":1667112702000},{"_id":"themes/next/scripts/events/lib/config.js","hash":"c8b59b404f5d2a0b3b5cd1a6c9a10af5f30e43b5","modified":1667112702000},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"d987709267a1bc6e5014411e9983d7c49c102c16","modified":1667112702000},{"_id":"themes/next/scripts/events/lib/highlight.js","hash":"6aec7b2c38c50989a23bfaa0d560e75c7f553e12","modified":1667112702000},{"_id":"themes/next/scripts/events/lib/navigation.js","hash":"dd3562686d95a50375e6fd32e717ccb0d99c1e3d","modified":1667112702000},{"_id":"themes/next/scripts/events/lib/utils.js","hash":"ec996d0673f766167c86df0966e9da1ae036e103","modified":1667112702000},{"_id":"themes/next/scripts/events/lib/vendors.js","hash":"64e4024376b51fe81be7ad80235abdf0a83853bd","modified":1667112702000},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"5798cfc8f63665031dd3e01debed051628cec319","modified":1667112702000},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"19a402a225c31edffc50f202a14e0d582d3db23e","modified":1667112702000},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"93ee5f9109dad885dc38c49bcee630c10f9dce6e","modified":1667112702000},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"7f71d6b271ba65ff333d5682e7575711d368c0d2","modified":1667112702000},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"62faf6b0b0020066a0dec1f0123cf1fee3198e7e","modified":1667112702000},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"7bb7dafdd7f6bca8464b54e17e552ce7f1714195","modified":1667112702000},{"_id":"themes/next/scripts/filters/comment/isso.js","hash":"ff8b5b5145220a17d0ecd9508ba9bd2d3b2da47d","modified":1667112702000},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"5a07d8bb52bc1d51a624ca8db54be144566c306b","modified":1667112702000},{"_id":"themes/next/scripts/filters/comment/utterances.js","hash":"d3bded697bc32dace689d2a6dfb6eb7514169d15","modified":1667112702000},{"_id":"themes/next/source/js/pjax.js","hash":"919f5281c4a04d11cfd94573ecf57b3dbabd3cc8","modified":1667112702000},{"_id":"themes/next/source/js/schedule.js","hash":"a1333258726caf84f368a8f8454639c7dc1626bb","modified":1667112702000},{"_id":"themes/next/source/js/third-party/rating.js","hash":"4e92c2d107ba47b47826829f9668030d5ea9bfb8","modified":1667112702000},{"_id":"themes/next/source/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1667112702000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"96e0a7c2a65ce68215e17e369085b2ea2f1334f2","modified":1667112702000},{"_id":"themes/next/source/js/schemes/muse.js","hash":"9794bd4fc6a458322949d6a0ade89cd1026bc69f","modified":1667112702000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"c65536a128b9bc9dbe2fbb1b235a3cded2891002","modified":1667112702000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"e3be898f5ebcf435a26542653a9297ff2c71aeb0","modified":1667112702000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"09947fd1d86de305493ac2443fdd7faca9a6bd66","modified":1669639123685},{"_id":"themes/next/source/js/third-party/quicklink.js","hash":"eed02e6fced8e5a653077205d4d4d7834ca71472","modified":1667112702000},{"_id":"themes/next/source/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1667112702000},{"_id":"themes/next/source/lib/pdf/.gitignore","hash":"8835bc9cd1f27ff345852286e85ccb1602bb82bc","modified":1654389308000},{"_id":"themes/next/source/js/third-party/fancybox.js","hash":"c098d14e65dd170537134358d4b8359ad0539c2c","modified":1667112702000},{"_id":"themes/next/source/js/third-party/chat/gitter.js","hash":"cc38c94125f90dadde11b5ebac7d8bf99a1a08a2","modified":1667112702000},{"_id":"themes/next/source/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1667112702000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e1fbf169b9b6a194b518240cbd06ec3c48b83d61","modified":1667112702000},{"_id":"themes/next/source/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1667112702000},{"_id":"themes/next/source/js/third-party/analytics/matomo.js","hash":"c6a25b26a1443caa70b47fd3dfa282271574deb5","modified":1667112702000},{"_id":"themes/next/source/js/third-party/analytics/google-analytics.js","hash":"59684383385059dc4f8a1ff85dbbeb703bcdbcb5","modified":1667112702000},{"_id":"themes/next/source/lib/pdf/LICENSE","hash":"598f87f072f66e2269dd6919292b2934dbb20492","modified":1654389308000},{"_id":"themes/next/source/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1667112702000},{"_id":"themes/next/source/lib/pdf/README.md","hash":"2bddc0908fb532fdf625e9decf2ed0002816f3d3","modified":1654389308000},{"_id":"themes/next/source/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1667112702000},{"_id":"themes/next/source/js/third-party/comments/changyan.js","hash":"260d1a77d6a3bb33a579d3e4cca1997003e799b5","modified":1667112702000},{"_id":"themes/next/source/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1667112702000},{"_id":"themes/next/source/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1667112702000},{"_id":"themes/next/source/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1667112702000},{"_id":"themes/next/source/js/third-party/comments/disqus.js","hash":"e1cc671b0d524864fd445e3ab4ade9ee6d07e565","modified":1667112702000},{"_id":"themes/next/source/js/third-party/comments/disqusjs.js","hash":"33a82207a15aad9d1c8fb2251f9e3eba50452932","modified":1667112702000},{"_id":"themes/next/source/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1667112702000},{"_id":"themes/next/source/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1667112702000},{"_id":"themes/next/source/js/third-party/search/local-search.js","hash":"4536cb6d0a9bbaaa86fab3fa0101f6a3a3ec5a76","modified":1667112702000},{"_id":"themes/next/source/js/third-party/statistics/firestore.js","hash":"6e0682bb42170d61b13b786295f45f9c785f8b73","modified":1667112702000},{"_id":"themes/next/source/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1667112702000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"bab653bcf226311381e8411a0492202f1bf1fce9","modified":1667112702000},{"_id":"themes/next/source/css/_common/components/index.styl","hash":"fe1868f47681e00a33a96199302be85377282f63","modified":1667112702000},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"90a86045a33c1bae49fc2f6fa1e1b53170c7f77b","modified":1667112702000},{"_id":"themes/next/source/css/_common/outline/index.styl","hash":"8e34df131830d4fa3725e4590a672ba1cf1903e5","modified":1667112702000},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"64775c729512b30b144ab5ae9dc4a4dfd4e13f35","modified":1667112702000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"d0a7c99095f490b0d2ed6b1be43d435960798cec","modified":1667112702000},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"a042571d85ff7265f799004239a45f36b716b8a6","modified":1667112702000},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"e4fecc889ba3317a64e9abba5842c79dff9b7827","modified":1667112702000},{"_id":"themes/next/source/css/_common/scaffolding/index.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1667112702000},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"b5c7782368889fa9fd93807d28ff2daf270e3703","modified":1667112702000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"e840b23d33023e6d45e018f6e84b683dd56efd8d","modified":1667112702000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1667112702000},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"572a41499391677d84b16d8dbd6a996a3d5ce041","modified":1667112702000},{"_id":"themes/next/source/js/third-party/statistics/lean-analytics.js","hash":"835cbf54c49ef1327f47df70ff2636ad36b6f57d","modified":1667112702000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"fd49b521d67eaccc629f77b4e095cb7310327565","modified":1667112702000},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"06080fd963c904d96c00eff098a284e337953013","modified":1667112702000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"82a29572dd90451f75358a2ee2522b87304a0bb8","modified":1667112702000},{"_id":"themes/next/source/js/third-party/tags/mermaid.js","hash":"f27d817b0c2138dd3215b1f46af0753f60a008f3","modified":1667112702000},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1667112702000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1667112702000},{"_id":"themes/next/source/js/third-party/search/algolia-search.js","hash":"fdb7b7cef1a147d897e7f7cd8903b58368ec2062","modified":1667112702000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"b7f48be3c43bfa393d62142544a5487a67871713","modified":1667112702000},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"5604ac1e161099a4d3e5657d53507268866dc717","modified":1667112702000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"fb550935d374e0bdf1097fce187337dc05cad3e1","modified":1667112702000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"ab16a3dcdc0393b9b582ef59dcc13db9320e917c","modified":1667112702000},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"b741ab96e73370711c63a6581159f2ea8b5bfa1b","modified":1667112702000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"6eee86c8f0175d6c09e434053516cd8556f78d44","modified":1667112702000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"d9141e6e14a56b5952488101e9a8388c2170e270","modified":1667112702000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"72dc825c50357402c342d62ab60fc0c478ab6bc1","modified":1667112702000},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"778ed2ad5643b93970c95626b325defeb586733f","modified":1667112702000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"8000075b227749a7495eaf417cac6ccfbe441580","modified":1667112702000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"be6cf377ae8f4a01ee76f9b3014e74161d4d5d17","modified":1667112702000},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"944364893bd7160d954c10ba931af641c91515a4","modified":1667112702000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"4817e77577896ab5c0da434549917ee703a3f4cf","modified":1667112702000},{"_id":"themes/next/source/lib/pdf/web/debugger.js","hash":"eded7be18ab9d76e8edfb7241a72f575d3f1470e","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/debugger.css","hash":"d2df1df4b3f62048a530ee10b6463a09002d94b6","modified":1654389308000},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"8afdc311c6b8db121758371f95cf1c5e77354f42","modified":1667112702000},{"_id":"themes/next/source/lib/pdf/web/viewer.html","hash":"6ed31622325d3bea109474ba8d84b9418fadc982","modified":1654389308000},{"_id":"themes/next/source/css/_common/components/pages/index.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1667112702000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"b6e2eb1550a7845cb2adf86081a4ab6c7bde1e68","modified":1667112702000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"6b816c2511242ee503fb5f34cd3e4dcdafc06b85","modified":1667112702000},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"1a81d1a71fcf0699629ce6e72dfd0a15f3a2dd0a","modified":1667112702000},{"_id":"themes/next/source/css/_common/components/post/post-body.styl","hash":"d757768a58743601d0d84158ba955eb15d4c3c01","modified":1667112702000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"ec37a36e94ba791663607a5022f763915778578f","modified":1667112702000},{"_id":"themes/next/source/css/_common/components/post/index.styl","hash":"d0805a763176b3c0003967401644f41dfe3bc9e8","modified":1667112702000},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"c81cb8793b207ac935244e1436d4d38efd1ac15b","modified":1667112702000},{"_id":"themes/next/source/css/_common/components/post/post-footer.styl","hash":"1d284f3ea03ba9b4feb76b375e539a8e0bccf1c3","modified":1667112702000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"aa366d37389760c8595529b850f461569577a1c5","modified":1667112702000},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"010c901e4ef49a606f8a350efbf09044e76d2ff3","modified":1667112702000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"9ac6f477177264c26a46e8333b8456720a0444dc","modified":1667112702000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"04cf4a69537fc14d3b8904f965d283356853847f","modified":1667112702000},{"_id":"themes/next/source/css/_common/components/third-party/disqusjs.styl","hash":"c2326ee3e8b724d99c24a818ddee32813ea5bf89","modified":1667112702000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"b6677dc2a2368084ab82bb4f145ac79e5966c150","modified":1667112702000},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8f094c4ac17e2ab45569b12d157747f9c7333c12","modified":1667112702000},{"_id":"themes/next/source/css/_common/components/third-party/index.styl","hash":"979486a41a81f2a9fd8b0b87c4f87d6416c68c7d","modified":1667112702000},{"_id":"themes/next/source/css/_common/components/third-party/gitter.styl","hash":"35104dc6883a61c31e0e368dac8ac2f697be62fe","modified":1667112702000},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"9d995eb4871a6c273d9d51558676a1fdabf69e72","modified":1667112702000},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"41ed817e1eb64078074e245e771446ee041e5790","modified":1667112702000},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"e72799ce3f9b79753e365b2f8c8ef6c310668d4a","modified":1667112702000},{"_id":"themes/next/source/css/_common/components/third-party/utterances.styl","hash":"56d90ae0559caa55b75f3c300ff2711f9ed65fc4","modified":1667112702000},{"_id":"themes/next/source/css/_common/outline/footer/index.styl","hash":"8b9407e5cfd0571ef8de7df19022b268f962fa2f","modified":1667112702000},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"38c64c2d04e46848382bfa246a0e9c508294767b","modified":1667112702000},{"_id":"themes/next/source/css/_common/outline/header/index.styl","hash":"ff642130354a0b3be0d708c43044ed4d710b5e83","modified":1667112702000},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"392fd53a8dd4e3f33a853ebb24290a622300e0ff","modified":1667112702000},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e74f4bb47a101b014ee2a1783c87f3b87323f9a0","modified":1667112702000},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"759e582d34d08e3386c55d87a835a9523608619f","modified":1667112702000},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"bf3ad8b4268f763a1e26377681644887694bc009","modified":1667112702000},{"_id":"themes/next/source/css/_common/outline/sidebar/index.styl","hash":"cee43480eba028c37d51cb620c2d81486aa24e01","modified":1667112702000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"52fc98b1435129eb3edb9293ced9e507741f1350","modified":1667112702000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"9950c3188a28e1c63b5498b7bdcd14b12ace3e28","modified":1667112702000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"5b38ac4a0f1ade0e681aff0e3366c481d9cf3dcd","modified":1667112702000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"b926e368f702f8686aaa2eb98d3d2e533418958c","modified":1667112702000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"fbdb63c6a8887d19b7137325ba7d6806f728139c","modified":1667112702000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"ee94a1a27090ad24e3ed579093088d97ff96d77d","modified":1667112702000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"021a37cf178440cc341940a299d3bca359996c6b","modified":1667112702000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"3103b81fc76b59e1e2c161e2c484625c770ed66f","modified":1667112702000},{"_id":"themes/next/source/lib/pdf/web/viewer.css","hash":"e6331b5516cdb7865e3bb476b2e74d21d9401d73","modified":1654389308000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"670fc109b56a010b166b86b616823a1aae97a738","modified":1667112702000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/index.styl","hash":"9056be572ec1cfa429abb22be4b45a662d5b0fb1","modified":1667112702000},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"d6418fd2bbfba7b73ddf11ec62db9637fdf5d8af","modified":1667112702000},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"26dd0adfcb1db6df29c6090c8d7e9b5a43583fb0","modified":1667112702000},{"_id":"themes/next/source/css/_common/scaffolding/tags/index.styl","hash":"3f76c73a891bbc10679753e702feba9e8a5ffdd2","modified":1667112702000},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"393ff96234e4196b569d4b11496774eb78e147de","modified":1667112702000},{"_id":"themes/next/source/css/_common/scaffolding/tags/link-grid.styl","hash":"7f8a7345e6537a62cd9e9a94c8f7065b541d9b04","modified":1667112702000},{"_id":"themes/next/source/css/_common/scaffolding/tags/mermaid.styl","hash":"48d35dba575a7c9e8845b16652e76b7d4a4646de","modified":1667112702000},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"debee14539272fbe3835a7d3853af2230baa3501","modified":1667112702000},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"d27fbf7799695295dd5860a161a13ac4d90c5ba4","modified":1667112702000},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b6654a1d7cf82577d8263faffee8af3ad4a5c0e8","modified":1667112702000},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"7a39bcce7274284e87388743db62afc847fe6897","modified":1667112702000},{"_id":"themes/next/source/lib/pdf/web/cmaps/78-EUC-V.bcmap","hash":"678dcba8720226133150374f78493cc09c9b8d9e","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/.github/workflows/update.yml","hash":"1364cbe6616d785a23da6dc605a7a73f2f5395bd","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/78-V.bcmap","hash":"c58a521bdfad6ffe30e292505992a396033d03c3","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/78-RKSJ-V.bcmap","hash":"3fa6830e3e5c6b0cc5d03402cfb6712a04c08d31","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/78-EUC-H.bcmap","hash":"c84a5fe05bb2a5e4e599329d0ebb3ed8fe1ebfdf","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/78ms-RKSJ-V.bcmap","hash":"27d45708491107b2cf673c2cd584bf22ca27e4e4","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/90ms-RKSJ-V.bcmap","hash":"c4ed8e0b82fc29ff6140c72ec8ab3acc3cd0578f","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/78-RKSJ-H.bcmap","hash":"5f0f202932865c38e7b0b06924e419c77f74be85","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/78ms-RKSJ-H.bcmap","hash":"ef37df685e4779722b34fcc026b196b224bfca13","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/90msp-RKSJ-V.bcmap","hash":"ddfc0fdb34314f2d7116d707fa6dbb24bc9bf390","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/83pv-RKSJ-H.bcmap","hash":"c4474f77d94be66d771ba68f18ff2fd606a3c820","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/78-H.bcmap","hash":"e77449427a5d5411c9da1c1a64e1e3ae362bbcdf","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/90pv-RKSJ-V.bcmap","hash":"7296d339f5c1d843b823482fa2b3857c0559eb93","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/90msp-RKSJ-H.bcmap","hash":"d3f02d6724d9c91d077ed38545c9321dba65b624","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/90ms-RKSJ-H.bcmap","hash":"994ca6d6232d91be047c68e087e0951dcca4cba4","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/Add-V.bcmap","hash":"02ca7b80b507640df998e9b5f6d25b346082d8c1","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/Adobe-CNS1-0.bcmap","hash":"241cccfc85b5ef9ea4618f94a6341e02d1b03b98","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/Add-RKSJ-V.bcmap","hash":"0e4ef11ed7f4e5ed3b2e32f267f4c3fb4359d08e","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/Adobe-CNS1-2.bcmap","hash":"a568bee71b12ec4e79a2fa65c4eb9f865c505a5e","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/Adobe-CNS1-3.bcmap","hash":"ef567b58254e03837d46e1fdff4fea5cce318a74","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/Adobe-CNS1-1.bcmap","hash":"f37b5b68198690c8270322daa0ea522225a46127","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/Adobe-CNS1-4.bcmap","hash":"5f81f4782a5f996649dc318c1587ae7728afd10b","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/Adobe-CNS1-5.bcmap","hash":"b7de7cea41575c7933cffdb917ad1f918df76c70","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/Adobe-CNS1-6.bcmap","hash":"4eaa2ec548df7cdbdece2eec227fdb9d4cb2f281","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/90pv-RKSJ-H.bcmap","hash":"76218acded94b2d29f747735e7fb41f19cee84eb","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/Adobe-GB1-0.bcmap","hash":"86edf145080d2fedba2f0a0b0ab1bc18d9a5af55","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/Adobe-GB1-2.bcmap","hash":"a3ce0132af54173d30a4330314bc4cf273fc29c8","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/Adobe-GB1-1.bcmap","hash":"83cc28efd5e778b9d37898f9b100b502bc442dc3","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/Adobe-GB1-3.bcmap","hash":"c7b6cfbeac681010771d022d319913c798416d75","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/Add-RKSJ-H.bcmap","hash":"9a17c268decf876dc35c5f20c660ee63563fa523","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/Adobe-GB1-4.bcmap","hash":"cee3007bb41ed1bbe7fd22f054c0fb036a92c8cf","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/Adobe-Japan1-0.bcmap","hash":"ce5b494e809c30621968169d01d1136f3ad1ce3c","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/Adobe-Japan1-1.bcmap","hash":"a766b29745a30aa3316cafc73d884c271cc12ff4","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/Adobe-GB1-5.bcmap","hash":"a7d9440784d773507e3d83d0bf93fa8d93a3289f","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/Adobe-Japan1-4.bcmap","hash":"4136c902f4715ed18b8b2390965d3621d2fda048","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/Adobe-Japan1-2.bcmap","hash":"78c4e86cff8aa1c2f2bc18aaf83095a96f0bca50","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/Adobe-Japan1-3.bcmap","hash":"5b520d2cf37e21b084bc9e6a21d006c53e4e552e","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/Adobe-Japan1-6.bcmap","hash":"dfba7ab251b5ac07d7648c4e81e808ea096578c9","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/Add-H.bcmap","hash":"cd55ec3d5627b80505d7dbea433e5702f8c05260","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/Adobe-Japan1-5.bcmap","hash":"38970fd416a1c3ef4faa25009254347627d24964","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/Adobe-Korea1-1.bcmap","hash":"e9b783963160380ccfe33fa1dcdd9c79b1cf2934","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/Adobe-Korea1-0.bcmap","hash":"ca8e1774cdd2859ba0341e4474d07d6fb2f9395b","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/Adobe-Korea1-2.bcmap","hash":"0b8d7fd848de3efa86f958c6e1cf5aece9bf1bf4","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/Adobe-Japan1-UCS2.bcmap","hash":"d99c0d908b8075afa69aa3c579a9393b13b29dd9","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/Adobe-CNS1-UCS2.bcmap","hash":"bee971d04cae79d791a52bf0d3d5e2e9deb1d1c8","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/B5-V.bcmap","hash":"dfc7362c157c24651761e5216ef0c46aba795488","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/B5pc-V.bcmap","hash":"f12ae6ed2320136959420e28b1b937001cdd4f0b","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/Adobe-Korea1-UCS2.bcmap","hash":"15e4e07c96891a2bb2778b5df8dd0a131edeed52","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/B5pc-H.bcmap","hash":"29d5fd41dc8fc4f19b59949b9a7f410d63f4f3bd","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/CNS1-V.bcmap","hash":"7455bd92e1a1f32bfd2cb5b80eb938aa665f6b8a","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/CNS1-H.bcmap","hash":"07f422b28ca4fedf2cdc6ccdf551eaecae40f60b","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/CNS2-H.bcmap","hash":"0570a8186311bba4ad216250f805461220d41d0a","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/B5-H.bcmap","hash":"771d71153bf652d1134b7d65beb8afc60c835ff6","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/ETHK-B5-H.bcmap","hash":"225205ad3aad58967faf23a2504731abebc6dccc","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/Adobe-GB1-UCS2.bcmap","hash":"23366624efa674e2493a18bf6b6e2c16929d68d3","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/ETen-B5-V.bcmap","hash":"5b637fa1b203754d98463053b38a2f694cde499b","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/ETenms-B5-V.bcmap","hash":"631c58a7f7a8094d44a858d26485ab65b499b59b","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/ETenms-B5-H.bcmap","hash":"1207c931295ad5f57a430317d5014fb66d0eab7d","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/EUC-H.bcmap","hash":"f88729b6a413ae1365bafb5dc8076b465aa1fb87","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/EUC-V.bcmap","hash":"c47c42d9099caf1447498e57fc1c8f3c7ff417b3","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/ETHK-B5-V.bcmap","hash":"03e35e7fc1b75495df5559a3f71c5f0cbd1517ba","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/CNS-EUC-V.bcmap","hash":"895fe039258dae00d7a8cea93b3b07d794543d2d","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/CNS-EUC-H.bcmap","hash":"1da78eb52781330148c95ccf64c78edd2072a991","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/Ext-RKSJ-V.bcmap","hash":"5443591823737ba98993537c4d4e8af70a37c92e","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/GB-EUC-H.bcmap","hash":"4231eab22968baa29ea4e6fdc4278b737067a7da","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/Ext-V.bcmap","hash":"0d88a7517783f25ce1eee082a5ed12b0f96061c2","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/GB-EUC-V.bcmap","hash":"7d268732b300431fced1351b4bfd12b51299283e","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/GB-V.bcmap","hash":"b70477a9738709f639adf6bc20e81363efcc9ed0","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/GB-H.bcmap","hash":"3f1c2a68bdd13541e6a2cd6a7a393581e9444e1e","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/ETen-B5-H.bcmap","hash":"9c3b70700d7ae2b8c4cc6f658cdc98f4e65b3be4","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/GBK-EUC-V.bcmap","hash":"4f0e0cfffafa21b30f7a25e5161738faf2e265fe","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/Ext-RKSJ-H.bcmap","hash":"e1c2563a6d785aa5e30de423911d179fe79ec957","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/GBK2K-V.bcmap","hash":"d27b6916b7de1993464e5f33822f176fdc8e949f","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/CNS2-V.bcmap","hash":"c0870c3fad8349e3391ff7cda29d1f3a917e27f1","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/GBKp-EUC-H.bcmap","hash":"a8785a44403f130097ee9a23c3923d5af252ac51","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/GBK2K-H.bcmap","hash":"a36052b8b5d7dc1dde2b721437d6abc90ec7cefe","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/GBT-V.bcmap","hash":"2f0936e0bd4362f7c6f8c2b56642d6483366cd11","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/GBT-EUC-V.bcmap","hash":"9d6ef5fa295e3005d620904754d7cc16104be908","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/GBK-EUC-H.bcmap","hash":"08986b370ac27b60cf8cd7023c9e49f6b784b52b","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/Ext-H.bcmap","hash":"4b6a27e1125bb11bf9fd8fe9c5375f7781c95204","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/GBTpc-EUC-V.bcmap","hash":"ce125f52097c71fc83631577977ac267b8901c78","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/GBpc-EUC-V.bcmap","hash":"36004a6bedae0edfaea620a7d8f61cfb875f9640","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/GBKp-EUC-V.bcmap","hash":"717f6d6585184bfebb894e59868886ab8f3c38f1","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/GBTpc-EUC-H.bcmap","hash":"388eb76b53b008d90dfe68c1e3288314b21c3cdc","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/H.bcmap","hash":"149c08c0eadc405f6ba64adac9329fdb300d11ab","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/GBT-EUC-H.bcmap","hash":"e2dda44896a41f4fa817c5397f17894763b7623e","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/GBT-H.bcmap","hash":"62508bbc22bcd3795e4af2c7fa3cfddc71367813","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/HKdla-B5-H.bcmap","hash":"57ba02cf438eba88d2071bd99d1beb816b438b9e","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/HKdlb-B5-V.bcmap","hash":"3dc79100304f82ec559b70d120100f6ebe6ab5c0","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/HKdla-B5-V.bcmap","hash":"035e4064559dd56ceb0f06c3ac1c2e766aeffe62","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/GBpc-EUC-H.bcmap","hash":"5c34efa7cca4e2f652f81f4498fdf41db1b7b1e6","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/HKm314-B5-V.bcmap","hash":"3ef5f7e35ebffe68dea8ea757cdceac5b8151372","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/HKgccs-B5-V.bcmap","hash":"6f22784990eb168bcf9192e7e36de18e08927dfb","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/HKm471-B5-V.bcmap","hash":"2a6f2cc4d105f464432187daeff7b81040c093e4","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/HKgccs-B5-H.bcmap","hash":"dbaa1026222370fa6e3275c98e3bdb5ef3d37709","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/HKdlb-B5-H.bcmap","hash":"2be77ea4f4cd8a338ff7007d314773582f565efa","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/Hankaku.bcmap","hash":"dfc2f635dd66602f9978ae3fe72695a02e512a6a","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/HKscs-B5-V.bcmap","hash":"fa5b3a1f0b3ab6bd614f8a39c9ab80b203daadf5","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/HKm471-B5-H.bcmap","hash":"a75f2e32e5495d46e14b1d07ac124b3fc675ef1a","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/KSC-EUC-V.bcmap","hash":"4529ddac78c931d63411b6061b0af740b4c44ca5","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/HKscs-B5-H.bcmap","hash":"45f1793e771de030af89938eed23fff4c7daca3a","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/Hiragana.bcmap","hash":"10e7a0f20cde8865a1dd3086a89f2e96e330d1a6","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/KSC-Johab-V.bcmap","hash":"e68b770b37b591884c459d6ce3bb43bc4556547b","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/HKm314-B5-H.bcmap","hash":"cbfb65ab0cae690e7679a1769de521ea20fb6602","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/KSC-V.bcmap","hash":"22b097fd376c21e40a0f9392961be74acc316343","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/KSC-H.bcmap","hash":"42e15fbce70bdec4f7bb5b2cbd02b0efd8bc65fc","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/KSC-Johab-H.bcmap","hash":"3585accc6e6957eda55302393fd9c3a563db6cbb","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/KSCms-UHC-HW-V.bcmap","hash":"6cfeb36f492702aef5ce5b7671342291010b29e1","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/KSCms-UHC-V.bcmap","hash":"3de7c5c70cf172ff560a62d5dfe84a9336b4f5ad","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/KSC-EUC-H.bcmap","hash":"bc349367bb60b06af5fdeeec05047f596ac71ab3","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/Katakana.bcmap","hash":"da100ad00f2a9ba196892bfb4d6644ec828a4fcf","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/KSCpc-EUC-V.bcmap","hash":"1d3a11932c44a5fa8fa22efd2bd3dba7db9a2c8e","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/KSCpc-EUC-H.bcmap","hash":"3705fd3621117a7e5a3772c3849c5d69620ef08f","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/KSCms-UHC-H.bcmap","hash":"4e0ed017a2a41ee7bf6eacf0f7e6b40ae60d223d","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/NWP-V.bcmap","hash":"891a866c52b46e7526123799a829db24ac6cda4f","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/RKSJ-V.bcmap","hash":"16ae42a46e7eb92ca048fe24649b668c5103b4b2","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/RKSJ-H.bcmap","hash":"a4f7d5cdd13d3008cc42d82f69672d9e50a9d5b3","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/KSCms-UHC-HW-H.bcmap","hash":"d410341b19a6f05e0c20ea4a1a77078a3084044e","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/UniCNS-UCS2-V.bcmap","hash":"6b19ece5c921516431eb94d28d74080fdd7d35bc","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/LICENSE","hash":"1afb5991fce0d60110b5092b68bf9ff76b0c73f6","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/Roman.bcmap","hash":"5755781c7e9c50cc8192426d8733a506382b5fdd","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/NWP-H.bcmap","hash":"7d0f51c52d7a96bf289d0c6454d7e9dccf009c15","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/UniCNS-UTF16-V.bcmap","hash":"0f7152f2845cc2be4d3ce7e0e1530639ec4162e3","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/UniCNS-UTF32-V.bcmap","hash":"debaa98acaf13f341a5003856ef6a6a7df8f6e14","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/UniCNS-UCS2-H.bcmap","hash":"7f289b94c643b7cc43d4936078143a2347ca0fc1","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/UniCNS-UTF8-V.bcmap","hash":"019bd0716b2aa80bc1bcabfd389d3d5e1065ba8e","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/UniCNS-UTF16-H.bcmap","hash":"d73d55388c76932033915cea627bb628edad4f66","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/UniGB-UCS2-V.bcmap","hash":"f5853ca83c25b888c1d925e2a20ef44e064d064e","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/UniGB-UTF16-V.bcmap","hash":"1771376eef979ad42c2b5c01a1af1d34f54580b7","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/UniGB-UTF32-V.bcmap","hash":"8167ba503aa8a6c805f39be0ca538b99898a967d","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/UniCNS-UTF32-H.bcmap","hash":"a5872864e2b121c1df5068a54201ed166c69d5f1","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/UniGB-UCS2-H.bcmap","hash":"868238e34cb9548c4d138af1adc1a4bea62dec37","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/UniGB-UTF8-V.bcmap","hash":"e23616fa12132c73f52071b96e76d876430ececf","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/UniJIS-UCS2-HW-H.bcmap","hash":"97cbb8599cf62914885a8b2b47594865fff52099","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/UniGB-UTF32-H.bcmap","hash":"b9ea278eb4c324d12a81e2d62479548d1e7126cb","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/UniJIS-UCS2-V.bcmap","hash":"45396576a6bd5468a84e2c2e4ae64c23fe7f2e85","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/UniJIS-UCS2-HW-V.bcmap","hash":"f36bad9c680f4bba6cbcf8ac57f53e7ce21c806b","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/UniGB-UTF16-H.bcmap","hash":"28963866dfb575b58b4370e60ebd9bfb6e56ac09","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/UniJIS-UTF16-V.bcmap","hash":"44402b8f73e0b0160846b641e7cb2e75ab8c81bd","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/UniJIS-UCS2-H.bcmap","hash":"caf525125e29fa4de78088e5eb1785c1af1f9950","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/UniJIS-UTF32-V.bcmap","hash":"2f5ec2584fd7c39f455161a857550fa7fea5f53a","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/UniJIS-UTF16-H.bcmap","hash":"16499e93f0a447a94e1e44bfa9951401d290d89d","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/UniJIS-UTF8-V.bcmap","hash":"b3ea8d2172a2f6f9e73cf62ae467aa84848df6d7","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/UniGB-UTF8-H.bcmap","hash":"09cc7750f69da77434093e4c94211394f5665eda","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/UniJIS2004-UTF16-V.bcmap","hash":"2872cb273dab9d0dbb7f331826045df18764a7b0","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/UniJIS-UTF32-H.bcmap","hash":"bc482114d214e2fffe85dd0b7422f48c3e282c17","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/UniJIS2004-UTF32-V.bcmap","hash":"ef16ccb3102fc44c1d46f4cad40cfbdb020ee277","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/UniJIS2004-UTF16-H.bcmap","hash":"b8b0cc6779d3960426899fc2e7cf2866ffc80167","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/UniCNS-UTF8-H.bcmap","hash":"734ad1a00033d70c195c81358b643c7cba1327b2","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/UniJIS2004-UTF8-V.bcmap","hash":"565560a59d5174ac379a8d91f165c8ecdef54e06","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/UniJIS-UTF8-H.bcmap","hash":"f47956c1c7b2eadbda93aac25fe4546b413ec0a5","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/UniJISPro-UCS2-V.bcmap","hash":"b1a47305fa79afa19ab696d33af5099d35570c56","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/UniJIS2004-UTF32-H.bcmap","hash":"f48723212d1ad18c0b3c41168d6f630798e04160","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/UniJISX0213-UTF32-V.bcmap","hash":"dfbe3e295505977b4e1881ef30b80362d7406bbc","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/UniJIS2004-UTF8-H.bcmap","hash":"385ab762d03499d35539048176928e031e5340d1","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/UniJISPro-UTF8-V.bcmap","hash":"ed6b571aeed388d3b53b9e65824af3f0146a5857","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/UniJISX0213-UTF32-H.bcmap","hash":"15c953c36436d32f748ec7468a95c3e5843d70bb","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/UniKS-UCS2-V.bcmap","hash":"6743b3e07370fd49962b97d97be77dae8d18aabb","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/UniJISPro-UCS2-HW-V.bcmap","hash":"3f0a364246717707db82913593304cb7bd37c378","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/UniJISX02132004-UTF32-H.bcmap","hash":"c41dd50df01e3d3331f0acdb6da6c1b857a67cf7","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/UniKS-UTF16-V.bcmap","hash":"cfdbfbf0b0e8ef98fef6236ea570c73465da1581","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/UniKS-UTF16-H.bcmap","hash":"4f4603408966d9ac29a96c3a6755b9f23e7aa953","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/UniKS-UTF32-V.bcmap","hash":"73bd343b188a80471eb156655f5b192903f86cbf","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/UniKS-UTF8-V.bcmap","hash":"586c64948a67e4cb12de64e221b0dc3d9e47dedf","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/UniKS-UCS2-H.bcmap","hash":"50fcce1b2e3224791b480289e7c4c42938beb854","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/WP-Symbol.bcmap","hash":"3a6417abad460a1a083be75636c014f3a73937b5","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/V.bcmap","hash":"99790f12ca21a196bc1d836ae5bf0ad7af95e079","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/annotation-check.svg","hash":"015d03ffa6a0ce93b41ed93a262879e4f8cf72fd","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/UniJISX02132004-UTF32-V.bcmap","hash":"9c48a0c654acf4bcf51defde2f7d8b3ce52a063d","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/UniKS-UTF8-H.bcmap","hash":"8117d31e498a8f0fb7c223c4172ba881c0496c6f","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/annotation-insert.svg","hash":"7a12af74ef20d5249a0c330d992bd1132308cbac","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/cmaps/UniKS-UTF32-H.bcmap","hash":"6b0e98e16418fa5a86338b3fb361f1700971f649","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/annotation-newparagraph.svg","hash":"453ba47aa10b6fcf8459569e0a550b4f91260ec7","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/annotation-help.svg","hash":"2f3d88f4e8cefafc2d76932104f6b2517034af2f","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/annotation-noicon.svg","hash":"5a5447e5c39cf7ca748853a15dbd835ddaa3b5df","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/findbarButton-next-rtl.png","hash":"d02c4e9bf493dc83029098e59b6ece2363f3c760","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/findbarButton-next-rtl@2x.png","hash":"f9f2cea77208aa0e219f3bed69e22861c2858bc3","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/findbarButton-next.png","hash":"4bcb69c72d25d822dd09a3999c6972c0c311f04b","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/findbarButton-next@2x.png","hash":"dca2a1a3bdbe036735dda32e5ed909b029829a3c","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/findbarButton-next.svg","hash":"b8694ebb1f7f2f3691d52645a74d5a50a9b22ff3","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/findbarButton-previous-rtl.png","hash":"4bcb69c72d25d822dd09a3999c6972c0c311f04b","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/findbarButton-previous-rtl@2x.png","hash":"dca2a1a3bdbe036735dda32e5ed909b029829a3c","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/annotation-comment.svg","hash":"5ec875153d5046507050a3531422ca69b44680c7","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/findbarButton-previous.png","hash":"d02c4e9bf493dc83029098e59b6ece2363f3c760","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/findbarButton-previous@2x.png","hash":"f9f2cea77208aa0e219f3bed69e22861c2858bc3","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/findbarButton-previous.svg","hash":"585dd87195847bcce9b5b24450bf8c86d1248edb","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/grabbing.cur","hash":"f30d68405751e730ca94ada8628df45b4839931f","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/grab.cur","hash":"fbd667e863c8278950e7761aee54b394cd93ea0c","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/annotation-key.svg","hash":"d9224d3aef774d6ecc9735b440810ada4384be11","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/annotation-note.svg","hash":"6100deeb6121f98c7e024ec1a273171207c84c7f","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/loading-icon.gif","hash":"e043879d3ee94a3edf10260f21f44bfa4a6fc66e","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/annotation-paragraph.svg","hash":"70591a3b26c56815c6e5ab2bae959e8a951c43fb","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/secondaryToolbarButton-documentProperties.png","hash":"6f1e0ce52dae6af31bb3c5b09bbb33a33849fd08","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/loading-dark.svg","hash":"6beecaf20132520e63af2f7729110627aa513f4b","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/secondaryToolbarButton-documentProperties.svg","hash":"d2f45686a4d7687a02aaeaad1e3362a6464b8f34","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/secondaryToolbarButton-firstPage.png","hash":"453a575f2676ba39eacc71c074420d6c97c87a42","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/loading-small@2x.png","hash":"171aeb1a90c2836c639438fa85c64cd9d94b3516","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/secondaryToolbarButton-firstPage.svg","hash":"401049e3f24dd7d23d20153b84621c346101cb1a","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/secondaryToolbarButton-firstPage@2x.png","hash":"fd24d7a57e2a1205a67a11a760eb6dd50748da26","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/secondaryToolbarButton-handTool.png","hash":"8db06773a09e2f407bdf7ce448777398b40fd313","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/secondaryToolbarButton-handTool.svg","hash":"9b84882a6943b4e9d40cf85546099d1c5e13c5b7","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/secondaryToolbarButton-lastPage.png","hash":"6819bdd3000af84c50df1b10b55b3af33944a261","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/secondaryToolbarButton-handTool@2x.png","hash":"eb8a16519da1e074f9ed07e8a350a6b0d52e5339","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/secondaryToolbarButton-lastPage.svg","hash":"d4570550efe68c44e3a2e227d3254908e402f735","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/secondaryToolbarButton-lastPage@2x.png","hash":"2fb45311e8ee9658cc4276f1202ada9a55df774d","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/secondaryToolbarButton-rotateCcw.svg","hash":"29a312c7c98296b3b8c9fa4ef6a5669c49c7b2e8","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/loading-small.png","hash":"c1abf9b89af7392824f2228312785a899df224a0","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/secondaryToolbarButton-rotateCw.svg","hash":"23d341acd174c1864d35c7ce5e63dd83a331c74a","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/loading.svg","hash":"eed9fc8e8c5aa8a579804d130c705df4acfc7559","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/secondaryToolbarButton-scrollHorizontal.svg","hash":"f12f76653b9d5a5b87857c16f87ba321918a2b70","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/secondaryToolbarButton-scrollHorizontal.png","hash":"67ec12c5bfe0d933f62e1bdfb2154db263e24712","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/secondaryToolbarButton-scrollPage.svg","hash":"2cc72032c67c6a5e11dad56f266abb69c4946e0d","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/secondaryToolbarButton-scrollHorizontal@2x.png","hash":"0f23b007fe6be937bc1072737e60cf10e4b8c7e1","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/secondaryToolbarButton-scrollVertical.svg","hash":"e59336dafede013bf0dc2331c22841994638a61d","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/secondaryToolbarButton-scrollVertical.png","hash":"3509cb4c7f355106103aa663fdcfbba6143f1d96","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/secondaryToolbarButton-scrollWrapped.svg","hash":"6f08b682673d936d697c86b043cde478c282a14c","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/secondaryToolbarButton-scrollVertical@2x.png","hash":"a80753f432677766ba1cfbf3677bb9498998efd7","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/secondaryToolbarButton-documentProperties@2x.png","hash":"bd55401797e24ae5066afb9677dca1463e74c839","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/secondaryToolbarButton-scrollWrapped.png","hash":"4409af25572feb6ac02d9f0ddcbd5ea689b3dd05","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/secondaryToolbarButton-scrollWrapped@2x.png","hash":"8b0ebf82e3f20a7e6cd93ef80b4ac932a02512c5","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/secondaryToolbarButton-selectTool.png","hash":"f62d271d5403f35e372b2cdf4c892aac7d364665","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/secondaryToolbarButton-rotateCw.png","hash":"252e8a4adaf406c4e9c78033d8d8163333ce4c1c","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/secondaryToolbarButton-selectTool.svg","hash":"b22cd19d4eec18a106d35eb0629763f61e10bcd7","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/secondaryToolbarButton-spreadEven.png","hash":"d27a628de5e1a4ce508c39fcb496b50f3d2d0fa0","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/secondaryToolbarButton-spreadNone.png","hash":"a6648371ee01d687db409f5198f30dafaba76b6b","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/secondaryToolbarButton-rotateCcw@2x.png","hash":"84f034b57d24f7371d1a605bd12afa1f71b50f1b","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/secondaryToolbarButton-spreadNone.svg","hash":"6b438647d978f50657d3324065776843b7249e15","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/secondaryToolbarButton-spreadNone@2x.png","hash":"5833ee8fa2394db83739ddbb5f9f0f3f0d39709d","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/secondaryToolbarButton-spreadOdd.png","hash":"ff70929f97f54c2722e890a38070f749cefd12ee","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/secondaryToolbarButton-selectTool@2x.png","hash":"9a10930334b9a42429c967b77f8c7e705e31cdaa","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/shadow.png","hash":"b931e2de029146b2e1502ebd61c8160e72d6306c","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/secondaryToolbarButton-spreadOdd@2x.png","hash":"07f1a8754f63dbb8d480e0923328c9fc0336fd2c","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/secondaryToolbarButton-spreadEven@2x.png","hash":"616b232b0f166467d0c37315709508953fb79358","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-bookmark.png","hash":"0193cebc494facb8ba8733a1a8f50457e7189f56","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/secondaryToolbarButton-rotateCw@2x.png","hash":"f37e80bc600112fa88251e53e953f14946967e19","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-bookmark.svg","hash":"6c621d20fd62e2cab21e730606e41655bc90676e","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-currentOutlineItem.svg","hash":"c4b02b9875a01992715305bf3b2e2ece3506cb85","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-bookmark@2x.png","hash":"f822c6228ea6f9ad2ee5465ace31c725cf3289c3","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/secondaryToolbarButton-rotateCcw.png","hash":"548451d8a12570d66bce4c8922d8ccffb63ca61a","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-download.png","hash":"b25abd4a3c95097a338b8b138476e22189cb235e","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-download@2x.png","hash":"6c2ddead63c9a9ac3371bd7b8b8b914e2f81d605","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-download.svg","hash":"63f4143020019df8d607f01e6b22da86e93dd326","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/secondaryToolbarButton-spreadEven.svg","hash":"09b8adc28babb563f880415fae270b75c601975b","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-editorNone.svg","hash":"b22cd19d4eec18a106d35eb0629763f61e10bcd7","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-menuArrow.svg","hash":"49b82a1d7fc96cbe8793474c3c42ced5682cf50d","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-menuArrows.png","hash":"acbbc7071a0641a10e1d50991d1abbfa26b5dce9","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-menuArrows@2x.png","hash":"fdb29640d1f7ee31b09550163f85e01a70cebd13","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-openFile.png","hash":"6b17acd1c4ea6a9d9859819456952eff133f3cc1","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-pageDown-rtl@2x.png","hash":"445833e5eebdcc99270b879d0079bb54310f1615","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-openFile.svg","hash":"dc27ad6bc304f9256e1821e327187efe3adee5ea","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-pageDown-rtl.png","hash":"641a0e2d711ec06176c046d8efcdff670da876ef","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-openFile@2x.png","hash":"ae13be299d7c18dde70d975d0e229d3e20137afd","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/secondaryToolbarButton-spreadOdd.svg","hash":"d58e18af4c5b47b05f1c37f3658f6370df95537f","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-pageDown.png","hash":"6e10286da3a52e0bba782d0fc4a7c33d10c8f4b9","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-pageDown.svg","hash":"22883f1872f39254dce4979b43f786872dec7cd5","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-pageUp-rtl.png","hash":"0529bff456111ea1a264771afdcb2daebe68f79a","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-pageDown@2x.png","hash":"2b817130c3724f8a864845b03a142bd7e1cb61e9","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-pageUp-rtl@2x.png","hash":"1507890ff466f28f78ab7bd9f6eebfe2e4eeee8a","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-pageUp.png","hash":"b1eae4614fb964b6d0483f114f3dd2b49ec1b64a","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-pageUp.svg","hash":"e521b0bbe583ef9ba858071e5af0e1def294ffb7","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-pageUp@2x.png","hash":"9960af5e2ff7dfe8aba862d77305f409f5f1405c","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-presentationMode.png","hash":"3d206e303f9663dca95482df9abe55a08851c574","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-print.png","hash":"77463c425966b8a298a2d87863533e68092676bc","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-presentationMode@2x.png","hash":"c2d54d6f77f831963132555599e7314d4f07b49a","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-presentationMode.svg","hash":"f7a2416c2ba73a78b99ec3ab2ea546df86195a47","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-print.svg","hash":"c87e531fcafc7347b4c163b2923a10fa9d56a329","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-print@2x.png","hash":"7577a46df5fcc89846737010a14878bffa85098e","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-search.png","hash":"14c3ef60d3979df9e8d13cf39cad10ed043f5578","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-search.svg","hash":"0ef58f82497562def0aec5ca59d8cf4a9d247070","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-secondaryToolbarToggle-rtl.png","hash":"990118984a946a8c63d95fd1a8d8af848383118b","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-search@2x.png","hash":"25c50114436d8d598416a5c3eed9e1db282c43b3","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-secondaryToolbarToggle.png","hash":"6cedbeddac0d6191afe09cabed7b6d517f7c7b21","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-secondaryToolbarToggle-rtl@2x.png","hash":"51055db76ce1e9935fa3d91aaece874c6da14147","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-secondaryToolbarToggle.svg","hash":"4fe70d9c98f2bf33b8ca096378e3037dd8f89fe1","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-secondaryToolbarToggle@2x.png","hash":"6f1dca07696408ce28da5621ebcac57d0b2031a5","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-sidebarToggle-rtl.png","hash":"422b5ed725be51f60e6339da94e0c959ad67990b","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-sidebarToggle-rtl@2x.png","hash":"29eade71266a6c4b1048eeacb1c29411435bdb41","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-sidebarToggle.svg","hash":"36051f39c70897a381250c1a247523e128ce4f3a","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-sidebarToggle.png","hash":"ff7ef30371233abe8c548c2f3d5cbb335183ca92","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-sidebarToggle@2x.png","hash":"04c42cddc1e2bdd5130c6fa477ff3fa594edda56","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-viewAttachments.png","hash":"53c5a0c4c40f5f47fb6d2f57a82a4a6d0a83feb0","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-viewAttachments.svg","hash":"4fa65284ff8194045f100794e1d6cd0cb5e5fa84","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-editorFreeText.svg","hash":"f37e39c496ba6dae5c7efda8e60c047d390976e0","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-viewOutline-rtl.png","hash":"e6214527b9354eb920cbec85e6fe4e1296b7ae15","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-viewOutline.png","hash":"ec7aa605c063faf6a951c2d64a8d98933b60f6a4","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-viewOutline@2x.png","hash":"76be930d871fbd1ebd6c4d76c4fa325f32efc624","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-viewOutline.svg","hash":"fc1dbb0d6ca5a4bd5e51b64d61f35423d145ef9d","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-viewThumbnail.png","hash":"f62aad7c7719300f1d8e922155f451661d41d42d","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-viewThumbnail.svg","hash":"94d128518c79b50977f9a595c937702bb12df5e3","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-viewOutline-rtl@2x.png","hash":"6684f9d7964446ec66a8f3865445892187d16d21","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-viewThumbnail@2x.png","hash":"ececa7ff064700efde72fa1e3889c8a1a3073dbc","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-zoomIn.svg","hash":"dfde15786e30d5e96cba282f3b67c0f7a3b24ae6","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-zoomIn.png","hash":"838adbe15d84daceec25cfd4d8d6ac1580b4f693","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-zoomIn@2x.png","hash":"5403ddbeed138cc733020c352ae3bcd8cac03bf7","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-zoomOut@2x.png","hash":"4006d4387f2b0a0f0856d691a8874f74f61d0f51","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-zoomOut.svg","hash":"ebc21e5385e4636b3842ce8d629f31b8065dd17f","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/treeitem-collapsed-rtl.png","hash":"7c2ff883f666ac379b04d0d41e3e6ddb14ddf220","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-zoomOut.png","hash":"63a719d5e6a708a22014f20abc0722cd54ffb0f6","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/texture.png","hash":"230a3d5e2dfacfa7228f58a559de5df3734118f5","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/treeitem-collapsed.png","hash":"4588ca9c86db15c10de4de3f340111d4ce211ebd","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/treeitem-collapsed.svg","hash":"5b10744cb6d843f08b492fd10328c9cdb521ec14","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/treeitem-collapsed-rtl@2x.png","hash":"0465b8f9e77135e2bddd5708d425d5e1fc4ab63c","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/treeitem-collapsed@2x.png","hash":"3229d96b4fa4d7e5c26fc135264d134e1024baab","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/treeitem-expanded.png","hash":"b0b4bca3d9bd0949da19a56214143db18f2a4f69","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/treeitem-expanded.svg","hash":"f7791f5b8486039bfa9efbefe97de4ee4364a342","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-viewLayers.svg","hash":"3988264f3b30f0e402717954eabbc692f8cb6d98","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/treeitem-expanded@2x.png","hash":"bf924ff993236e563dab83b41193bcb43120c0b6","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/images/toolbarButton-viewAttachments@2x.png","hash":"eb96df312c7ff6fc0451795bc0de8ebadb72cf86","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/standard_fonts/FoxitDingbats.pfb","hash":"b287e74c6f65296d869f378a9dd73a0c807bac05","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/standard_fonts/FoxitFixed.pfb","hash":"4243340cbc644f355235a3f1232a5f82290ffe87","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/locale.properties","hash":"1c71e3dd75526fd21153e08b326ad9d43fc81d9d","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/standard_fonts/FoxitFixedBold.pfb","hash":"15c97093fbb707e1e03967b6a0ffdbcc66065949","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/standard_fonts/FoxitFixedItalic.pfb","hash":"b90b3fb18da41df7b48f7b9c8ddad0f9e3d86d2d","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/standard_fonts/FoxitFixedBoldItalic.pfb","hash":"bed3edc3928927aecb35f491da7bceeeac14b007","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/standard_fonts/FoxitSansBoldItalic.pfb","hash":"676e6bc6d51687a3f63894a88ebeeaa1ee45346d","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/standard_fonts/FoxitSans.pfb","hash":"3043cab781d200d01eaafaf8603454c0264257fd","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/standard_fonts/FoxitSansBold.pfb","hash":"8b2bbff75cd15b43a02e3589ca651f1acd0e7189","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/standard_fonts/FoxitSansItalic.pfb","hash":"0179dbae25be75617a9de06a4c07bbdf8bbf30c1","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/standard_fonts/FoxitSerifBold.pfb","hash":"025fee3fb98e6e65f2e7c58db5e367da8f2569d9","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/standard_fonts/FoxitSerif.pfb","hash":"be4ddd22a9efdbe42924aea16daccf3da27e518b","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/standard_fonts/FoxitSerifBoldItalic.pfb","hash":"b402fc7a75ec07247dcbb4d3efbdd34538f24b21","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/standard_fonts/FoxitSymbol.pfb","hash":"8dc16c6d3995399ad7c8a939525aef0998c31fc4","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/standard_fonts/FoxitSerifItalic.pfb","hash":"707bea637bde49070f5f3418593b0a78a93e9bb8","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/standard_fonts/LICENSE_FOXIT","hash":"689c532308da601d10beba61b6672b0c16dc3b48","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/standard_fonts/LICENSE_LIBERATION","hash":"0898cb73de9283d38e6f4cef45ce79efbfafb0b2","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/ak/viewer.properties","hash":"7b32cf30fd16432bc4050919607659c5e7ac7fe3","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/af/viewer.properties","hash":"09e287d8cb1244d2b2a74a9914459dfdd22bfefb","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/ach/viewer.properties","hash":"fb06aae5eb2c5edacadb44f735838524c3ea262e","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/ar/viewer.properties","hash":"7c69db7db0a85ce83e671a85813bfb5268f60fbe","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/ast/viewer.properties","hash":"a8c41d889165b7db1c3d1e0c1df4de8466f8a3fe","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/an/viewer.properties","hash":"0232ee1041776e13ce4985862bdd8ecae5d5c84d","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/be/viewer.properties","hash":"15a9018d857dcd3272d51c117a2a5dffd3822239","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/bg/viewer.properties","hash":"311fe5cd6e27a4f330f3e3a871d1fabe67f1f3be","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/az/viewer.properties","hash":"a7d61446c0c4ba43374aec9158c2012713d4c319","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/bn/viewer.properties","hash":"cf91d390d8bf10b6bcbe75703855a8cabeba6bea","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/bn-IN/viewer.properties","hash":"4b5286d177fba02adf8aefef7238c202fc7e254a","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/bn-BD/viewer.properties","hash":"684f603efdd31daf880430192a327bd3ac4bb3d2","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/br/viewer.properties","hash":"14fe8b3bbad161c0324b11ce37e7c3232e612703","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/brx/viewer.properties","hash":"00782e18219249d84776906d93ce8e7984db48a7","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/bo/viewer.properties","hash":"7dd11a4e2f72263f3ff2e6be0929639ba5ffb98e","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/bs/viewer.properties","hash":"ea1e26b9dbb320547d91999e9506683e3eeaee1a","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/ckb/viewer.properties","hash":"f1db6c26e64fc5884b8dd2aaf93d7bd3c568175d","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/ca/viewer.properties","hash":"758c792e39db9b4bb7b542451f1887268237971a","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/csb/viewer.properties","hash":"17e840af72cb4451a586e70f5a7c7bfeb9c20683","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/cak/viewer.properties","hash":"52e9a13f4ab50771f300b82e39901b8795ccf513","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/cs/viewer.properties","hash":"e8b49c0dcd848ec04a23324c48dae101ecc44a35","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/cy/viewer.properties","hash":"303a1b75e7503a9cab33f983613fd2637419f6e3","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/da/viewer.properties","hash":"5e7e4916cae49eef478815dca65f54ca97a9b34c","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/de/viewer.properties","hash":"4c8172d23f5908581f11797faec6beffae1e33bf","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/el/viewer.properties","hash":"5d7ffdbc093bbba1438041dc3971288ebc1e8d38","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/en-CA/viewer.properties","hash":"898ae4827c8011733caf5bedfcd6146266d567f7","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/en-GB/viewer.properties","hash":"b81c489c056b66ef195bc9d35474dcb8f5ae38ca","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/eo/viewer.properties","hash":"3672fc339fa8a2f05c47eb7442db99671e1904f8","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/dsb/viewer.properties","hash":"0ef40246352dc7d4b5ad1df3b7616d5ff93595f5","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/en-US/viewer.properties","hash":"6932f8b4a0f42566b3f482da533d63a0b9b0bfd2","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/es-AR/viewer.properties","hash":"fdcd38071a8026f209f9dca1e070d5853eafb007","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/es-CL/viewer.properties","hash":"55dda1dfc7aebc2bbecfdd4b9787313587c0f500","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/es-ES/viewer.properties","hash":"03f9abc00089375eb6dccd79b0b6177dfdc56e34","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/eu/viewer.properties","hash":"7791f8e8a4c3983408f10d924feb10e7daaba8b8","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/et/viewer.properties","hash":"60076dadb2c3e0fecf1d63c31ce1b67efcaf7d73","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/es-MX/viewer.properties","hash":"80a7085f4e0d644dfbb83ea0bfff38acc6ffc942","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/ff/viewer.properties","hash":"0cb3017a2fa0cf2fa618ad21b3dbc679a172e80f","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/fa/viewer.properties","hash":"3f2c6b515108a49fe4ba9a96d9bc1c043345ef4d","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/fi/viewer.properties","hash":"3d2e104d7a70473b1a40c3c5a3704c2e5871ffd8","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/fr/viewer.properties","hash":"8061cc86f5dd83bf6d5ae217baf576180e8e8f8e","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/fy-NL/viewer.properties","hash":"2ad529593306f66ffa887bae1100748ce9a91391","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/gd/viewer.properties","hash":"93b49bcb19abcbfe5a4e3c6d7e03598683e7b546","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/gn/viewer.properties","hash":"b2941032d00a8391e60b33e5560a2e5d5cf06161","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/ga-IE/viewer.properties","hash":"2d50534d61bdf87c081db49f197e3cbbea08e591","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/gl/viewer.properties","hash":"ec26d3c005842658de1bc46e5f1f0383da6eba8c","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/gu-IN/viewer.properties","hash":"bdd55c9d5d6f153fcb223d45640c925882c1e682","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/hi-IN/viewer.properties","hash":"5e7ebdbc64a986a2d1e0a928a5b39542ba5b4956","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/he/viewer.properties","hash":"77c7407d24082b394d80d389b7bbd169a0ced2b9","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/hto/viewer.properties","hash":"4e6fc5d6b807cfe56ccca952a01c4630670f63f8","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/hr/viewer.properties","hash":"527f33cb21da88c1012f5996b72e0ef2058190fe","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/hsb/viewer.properties","hash":"5291bfa178826807de11c18a29eead654ad58957","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/hy-AM/viewer.properties","hash":"8b8098fe0130f696dfd63f7c086171aca360686d","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/hu/viewer.properties","hash":"df7111800799adc97bcaa26ec73b9a02665c909c","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/hye/viewer.properties","hash":"cf3289e25feb1b1a0e82d97dca1806afd057b1af","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/is/viewer.properties","hash":"bcd93e8c6126a446c12cb5018218830eb9fab955","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/id/viewer.properties","hash":"95b255531d23fca26b62d1c29f9a5aafa3b8a83e","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/ia/viewer.properties","hash":"27a7ef22c81fb19c3dc7ea2344093c998d559109","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/it/viewer.properties","hash":"1bb8fdfe39ec91f82756a8576bfdf87748dac678","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/ka/viewer.properties","hash":"5763428805f9f5f665cefbc179cc1360da4b8986","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/ja/viewer.properties","hash":"a89d40c958f05a3661e4ca60f3896218dfe167a2","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/kab/viewer.properties","hash":"3b8425c444145b7d92074a20b2250cc34d956b90","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/km/viewer.properties","hash":"0383eb630e4bde2775ba15219ce217ac39c87f50","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/kk/viewer.properties","hash":"b2b4ed2ef02a1b6a08a7b13b71db35cc191b2d1f","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/ko/viewer.properties","hash":"203a7fbebf139ddfd90710bcd3cc33dc2125ac8e","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/ks/viewer.properties","hash":"4805e2e3aac56f9559516125daa1dcc6bc214875","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/kn/viewer.properties","hash":"a3a5bc6417bd932212edef06eea090cbcba72619","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/kok/viewer.properties","hash":"d887d8a052a35be54159f58f7243372dbf7ec258","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/ku/viewer.properties","hash":"46739e80d58ab8559ccfb21d6b0692a37e16e6a9","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/lg/viewer.properties","hash":"18c1b9f7ca30c648bd31e31b15d16c876242ee73","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/lij/viewer.properties","hash":"351a39dcb36dff47c82f424b908fb29d21c78ffd","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/lt/viewer.properties","hash":"ea79f133b2800c2592f977cd57bf75e6d4fd5571","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/ltg/viewer.properties","hash":"db9fc0c02dd9d4dce89a7c0d070a9e88558407e3","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/lo/viewer.properties","hash":"a5450f863424a88fa5ba7001f60153390f60ac4c","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/lv/viewer.properties","hash":"1f74076f999ed90917c1398cf2c28c8dceda27dc","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/mk/viewer.properties","hash":"449da585f230430ac0e688271753a641a8f61d0d","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/meh/viewer.properties","hash":"d472059016f2cfb00d40fbe87c4f9680ea364605","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/nb-NO/viewer.properties","hash":"14b8942d97880be8b3ccadbbf0153836ef02179a","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/mn/viewer.properties","hash":"7986acd89509d0467129b71ce25922ecfbd4817e","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/my/viewer.properties","hash":"b2b4cb289884a1614b9948f33be9e899ab0ef193","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/mr/viewer.properties","hash":"9e1df86d6071d3b64e45bab19587254c7ad712ef","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/ms/viewer.properties","hash":"6d0562ac946b3b1c2a89a3514e8fd6ac5c211d36","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/ne-NP/viewer.properties","hash":"5ecde4da9519270ceed8805b4ab452469c7e5e9c","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/nso/viewer.properties","hash":"176afe940078cca679275adf9dbc1ca1d6e8f7ce","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/nl/viewer.properties","hash":"0abecc944e645337e64097e3c9c671f0e94e8349","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/nn-NO/viewer.properties","hash":"5efba4bdcd063a0f0b35f6fa363db70ba8737766","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/pl/viewer.properties","hash":"056b6317752f15a6efbd365a37242242a6458993","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/oc/viewer.properties","hash":"9ac8dfb943fbdbbb07d534657843f2038861726b","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/pt-PT/viewer.properties","hash":"a346c79dc339f74dfd260e1e370b869f2374f13e","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/pt-BR/viewer.properties","hash":"d06a2a6bb84d823c3b255cba30ba54086180a37c","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/pa-IN/viewer.properties","hash":"5ff1d12d7a5e6d1603ac97dc75a296a664d9596f","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/ro/viewer.properties","hash":"d0fe03723b7bba7b6a21480b209107fd8e0ad0d6","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/rm/viewer.properties","hash":"2a4c5e6ffaa0c7f879dff4dcee663f0bdd8c0953","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/sat/viewer.properties","hash":"7b22fe1b964610dcb3ebaa739e3b2581041a3650","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/ru/viewer.properties","hash":"f5e90bba295f6dc32813a4cc78caaeeab3ecaf37","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/rw/viewer.properties","hash":"7d96bc96802f37a1c9ead373524a425d08e1dbcf","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/sah/viewer.properties","hash":"ef69f15f4aa8ffcd0292b67519495ac962f0a846","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/sc/viewer.properties","hash":"04d5006a06ed525470347a5f43cbd6d6fc15e986","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/scn/viewer.properties","hash":"591b7ddd7a61c15d2bdeb04b1c1bf42120afd259","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/si/viewer.properties","hash":"4f2bcbf3f3ae489a4d2e9b6fba546c3def8b1258","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/sco/viewer.properties","hash":"b81fc46a79a6f5c1e4a91c7859eaf826a65256bd","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/son/viewer.properties","hash":"fcaa12e20d2a5e095209be90f3e3bc8b0353f641","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/sk/viewer.properties","hash":"d1b475062aafef82e266bd30ac215b465e8727d6","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/sl/viewer.properties","hash":"3863b03f0bb7f797225dcbde233228019461feb8","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/sq/viewer.properties","hash":"aa8e1b99ee96970b92eca7be528a80b4ba974b2b","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/sr/viewer.properties","hash":"c0ec1a6edf9fe3221c0f789ffb39935086556f37","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/sv-SE/viewer.properties","hash":"bb2cf19398972030cc6b12eff21ce128fed09230","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/szl/viewer.properties","hash":"b2c4eec446f4c5574abb0e793b9b24dacf1f9fef","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/sw/viewer.properties","hash":"7e5b770e8155a7465f77d1b2d7792fa22e50bcd0","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/te/viewer.properties","hash":"a8cab4a7103f7ab287b908d23bd56007a605b101","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/ta-LK/viewer.properties","hash":"646e2182307793f70a61584fc436886c946482c4","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/ta/viewer.properties","hash":"7cfffe15ed884fe6bb8e4e40cafd94cd39a1c662","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/tl/viewer.properties","hash":"1239140dd1cec75f0f51500dbace90801d4b4b3a","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/tg/viewer.properties","hash":"264297c7eea370294542e192b7e066ed83c8963d","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/th/viewer.properties","hash":"3f206bc254a1f7052724cb92ed384e1bd824aa23","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/tr/viewer.properties","hash":"de9206e244b2bb16afb033fca1a5319401be8484","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/trs/viewer.properties","hash":"7ae6dcdd1cf0086b0ff34b71a93c98d1e288ceeb","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/tn/viewer.properties","hash":"b1839a14243baf851f7811e5be779d8e0e147105","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/uk/viewer.properties","hash":"3fb3b7a5c673d9b8fbe48e923799ec55592ccbe4","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/wo/viewer.properties","hash":"8eca0d656382b5700ae9c4dc7ce2966a447a5cd6","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/ur/viewer.properties","hash":"13c800761e850a0fed9aa2d278788bb9495707c4","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/tsz/viewer.properties","hash":"0e3086f1dea298a35dcc91dd78d5a24250f1c908","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/uz/viewer.properties","hash":"f1336786d9a58ec0efd21d8fe2b24f441371f613","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/vi/viewer.properties","hash":"3b6d9bf102a9a21be734196e73a3b61d9a3fbcdb","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/xh/viewer.properties","hash":"42754d8bb590df3fdc8e97ee37fefc742d63dd60","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/zh-CN/viewer.properties","hash":"bd02fa1cbf501285b53a90dbb9f821db79655642","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/zam/viewer.properties","hash":"a186e34704f3a1ba4cbf22fce81c576ab6487ed7","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/zu/viewer.properties","hash":"1c283ba7792aa61cad501198bd8e4d7b13fa5bb3","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/locale/zh-TW/viewer.properties","hash":"c8748fcbb1ee6d290776b685a7b8bc099e30dcf0","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/standard_fonts/LiberationSans-BoldItalic.ttf","hash":"47bc338b0f4391730b53309ca2b678759b1f2230","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/standard_fonts/LiberationSans-Bold.ttf","hash":"39a96b7556af673263b834fe2e10f3dea0653695","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/standard_fonts/LiberationSans-Italic.ttf","hash":"b48affb96d48e277aae21aa80e18fa41b12abccf","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/standard_fonts/LiberationSans-Regular.ttf","hash":"e8b7fa66057ae41dc3e03598211fcbca7744b495","modified":1654389308000},{"_id":"themes/next/source/404.html","hash":"00366e4b691a0fbe98d8ccf8d663b9435a578181","modified":1677310114768},{"_id":"themes/next/source/lib/pdf/build/pdf.js","hash":"1dcf42e1a0fc5243453c510d286607ef0b723fb4","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/build/pdf.sandbox.js.map","hash":"abdad760258ae7093e46d99adfe10693024180a0","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/viewer.js","hash":"4cb3c481ce9c86593a472214b40b998c8dadb90a","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/build/pdf.sandbox.js","hash":"df6212fb1ad533e9f1c01741218f3c0d7353ab53","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/compressed.tracemonkey-pldi-09.pdf","hash":"0d281938d3ff2377541704cab6ba1c4408420733","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/build/pdf.js.map","hash":"a1e2eec1abd964901bc47d93f66a62b910841fd3","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/web/viewer.js.map","hash":"0595d22d02407e695235cfadabe91c29b79cd835","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/build/pdf.worker.js","hash":"87900bec0b51349b81fbe87e3b1c31e33235d151","modified":1654389308000},{"_id":"themes/next/source/lib/pdf/build/pdf.worker.js.map","hash":"4146e6ec57e05f5946bcb54217ea876a89887406","modified":1654389308000},{"_id":"public/baidu_verify_code-O2ehcy1PsR.html","hash":"4148480688855601858f3f3b8a602d7f1a428f78","modified":1677233155225},{"_id":"public/google7c80d6fa20e2e726.html","hash":"178417627f6f5fd14a401bd0bc3fee5fa86972c6","modified":1677233155225},{"_id":"public/sitemap.txt","hash":"c65b351699297779e10c22cc4fb3211c2790dd58","modified":1678852700574},{"_id":"public/search.xml","hash":"03ea6dea84f10f30d8c167db22bf0432cb17afb5","modified":1678845444231},{"_id":"public/sitemap.xml","hash":"d3624ad926711d2c283fbf7f46cc6b4f4318baf5","modified":1678852700574},{"_id":"public/tags/index.html","hash":"1fe28cc998b02bc50cfdfdee9d09b97f3bb6cccb","modified":1678852700574},{"_id":"public/categories/index.html","hash":"45ea87488bd179eeb992038eb8487433aa2e259a","modified":1678852700574},{"_id":"public/post/Orita-about/index.html","hash":"cd071707862eab0f6ff9b8ea1dcf6b179888d80c","modified":1678852700574},{"_id":"public/post/retirement-record/index.html","hash":"9b9311079935e06d69b0d8549385b369f19109af","modified":1678852700574},{"_id":"public/archives/page/6/index.html","hash":"f4ecd4ef048089e2f1e5dceba4f3e02a93c4a5d0","modified":1678852700574},{"_id":"public/archives/2022/03/index.html","hash":"0c66241198d13c93fb7c84b3aea2bdc05358b24d","modified":1678852700574},{"_id":"public/archives/2022/04/page/3/index.html","hash":"74c67dd6a8688231a1f114da0ba55a13f5ec0ded","modified":1678852700574},{"_id":"public/archives/2022/10/index.html","hash":"c9091eebdb1adc0b76fec336cd5bad86a42274b3","modified":1678852700574},{"_id":"public/archives/2022/11/index.html","hash":"f24aaa85ab15497022e9e33f8ceef349f783e9fd","modified":1678852700574},{"_id":"public/archives/2022/12/index.html","hash":"6f0f42897de89cc060d5a18c11a50b4eb8976f5f","modified":1678852700574},{"_id":"public/archives/2023/index.html","hash":"ca1bbd630e9e5ee24f32289f7d5e4ecb08d06dca","modified":1678852700574},{"_id":"public/archives/2023/01/index.html","hash":"a8cfc8c0b9e846e1b027f3474f6a109c2604a13e","modified":1678852700574},{"_id":"public/archives/2023/02/index.html","hash":"97d6b546dc2742f63977198a46faa73d4953ac2b","modified":1678852700574},{"_id":"public/tags/字符串算法/index.html","hash":"3b9e88af42cd838aff2c8384f29794aa63d848ed","modified":1678852700574},{"_id":"public/tags/AC自动机/index.html","hash":"97f8fc0c60f7f889b31f15d51de5842ba0ddd01a","modified":1678852700574},{"_id":"public/tags/平衡树/index.html","hash":"7e57abee9fd9694afaad633b4055de2131aa92f1","modified":1678852700574},{"_id":"public/tags/动态规划/page/2/index.html","hash":"cad7db7eff93e12b67a388a1b97505622a3b1297","modified":1678852700574},{"_id":"public/tags/单调队列优化dp/index.html","hash":"d0118e5d1e4bfcb2f8040119c2dd712715da85eb","modified":1678852700574},{"_id":"public/tags/CF/index.html","hash":"b2aec1a60764393d78944086600c13fb4714f796","modified":1678852700574},{"_id":"public/tags/Orita/index.html","hash":"20c7b527de35e63aa5bdc0a8692e69d3c57a60e9","modified":1678852700574},{"_id":"public/tags/背包/index.html","hash":"54a0d99ab0008b110e7f9b954338de1c4c178476","modified":1678852700574},{"_id":"public/tags/可持续化线段树/index.html","hash":"d7b7d34e9b1a95bd9cc0cb191f9d609d8098692f","modified":1678852700574},{"_id":"public/tags/主席树/index.html","hash":"1cd894ed041569cebfb0ca0e0067d40d576062fb","modified":1678852700574},{"_id":"public/tags/NOIP/index.html","hash":"939405f556a8961a38a3c15a29a983901bb14f66","modified":1678852700574},{"_id":"public/tags/四边形不等式优化dp/index.html","hash":"00333a7e5a0600826d24312391d06ca323226a3e","modified":1678852700574},{"_id":"public/tags/扫描线/index.html","hash":"350062a99daf91e32f1a3e1416cdf2b28de49153","modified":1678852700574},{"_id":"public/tags/线段树/index.html","hash":"b2c671c45d69e23ed134a9a3dfe8033f361f414a","modified":1678852700574},{"_id":"public/tags/树/index.html","hash":"7614fcda40c1d7e52952784201eaa8e9e85d98ba","modified":1678852700574},{"_id":"public/tags/树链剖分/index.html","hash":"0ff96491f117154a3fb9e3b092c2fc4e5d39e2a0","modified":1678852700574},{"_id":"public/tags/上下界网络流/index.html","hash":"ca105b51829d6d669e7cdba3d4a8bf587d645b9a","modified":1678852700574},{"_id":"public/tags/游记/index.html","hash":"2feeb14f22024a9df807218107624a88016eccea","modified":1678852700574},{"_id":"public/post/CF1495F-solution/index.html","hash":"bfbf4e539e449607a3e74113eca16fa133cb1644","modified":1678852700574},{"_id":"public/post/wc-2023-travels/index.html","hash":"1e42802e679c9a43caf79b4ad7fdad44b0b77ddf","modified":1678852700574},{"_id":"public/post/noip-2022-travels/index.html","hash":"e466e8729bce7769776d8b6baec9b9f8b18a97ac","modified":1678852700574},{"_id":"public/post/csp-s-2022-travels/index.html","hash":"023afd6d7e3019a0dee385e0bf545c6bf8ba6698","modified":1678852700574},{"_id":"public/post/Quadrilateral-inequality-optimization-linear-DP/index.html","hash":"a12292381931199923dc0bc15941ccbea062221f","modified":1678852700574},{"_id":"public/post/P3356-solution/index.html","hash":"1f7a1fef2301a749e02d37ef40f87c57444afa46","modified":1678852700574},{"_id":"public/post/minimum-cost-maximum-flow-problemlist/index.html","hash":"831333a52f5d35304f6663c99deefcc4d537095f","modified":1678852700574},{"_id":"public/post/P4012-solution/index.html","hash":"f36f49c5aeaa12bf092ff66052dc615f8ad6114e","modified":1678852700574},{"_id":"public/post/P2604-solution/index.html","hash":"4ed4cb5348a4ec6c4ab315dec40b67248388d27e","modified":1678852700574},{"_id":"public/post/P4014-solution/index.html","hash":"afd8c18e7020c03409655d9e527a6f3edf2984a7","modified":1678852700574},{"_id":"public/post/P4015-solution/index.html","hash":"e1a42b53b48b67aa8ae10f6eb03795315ba90ef4","modified":1678852700574},{"_id":"public/post/P1251-solution/index.html","hash":"86f9b3275bb78163b392d7e3b6f97f83c4645939","modified":1678852700574},{"_id":"public/post/Tree-chain-subdivision/index.html","hash":"4bb365b4b9cb5ec6d4cb70471f5f98d780f86a63","modified":1678852700574},{"_id":"public/post/minimum-cost-maximum-flow-Dinic/index.html","hash":"fca5f4f9fb8d4d7ce814a2fa007af647d509d09a","modified":1678852700574},{"_id":"public/post/P5030-solution/index.html","hash":"21dd9981d860900389ac18e6750a8e98b96023d6","modified":1678852700574},{"_id":"public/post/P4304-solution/index.html","hash":"0f37713f3d71a919af612f3cedf6bb462bc957f0","modified":1678852700574},{"_id":"public/post/P2774-solution/index.html","hash":"ee94a4a538389e282e462ba86d6e593d16c9b59c","modified":1678852700574},{"_id":"public/post/P3355-solution/index.html","hash":"41d72ad39996e03fedadcb29549a9dca5a769d26","modified":1678852700574},{"_id":"public/post/P2472-solution/index.html","hash":"99a11d8420de9b992fb4c5ee2f7184537a8e50f5","modified":1678852700574},{"_id":"public/post/P1402-solution/index.html","hash":"dbba767b42fce2b24cc4a27448cbf5aeb91c606f","modified":1678852700574},{"_id":"public/post/P1231-solution/index.html","hash":"dc20bc2f1c7b6938a1c70e9e952feadf537661f4","modified":1678852700574},{"_id":"public/post/maximum-flow-problemlist/index.html","hash":"f56b52f1dc6378bab390e4d4425e025c57ef4754","modified":1678852700574},{"_id":"public/post/P2754-solution/index.html","hash":"5f331e236cffad91d4697290a9fd5965b8835761","modified":1678852700574},{"_id":"public/post/P2763-solution/index.html","hash":"b64f64bbd529318b22558879dafeea10ba7f5131","modified":1678852700574},{"_id":"public/post/P3254-solution/index.html","hash":"7cfa4c0347741c4a1abcd693b8c4c36abb805881","modified":1678852700574},{"_id":"public/post/P2936-solution/index.html","hash":"3ff00abf384a299ddfc67f62aedf601e886bf0c0","modified":1678852700574},{"_id":"public/post/P2740-solution/index.html","hash":"c097fb4e8c058fcc337a2648a8f8647df3f0fe92","modified":1678852700574},{"_id":"public/post/P1343-solution/index.html","hash":"5aef773f4190c8723fcc2c73c97fd58ea77913f6","modified":1678852700574},{"_id":"public/post/P4360-solution/index.html","hash":"fa7769101dd72aa3fccc513e83ffc347185339fb","modified":1678852700574},{"_id":"public/post/P5785-solution/index.html","hash":"6fcae3f18a217cc2d7657be103b3adc7ce25350b","modified":1678852700574},{"_id":"public/post/Slope-optimization-DP-problemlist/index.html","hash":"3d5860580a443e031b23d0b7a45a241940b69069","modified":1678852700574},{"_id":"public/post/P3648-solution/index.html","hash":"e96c62d7ac412ea348ab7d7c15a3f3e9d1b92c4d","modified":1678852700574},{"_id":"public/post/P3628-solution/index.html","hash":"019076372e049261d02c77c1d5d34b8a985a28d4","modified":1678852700574},{"_id":"public/post/P3195-solution/index.html","hash":"e91f465baf1c4f0b1233afaa8638e3707b683563","modified":1678852700574},{"_id":"public/post/P2120-solution/index.html","hash":"9c7e6a76ff1b68d9419f7e18fc5e5b63efc139d3","modified":1678852700574},{"_id":"public/post/P4072-solution/index.html","hash":"3e3228265f602959ccd966de5d4121c81c0d0f1b","modified":1678852700574},{"_id":"public/post/Slope-optimization-DP/index.html","hash":"5480915a941f9f2df3c66a7d3f4077b50446b4e0","modified":1678852700574},{"_id":"public/post/Monotone-queue-dp/index.html","hash":"268f78e6d456b4b4cc8e0945d405ae165c9d17e6","modified":1678852700574},{"_id":"public/post/P8251-solution/index.html","hash":"dd97a8a9e9171ec1c834a6464c984446aab86768","modified":1678852700574},{"_id":"public/post/Balanced-tree-Splay/index.html","hash":"25cf10f6dafeedf07e58599ea511cb72ef53c6ac","modified":1678852700574},{"_id":"public/post/Sustainable-segment-tree/index.html","hash":"0151546d2305840a17f5ba6d3e4f0187b0627b64","modified":1678852700574},{"_id":"public/post/P4638-solution/index.html","hash":"f66a39bcc0e90912595a9a0cbc0176a78b88d252","modified":1678852700574},{"_id":"public/post/P2065-solution/index.html","hash":"cddf996e9b3f4f869946e4b58faeaaa78db7329d","modified":1678852700574},{"_id":"public/post/Upper-and-lower-bound-network-flow/index.html","hash":"1bf5b739ad195ec4fd83bd04b604d74d1c412509","modified":1678852700574},{"_id":"public/post/Balanced-tree-Treap/index.html","hash":"c5df89ac771fa41790054d1ec60b6110061f418d","modified":1678852700574},{"_id":"public/post/Scan-line/index.html","hash":"51d137f34b5f765e44a1ed4a1d655f744e62c146","modified":1678852700574},{"_id":"public/post/minimum-cost-maximum-flow-EK/index.html","hash":"a577332ca46d1bf56e06ee40af809b7f72e272b6","modified":1678852700574},{"_id":"public/post/maximum-flow-ISAP/index.html","hash":"53a946f9063d3ce845d856cf37985cbfb3afc1b0","modified":1678852700574},{"_id":"public/post/maximum-flow-Dinic/index.html","hash":"d96bc88bda6baaf048ac74c5a3fe1abe9bb96d18","modified":1678852700574},{"_id":"public/post/Monotone-queue-optimization-knapsack/index.html","hash":"dbdb73e2af2524929a5b27339913f80d72a2a12c","modified":1678852700574},{"_id":"public/archives/index.html","hash":"19ab3808617a3ba6b215bc14c9b778802f402087","modified":1678852700574},{"_id":"public/post/Aho-Corasick-automaton/index.html","hash":"f204491a46b6279c01940f8c0e1de8df5bda6f78","modified":1678852700574},{"_id":"public/archives/page/2/index.html","hash":"7e2c801024c81b6419c755c4a92fcc3018329199","modified":1678852700574},{"_id":"public/archives/page/3/index.html","hash":"db993fe335671dab825e1c50e41322600809adc6","modified":1678852700574},{"_id":"public/archives/page/4/index.html","hash":"95805153226f7c7c1cee8c683df79ae6f437408f","modified":1678852700574},{"_id":"public/archives/page/5/index.html","hash":"a31bfab0f33b3f6e2ace894740ad0f88888709da","modified":1678852700574},{"_id":"public/archives/2022/index.html","hash":"fc1092ea212e2acc096ecee139ac282f383325e4","modified":1678852700574},{"_id":"public/archives/2022/page/2/index.html","hash":"f264d849c30b0a5758ea3fc90ae485e050c25988","modified":1678852700574},{"_id":"public/archives/2022/page/3/index.html","hash":"1b54de46195db67a73f7cbf14e49cdf2eca94b95","modified":1678852700574},{"_id":"public/archives/2022/page/4/index.html","hash":"d955af85367043dbe26c3ddfdf53c3e06bd928ee","modified":1678852700574},{"_id":"public/archives/2022/page/5/index.html","hash":"d1285f7a7efecc572267d42599d65e838919d8e6","modified":1678852700574},{"_id":"public/archives/2022/02/index.html","hash":"8b8b2a5d080dfa920afad5dcecbcb85ae2c6ef18","modified":1678852700574},{"_id":"public/archives/2022/04/index.html","hash":"5e7f25067fcc54b1f9d4f807b5bf9903d03dc845","modified":1678852700574},{"_id":"public/archives/2022/04/page/2/index.html","hash":"4c45d7ef37ecba6a73332c8e4473de09c253d9e2","modified":1678852700574},{"_id":"public/archives/2022/05/index.html","hash":"5dbb09d354025e6f7cc7b484960c046372663ec6","modified":1678852700574},{"_id":"public/index.html","hash":"5d25a851e56773d63cd079eb0c178e6c4de4b135","modified":1678852700574},{"_id":"public/page/2/index.html","hash":"37344eb1288675a96f8b1814f74c23a6d2378cc2","modified":1678852700574},{"_id":"public/page/3/index.html","hash":"e5334e73c88fc9acb5f88b6257932b1fee41620b","modified":1678852700574},{"_id":"public/page/4/index.html","hash":"9efc97de1766b29079bf94465688b4863c89ed9b","modified":1678852700574},{"_id":"public/page/5/index.html","hash":"41682fa8e89b8c137c47ac4a9344dc3addf665e1","modified":1678852700574},{"_id":"public/page/6/index.html","hash":"be0c4e0dc58aad8f822ee732e04e68f4d6b31d39","modified":1678852700574},{"_id":"public/tags/动态规划/index.html","hash":"3316b18cdfa17c24fc2c1055a42f058f20752098","modified":1678852700574},{"_id":"public/tags/单调队列/index.html","hash":"6149aeef8030095dbc62b7045adf73fdcc414ab8","modified":1678852700574},{"_id":"public/tags/网络流/index.html","hash":"ed53e4315203258bcaa307a947d32d7a7abc51d4","modified":1678852700574},{"_id":"public/tags/网络流/page/2/index.html","hash":"774284657a907b1a22864fafb67af89b9fa602a4","modified":1678852700574},{"_id":"public/tags/网络流/page/3/index.html","hash":"de1d558617106e2f0a55114a222d713da4ed1312","modified":1678852700574},{"_id":"public/tags/最大流/index.html","hash":"ea531aa5781a092373ca8bdcaeb74ec828e46273","modified":1678852700574},{"_id":"public/tags/最大流/page/2/index.html","hash":"2f3ccee9a1a2292e400dcdf2c968affbc123a0fb","modified":1678852700574},{"_id":"public/tags/费用流/index.html","hash":"4a28fd231fe21d272c055047fdbb8d27d27fe519","modified":1678852700574},{"_id":"public/tags/斜率优化dp/index.html","hash":"d91b11f68fcb0c574ecac423e1c608e2ac5f6dbe","modified":1678852700574},{"_id":"public/BingSiteAuth.xml","hash":"79299edd2d8c811668124bb4d7d2045d33070bf4","modified":1677233155225},{"_id":"public/post-images/Balanced-tree-Treap-1.png","hash":"a1b88c8b3f15d640d80787b84ea064e288d016c4","modified":1677233155225},{"_id":"public/post-images/Balanced-tree-Treap-2.png","hash":"de1ca6b964f7fa51257ef1c96c48e49dc4d2de17","modified":1677233155225},{"_id":"public/post-images/P2065-solution-2.png","hash":"a5260af654eb71d1d44b1d3633eb65369b5cc2ad","modified":1677233155225},{"_id":"public/post-images/P1231-solution-1.png","hash":"454d85b6c440471aef6cb21e59528f5c6d49961c","modified":1677233155225},{"_id":"public/post-images/P2065-solution-1.png","hash":"c8de8de459a7f5507a73ab21ef7fd0b3e3bb024c","modified":1677233155225},{"_id":"public/post-images/P2774-solution-1.png","hash":"976e1ebec68dfde3a4ac90b82c534c34e0450674","modified":1677233155225},{"_id":"public/post-images/Slope-optimization-DP-1.png","hash":"444eb5a2a30553f46a1245d1b5ed021cd213493c","modified":1677233155225},{"_id":"public/post-images/Slope-optimization-DP-3.png","hash":"3421bf02b63b121f92f3cf9404857f15a8cb9d8d","modified":1677233155225},{"_id":"public/post-images/Slope-optimization-DP-2.png","hash":"c396d06098e2780e97d23255034e0157f0c1b2df","modified":1677233155225},{"_id":"public/post-images/Slope-optimization-DP-4.png","hash":"e611ea26ad0d09ba7c62c718f3e9cdfb4123480a","modified":1677233155225},{"_id":"public/post-images/Slope-optimization-DP-5.png","hash":"bdd40fa3fc9e80d9ded4e387d61ab12ce701f29d","modified":1677233155225},{"_id":"public/post-images/Sustainable-segment-tree-1.jpg","hash":"b29799720404f5935f41048aabd1e4e0d1fd3f30","modified":1677233155225},{"_id":"public/post-images/Sustainable-segment-tree-2.jpg","hash":"96f72f3b4dbb74867fc3cbf4a3f04118765ba274","modified":1677233155225},{"_id":"public/post-images/Tree-chain-subdivision-1.png","hash":"22edfeb0c0299a3743bc723a05d5592280a474c4","modified":1677233155225},{"_id":"public/post-images/Tree-chain-subdivision-2.png","hash":"66f20243eb37135d2dd32dae90fa92c693171301","modified":1677233155225},{"_id":"public/post-images/Tree-chain-subdivision-3.png","hash":"3dcc5f8a7523ac01c7e401b853da0c2ccc387259","modified":1677233155225},{"_id":"public/post-images/Upper-and-lower-bound-network-flow-1.png","hash":"71cde2ff7af676f754b5a0e3206ffea62cf728ce","modified":1677233155225},{"_id":"public/post-images/Upper-and-lower-bound-network-flow-2.png","hash":"d40eedcda26e0692c4db635d05b7db9d40ca5476","modified":1677233155225},{"_id":"public/post-images/Upper-and-lower-bound-network-flow-4.png","hash":"03e44bb52d52d9c7eba08ad4c4380b1412ff769f","modified":1677233155225},{"_id":"public/post-images/Upper-and-lower-bound-network-flow-5.png","hash":"f5af25eb0a06e239d14843685aa18dc7e0030e06","modified":1677233155225},{"_id":"public/post-images/Upper-and-lower-bound-network-flow-3.png","hash":"b0f174cc491730ab7f0d35cd0858eecd31248a08","modified":1677233155225},{"_id":"public/post-images/maximum-flow-Dinic-2.png","hash":"100e358c6e132cf113bfe38df000ef633eb6472d","modified":1677233155225},{"_id":"public/post-images/maximum-flow-Dinic-1.png","hash":"482ad2c0c1533db20dd1d6ddf3f8dd751874f11a","modified":1677233155225},{"_id":"public/post-images/maximum-flow-Dinic-4.png","hash":"95072ce48b499a13db43cd7d818b9128effe4446","modified":1677233155225},{"_id":"public/post-images/maximum-flow-Dinic-3.png","hash":"bfe066a4c2bf63d4993dfd07b2b80a5f7689825a","modified":1677233155225},{"_id":"public/post-images/maximum-flow-Dinic-5.png","hash":"c1607fe770badd25c1a0a5799aea9e17b53a1e70","modified":1677233155225},{"_id":"public/post-images/p4638-solution-1.png","hash":"011029901a13c8d22b69b28a38d382ab2ac852b2","modified":1677233155225},{"_id":"public/post-images/wc-2023-travels-1.png","hash":"fe125de2be75273edd16eaa68a8c58289148fffd","modified":1677233155225},{"_id":"public/images/favicon-16x16-next.png","hash":"2811689d51e8a7a694b83e38f25f77117ffcb6eb","modified":1677233155225},{"_id":"public/images/avatar.gif","hash":"7b3d4ce93b9b18d30b415e7514b8712ee93fe1e7","modified":1677233155225},{"_id":"public/images/apple-touch-icon-next.png","hash":"ac4b6dd39f7698fbca609af9f9d4ba0bd12f8f5b","modified":1677233155225},{"_id":"public/images/favicon-32x32-next.png","hash":"96f04a71f9eb4316d23c92f09446992ac75f42f6","modified":1677233155225},{"_id":"public/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1677233155225},{"_id":"public/images/logo.svg","hash":"5b023ae92fd36b22cc095afe408a08d2cae802fa","modified":1677233155225},{"_id":"public/lib/pdf/LICENSE","hash":"598f87f072f66e2269dd6919292b2934dbb20492","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/78-EUC-H.bcmap","hash":"c84a5fe05bb2a5e4e599329d0ebb3ed8fe1ebfdf","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/78-EUC-V.bcmap","hash":"678dcba8720226133150374f78493cc09c9b8d9e","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/78-H.bcmap","hash":"e77449427a5d5411c9da1c1a64e1e3ae362bbcdf","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/78-RKSJ-H.bcmap","hash":"5f0f202932865c38e7b0b06924e419c77f74be85","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/78-V.bcmap","hash":"c58a521bdfad6ffe30e292505992a396033d03c3","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/78-RKSJ-V.bcmap","hash":"3fa6830e3e5c6b0cc5d03402cfb6712a04c08d31","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/78ms-RKSJ-H.bcmap","hash":"ef37df685e4779722b34fcc026b196b224bfca13","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/83pv-RKSJ-H.bcmap","hash":"c4474f77d94be66d771ba68f18ff2fd606a3c820","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/78ms-RKSJ-V.bcmap","hash":"27d45708491107b2cf673c2cd584bf22ca27e4e4","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/90ms-RKSJ-H.bcmap","hash":"994ca6d6232d91be047c68e087e0951dcca4cba4","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/90ms-RKSJ-V.bcmap","hash":"c4ed8e0b82fc29ff6140c72ec8ab3acc3cd0578f","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/90msp-RKSJ-H.bcmap","hash":"d3f02d6724d9c91d077ed38545c9321dba65b624","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/90pv-RKSJ-H.bcmap","hash":"76218acded94b2d29f747735e7fb41f19cee84eb","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/90msp-RKSJ-V.bcmap","hash":"ddfc0fdb34314f2d7116d707fa6dbb24bc9bf390","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/90pv-RKSJ-V.bcmap","hash":"7296d339f5c1d843b823482fa2b3857c0559eb93","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/Add-H.bcmap","hash":"cd55ec3d5627b80505d7dbea433e5702f8c05260","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/Add-RKSJ-H.bcmap","hash":"9a17c268decf876dc35c5f20c660ee63563fa523","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/Add-RKSJ-V.bcmap","hash":"0e4ef11ed7f4e5ed3b2e32f267f4c3fb4359d08e","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/Add-V.bcmap","hash":"02ca7b80b507640df998e9b5f6d25b346082d8c1","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/Adobe-CNS1-0.bcmap","hash":"241cccfc85b5ef9ea4618f94a6341e02d1b03b98","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/Adobe-CNS1-2.bcmap","hash":"a568bee71b12ec4e79a2fa65c4eb9f865c505a5e","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/Adobe-CNS1-1.bcmap","hash":"f37b5b68198690c8270322daa0ea522225a46127","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/Adobe-CNS1-3.bcmap","hash":"ef567b58254e03837d46e1fdff4fea5cce318a74","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/Adobe-CNS1-4.bcmap","hash":"5f81f4782a5f996649dc318c1587ae7728afd10b","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/Adobe-CNS1-5.bcmap","hash":"b7de7cea41575c7933cffdb917ad1f918df76c70","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/Adobe-CNS1-6.bcmap","hash":"4eaa2ec548df7cdbdece2eec227fdb9d4cb2f281","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/Adobe-CNS1-UCS2.bcmap","hash":"bee971d04cae79d791a52bf0d3d5e2e9deb1d1c8","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/Adobe-GB1-0.bcmap","hash":"86edf145080d2fedba2f0a0b0ab1bc18d9a5af55","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/Adobe-GB1-1.bcmap","hash":"83cc28efd5e778b9d37898f9b100b502bc442dc3","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/Adobe-GB1-2.bcmap","hash":"a3ce0132af54173d30a4330314bc4cf273fc29c8","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/Adobe-GB1-4.bcmap","hash":"cee3007bb41ed1bbe7fd22f054c0fb036a92c8cf","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/Adobe-GB1-UCS2.bcmap","hash":"23366624efa674e2493a18bf6b6e2c16929d68d3","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/Adobe-GB1-3.bcmap","hash":"c7b6cfbeac681010771d022d319913c798416d75","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/Adobe-Japan1-0.bcmap","hash":"ce5b494e809c30621968169d01d1136f3ad1ce3c","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/Adobe-Japan1-1.bcmap","hash":"a766b29745a30aa3316cafc73d884c271cc12ff4","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/Adobe-GB1-5.bcmap","hash":"a7d9440784d773507e3d83d0bf93fa8d93a3289f","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/Adobe-Japan1-2.bcmap","hash":"78c4e86cff8aa1c2f2bc18aaf83095a96f0bca50","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/Adobe-Japan1-4.bcmap","hash":"4136c902f4715ed18b8b2390965d3621d2fda048","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/Adobe-Japan1-3.bcmap","hash":"5b520d2cf37e21b084bc9e6a21d006c53e4e552e","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/Adobe-Japan1-6.bcmap","hash":"dfba7ab251b5ac07d7648c4e81e808ea096578c9","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/Adobe-Japan1-UCS2.bcmap","hash":"d99c0d908b8075afa69aa3c579a9393b13b29dd9","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/Adobe-Japan1-5.bcmap","hash":"38970fd416a1c3ef4faa25009254347627d24964","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/Adobe-Korea1-0.bcmap","hash":"ca8e1774cdd2859ba0341e4474d07d6fb2f9395b","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/Adobe-Korea1-1.bcmap","hash":"e9b783963160380ccfe33fa1dcdd9c79b1cf2934","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/Adobe-Korea1-2.bcmap","hash":"0b8d7fd848de3efa86f958c6e1cf5aece9bf1bf4","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/Adobe-Korea1-UCS2.bcmap","hash":"15e4e07c96891a2bb2778b5df8dd0a131edeed52","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/B5-H.bcmap","hash":"771d71153bf652d1134b7d65beb8afc60c835ff6","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/B5-V.bcmap","hash":"dfc7362c157c24651761e5216ef0c46aba795488","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/B5pc-V.bcmap","hash":"f12ae6ed2320136959420e28b1b937001cdd4f0b","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/B5pc-H.bcmap","hash":"29d5fd41dc8fc4f19b59949b9a7f410d63f4f3bd","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/CNS-EUC-H.bcmap","hash":"1da78eb52781330148c95ccf64c78edd2072a991","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/CNS-EUC-V.bcmap","hash":"895fe039258dae00d7a8cea93b3b07d794543d2d","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/CNS1-V.bcmap","hash":"7455bd92e1a1f32bfd2cb5b80eb938aa665f6b8a","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/CNS1-H.bcmap","hash":"07f422b28ca4fedf2cdc6ccdf551eaecae40f60b","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/CNS2-H.bcmap","hash":"0570a8186311bba4ad216250f805461220d41d0a","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/CNS2-V.bcmap","hash":"c0870c3fad8349e3391ff7cda29d1f3a917e27f1","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/ETHK-B5-H.bcmap","hash":"225205ad3aad58967faf23a2504731abebc6dccc","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/ETHK-B5-V.bcmap","hash":"03e35e7fc1b75495df5559a3f71c5f0cbd1517ba","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/ETen-B5-H.bcmap","hash":"9c3b70700d7ae2b8c4cc6f658cdc98f4e65b3be4","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/ETen-B5-V.bcmap","hash":"5b637fa1b203754d98463053b38a2f694cde499b","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/ETenms-B5-V.bcmap","hash":"631c58a7f7a8094d44a858d26485ab65b499b59b","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/ETenms-B5-H.bcmap","hash":"1207c931295ad5f57a430317d5014fb66d0eab7d","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/EUC-H.bcmap","hash":"f88729b6a413ae1365bafb5dc8076b465aa1fb87","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/Ext-H.bcmap","hash":"4b6a27e1125bb11bf9fd8fe9c5375f7781c95204","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/EUC-V.bcmap","hash":"c47c42d9099caf1447498e57fc1c8f3c7ff417b3","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/Ext-RKSJ-H.bcmap","hash":"e1c2563a6d785aa5e30de423911d179fe79ec957","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/Ext-RKSJ-V.bcmap","hash":"5443591823737ba98993537c4d4e8af70a37c92e","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/GB-EUC-H.bcmap","hash":"4231eab22968baa29ea4e6fdc4278b737067a7da","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/Ext-V.bcmap","hash":"0d88a7517783f25ce1eee082a5ed12b0f96061c2","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/GB-EUC-V.bcmap","hash":"7d268732b300431fced1351b4bfd12b51299283e","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/GB-H.bcmap","hash":"3f1c2a68bdd13541e6a2cd6a7a393581e9444e1e","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/GB-V.bcmap","hash":"b70477a9738709f639adf6bc20e81363efcc9ed0","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/GBK2K-H.bcmap","hash":"a36052b8b5d7dc1dde2b721437d6abc90ec7cefe","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/GBK-EUC-V.bcmap","hash":"4f0e0cfffafa21b30f7a25e5161738faf2e265fe","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/GBKp-EUC-H.bcmap","hash":"a8785a44403f130097ee9a23c3923d5af252ac51","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/GBK2K-V.bcmap","hash":"d27b6916b7de1993464e5f33822f176fdc8e949f","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/GBKp-EUC-V.bcmap","hash":"717f6d6585184bfebb894e59868886ab8f3c38f1","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/GBK-EUC-H.bcmap","hash":"08986b370ac27b60cf8cd7023c9e49f6b784b52b","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/GBT-EUC-H.bcmap","hash":"e2dda44896a41f4fa817c5397f17894763b7623e","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/GBT-EUC-V.bcmap","hash":"9d6ef5fa295e3005d620904754d7cc16104be908","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/GBT-H.bcmap","hash":"62508bbc22bcd3795e4af2c7fa3cfddc71367813","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/GBT-V.bcmap","hash":"2f0936e0bd4362f7c6f8c2b56642d6483366cd11","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/GBTpc-EUC-H.bcmap","hash":"388eb76b53b008d90dfe68c1e3288314b21c3cdc","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/GBTpc-EUC-V.bcmap","hash":"ce125f52097c71fc83631577977ac267b8901c78","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/GBpc-EUC-H.bcmap","hash":"5c34efa7cca4e2f652f81f4498fdf41db1b7b1e6","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/GBpc-EUC-V.bcmap","hash":"36004a6bedae0edfaea620a7d8f61cfb875f9640","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/H.bcmap","hash":"149c08c0eadc405f6ba64adac9329fdb300d11ab","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/HKdla-B5-H.bcmap","hash":"57ba02cf438eba88d2071bd99d1beb816b438b9e","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/HKdla-B5-V.bcmap","hash":"035e4064559dd56ceb0f06c3ac1c2e766aeffe62","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/HKdlb-B5-H.bcmap","hash":"2be77ea4f4cd8a338ff7007d314773582f565efa","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/HKdlb-B5-V.bcmap","hash":"3dc79100304f82ec559b70d120100f6ebe6ab5c0","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/HKgccs-B5-H.bcmap","hash":"dbaa1026222370fa6e3275c98e3bdb5ef3d37709","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/HKm314-B5-H.bcmap","hash":"cbfb65ab0cae690e7679a1769de521ea20fb6602","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/HKgccs-B5-V.bcmap","hash":"6f22784990eb168bcf9192e7e36de18e08927dfb","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/HKm314-B5-V.bcmap","hash":"3ef5f7e35ebffe68dea8ea757cdceac5b8151372","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/HKm471-B5-H.bcmap","hash":"a75f2e32e5495d46e14b1d07ac124b3fc675ef1a","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/HKm471-B5-V.bcmap","hash":"2a6f2cc4d105f464432187daeff7b81040c093e4","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/HKscs-B5-H.bcmap","hash":"45f1793e771de030af89938eed23fff4c7daca3a","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/HKscs-B5-V.bcmap","hash":"fa5b3a1f0b3ab6bd614f8a39c9ab80b203daadf5","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/Hankaku.bcmap","hash":"dfc2f635dd66602f9978ae3fe72695a02e512a6a","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/Hiragana.bcmap","hash":"10e7a0f20cde8865a1dd3086a89f2e96e330d1a6","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/KSC-EUC-H.bcmap","hash":"bc349367bb60b06af5fdeeec05047f596ac71ab3","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/KSC-EUC-V.bcmap","hash":"4529ddac78c931d63411b6061b0af740b4c44ca5","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/KSC-H.bcmap","hash":"42e15fbce70bdec4f7bb5b2cbd02b0efd8bc65fc","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/KSC-Johab-H.bcmap","hash":"3585accc6e6957eda55302393fd9c3a563db6cbb","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/KSC-Johab-V.bcmap","hash":"e68b770b37b591884c459d6ce3bb43bc4556547b","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/KSC-V.bcmap","hash":"22b097fd376c21e40a0f9392961be74acc316343","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/KSCms-UHC-H.bcmap","hash":"4e0ed017a2a41ee7bf6eacf0f7e6b40ae60d223d","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/KSCms-UHC-HW-V.bcmap","hash":"6cfeb36f492702aef5ce5b7671342291010b29e1","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/KSCms-UHC-HW-H.bcmap","hash":"d410341b19a6f05e0c20ea4a1a77078a3084044e","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/KSCms-UHC-V.bcmap","hash":"3de7c5c70cf172ff560a62d5dfe84a9336b4f5ad","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/KSCpc-EUC-H.bcmap","hash":"3705fd3621117a7e5a3772c3849c5d69620ef08f","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/KSCpc-EUC-V.bcmap","hash":"1d3a11932c44a5fa8fa22efd2bd3dba7db9a2c8e","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/Katakana.bcmap","hash":"da100ad00f2a9ba196892bfb4d6644ec828a4fcf","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/LICENSE","hash":"1afb5991fce0d60110b5092b68bf9ff76b0c73f6","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/NWP-H.bcmap","hash":"7d0f51c52d7a96bf289d0c6454d7e9dccf009c15","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/NWP-V.bcmap","hash":"891a866c52b46e7526123799a829db24ac6cda4f","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/RKSJ-H.bcmap","hash":"a4f7d5cdd13d3008cc42d82f69672d9e50a9d5b3","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/Roman.bcmap","hash":"5755781c7e9c50cc8192426d8733a506382b5fdd","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/RKSJ-V.bcmap","hash":"16ae42a46e7eb92ca048fe24649b668c5103b4b2","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/UniCNS-UCS2-H.bcmap","hash":"7f289b94c643b7cc43d4936078143a2347ca0fc1","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/UniCNS-UCS2-V.bcmap","hash":"6b19ece5c921516431eb94d28d74080fdd7d35bc","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/UniCNS-UTF16-V.bcmap","hash":"0f7152f2845cc2be4d3ce7e0e1530639ec4162e3","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/UniCNS-UTF16-H.bcmap","hash":"d73d55388c76932033915cea627bb628edad4f66","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/UniCNS-UTF32-H.bcmap","hash":"a5872864e2b121c1df5068a54201ed166c69d5f1","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/UniCNS-UTF32-V.bcmap","hash":"debaa98acaf13f341a5003856ef6a6a7df8f6e14","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/UniCNS-UTF8-H.bcmap","hash":"734ad1a00033d70c195c81358b643c7cba1327b2","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/UniCNS-UTF8-V.bcmap","hash":"019bd0716b2aa80bc1bcabfd389d3d5e1065ba8e","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/UniGB-UCS2-H.bcmap","hash":"868238e34cb9548c4d138af1adc1a4bea62dec37","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/UniGB-UCS2-V.bcmap","hash":"f5853ca83c25b888c1d925e2a20ef44e064d064e","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/UniGB-UTF16-H.bcmap","hash":"28963866dfb575b58b4370e60ebd9bfb6e56ac09","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/UniGB-UTF32-H.bcmap","hash":"b9ea278eb4c324d12a81e2d62479548d1e7126cb","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/UniGB-UTF16-V.bcmap","hash":"1771376eef979ad42c2b5c01a1af1d34f54580b7","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/UniGB-UTF32-V.bcmap","hash":"8167ba503aa8a6c805f39be0ca538b99898a967d","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/UniGB-UTF8-H.bcmap","hash":"09cc7750f69da77434093e4c94211394f5665eda","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/UniJIS-UCS2-H.bcmap","hash":"caf525125e29fa4de78088e5eb1785c1af1f9950","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/UniJIS-UCS2-HW-H.bcmap","hash":"97cbb8599cf62914885a8b2b47594865fff52099","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/UniJIS-UCS2-HW-V.bcmap","hash":"f36bad9c680f4bba6cbcf8ac57f53e7ce21c806b","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/UniGB-UTF8-V.bcmap","hash":"e23616fa12132c73f52071b96e76d876430ececf","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/UniJIS-UCS2-V.bcmap","hash":"45396576a6bd5468a84e2c2e4ae64c23fe7f2e85","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/UniJIS-UTF16-H.bcmap","hash":"16499e93f0a447a94e1e44bfa9951401d290d89d","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/UniJIS-UTF16-V.bcmap","hash":"44402b8f73e0b0160846b641e7cb2e75ab8c81bd","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/UniJIS-UTF32-H.bcmap","hash":"bc482114d214e2fffe85dd0b7422f48c3e282c17","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/UniJIS-UTF32-V.bcmap","hash":"2f5ec2584fd7c39f455161a857550fa7fea5f53a","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/UniJIS-UTF8-H.bcmap","hash":"f47956c1c7b2eadbda93aac25fe4546b413ec0a5","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/UniJIS-UTF8-V.bcmap","hash":"b3ea8d2172a2f6f9e73cf62ae467aa84848df6d7","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/UniJIS2004-UTF16-H.bcmap","hash":"b8b0cc6779d3960426899fc2e7cf2866ffc80167","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/UniJIS2004-UTF16-V.bcmap","hash":"2872cb273dab9d0dbb7f331826045df18764a7b0","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/UniJIS2004-UTF32-H.bcmap","hash":"f48723212d1ad18c0b3c41168d6f630798e04160","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/UniJIS2004-UTF32-V.bcmap","hash":"ef16ccb3102fc44c1d46f4cad40cfbdb020ee277","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/UniJIS2004-UTF8-H.bcmap","hash":"385ab762d03499d35539048176928e031e5340d1","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/UniJIS2004-UTF8-V.bcmap","hash":"565560a59d5174ac379a8d91f165c8ecdef54e06","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/UniJISPro-UCS2-HW-V.bcmap","hash":"3f0a364246717707db82913593304cb7bd37c378","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/UniJISPro-UTF8-V.bcmap","hash":"ed6b571aeed388d3b53b9e65824af3f0146a5857","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/UniJISX0213-UTF32-H.bcmap","hash":"15c953c36436d32f748ec7468a95c3e5843d70bb","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/UniJISPro-UCS2-V.bcmap","hash":"b1a47305fa79afa19ab696d33af5099d35570c56","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/UniJISX0213-UTF32-V.bcmap","hash":"dfbe3e295505977b4e1881ef30b80362d7406bbc","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/UniJISX02132004-UTF32-H.bcmap","hash":"c41dd50df01e3d3331f0acdb6da6c1b857a67cf7","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/UniJISX02132004-UTF32-V.bcmap","hash":"9c48a0c654acf4bcf51defde2f7d8b3ce52a063d","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/UniKS-UCS2-H.bcmap","hash":"50fcce1b2e3224791b480289e7c4c42938beb854","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/UniKS-UCS2-V.bcmap","hash":"6743b3e07370fd49962b97d97be77dae8d18aabb","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/UniKS-UTF16-V.bcmap","hash":"cfdbfbf0b0e8ef98fef6236ea570c73465da1581","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/UniKS-UTF16-H.bcmap","hash":"4f4603408966d9ac29a96c3a6755b9f23e7aa953","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/UniKS-UTF32-V.bcmap","hash":"73bd343b188a80471eb156655f5b192903f86cbf","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/UniKS-UTF32-H.bcmap","hash":"6b0e98e16418fa5a86338b3fb361f1700971f649","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/UniKS-UTF8-H.bcmap","hash":"8117d31e498a8f0fb7c223c4172ba881c0496c6f","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/UniKS-UTF8-V.bcmap","hash":"586c64948a67e4cb12de64e221b0dc3d9e47dedf","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/V.bcmap","hash":"99790f12ca21a196bc1d836ae5bf0ad7af95e079","modified":1677233155225},{"_id":"public/lib/pdf/web/cmaps/WP-Symbol.bcmap","hash":"3a6417abad460a1a083be75636c014f3a73937b5","modified":1677233155225},{"_id":"public/lib/pdf/web/images/annotation-check.svg","hash":"015d03ffa6a0ce93b41ed93a262879e4f8cf72fd","modified":1677233155225},{"_id":"public/lib/pdf/web/images/annotation-insert.svg","hash":"7a12af74ef20d5249a0c330d992bd1132308cbac","modified":1677233155225},{"_id":"public/lib/pdf/web/images/annotation-comment.svg","hash":"5ec875153d5046507050a3531422ca69b44680c7","modified":1677233155225},{"_id":"public/lib/pdf/web/images/annotation-newparagraph.svg","hash":"453ba47aa10b6fcf8459569e0a550b4f91260ec7","modified":1677233155225},{"_id":"public/lib/pdf/web/images/annotation-key.svg","hash":"d9224d3aef774d6ecc9735b440810ada4384be11","modified":1677233155225},{"_id":"public/lib/pdf/web/images/annotation-help.svg","hash":"2f3d88f4e8cefafc2d76932104f6b2517034af2f","modified":1677233155225},{"_id":"public/lib/pdf/web/images/annotation-noicon.svg","hash":"5a5447e5c39cf7ca748853a15dbd835ddaa3b5df","modified":1677233155225},{"_id":"public/lib/pdf/web/images/annotation-note.svg","hash":"6100deeb6121f98c7e024ec1a273171207c84c7f","modified":1677233155225},{"_id":"public/lib/pdf/web/images/findbarButton-next-rtl.png","hash":"d02c4e9bf493dc83029098e59b6ece2363f3c760","modified":1677233155225},{"_id":"public/lib/pdf/web/images/findbarButton-next.png","hash":"4bcb69c72d25d822dd09a3999c6972c0c311f04b","modified":1677233155225},{"_id":"public/lib/pdf/web/images/annotation-paragraph.svg","hash":"70591a3b26c56815c6e5ab2bae959e8a951c43fb","modified":1677233155225},{"_id":"public/lib/pdf/web/images/findbarButton-next-rtl@2x.png","hash":"f9f2cea77208aa0e219f3bed69e22861c2858bc3","modified":1677233155225},{"_id":"public/lib/pdf/web/images/findbarButton-next.svg","hash":"b8694ebb1f7f2f3691d52645a74d5a50a9b22ff3","modified":1677233155225},{"_id":"public/lib/pdf/web/images/findbarButton-next@2x.png","hash":"dca2a1a3bdbe036735dda32e5ed909b029829a3c","modified":1677233155225},{"_id":"public/lib/pdf/web/images/findbarButton-previous-rtl.png","hash":"4bcb69c72d25d822dd09a3999c6972c0c311f04b","modified":1677233155225},{"_id":"public/lib/pdf/web/images/findbarButton-previous-rtl@2x.png","hash":"dca2a1a3bdbe036735dda32e5ed909b029829a3c","modified":1677233155225},{"_id":"public/lib/pdf/web/images/findbarButton-previous.png","hash":"d02c4e9bf493dc83029098e59b6ece2363f3c760","modified":1677233155225},{"_id":"public/lib/pdf/web/images/findbarButton-previous.svg","hash":"585dd87195847bcce9b5b24450bf8c86d1248edb","modified":1677233155225},{"_id":"public/lib/pdf/web/images/findbarButton-previous@2x.png","hash":"f9f2cea77208aa0e219f3bed69e22861c2858bc3","modified":1677233155225},{"_id":"public/lib/pdf/web/images/grab.cur","hash":"fbd667e863c8278950e7761aee54b394cd93ea0c","modified":1677233155225},{"_id":"public/lib/pdf/web/images/grabbing.cur","hash":"f30d68405751e730ca94ada8628df45b4839931f","modified":1677233155225},{"_id":"public/lib/pdf/web/images/loading-dark.svg","hash":"6beecaf20132520e63af2f7729110627aa513f4b","modified":1677233155225},{"_id":"public/lib/pdf/web/images/loading-icon.gif","hash":"e043879d3ee94a3edf10260f21f44bfa4a6fc66e","modified":1677233155225},{"_id":"public/lib/pdf/web/images/loading-small.png","hash":"c1abf9b89af7392824f2228312785a899df224a0","modified":1677233155225},{"_id":"public/lib/pdf/web/images/loading-small@2x.png","hash":"171aeb1a90c2836c639438fa85c64cd9d94b3516","modified":1677233155225},{"_id":"public/lib/pdf/web/images/loading.svg","hash":"eed9fc8e8c5aa8a579804d130c705df4acfc7559","modified":1677233155225},{"_id":"public/lib/pdf/web/images/secondaryToolbarButton-documentProperties.png","hash":"6f1e0ce52dae6af31bb3c5b09bbb33a33849fd08","modified":1677233155225},{"_id":"public/lib/pdf/web/images/secondaryToolbarButton-documentProperties.svg","hash":"d2f45686a4d7687a02aaeaad1e3362a6464b8f34","modified":1677233155225},{"_id":"public/lib/pdf/web/images/secondaryToolbarButton-firstPage.png","hash":"453a575f2676ba39eacc71c074420d6c97c87a42","modified":1677233155225},{"_id":"public/lib/pdf/web/images/secondaryToolbarButton-documentProperties@2x.png","hash":"bd55401797e24ae5066afb9677dca1463e74c839","modified":1677233155225},{"_id":"public/lib/pdf/web/images/secondaryToolbarButton-firstPage.svg","hash":"401049e3f24dd7d23d20153b84621c346101cb1a","modified":1677233155225},{"_id":"public/lib/pdf/web/images/secondaryToolbarButton-firstPage@2x.png","hash":"fd24d7a57e2a1205a67a11a760eb6dd50748da26","modified":1677233155225},{"_id":"public/lib/pdf/web/images/secondaryToolbarButton-handTool.png","hash":"8db06773a09e2f407bdf7ce448777398b40fd313","modified":1677233155225},{"_id":"public/lib/pdf/web/images/secondaryToolbarButton-handTool@2x.png","hash":"eb8a16519da1e074f9ed07e8a350a6b0d52e5339","modified":1677233155225},{"_id":"public/lib/pdf/web/images/secondaryToolbarButton-handTool.svg","hash":"9b84882a6943b4e9d40cf85546099d1c5e13c5b7","modified":1677233155225},{"_id":"public/lib/pdf/web/images/secondaryToolbarButton-lastPage.png","hash":"6819bdd3000af84c50df1b10b55b3af33944a261","modified":1677233155225},{"_id":"public/lib/pdf/web/images/secondaryToolbarButton-lastPage@2x.png","hash":"2fb45311e8ee9658cc4276f1202ada9a55df774d","modified":1677233155225},{"_id":"public/lib/pdf/web/images/secondaryToolbarButton-lastPage.svg","hash":"d4570550efe68c44e3a2e227d3254908e402f735","modified":1677233155225},{"_id":"public/lib/pdf/web/images/secondaryToolbarButton-rotateCcw.png","hash":"548451d8a12570d66bce4c8922d8ccffb63ca61a","modified":1677233155225},{"_id":"public/lib/pdf/web/images/secondaryToolbarButton-rotateCcw.svg","hash":"29a312c7c98296b3b8c9fa4ef6a5669c49c7b2e8","modified":1677233155225},{"_id":"public/lib/pdf/web/images/secondaryToolbarButton-rotateCw.png","hash":"252e8a4adaf406c4e9c78033d8d8163333ce4c1c","modified":1677233155225},{"_id":"public/lib/pdf/web/images/secondaryToolbarButton-rotateCw.svg","hash":"23d341acd174c1864d35c7ce5e63dd83a331c74a","modified":1677233155225},{"_id":"public/lib/pdf/web/images/secondaryToolbarButton-rotateCcw@2x.png","hash":"84f034b57d24f7371d1a605bd12afa1f71b50f1b","modified":1677233155225},{"_id":"public/lib/pdf/web/images/secondaryToolbarButton-rotateCw@2x.png","hash":"f37e80bc600112fa88251e53e953f14946967e19","modified":1677233155225},{"_id":"public/lib/pdf/web/images/secondaryToolbarButton-scrollHorizontal.png","hash":"67ec12c5bfe0d933f62e1bdfb2154db263e24712","modified":1677233155225},{"_id":"public/lib/pdf/web/images/secondaryToolbarButton-scrollHorizontal.svg","hash":"f12f76653b9d5a5b87857c16f87ba321918a2b70","modified":1677233155225},{"_id":"public/lib/pdf/web/images/secondaryToolbarButton-scrollPage.svg","hash":"2cc72032c67c6a5e11dad56f266abb69c4946e0d","modified":1677233155225},{"_id":"public/lib/pdf/web/images/secondaryToolbarButton-scrollVertical.png","hash":"3509cb4c7f355106103aa663fdcfbba6143f1d96","modified":1677233155225},{"_id":"public/lib/pdf/web/images/secondaryToolbarButton-scrollHorizontal@2x.png","hash":"0f23b007fe6be937bc1072737e60cf10e4b8c7e1","modified":1677233155225},{"_id":"public/lib/pdf/web/images/secondaryToolbarButton-scrollVertical.svg","hash":"e59336dafede013bf0dc2331c22841994638a61d","modified":1677233155225},{"_id":"public/lib/pdf/web/images/secondaryToolbarButton-scrollWrapped.png","hash":"4409af25572feb6ac02d9f0ddcbd5ea689b3dd05","modified":1677233155225},{"_id":"public/lib/pdf/web/images/secondaryToolbarButton-scrollWrapped.svg","hash":"6f08b682673d936d697c86b043cde478c282a14c","modified":1677233155225},{"_id":"public/lib/pdf/web/images/secondaryToolbarButton-scrollWrapped@2x.png","hash":"8b0ebf82e3f20a7e6cd93ef80b4ac932a02512c5","modified":1677233155225},{"_id":"public/lib/pdf/web/images/secondaryToolbarButton-scrollVertical@2x.png","hash":"a80753f432677766ba1cfbf3677bb9498998efd7","modified":1677233155225},{"_id":"public/lib/pdf/web/images/secondaryToolbarButton-selectTool.png","hash":"f62d271d5403f35e372b2cdf4c892aac7d364665","modified":1677233155225},{"_id":"public/lib/pdf/web/images/secondaryToolbarButton-selectTool.svg","hash":"b22cd19d4eec18a106d35eb0629763f61e10bcd7","modified":1677233155225},{"_id":"public/lib/pdf/web/images/secondaryToolbarButton-selectTool@2x.png","hash":"9a10930334b9a42429c967b77f8c7e705e31cdaa","modified":1677233155225},{"_id":"public/lib/pdf/web/images/secondaryToolbarButton-spreadNone.png","hash":"a6648371ee01d687db409f5198f30dafaba76b6b","modified":1677233155225},{"_id":"public/lib/pdf/web/images/secondaryToolbarButton-spreadEven.png","hash":"d27a628de5e1a4ce508c39fcb496b50f3d2d0fa0","modified":1677233155225},{"_id":"public/lib/pdf/web/images/secondaryToolbarButton-spreadEven.svg","hash":"09b8adc28babb563f880415fae270b75c601975b","modified":1677233155225},{"_id":"public/lib/pdf/web/images/secondaryToolbarButton-spreadEven@2x.png","hash":"616b232b0f166467d0c37315709508953fb79358","modified":1677233155225},{"_id":"public/lib/pdf/web/images/secondaryToolbarButton-spreadNone.svg","hash":"6b438647d978f50657d3324065776843b7249e15","modified":1677233155225},{"_id":"public/lib/pdf/web/images/secondaryToolbarButton-spreadNone@2x.png","hash":"5833ee8fa2394db83739ddbb5f9f0f3f0d39709d","modified":1677233155225},{"_id":"public/lib/pdf/web/images/secondaryToolbarButton-spreadOdd.png","hash":"ff70929f97f54c2722e890a38070f749cefd12ee","modified":1677233155225},{"_id":"public/lib/pdf/web/images/secondaryToolbarButton-spreadOdd.svg","hash":"d58e18af4c5b47b05f1c37f3658f6370df95537f","modified":1677233155225},{"_id":"public/lib/pdf/web/images/shadow.png","hash":"b931e2de029146b2e1502ebd61c8160e72d6306c","modified":1677233155225},{"_id":"public/lib/pdf/web/images/secondaryToolbarButton-spreadOdd@2x.png","hash":"07f1a8754f63dbb8d480e0923328c9fc0336fd2c","modified":1677233155225},{"_id":"public/lib/pdf/web/images/texture.png","hash":"230a3d5e2dfacfa7228f58a559de5df3734118f5","modified":1677233155225},{"_id":"public/lib/pdf/web/images/toolbarButton-bookmark.png","hash":"0193cebc494facb8ba8733a1a8f50457e7189f56","modified":1677233155225},{"_id":"public/lib/pdf/web/images/toolbarButton-bookmark.svg","hash":"6c621d20fd62e2cab21e730606e41655bc90676e","modified":1677233155225},{"_id":"public/lib/pdf/web/images/toolbarButton-currentOutlineItem.svg","hash":"c4b02b9875a01992715305bf3b2e2ece3506cb85","modified":1677233155225},{"_id":"public/lib/pdf/web/images/toolbarButton-bookmark@2x.png","hash":"f822c6228ea6f9ad2ee5465ace31c725cf3289c3","modified":1677233155225},{"_id":"public/lib/pdf/web/images/toolbarButton-download.svg","hash":"63f4143020019df8d607f01e6b22da86e93dd326","modified":1677233155225},{"_id":"public/lib/pdf/web/images/toolbarButton-download.png","hash":"b25abd4a3c95097a338b8b138476e22189cb235e","modified":1677233155225},{"_id":"public/lib/pdf/web/images/toolbarButton-download@2x.png","hash":"6c2ddead63c9a9ac3371bd7b8b8b914e2f81d605","modified":1677233155225},{"_id":"public/lib/pdf/web/images/toolbarButton-editorNone.svg","hash":"b22cd19d4eec18a106d35eb0629763f61e10bcd7","modified":1677233155225},{"_id":"public/lib/pdf/web/images/toolbarButton-editorFreeText.svg","hash":"f37e39c496ba6dae5c7efda8e60c047d390976e0","modified":1677233155225},{"_id":"public/lib/pdf/web/images/toolbarButton-menuArrow.svg","hash":"49b82a1d7fc96cbe8793474c3c42ced5682cf50d","modified":1677233155225},{"_id":"public/lib/pdf/web/images/toolbarButton-menuArrows@2x.png","hash":"fdb29640d1f7ee31b09550163f85e01a70cebd13","modified":1677233155225},{"_id":"public/lib/pdf/web/images/toolbarButton-menuArrows.png","hash":"acbbc7071a0641a10e1d50991d1abbfa26b5dce9","modified":1677233155225},{"_id":"public/lib/pdf/web/images/toolbarButton-openFile.png","hash":"6b17acd1c4ea6a9d9859819456952eff133f3cc1","modified":1677233155225},{"_id":"public/lib/pdf/web/images/toolbarButton-openFile.svg","hash":"dc27ad6bc304f9256e1821e327187efe3adee5ea","modified":1677233155225},{"_id":"public/lib/pdf/web/images/toolbarButton-openFile@2x.png","hash":"ae13be299d7c18dde70d975d0e229d3e20137afd","modified":1677233155225},{"_id":"public/lib/pdf/web/images/toolbarButton-pageDown-rtl.png","hash":"641a0e2d711ec06176c046d8efcdff670da876ef","modified":1677233155225},{"_id":"public/lib/pdf/web/images/toolbarButton-pageDown-rtl@2x.png","hash":"445833e5eebdcc99270b879d0079bb54310f1615","modified":1677233155225},{"_id":"public/lib/pdf/web/images/toolbarButton-pageDown.png","hash":"6e10286da3a52e0bba782d0fc4a7c33d10c8f4b9","modified":1677233155225},{"_id":"public/lib/pdf/web/images/toolbarButton-pageDown.svg","hash":"22883f1872f39254dce4979b43f786872dec7cd5","modified":1677233155225},{"_id":"public/lib/pdf/web/images/toolbarButton-pageDown@2x.png","hash":"2b817130c3724f8a864845b03a142bd7e1cb61e9","modified":1677233155225},{"_id":"public/lib/pdf/web/images/toolbarButton-pageUp-rtl.png","hash":"0529bff456111ea1a264771afdcb2daebe68f79a","modified":1677233155225},{"_id":"public/lib/pdf/web/images/toolbarButton-pageUp-rtl@2x.png","hash":"1507890ff466f28f78ab7bd9f6eebfe2e4eeee8a","modified":1677233155225},{"_id":"public/lib/pdf/web/images/toolbarButton-pageUp.png","hash":"b1eae4614fb964b6d0483f114f3dd2b49ec1b64a","modified":1677233155225},{"_id":"public/lib/pdf/web/images/toolbarButton-pageUp.svg","hash":"e521b0bbe583ef9ba858071e5af0e1def294ffb7","modified":1677233155225},{"_id":"public/lib/pdf/web/images/toolbarButton-presentationMode.png","hash":"3d206e303f9663dca95482df9abe55a08851c574","modified":1677233155225},{"_id":"public/lib/pdf/web/images/toolbarButton-presentationMode.svg","hash":"f7a2416c2ba73a78b99ec3ab2ea546df86195a47","modified":1677233155225},{"_id":"public/lib/pdf/web/images/toolbarButton-pageUp@2x.png","hash":"9960af5e2ff7dfe8aba862d77305f409f5f1405c","modified":1677233155225},{"_id":"public/lib/pdf/web/images/toolbarButton-print.svg","hash":"c87e531fcafc7347b4c163b2923a10fa9d56a329","modified":1677233155225},{"_id":"public/lib/pdf/web/images/toolbarButton-presentationMode@2x.png","hash":"c2d54d6f77f831963132555599e7314d4f07b49a","modified":1677233155225},{"_id":"public/lib/pdf/web/images/toolbarButton-print@2x.png","hash":"7577a46df5fcc89846737010a14878bffa85098e","modified":1677233155225},{"_id":"public/lib/pdf/web/images/toolbarButton-print.png","hash":"77463c425966b8a298a2d87863533e68092676bc","modified":1677233155225},{"_id":"public/lib/pdf/web/images/toolbarButton-search@2x.png","hash":"25c50114436d8d598416a5c3eed9e1db282c43b3","modified":1677233155225},{"_id":"public/lib/pdf/web/images/toolbarButton-search.svg","hash":"0ef58f82497562def0aec5ca59d8cf4a9d247070","modified":1677233155225},{"_id":"public/lib/pdf/web/images/toolbarButton-search.png","hash":"14c3ef60d3979df9e8d13cf39cad10ed043f5578","modified":1677233155225},{"_id":"public/lib/pdf/web/images/toolbarButton-secondaryToolbarToggle-rtl.png","hash":"990118984a946a8c63d95fd1a8d8af848383118b","modified":1677233155225},{"_id":"public/lib/pdf/web/images/toolbarButton-secondaryToolbarToggle-rtl@2x.png","hash":"51055db76ce1e9935fa3d91aaece874c6da14147","modified":1677233155225},{"_id":"public/lib/pdf/web/images/toolbarButton-secondaryToolbarToggle.png","hash":"6cedbeddac0d6191afe09cabed7b6d517f7c7b21","modified":1677233155225},{"_id":"public/lib/pdf/web/images/toolbarButton-secondaryToolbarToggle.svg","hash":"4fe70d9c98f2bf33b8ca096378e3037dd8f89fe1","modified":1677233155225},{"_id":"public/lib/pdf/web/images/toolbarButton-secondaryToolbarToggle@2x.png","hash":"6f1dca07696408ce28da5621ebcac57d0b2031a5","modified":1677233155225},{"_id":"public/lib/pdf/web/images/toolbarButton-sidebarToggle-rtl.png","hash":"422b5ed725be51f60e6339da94e0c959ad67990b","modified":1677233155225},{"_id":"public/lib/pdf/web/images/toolbarButton-sidebarToggle-rtl@2x.png","hash":"29eade71266a6c4b1048eeacb1c29411435bdb41","modified":1677233155225},{"_id":"public/lib/pdf/web/images/toolbarButton-sidebarToggle.png","hash":"ff7ef30371233abe8c548c2f3d5cbb335183ca92","modified":1677233155225},{"_id":"public/lib/pdf/web/images/toolbarButton-sidebarToggle.svg","hash":"36051f39c70897a381250c1a247523e128ce4f3a","modified":1677233155225},{"_id":"public/lib/pdf/web/images/toolbarButton-viewAttachments.png","hash":"53c5a0c4c40f5f47fb6d2f57a82a4a6d0a83feb0","modified":1677233155225},{"_id":"public/lib/pdf/web/images/toolbarButton-sidebarToggle@2x.png","hash":"04c42cddc1e2bdd5130c6fa477ff3fa594edda56","modified":1677233155225},{"_id":"public/lib/pdf/web/images/toolbarButton-viewAttachments.svg","hash":"4fa65284ff8194045f100794e1d6cd0cb5e5fa84","modified":1677233155225},{"_id":"public/lib/pdf/web/images/toolbarButton-viewAttachments@2x.png","hash":"eb96df312c7ff6fc0451795bc0de8ebadb72cf86","modified":1677233155225},{"_id":"public/lib/pdf/web/images/toolbarButton-viewLayers.svg","hash":"3988264f3b30f0e402717954eabbc692f8cb6d98","modified":1677233155225},{"_id":"public/lib/pdf/web/images/toolbarButton-viewOutline-rtl.png","hash":"e6214527b9354eb920cbec85e6fe4e1296b7ae15","modified":1677233155225},{"_id":"public/lib/pdf/web/images/toolbarButton-viewOutline-rtl@2x.png","hash":"6684f9d7964446ec66a8f3865445892187d16d21","modified":1677233155225},{"_id":"public/lib/pdf/web/images/toolbarButton-viewOutline.png","hash":"ec7aa605c063faf6a951c2d64a8d98933b60f6a4","modified":1677233155225},{"_id":"public/lib/pdf/web/images/toolbarButton-viewOutline.svg","hash":"fc1dbb0d6ca5a4bd5e51b64d61f35423d145ef9d","modified":1677233155225},{"_id":"public/lib/pdf/web/images/toolbarButton-viewOutline@2x.png","hash":"76be930d871fbd1ebd6c4d76c4fa325f32efc624","modified":1677233155225},{"_id":"public/lib/pdf/web/images/toolbarButton-viewThumbnail.png","hash":"f62aad7c7719300f1d8e922155f451661d41d42d","modified":1677233155225},{"_id":"public/lib/pdf/web/images/toolbarButton-viewThumbnail.svg","hash":"94d128518c79b50977f9a595c937702bb12df5e3","modified":1677233155225},{"_id":"public/lib/pdf/web/images/toolbarButton-viewThumbnail@2x.png","hash":"ececa7ff064700efde72fa1e3889c8a1a3073dbc","modified":1677233155225},{"_id":"public/lib/pdf/web/images/toolbarButton-zoomIn.png","hash":"838adbe15d84daceec25cfd4d8d6ac1580b4f693","modified":1677233155225},{"_id":"public/lib/pdf/web/images/toolbarButton-zoomIn.svg","hash":"dfde15786e30d5e96cba282f3b67c0f7a3b24ae6","modified":1677233155225},{"_id":"public/lib/pdf/web/images/toolbarButton-zoomIn@2x.png","hash":"5403ddbeed138cc733020c352ae3bcd8cac03bf7","modified":1677233155225},{"_id":"public/lib/pdf/web/images/toolbarButton-zoomOut.png","hash":"63a719d5e6a708a22014f20abc0722cd54ffb0f6","modified":1677233155225},{"_id":"public/lib/pdf/web/images/toolbarButton-zoomOut.svg","hash":"ebc21e5385e4636b3842ce8d629f31b8065dd17f","modified":1677233155225},{"_id":"public/lib/pdf/web/images/toolbarButton-zoomOut@2x.png","hash":"4006d4387f2b0a0f0856d691a8874f74f61d0f51","modified":1677233155225},{"_id":"public/lib/pdf/web/images/treeitem-collapsed-rtl.png","hash":"7c2ff883f666ac379b04d0d41e3e6ddb14ddf220","modified":1677233155225},{"_id":"public/lib/pdf/web/images/treeitem-collapsed-rtl@2x.png","hash":"0465b8f9e77135e2bddd5708d425d5e1fc4ab63c","modified":1677233155225},{"_id":"public/lib/pdf/web/images/treeitem-collapsed.png","hash":"4588ca9c86db15c10de4de3f340111d4ce211ebd","modified":1677233155225},{"_id":"public/lib/pdf/web/images/treeitem-collapsed@2x.png","hash":"3229d96b4fa4d7e5c26fc135264d134e1024baab","modified":1677233155225},{"_id":"public/lib/pdf/web/images/treeitem-collapsed.svg","hash":"5b10744cb6d843f08b492fd10328c9cdb521ec14","modified":1677233155225},{"_id":"public/lib/pdf/web/images/treeitem-expanded@2x.png","hash":"bf924ff993236e563dab83b41193bcb43120c0b6","modified":1677233155225},{"_id":"public/lib/pdf/web/standard_fonts/FoxitDingbats.pfb","hash":"b287e74c6f65296d869f378a9dd73a0c807bac05","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/locale.properties","hash":"1c71e3dd75526fd21153e08b326ad9d43fc81d9d","modified":1677233155225},{"_id":"public/lib/pdf/web/images/treeitem-expanded.png","hash":"b0b4bca3d9bd0949da19a56214143db18f2a4f69","modified":1677233155225},{"_id":"public/lib/pdf/web/standard_fonts/FoxitFixed.pfb","hash":"4243340cbc644f355235a3f1232a5f82290ffe87","modified":1677233155225},{"_id":"public/lib/pdf/web/standard_fonts/FoxitFixedBold.pfb","hash":"15c97093fbb707e1e03967b6a0ffdbcc66065949","modified":1677233155225},{"_id":"public/lib/pdf/web/standard_fonts/FoxitFixedItalic.pfb","hash":"b90b3fb18da41df7b48f7b9c8ddad0f9e3d86d2d","modified":1677233155225},{"_id":"public/lib/pdf/web/images/treeitem-expanded.svg","hash":"f7791f5b8486039bfa9efbefe97de4ee4364a342","modified":1677233155225},{"_id":"public/lib/pdf/web/standard_fonts/FoxitFixedBoldItalic.pfb","hash":"bed3edc3928927aecb35f491da7bceeeac14b007","modified":1677233155225},{"_id":"public/lib/pdf/web/standard_fonts/FoxitSansBold.pfb","hash":"8b2bbff75cd15b43a02e3589ca651f1acd0e7189","modified":1677233155225},{"_id":"public/lib/pdf/web/standard_fonts/FoxitSans.pfb","hash":"3043cab781d200d01eaafaf8603454c0264257fd","modified":1677233155225},{"_id":"public/lib/pdf/web/standard_fonts/FoxitSansBoldItalic.pfb","hash":"676e6bc6d51687a3f63894a88ebeeaa1ee45346d","modified":1677233155225},{"_id":"public/lib/pdf/web/standard_fonts/FoxitSerif.pfb","hash":"be4ddd22a9efdbe42924aea16daccf3da27e518b","modified":1677233155225},{"_id":"public/lib/pdf/web/standard_fonts/FoxitSansItalic.pfb","hash":"0179dbae25be75617a9de06a4c07bbdf8bbf30c1","modified":1677233155225},{"_id":"public/lib/pdf/web/standard_fonts/FoxitSerifBold.pfb","hash":"025fee3fb98e6e65f2e7c58db5e367da8f2569d9","modified":1677233155225},{"_id":"public/lib/pdf/web/standard_fonts/FoxitSerifBoldItalic.pfb","hash":"b402fc7a75ec07247dcbb4d3efbdd34538f24b21","modified":1677233155225},{"_id":"public/lib/pdf/web/standard_fonts/FoxitSerifItalic.pfb","hash":"707bea637bde49070f5f3418593b0a78a93e9bb8","modified":1677233155225},{"_id":"public/lib/pdf/web/standard_fonts/FoxitSymbol.pfb","hash":"8dc16c6d3995399ad7c8a939525aef0998c31fc4","modified":1677233155225},{"_id":"public/lib/pdf/web/standard_fonts/LICENSE_FOXIT","hash":"689c532308da601d10beba61b6672b0c16dc3b48","modified":1677233155225},{"_id":"public/lib/pdf/web/standard_fonts/LICENSE_LIBERATION","hash":"0898cb73de9283d38e6f4cef45ce79efbfafb0b2","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/ach/viewer.properties","hash":"fb06aae5eb2c5edacadb44f735838524c3ea262e","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/ak/viewer.properties","hash":"7b32cf30fd16432bc4050919607659c5e7ac7fe3","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/af/viewer.properties","hash":"09e287d8cb1244d2b2a74a9914459dfdd22bfefb","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/an/viewer.properties","hash":"0232ee1041776e13ce4985862bdd8ecae5d5c84d","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/ar/viewer.properties","hash":"7c69db7db0a85ce83e671a85813bfb5268f60fbe","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/ast/viewer.properties","hash":"a8c41d889165b7db1c3d1e0c1df4de8466f8a3fe","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/bg/viewer.properties","hash":"311fe5cd6e27a4f330f3e3a871d1fabe67f1f3be","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/az/viewer.properties","hash":"a7d61446c0c4ba43374aec9158c2012713d4c319","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/be/viewer.properties","hash":"15a9018d857dcd3272d51c117a2a5dffd3822239","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/bn/viewer.properties","hash":"cf91d390d8bf10b6bcbe75703855a8cabeba6bea","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/bn-BD/viewer.properties","hash":"684f603efdd31daf880430192a327bd3ac4bb3d2","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/bo/viewer.properties","hash":"7dd11a4e2f72263f3ff2e6be0929639ba5ffb98e","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/bn-IN/viewer.properties","hash":"4b5286d177fba02adf8aefef7238c202fc7e254a","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/brx/viewer.properties","hash":"00782e18219249d84776906d93ce8e7984db48a7","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/br/viewer.properties","hash":"14fe8b3bbad161c0324b11ce37e7c3232e612703","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/bs/viewer.properties","hash":"ea1e26b9dbb320547d91999e9506683e3eeaee1a","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/ca/viewer.properties","hash":"758c792e39db9b4bb7b542451f1887268237971a","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/cak/viewer.properties","hash":"52e9a13f4ab50771f300b82e39901b8795ccf513","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/ckb/viewer.properties","hash":"f1db6c26e64fc5884b8dd2aaf93d7bd3c568175d","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/csb/viewer.properties","hash":"17e840af72cb4451a586e70f5a7c7bfeb9c20683","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/cs/viewer.properties","hash":"e8b49c0dcd848ec04a23324c48dae101ecc44a35","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/cy/viewer.properties","hash":"303a1b75e7503a9cab33f983613fd2637419f6e3","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/da/viewer.properties","hash":"5e7e4916cae49eef478815dca65f54ca97a9b34c","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/de/viewer.properties","hash":"4c8172d23f5908581f11797faec6beffae1e33bf","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/dsb/viewer.properties","hash":"0ef40246352dc7d4b5ad1df3b7616d5ff93595f5","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/el/viewer.properties","hash":"5d7ffdbc093bbba1438041dc3971288ebc1e8d38","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/en-CA/viewer.properties","hash":"898ae4827c8011733caf5bedfcd6146266d567f7","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/en-GB/viewer.properties","hash":"b81c489c056b66ef195bc9d35474dcb8f5ae38ca","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/en-US/viewer.properties","hash":"6932f8b4a0f42566b3f482da533d63a0b9b0bfd2","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/eo/viewer.properties","hash":"3672fc339fa8a2f05c47eb7442db99671e1904f8","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/es-AR/viewer.properties","hash":"fdcd38071a8026f209f9dca1e070d5853eafb007","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/es-CL/viewer.properties","hash":"55dda1dfc7aebc2bbecfdd4b9787313587c0f500","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/es-ES/viewer.properties","hash":"03f9abc00089375eb6dccd79b0b6177dfdc56e34","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/es-MX/viewer.properties","hash":"80a7085f4e0d644dfbb83ea0bfff38acc6ffc942","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/et/viewer.properties","hash":"60076dadb2c3e0fecf1d63c31ce1b67efcaf7d73","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/eu/viewer.properties","hash":"7791f8e8a4c3983408f10d924feb10e7daaba8b8","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/fa/viewer.properties","hash":"3f2c6b515108a49fe4ba9a96d9bc1c043345ef4d","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/ff/viewer.properties","hash":"0cb3017a2fa0cf2fa618ad21b3dbc679a172e80f","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/fr/viewer.properties","hash":"8061cc86f5dd83bf6d5ae217baf576180e8e8f8e","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/fi/viewer.properties","hash":"3d2e104d7a70473b1a40c3c5a3704c2e5871ffd8","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/fy-NL/viewer.properties","hash":"2ad529593306f66ffa887bae1100748ce9a91391","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/ga-IE/viewer.properties","hash":"2d50534d61bdf87c081db49f197e3cbbea08e591","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/gd/viewer.properties","hash":"93b49bcb19abcbfe5a4e3c6d7e03598683e7b546","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/gl/viewer.properties","hash":"ec26d3c005842658de1bc46e5f1f0383da6eba8c","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/gn/viewer.properties","hash":"b2941032d00a8391e60b33e5560a2e5d5cf06161","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/gu-IN/viewer.properties","hash":"bdd55c9d5d6f153fcb223d45640c925882c1e682","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/he/viewer.properties","hash":"77c7407d24082b394d80d389b7bbd169a0ced2b9","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/hi-IN/viewer.properties","hash":"5e7ebdbc64a986a2d1e0a928a5b39542ba5b4956","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/hr/viewer.properties","hash":"527f33cb21da88c1012f5996b72e0ef2058190fe","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/hsb/viewer.properties","hash":"5291bfa178826807de11c18a29eead654ad58957","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/hto/viewer.properties","hash":"4e6fc5d6b807cfe56ccca952a01c4630670f63f8","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/hu/viewer.properties","hash":"df7111800799adc97bcaa26ec73b9a02665c909c","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/hy-AM/viewer.properties","hash":"8b8098fe0130f696dfd63f7c086171aca360686d","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/hye/viewer.properties","hash":"cf3289e25feb1b1a0e82d97dca1806afd057b1af","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/id/viewer.properties","hash":"95b255531d23fca26b62d1c29f9a5aafa3b8a83e","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/ia/viewer.properties","hash":"27a7ef22c81fb19c3dc7ea2344093c998d559109","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/is/viewer.properties","hash":"bcd93e8c6126a446c12cb5018218830eb9fab955","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/it/viewer.properties","hash":"1bb8fdfe39ec91f82756a8576bfdf87748dac678","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/ja/viewer.properties","hash":"a89d40c958f05a3661e4ca60f3896218dfe167a2","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/ka/viewer.properties","hash":"5763428805f9f5f665cefbc179cc1360da4b8986","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/km/viewer.properties","hash":"0383eb630e4bde2775ba15219ce217ac39c87f50","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/kk/viewer.properties","hash":"b2b4ed2ef02a1b6a08a7b13b71db35cc191b2d1f","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/kab/viewer.properties","hash":"3b8425c444145b7d92074a20b2250cc34d956b90","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/ko/viewer.properties","hash":"203a7fbebf139ddfd90710bcd3cc33dc2125ac8e","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/kn/viewer.properties","hash":"a3a5bc6417bd932212edef06eea090cbcba72619","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/ks/viewer.properties","hash":"4805e2e3aac56f9559516125daa1dcc6bc214875","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/kok/viewer.properties","hash":"d887d8a052a35be54159f58f7243372dbf7ec258","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/lg/viewer.properties","hash":"18c1b9f7ca30c648bd31e31b15d16c876242ee73","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/ku/viewer.properties","hash":"46739e80d58ab8559ccfb21d6b0692a37e16e6a9","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/lo/viewer.properties","hash":"a5450f863424a88fa5ba7001f60153390f60ac4c","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/lij/viewer.properties","hash":"351a39dcb36dff47c82f424b908fb29d21c78ffd","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/lt/viewer.properties","hash":"ea79f133b2800c2592f977cd57bf75e6d4fd5571","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/ltg/viewer.properties","hash":"db9fc0c02dd9d4dce89a7c0d070a9e88558407e3","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/lv/viewer.properties","hash":"1f74076f999ed90917c1398cf2c28c8dceda27dc","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/meh/viewer.properties","hash":"d472059016f2cfb00d40fbe87c4f9680ea364605","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/mk/viewer.properties","hash":"449da585f230430ac0e688271753a641a8f61d0d","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/mn/viewer.properties","hash":"7986acd89509d0467129b71ce25922ecfbd4817e","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/mr/viewer.properties","hash":"9e1df86d6071d3b64e45bab19587254c7ad712ef","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/ms/viewer.properties","hash":"6d0562ac946b3b1c2a89a3514e8fd6ac5c211d36","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/my/viewer.properties","hash":"b2b4cb289884a1614b9948f33be9e899ab0ef193","modified":1677233155225},{"_id":"public/post-images/Balanced-tree-Treap-3.png","hash":"72ca57885f8f7397bd4df1d0bad520dad01389f7","modified":1677233155225},{"_id":"public/post-images/P2754-solution-1.png","hash":"eb191e2f78ef6e1fe36b17623973f63090d2bd9b","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/nb-NO/viewer.properties","hash":"14b8942d97880be8b3ccadbbf0153836ef02179a","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/ne-NP/viewer.properties","hash":"5ecde4da9519270ceed8805b4ab452469c7e5e9c","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/nl/viewer.properties","hash":"0abecc944e645337e64097e3c9c671f0e94e8349","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/nn-NO/viewer.properties","hash":"5efba4bdcd063a0f0b35f6fa363db70ba8737766","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/oc/viewer.properties","hash":"9ac8dfb943fbdbbb07d534657843f2038861726b","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/nso/viewer.properties","hash":"176afe940078cca679275adf9dbc1ca1d6e8f7ce","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/pl/viewer.properties","hash":"056b6317752f15a6efbd365a37242242a6458993","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/pt-BR/viewer.properties","hash":"d06a2a6bb84d823c3b255cba30ba54086180a37c","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/pt-PT/viewer.properties","hash":"a346c79dc339f74dfd260e1e370b869f2374f13e","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/pa-IN/viewer.properties","hash":"5ff1d12d7a5e6d1603ac97dc75a296a664d9596f","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/ro/viewer.properties","hash":"d0fe03723b7bba7b6a21480b209107fd8e0ad0d6","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/rm/viewer.properties","hash":"2a4c5e6ffaa0c7f879dff4dcee663f0bdd8c0953","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/rw/viewer.properties","hash":"7d96bc96802f37a1c9ead373524a425d08e1dbcf","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/ru/viewer.properties","hash":"f5e90bba295f6dc32813a4cc78caaeeab3ecaf37","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/sah/viewer.properties","hash":"ef69f15f4aa8ffcd0292b67519495ac962f0a846","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/sat/viewer.properties","hash":"7b22fe1b964610dcb3ebaa739e3b2581041a3650","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/sc/viewer.properties","hash":"04d5006a06ed525470347a5f43cbd6d6fc15e986","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/scn/viewer.properties","hash":"591b7ddd7a61c15d2bdeb04b1c1bf42120afd259","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/si/viewer.properties","hash":"4f2bcbf3f3ae489a4d2e9b6fba546c3def8b1258","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/sco/viewer.properties","hash":"b81fc46a79a6f5c1e4a91c7859eaf826a65256bd","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/sk/viewer.properties","hash":"d1b475062aafef82e266bd30ac215b465e8727d6","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/sl/viewer.properties","hash":"3863b03f0bb7f797225dcbde233228019461feb8","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/son/viewer.properties","hash":"fcaa12e20d2a5e095209be90f3e3bc8b0353f641","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/sq/viewer.properties","hash":"aa8e1b99ee96970b92eca7be528a80b4ba974b2b","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/sr/viewer.properties","hash":"c0ec1a6edf9fe3221c0f789ffb39935086556f37","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/sv-SE/viewer.properties","hash":"bb2cf19398972030cc6b12eff21ce128fed09230","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/sw/viewer.properties","hash":"7e5b770e8155a7465f77d1b2d7792fa22e50bcd0","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/szl/viewer.properties","hash":"b2c4eec446f4c5574abb0e793b9b24dacf1f9fef","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/ta/viewer.properties","hash":"7cfffe15ed884fe6bb8e4e40cafd94cd39a1c662","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/ta-LK/viewer.properties","hash":"646e2182307793f70a61584fc436886c946482c4","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/te/viewer.properties","hash":"a8cab4a7103f7ab287b908d23bd56007a605b101","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/tg/viewer.properties","hash":"264297c7eea370294542e192b7e066ed83c8963d","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/th/viewer.properties","hash":"3f206bc254a1f7052724cb92ed384e1bd824aa23","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/tl/viewer.properties","hash":"1239140dd1cec75f0f51500dbace90801d4b4b3a","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/tn/viewer.properties","hash":"b1839a14243baf851f7811e5be779d8e0e147105","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/tr/viewer.properties","hash":"de9206e244b2bb16afb033fca1a5319401be8484","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/trs/viewer.properties","hash":"7ae6dcdd1cf0086b0ff34b71a93c98d1e288ceeb","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/tsz/viewer.properties","hash":"0e3086f1dea298a35dcc91dd78d5a24250f1c908","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/uk/viewer.properties","hash":"3fb3b7a5c673d9b8fbe48e923799ec55592ccbe4","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/ur/viewer.properties","hash":"13c800761e850a0fed9aa2d278788bb9495707c4","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/vi/viewer.properties","hash":"3b6d9bf102a9a21be734196e73a3b61d9a3fbcdb","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/uz/viewer.properties","hash":"f1336786d9a58ec0efd21d8fe2b24f441371f613","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/wo/viewer.properties","hash":"8eca0d656382b5700ae9c4dc7ce2966a447a5cd6","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/xh/viewer.properties","hash":"42754d8bb590df3fdc8e97ee37fefc742d63dd60","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/zam/viewer.properties","hash":"a186e34704f3a1ba4cbf22fce81c576ab6487ed7","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/zh-TW/viewer.properties","hash":"c8748fcbb1ee6d290776b685a7b8bc099e30dcf0","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/zh-CN/viewer.properties","hash":"bd02fa1cbf501285b53a90dbb9f821db79655642","modified":1677233155225},{"_id":"public/lib/pdf/web/locale/zu/viewer.properties","hash":"1c283ba7792aa61cad501198bd8e4d7b13fa5bb3","modified":1677233155225},{"_id":"public/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":1677233155225},{"_id":"public/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1677233155225},{"_id":"public/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1677233155225},{"_id":"public/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1677233155225},{"_id":"public/js/motion.js","hash":"f7c825cbff11885fa0dffa64824fd00e505d6a8d","modified":1677233155225},{"_id":"public/js/next-boot.js","hash":"da0f07f9eaaa83de70128b0feaea3fdadb90457a","modified":1677233155225},{"_id":"public/js/pjax.js","hash":"919f5281c4a04d11cfd94573ecf57b3dbabd3cc8","modified":1677233155225},{"_id":"public/js/schedule.js","hash":"a1333258726caf84f368a8f8454639c7dc1626bb","modified":1677233155225},{"_id":"public/js/utils.js","hash":"200088bfd042f5304b2a04befab0829148845e0e","modified":1677233155225},{"_id":"public/js/third-party/fancybox.js","hash":"c098d14e65dd170537134358d4b8359ad0539c2c","modified":1677233155225},{"_id":"public/css/noscript.css","hash":"ec89b3425fbce20863d554c6fd495ea29c3c303d","modified":1677233155225},{"_id":"public/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1677233155225},{"_id":"public/js/schemes/muse.js","hash":"9794bd4fc6a458322949d6a0ade89cd1026bc69f","modified":1677233155225},{"_id":"public/js/third-party/quicklink.js","hash":"eed02e6fced8e5a653077205d4d4d7834ca71472","modified":1677233155225},{"_id":"public/js/third-party/rating.js","hash":"4e92c2d107ba47b47826829f9668030d5ea9bfb8","modified":1677233155225},{"_id":"public/lib/pdf/README.html","hash":"684f30c4db007e2cd06e4060196ef6cb5cc59932","modified":1677233155225},{"_id":"public/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1677233155225},{"_id":"public/js/third-party/chat/gitter.js","hash":"cc38c94125f90dadde11b5ebac7d8bf99a1a08a2","modified":1677233155225},{"_id":"public/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1677233155225},{"_id":"public/js/third-party/analytics/google-analytics.js","hash":"59684383385059dc4f8a1ff85dbbeb703bcdbcb5","modified":1677233155225},{"_id":"public/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1677233155225},{"_id":"public/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1677233155225},{"_id":"public/js/third-party/analytics/matomo.js","hash":"c6a25b26a1443caa70b47fd3dfa282271574deb5","modified":1677233155225},{"_id":"public/js/third-party/comments/changyan.js","hash":"260d1a77d6a3bb33a579d3e4cca1997003e799b5","modified":1677233155225},{"_id":"public/js/third-party/comments/disqus.js","hash":"e1cc671b0d524864fd445e3ab4ade9ee6d07e565","modified":1677233155225},{"_id":"public/js/third-party/comments/disqusjs.js","hash":"33a82207a15aad9d1c8fb2251f9e3eba50452932","modified":1677233155225},{"_id":"public/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1677233155225},{"_id":"public/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1677233155225},{"_id":"public/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1677233155225},{"_id":"public/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1677233155225},{"_id":"public/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1677233155225},{"_id":"public/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1677233155225},{"_id":"public/js/third-party/statistics/firestore.js","hash":"6e0682bb42170d61b13b786295f45f9c785f8b73","modified":1677233155225},{"_id":"public/js/third-party/statistics/lean-analytics.js","hash":"835cbf54c49ef1327f47df70ff2636ad36b6f57d","modified":1677233155225},{"_id":"public/js/third-party/search/algolia-search.js","hash":"fdb7b7cef1a147d897e7f7cd8903b58368ec2062","modified":1677233155225},{"_id":"public/js/third-party/search/local-search.js","hash":"4536cb6d0a9bbaaa86fab3fa0101f6a3a3ec5a76","modified":1677233155225},{"_id":"public/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1677233155225},{"_id":"public/js/third-party/tags/mermaid.js","hash":"f27d817b0c2138dd3215b1f46af0753f60a008f3","modified":1677233155225},{"_id":"public/lib/pdf/web/debugger.css","hash":"d2df1df4b3f62048a530ee10b6463a09002d94b6","modified":1677233155225},{"_id":"public/404.html","hash":"4862cac0cfe1a4b2923d70ce841d1dd6675e9c6a","modified":1677233155225},{"_id":"public/css/main.css","hash":"e2c36695fc2d6529a6f39afe1fdab60e651f0efd","modified":1677233155225},{"_id":"public/lib/pdf/build/pdf.js","hash":"1dcf42e1a0fc5243453c510d286607ef0b723fb4","modified":1677233155225},{"_id":"public/lib/pdf/web/debugger.js","hash":"eded7be18ab9d76e8edfb7241a72f575d3f1470e","modified":1677233155225},{"_id":"public/lib/pdf/web/viewer.css","hash":"e6331b5516cdb7865e3bb476b2e74d21d9401d73","modified":1677233155225},{"_id":"public/lib/pdf/web/viewer.html","hash":"7bee84a22826b6d5c69f175176d5dd8d8b826296","modified":1677233155225},{"_id":"public/lib/pdf/web/viewer.js","hash":"4cb3c481ce9c86593a472214b40b998c8dadb90a","modified":1677233155225},{"_id":"public/post-images/124.221.194.184_1.png","hash":"386995b8e6b7a4f90805b74607b07931c8848cb5","modified":1677233155225},{"_id":"public/post-images/124.221.194.184_0.png","hash":"0a798b2c757f2997983703d8b094c472e944f771","modified":1677233155225},{"_id":"public/lib/pdf/web/standard_fonts/LiberationSans-Bold.ttf","hash":"39a96b7556af673263b834fe2e10f3dea0653695","modified":1677233155225},{"_id":"public/lib/pdf/web/standard_fonts/LiberationSans-BoldItalic.ttf","hash":"47bc338b0f4391730b53309ca2b678759b1f2230","modified":1677233155225},{"_id":"public/lib/pdf/web/standard_fonts/LiberationSans-Italic.ttf","hash":"b48affb96d48e277aae21aa80e18fa41b12abccf","modified":1677233155225},{"_id":"public/lib/pdf/web/standard_fonts/LiberationSans-Regular.ttf","hash":"e8b7fa66057ae41dc3e03598211fcbca7744b495","modified":1677233155225},{"_id":"public/lib/pdf/build/pdf.sandbox.js","hash":"df6212fb1ad533e9f1c01741218f3c0d7353ab53","modified":1677233155225},{"_id":"public/lib/pdf/build/pdf.worker.js","hash":"87900bec0b51349b81fbe87e3b1c31e33235d151","modified":1677233155225},{"_id":"public/lib/pdf/build/pdf.sandbox.js.map","hash":"abdad760258ae7093e46d99adfe10693024180a0","modified":1677233155225},{"_id":"public/lib/pdf/web/compressed.tracemonkey-pldi-09.pdf","hash":"0d281938d3ff2377541704cab6ba1c4408420733","modified":1677233155225},{"_id":"public/lib/pdf/web/viewer.js.map","hash":"0595d22d02407e695235cfadabe91c29b79cd835","modified":1677233155225},{"_id":"public/lib/pdf/build/pdf.js.map","hash":"a1e2eec1abd964901bc47d93f66a62b910841fd3","modified":1677233155225},{"_id":"public/lib/pdf/build/pdf.worker.js.map","hash":"4146e6ec57e05f5946bcb54217ea876a89887406","modified":1677233155225},{"_id":"source/_posts/CF1340F-solution.md","hash":"899a8457ecbaf77cb1271314203d92b42e7af5c3","modified":1677235825783},{"_id":"public/post/CF1340F-solution/index.html","hash":"b81cf90005059746d8dbcf0479ad22ac31256e25","modified":1678852700574},{"_id":"public/baidusitemap.xml","hash":"4eb5b50a8f23a395b836fc582f8235dbb277bdec","modified":1678845444231},{"_id":"source/_posts/CF827F-solution.md","hash":"1df8f6de80982e39ad7ee8b3b6d413091f9df7c7","modified":1678100789847},{"_id":"public/post/CF827F-solution/index.html","hash":"62e235dc56385022105bd1619c7efffa77057b16","modified":1678852700574},{"_id":"source/_posts/NOI-spring-test-T4-solution.md","hash":"53ebaf63959fe1840c8a8e2cee33f54e86055ea7","modified":1678418632661},{"_id":"public/post/NOI-spring-test-T4-solution/index.html","hash":"9ea32709effd7c4b70e1dc874baf795b63f3b1b8","modified":1678852700574},{"_id":"public/archives/2023/03/index.html","hash":"4efbe1ee6bb01137156a5be65b372ce01b915680","modified":1678852700574},{"_id":"source/_posts/xjp-lianren.md","hash":"3378447494229dcb2bae2c307c6c49fc2acbad55","modified":1678420740175},{"_id":"public/post/xjp-lianren/index.html","hash":"fd911121704da2e68b9df3abc0580e49bf9ca93c","modified":1678420746889},{"_id":"source/about/index.md","hash":"ddb61d6c92959a49e954fb0e3a3c513b47bc5e98","modified":1678850785274},{"_id":"source/mirrors/index.html","hash":"a56e91b29a3c6b706600fa8502e6b8c63d71af9e","modified":1678852648437},{"_id":"public/about/index.html","hash":"36898ba80d345ea8a277005e1f328fde723d2f0c","modified":1678852700574},{"_id":"public/mirrors/index.html","hash":"918b470934bbc5405592693ba8c17b891972d24c","modified":1678852700574}],"Category":[],"Data":[],"Page":[{"layout":"false","_content":"058485628875f27dbea90f51ce07b7de","source":"baidu_verify_code-O2ehcy1PsR.html","raw":"layout: false\n---\n058485628875f27dbea90f51ce07b7de","date":"2023-02-23T06:16:18.130Z","updated":"2023-02-23T06:16:18.130Z","path":"baidu_verify_code-O2ehcy1PsR.html","title":"","comments":1,"_id":"cleid927200002sjfdk2n03l8","content":"058485628875f27dbea90f51ce07b7de","site":{"data":{}},"excerpt":"","more":"058485628875f27dbea90f51ce07b7de"},{"layout":"false","_content":"google-site-verification: google7c80d6fa20e2e726.html","source":"google7c80d6fa20e2e726.html","raw":"layout: false\n---\ngoogle-site-verification: google7c80d6fa20e2e726.html","date":"2023-02-23T06:16:13.586Z","updated":"2023-02-23T06:16:13.586Z","path":"google7c80d6fa20e2e726.html","title":"","comments":1,"_id":"cleid927c00022sjfhf0y11gf","content":"google-site-verification: google7c80d6fa20e2e726.html","site":{"data":{}},"excerpt":"","more":"google-site-verification: google7c80d6fa20e2e726.html"},{"title":"标签","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ntype: tags\ncomments: false\n---\n","date":"2022-11-28T12:00:33.806Z","updated":"2022-08-10T14:05:02.000Z","path":"tags/index.html","layout":"page","_id":"cleid927g00052sjf2jbtgjqi","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"分类","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ntype: categories\ncomments: false\n---\n","date":"2022-11-28T12:00:32.724Z","updated":"2022-08-10T14:04:48.000Z","path":"categories/index.html","layout":"page","_id":"cleid927h00072sjffpbrfd65","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"about","date":"2023-03-15T03:25:19.000Z","_content":"cdqz 2022 级 OIer 。\n\n由 [Sukwants](https://github.com/sukwants) 提供技术支持。\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2023-03-15 11:25:19\n---\ncdqz 2022 级 OIer 。\n\n由 [Sukwants](https://github.com/sukwants) 提供技术支持。\n","updated":"2023-03-15T03:26:25.274Z","path":"about/index.html","_id":"clf940mgt0000zsj7186184bw","comments":1,"layout":"page","content":"<p>cdqz 2022 级 OIer 。</p>\n<p>由 <a href=\"https://github.com/sukwants\">Sukwants</a> 提供技术支持。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>cdqz 2022 级 OIer 。</p>\n<p>由 <a href=\"https://github.com/sukwants\">Sukwants</a> 提供技术支持。</p>\n"},{"_content":"<head>\n    <title> 镜像 </title>\n</head>\n\n<body>\n\n    <h1 align=\"center\"> 镜像 </h1>\n    <div class=\"post-body animated fadeInDown\">\n    <div class=\"card\"><a href=\"https://2745518585.github.io\" target=\"_blank\"><div class=\"thumb\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\" version=\"1.1\" data-view-component=\"true\" class=\"octicon octicon-mark-github\"><path fill-rule=\"evenodd\" d=\"M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0016 8c0-4.42-3.58-8-8-8z\"></path></svg></div></a><div class=\"card-header\"><div><a href=\"https://2745518585.github.io\" target=\"_blank\">Github Pages</a></div></div></div>\n    <div class=\"card\"><a href=\"https://2745518585.netlify.app\" target=\"_blank\"><div class=\"thumb\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\"><defs><path id=\"safari-pinned-tab-icon-a\" d=\"M8.05910844,0.231590298 L14.7684097,6.94089156 C15.0771968,7.24967863 15.0771968,7.75032137 14.7684097,8.05910844 L8.05910844,14.7684097 C7.75032137,15.0771968 7.24967863,15.0771968 6.94089156,14.7684097 L0.231590298,8.05910844 C-0.077196766,7.75032137 -0.077196766,7.24967863 0.231590298,6.94089156 L6.94089156,0.231590298 C7.24967863,-0.077196766 7.75032137,-0.077196766 8.05910844,0.231590298 Z\"></path></defs><g fill=\"none\" fill-rule=\"evenodd\" transform=\"translate(.5 .5)\"><mask id=\"safari-pinned-tab-icon-b\" fill=\"#fff\"><use xlink:href=\"#safari-pinned-tab-icon-a\"></use></mask><path fill=\"#30c8c9\" d=\"M10.9443863,5.34204439 C10.8906467,5.28228603 10.8234723,5.22916749 10.7428629,5.18932858 C10.7361454,5.18932858 10.729428,5.17604894 10.7227105,5.16940912 L11.0384306,3.23722209 C11.0384306,3.22394245 11.0451481,3.21730263 11.0518655,3.21730263 L11.058583,3.21730263 C11.058583,3.21730263 11.0653004,3.21730263 11.0720179,3.22394245 L12.5162694,4.65150332 C12.5229868,4.65814314 12.5229868,4.66478296 12.5229868,4.67142277 C12.5229868,4.67806259 12.5162694,4.68470241 12.5095519,4.69134223 L10.9645387,5.34868421 L10.9578212,5.34868421 C10.9511038,5.34868421 10.9511038,5.34868421 10.9443863,5.34204439 Z M7.67298041,4.27301978 C7.65954539,4.14022417 7.61252283,4.00742857 7.53863024,3.8945523 C7.53191273,3.88791252 7.53191273,3.87463296 7.53863024,3.8613534 L9.15754982,1.3515164 C9.15754982,1.34487662 9.16426733,1.33823684 9.17098484,1.33823684 C9.17770234,1.33823684 9.17770234,1.33823684 9.18441985,1.34487662 L10.6219667,2.77242941 C10.6286842,2.77906919 10.6286842,2.78570897 10.6286842,2.79234875 L10.2525037,5.12291167 C10.2525037,5.13619123 10.2457862,5.14283101 10.2390687,5.14283101 C10.1517411,5.16939014 10.071131,5.20922882 10.0039559,5.26234706 C10.0039559,5.26898684 9.9972384,5.26898684 9.98380338,5.26898684 L7.68641543,4.29293912 C7.67969792,4.28629934 7.67298041,4.27965956 7.67298041,4.27301978 Z M12.9193375,5.0432845 L15.3846606,7.48671899 C15.3980956,7.49335876 15.3980956,7.51327807 15.3846606,7.51327807 L15.3712256,7.5265576 C15.3712256,7.53319737 15.3645081,7.53319737 15.3510731,7.53319737 L11.2265271,5.78693848 C11.2198096,5.78693848 11.2130921,5.77365894 11.2130921,5.76701918 C11.2130921,5.76037941 11.2198096,5.75373964 11.2265271,5.74709987 L12.9059025,5.03664474 C12.9059025,5.03664474 12.91262,5.03664474 12.9193375,5.0432845 Z M11.0183074,6.21189474 L14.9749272,7.88512359 C14.9816447,7.89176338 14.9816447,7.89840318 14.9816447,7.90504298 C14.9816447,7.91168277 14.9816447,7.91832257 14.9749272,7.92496237 L12.7850154,10.096176 C12.7850154,10.1028158 12.7782979,10.1028158 12.7648628,10.1028158 L10.3734254,9.60483101 C10.3599903,9.60483101 10.3532728,9.59819122 10.3532728,9.58491162 C10.3331202,9.39899731 10.2457925,9.23300238 10.098007,9.12012583 C10.0912895,9.11348603 10.0912895,9.10684624 10.0912895,9.10020644 L10.5144933,6.50404581 C10.5144933,6.49076621 10.5279283,6.48412641 10.5346459,6.48412641 C10.7227364,6.45756723 10.8839569,6.36461007 10.9914373,6.21853453 C10.9981548,6.21189474 11.0048723,6.21189474 11.0183074,6.21189474 Z M7.57222646,4.75113158 L9.73526236,5.66742243 C9.74197987,5.67406222 9.74869737,5.68070201 9.74869737,5.69398159 C9.74197987,5.72718053 9.73526236,5.76701927 9.73526236,5.806858 L9.73526236,5.8666161 C9.73526236,5.87325589 9.72854486,5.87989568 9.72182736,5.88653547 C9.72182736,5.88653547 4.97255288,7.91167105 4.96583537,7.91167105 C4.95911787,7.91167105 4.95240037,7.91167105 4.94568286,7.90503126 C4.93896536,7.89839148 4.93896536,7.8851119 4.94568286,7.87847211 L6.72582111,5.12295975 C6.73253861,5.11631996 6.73925611,5.10968017 6.75269112,5.10968017 C6.79971364,5.11631996 6.84001865,5.12295975 6.88032367,5.12295975 C7.14902378,5.12295975 7.39757139,4.99016398 7.54535645,4.76441116 C7.55207395,4.75777137 7.55879145,4.75113158 7.57222646,4.75113158 Z M10.2390508,10.0563158 L12.3416308,10.4879038 C12.3483483,10.4879038 12.3550658,10.4945436 12.3550658,10.5144631 C12.3550658,10.5211029 12.3550658,10.5277427 12.3483483,10.5343825 L9.43294979,13.4227023 C9.43294979,13.4293421 9.42623228,13.4293421 9.41951477,13.4293421 L9.40607975,13.4293421 C9.39936224,13.4227023 9.39264474,13.4160625 9.39264474,13.4027828 L9.89645784,10.3086288 C9.89645784,10.301989 9.90317535,10.2887093 9.90989286,10.2887093 C10.030808,10.2422306 10.1315706,10.1625528 10.2121807,10.0629556 C10.2188982,10.0629556 10.2256157,10.0563158 10.2390508,10.0563158 Z M9.00304338,9.81066447 C9.05678356,10.0164984 9.20456907,10.195773 9.40609477,10.2754507 C9.41952981,10.2820905 9.41952981,10.2953701 9.40609477,10.2953701 C9.40609477,10.2953701 8.79480016,14.0202993 8.79480016,14.0269391 L8.57983942,14.2394128 C8.57983942,14.2460526 8.57312189,14.2460526 8.56640437,14.2460526 C8.55968685,14.2460526 8.55968685,14.2460526 8.55296932,14.2394128 L5.00611709,9.1134852 C4.99939957,9.10684539 4.99939957,9.09356579 5.00611709,9.08692599 C5.02626966,9.06036678 5.03970471,9.03380757 5.05985728,9.00060855 C5.0665748,8.99396875 5.07329232,8.98732895 5.08672737,8.98732895 L8.98289081,9.79074507 C8.99632585,9.79738487 9.00304338,9.80402467 9.00304338,9.81066447 Z M5.18751548,8.53579163 C5.1740805,8.53579163 5.167363,8.52915185 5.167363,8.51587228 C5.167363,8.462754 5.15392802,8.41627551 5.14721053,8.36315723 C5.14721053,8.34987766 5.14721053,8.34323788 5.16064551,8.33659809 C5.16064551,8.33659809 9.93678251,6.29818421 9.9435,6.29818421 C9.9435,6.29818421 9.95021749,6.29818421 9.95693498,6.304824 C9.99052245,6.33802292 10.0173924,6.35794227 10.0442624,6.37786163 C10.0576974,6.37786163 10.0576974,6.3911412 10.0576974,6.39778098 L9.64121285,8.95409807 C9.64121285,8.96737763 9.63449536,8.97401742 9.62106037,8.97401742 C9.39266563,8.98729699 9.19114087,9.12009268 9.0769435,9.31928622 C9.07022601,9.325926 9.06350851,9.33256579 9.05007353,9.33256579 L5.18751548,8.53579163 Z M3.48798236,9.07363495 C3.50813502,9.10683418 3.52828768,9.13339356 3.54844034,9.15995294 C3.55515789,9.16659278 3.55515789,9.17323262 3.55515789,9.17323262 L2.63485302,10.6007993 C2.62813547,10.6074391 2.62141791,10.6140789 2.61470036,10.6140789 C2.61470036,10.6140789 2.60798281,10.6140789 2.60126525,10.6074391 L1.78844124,9.80401788 C1.78172368,9.79737804 1.78172368,9.79073819 1.78172368,9.78409835 C1.78172368,9.7774585 1.78844124,9.77081866 1.79515879,9.77081866 L3.46111214,9.06035526 L3.46782969,9.06035526 C3.47454725,9.06035526 3.4812648,9.06699511 3.48798236,9.07363495 Z M4.6299272,9.40563158 C4.63664468,9.40563158 4.64336216,9.41227139 4.65007964,9.41891119 L8.21034347,14.5846805 C8.21706095,14.5913203 8.21706095,14.6045999 8.21034347,14.6112397 L7.43111591,15.388097 C7.43111591,15.3947368 7.42439844,15.3947368 7.404246,15.388097 L2.95727495,10.9859055 C2.95055747,10.9792657 2.95055747,10.9659861 2.96399243,10.9527064 L3.9313094,9.45211022 C3.93802687,9.44547042 3.94474435,9.43883061 3.95817931,9.43883061 C4.05894149,9.47202964 4.1529862,9.48530925 4.25374838,9.48530925 C4.38138048,9.48530925 4.5022951,9.45875003 4.6299272,9.40563158 Z M4.04551903,7.699176 C4.03880151,7.699176 4.03208399,7.69253622 4.02536647,7.68589643 L2.11759077,4.90382619 C2.11087325,4.89718641 2.11087325,4.88390684 2.11759077,4.87726705 L3.83055839,3.17748189 C3.83055839,3.17084211 3.83727591,3.17084211 3.85071095,3.17084211 C3.85071095,3.17748189 5.87268448,4.02737447 6.10108017,4.12697126 C6.10779769,4.13361104 6.11451521,4.14025083 6.11451521,4.1535304 C6.10108017,4.21328847 6.09436265,4.27304654 6.09436265,4.33280462 C6.09436265,4.53863797 6.17497289,4.73119176 6.31604081,4.87726705 C6.32275833,4.88390684 6.32275833,4.89718641 6.31604081,4.90382619 L4.51574543,7.69253622 C4.50902791,7.699176 4.50231039,7.70581579 4.48887535,7.70581579 C4.41498263,7.68589643 4.33437239,7.67261686 4.26047967,7.67261686 C4.19330447,7.67261686 4.11941175,7.68589643 4.04551903,7.699176 Z M6.34963908,3.72860526 C6.26231182,3.68876621 4.22019732,2.8255867 4.22019732,2.8255867 C4.21347984,2.81894686 4.20676236,2.81894686 4.21347984,2.80566718 C4.21347984,2.79902733 4.21347984,2.79238749 4.22019732,2.78574765 L7.4177187,-0.388097 C7.4177187,-0.394736842 7.42443618,-0.394736842 7.43115366,-0.394736842 C7.43787115,-0.394736842 7.43787115,-0.394736842 7.44458863,-0.388097 L8.82167241,0.973070684 C8.8283899,0.979710526 8.8283899,0.992990211 8.82167241,0.999630053 L7.16245439,3.56924905 C7.15573691,3.57588889 7.14901943,3.58252873 7.13558446,3.58252873 C7.0482572,3.55596936 6.96092993,3.54268968 6.87360267,3.54268968 C6.69223066,3.54268968 6.51085865,3.6090881 6.36979153,3.72196542 C6.36307404,3.72860526 6.36307404,3.72860526 6.34963908,3.72860526 Z M3.44767596,8.15733883 C3.44095846,8.16397863 3.43424095,8.17061842 3.42752345,8.17061842 L-0.374584327,7.373843 C-0.388019337,7.373843 -0.394736842,7.3672032 -0.394736842,7.36056341 C-0.394736842,7.35392361 -0.394736842,7.34728382 -0.388019337,7.34064402 L1.73471221,5.24246874 C1.73471221,5.23582895 1.74142972,5.23582895 1.74814722,5.23582895 C1.76158223,5.24246874 1.76158223,5.24246874 1.76829974,5.24910854 C1.76829974,5.25574833 3.58874357,7.88510723 3.60889608,7.91166641 C3.61561359,7.9183062 3.61561359,7.93158579 3.60889608,7.93822559 C3.54843854,8.00462354 3.48798099,8.07766129 3.44767596,8.15733883 Z M3.23267656,8.60882866 C3.24611148,8.60882866 3.25282895,8.61546841 3.25282895,8.62874791 C3.25282895,8.63538767 3.24611148,8.64202742 3.23267656,8.65530692 L1.39880921,9.43215789 C1.39880921,9.43215789 1.39209175,9.43215789 1.38537428,9.42551814 L-0.085750073,7.96477272 C-0.0924675358,7.95813297 -0.0991849986,7.94485347 -0.0924675358,7.93821371 C-0.085750073,7.93157396 -0.0790326102,7.92493421 -0.0655976845,7.92493421 L3.23267656,8.60882866 Z\" mask=\"url(#safari-pinned-tab-icon-b)\"></path></g></svg></div></a><div class=\"card-header\"><div><a href=\"https://2745518585.netlify.app\" target=\"_blank\">Netlify</a></div></div></div>\n    <style>.links-content{margin-top:1rem}.link-navigation::after{content:\" \";display:block;clear:both}.card{width:150px;margin-left:calc((100% - 300px) / 3);font-size:1rem;padding:0;border-radius:4px;transition-duration:.15s;margin-bottom:1rem;display:block;float:left;box-shadow:0 2px 6px 0 rgba(0,0,0,.12);background:#f5f5f5}.card:hover{transform:scale(1.1);box-shadow:0 2px 6px 0 rgba(0,0,0,.12),0 0 6px 0 rgba(0,0,0,.04)}.card .thumb{width:100%;height:0;padding-bottom:100%;background-size:100% 100%!important}.posts-expand .post-body img{margin:0;padding:0;border:0}.card .card-header{display:block;text-align:center;padding:1rem .25rem;font-weight:500;color:#333;white-space:normal}.card .card-header a{font-style:normal;color:#2bbc8a;font-weight:700;text-decoration:none;border:0}.card .card-header a:hover{color:#29797e;text-decoration:none;border:0}</style><div><div class=\"links-content\"><div class=\"link-navigation\" id=\"links1\"></div></div></div>\n\n    </div>\n</body>","source":"mirrors/index.html","raw":"<head>\n    <title> 镜像 </title>\n</head>\n\n<body>\n\n    <h1 align=\"center\"> 镜像 </h1>\n    <div class=\"post-body animated fadeInDown\">\n    <div class=\"card\"><a href=\"https://2745518585.github.io\" target=\"_blank\"><div class=\"thumb\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\" version=\"1.1\" data-view-component=\"true\" class=\"octicon octicon-mark-github\"><path fill-rule=\"evenodd\" d=\"M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0016 8c0-4.42-3.58-8-8-8z\"></path></svg></div></a><div class=\"card-header\"><div><a href=\"https://2745518585.github.io\" target=\"_blank\">Github Pages</a></div></div></div>\n    <div class=\"card\"><a href=\"https://2745518585.netlify.app\" target=\"_blank\"><div class=\"thumb\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\"><defs><path id=\"safari-pinned-tab-icon-a\" d=\"M8.05910844,0.231590298 L14.7684097,6.94089156 C15.0771968,7.24967863 15.0771968,7.75032137 14.7684097,8.05910844 L8.05910844,14.7684097 C7.75032137,15.0771968 7.24967863,15.0771968 6.94089156,14.7684097 L0.231590298,8.05910844 C-0.077196766,7.75032137 -0.077196766,7.24967863 0.231590298,6.94089156 L6.94089156,0.231590298 C7.24967863,-0.077196766 7.75032137,-0.077196766 8.05910844,0.231590298 Z\"></path></defs><g fill=\"none\" fill-rule=\"evenodd\" transform=\"translate(.5 .5)\"><mask id=\"safari-pinned-tab-icon-b\" fill=\"#fff\"><use xlink:href=\"#safari-pinned-tab-icon-a\"></use></mask><path fill=\"#30c8c9\" d=\"M10.9443863,5.34204439 C10.8906467,5.28228603 10.8234723,5.22916749 10.7428629,5.18932858 C10.7361454,5.18932858 10.729428,5.17604894 10.7227105,5.16940912 L11.0384306,3.23722209 C11.0384306,3.22394245 11.0451481,3.21730263 11.0518655,3.21730263 L11.058583,3.21730263 C11.058583,3.21730263 11.0653004,3.21730263 11.0720179,3.22394245 L12.5162694,4.65150332 C12.5229868,4.65814314 12.5229868,4.66478296 12.5229868,4.67142277 C12.5229868,4.67806259 12.5162694,4.68470241 12.5095519,4.69134223 L10.9645387,5.34868421 L10.9578212,5.34868421 C10.9511038,5.34868421 10.9511038,5.34868421 10.9443863,5.34204439 Z M7.67298041,4.27301978 C7.65954539,4.14022417 7.61252283,4.00742857 7.53863024,3.8945523 C7.53191273,3.88791252 7.53191273,3.87463296 7.53863024,3.8613534 L9.15754982,1.3515164 C9.15754982,1.34487662 9.16426733,1.33823684 9.17098484,1.33823684 C9.17770234,1.33823684 9.17770234,1.33823684 9.18441985,1.34487662 L10.6219667,2.77242941 C10.6286842,2.77906919 10.6286842,2.78570897 10.6286842,2.79234875 L10.2525037,5.12291167 C10.2525037,5.13619123 10.2457862,5.14283101 10.2390687,5.14283101 C10.1517411,5.16939014 10.071131,5.20922882 10.0039559,5.26234706 C10.0039559,5.26898684 9.9972384,5.26898684 9.98380338,5.26898684 L7.68641543,4.29293912 C7.67969792,4.28629934 7.67298041,4.27965956 7.67298041,4.27301978 Z M12.9193375,5.0432845 L15.3846606,7.48671899 C15.3980956,7.49335876 15.3980956,7.51327807 15.3846606,7.51327807 L15.3712256,7.5265576 C15.3712256,7.53319737 15.3645081,7.53319737 15.3510731,7.53319737 L11.2265271,5.78693848 C11.2198096,5.78693848 11.2130921,5.77365894 11.2130921,5.76701918 C11.2130921,5.76037941 11.2198096,5.75373964 11.2265271,5.74709987 L12.9059025,5.03664474 C12.9059025,5.03664474 12.91262,5.03664474 12.9193375,5.0432845 Z M11.0183074,6.21189474 L14.9749272,7.88512359 C14.9816447,7.89176338 14.9816447,7.89840318 14.9816447,7.90504298 C14.9816447,7.91168277 14.9816447,7.91832257 14.9749272,7.92496237 L12.7850154,10.096176 C12.7850154,10.1028158 12.7782979,10.1028158 12.7648628,10.1028158 L10.3734254,9.60483101 C10.3599903,9.60483101 10.3532728,9.59819122 10.3532728,9.58491162 C10.3331202,9.39899731 10.2457925,9.23300238 10.098007,9.12012583 C10.0912895,9.11348603 10.0912895,9.10684624 10.0912895,9.10020644 L10.5144933,6.50404581 C10.5144933,6.49076621 10.5279283,6.48412641 10.5346459,6.48412641 C10.7227364,6.45756723 10.8839569,6.36461007 10.9914373,6.21853453 C10.9981548,6.21189474 11.0048723,6.21189474 11.0183074,6.21189474 Z M7.57222646,4.75113158 L9.73526236,5.66742243 C9.74197987,5.67406222 9.74869737,5.68070201 9.74869737,5.69398159 C9.74197987,5.72718053 9.73526236,5.76701927 9.73526236,5.806858 L9.73526236,5.8666161 C9.73526236,5.87325589 9.72854486,5.87989568 9.72182736,5.88653547 C9.72182736,5.88653547 4.97255288,7.91167105 4.96583537,7.91167105 C4.95911787,7.91167105 4.95240037,7.91167105 4.94568286,7.90503126 C4.93896536,7.89839148 4.93896536,7.8851119 4.94568286,7.87847211 L6.72582111,5.12295975 C6.73253861,5.11631996 6.73925611,5.10968017 6.75269112,5.10968017 C6.79971364,5.11631996 6.84001865,5.12295975 6.88032367,5.12295975 C7.14902378,5.12295975 7.39757139,4.99016398 7.54535645,4.76441116 C7.55207395,4.75777137 7.55879145,4.75113158 7.57222646,4.75113158 Z M10.2390508,10.0563158 L12.3416308,10.4879038 C12.3483483,10.4879038 12.3550658,10.4945436 12.3550658,10.5144631 C12.3550658,10.5211029 12.3550658,10.5277427 12.3483483,10.5343825 L9.43294979,13.4227023 C9.43294979,13.4293421 9.42623228,13.4293421 9.41951477,13.4293421 L9.40607975,13.4293421 C9.39936224,13.4227023 9.39264474,13.4160625 9.39264474,13.4027828 L9.89645784,10.3086288 C9.89645784,10.301989 9.90317535,10.2887093 9.90989286,10.2887093 C10.030808,10.2422306 10.1315706,10.1625528 10.2121807,10.0629556 C10.2188982,10.0629556 10.2256157,10.0563158 10.2390508,10.0563158 Z M9.00304338,9.81066447 C9.05678356,10.0164984 9.20456907,10.195773 9.40609477,10.2754507 C9.41952981,10.2820905 9.41952981,10.2953701 9.40609477,10.2953701 C9.40609477,10.2953701 8.79480016,14.0202993 8.79480016,14.0269391 L8.57983942,14.2394128 C8.57983942,14.2460526 8.57312189,14.2460526 8.56640437,14.2460526 C8.55968685,14.2460526 8.55968685,14.2460526 8.55296932,14.2394128 L5.00611709,9.1134852 C4.99939957,9.10684539 4.99939957,9.09356579 5.00611709,9.08692599 C5.02626966,9.06036678 5.03970471,9.03380757 5.05985728,9.00060855 C5.0665748,8.99396875 5.07329232,8.98732895 5.08672737,8.98732895 L8.98289081,9.79074507 C8.99632585,9.79738487 9.00304338,9.80402467 9.00304338,9.81066447 Z M5.18751548,8.53579163 C5.1740805,8.53579163 5.167363,8.52915185 5.167363,8.51587228 C5.167363,8.462754 5.15392802,8.41627551 5.14721053,8.36315723 C5.14721053,8.34987766 5.14721053,8.34323788 5.16064551,8.33659809 C5.16064551,8.33659809 9.93678251,6.29818421 9.9435,6.29818421 C9.9435,6.29818421 9.95021749,6.29818421 9.95693498,6.304824 C9.99052245,6.33802292 10.0173924,6.35794227 10.0442624,6.37786163 C10.0576974,6.37786163 10.0576974,6.3911412 10.0576974,6.39778098 L9.64121285,8.95409807 C9.64121285,8.96737763 9.63449536,8.97401742 9.62106037,8.97401742 C9.39266563,8.98729699 9.19114087,9.12009268 9.0769435,9.31928622 C9.07022601,9.325926 9.06350851,9.33256579 9.05007353,9.33256579 L5.18751548,8.53579163 Z M3.48798236,9.07363495 C3.50813502,9.10683418 3.52828768,9.13339356 3.54844034,9.15995294 C3.55515789,9.16659278 3.55515789,9.17323262 3.55515789,9.17323262 L2.63485302,10.6007993 C2.62813547,10.6074391 2.62141791,10.6140789 2.61470036,10.6140789 C2.61470036,10.6140789 2.60798281,10.6140789 2.60126525,10.6074391 L1.78844124,9.80401788 C1.78172368,9.79737804 1.78172368,9.79073819 1.78172368,9.78409835 C1.78172368,9.7774585 1.78844124,9.77081866 1.79515879,9.77081866 L3.46111214,9.06035526 L3.46782969,9.06035526 C3.47454725,9.06035526 3.4812648,9.06699511 3.48798236,9.07363495 Z M4.6299272,9.40563158 C4.63664468,9.40563158 4.64336216,9.41227139 4.65007964,9.41891119 L8.21034347,14.5846805 C8.21706095,14.5913203 8.21706095,14.6045999 8.21034347,14.6112397 L7.43111591,15.388097 C7.43111591,15.3947368 7.42439844,15.3947368 7.404246,15.388097 L2.95727495,10.9859055 C2.95055747,10.9792657 2.95055747,10.9659861 2.96399243,10.9527064 L3.9313094,9.45211022 C3.93802687,9.44547042 3.94474435,9.43883061 3.95817931,9.43883061 C4.05894149,9.47202964 4.1529862,9.48530925 4.25374838,9.48530925 C4.38138048,9.48530925 4.5022951,9.45875003 4.6299272,9.40563158 Z M4.04551903,7.699176 C4.03880151,7.699176 4.03208399,7.69253622 4.02536647,7.68589643 L2.11759077,4.90382619 C2.11087325,4.89718641 2.11087325,4.88390684 2.11759077,4.87726705 L3.83055839,3.17748189 C3.83055839,3.17084211 3.83727591,3.17084211 3.85071095,3.17084211 C3.85071095,3.17748189 5.87268448,4.02737447 6.10108017,4.12697126 C6.10779769,4.13361104 6.11451521,4.14025083 6.11451521,4.1535304 C6.10108017,4.21328847 6.09436265,4.27304654 6.09436265,4.33280462 C6.09436265,4.53863797 6.17497289,4.73119176 6.31604081,4.87726705 C6.32275833,4.88390684 6.32275833,4.89718641 6.31604081,4.90382619 L4.51574543,7.69253622 C4.50902791,7.699176 4.50231039,7.70581579 4.48887535,7.70581579 C4.41498263,7.68589643 4.33437239,7.67261686 4.26047967,7.67261686 C4.19330447,7.67261686 4.11941175,7.68589643 4.04551903,7.699176 Z M6.34963908,3.72860526 C6.26231182,3.68876621 4.22019732,2.8255867 4.22019732,2.8255867 C4.21347984,2.81894686 4.20676236,2.81894686 4.21347984,2.80566718 C4.21347984,2.79902733 4.21347984,2.79238749 4.22019732,2.78574765 L7.4177187,-0.388097 C7.4177187,-0.394736842 7.42443618,-0.394736842 7.43115366,-0.394736842 C7.43787115,-0.394736842 7.43787115,-0.394736842 7.44458863,-0.388097 L8.82167241,0.973070684 C8.8283899,0.979710526 8.8283899,0.992990211 8.82167241,0.999630053 L7.16245439,3.56924905 C7.15573691,3.57588889 7.14901943,3.58252873 7.13558446,3.58252873 C7.0482572,3.55596936 6.96092993,3.54268968 6.87360267,3.54268968 C6.69223066,3.54268968 6.51085865,3.6090881 6.36979153,3.72196542 C6.36307404,3.72860526 6.36307404,3.72860526 6.34963908,3.72860526 Z M3.44767596,8.15733883 C3.44095846,8.16397863 3.43424095,8.17061842 3.42752345,8.17061842 L-0.374584327,7.373843 C-0.388019337,7.373843 -0.394736842,7.3672032 -0.394736842,7.36056341 C-0.394736842,7.35392361 -0.394736842,7.34728382 -0.388019337,7.34064402 L1.73471221,5.24246874 C1.73471221,5.23582895 1.74142972,5.23582895 1.74814722,5.23582895 C1.76158223,5.24246874 1.76158223,5.24246874 1.76829974,5.24910854 C1.76829974,5.25574833 3.58874357,7.88510723 3.60889608,7.91166641 C3.61561359,7.9183062 3.61561359,7.93158579 3.60889608,7.93822559 C3.54843854,8.00462354 3.48798099,8.07766129 3.44767596,8.15733883 Z M3.23267656,8.60882866 C3.24611148,8.60882866 3.25282895,8.61546841 3.25282895,8.62874791 C3.25282895,8.63538767 3.24611148,8.64202742 3.23267656,8.65530692 L1.39880921,9.43215789 C1.39880921,9.43215789 1.39209175,9.43215789 1.38537428,9.42551814 L-0.085750073,7.96477272 C-0.0924675358,7.95813297 -0.0991849986,7.94485347 -0.0924675358,7.93821371 C-0.085750073,7.93157396 -0.0790326102,7.92493421 -0.0655976845,7.92493421 L3.23267656,8.60882866 Z\" mask=\"url(#safari-pinned-tab-icon-b)\"></path></g></svg></div></a><div class=\"card-header\"><div><a href=\"https://2745518585.netlify.app\" target=\"_blank\">Netlify</a></div></div></div>\n    <style>.links-content{margin-top:1rem}.link-navigation::after{content:\" \";display:block;clear:both}.card{width:150px;margin-left:calc((100% - 300px) / 3);font-size:1rem;padding:0;border-radius:4px;transition-duration:.15s;margin-bottom:1rem;display:block;float:left;box-shadow:0 2px 6px 0 rgba(0,0,0,.12);background:#f5f5f5}.card:hover{transform:scale(1.1);box-shadow:0 2px 6px 0 rgba(0,0,0,.12),0 0 6px 0 rgba(0,0,0,.04)}.card .thumb{width:100%;height:0;padding-bottom:100%;background-size:100% 100%!important}.posts-expand .post-body img{margin:0;padding:0;border:0}.card .card-header{display:block;text-align:center;padding:1rem .25rem;font-weight:500;color:#333;white-space:normal}.card .card-header a{font-style:normal;color:#2bbc8a;font-weight:700;text-decoration:none;border:0}.card .card-header a:hover{color:#29797e;text-decoration:none;border:0}</style><div><div class=\"links-content\"><div class=\"link-navigation\" id=\"links1\"></div></div></div>\n\n    </div>\n</body>","date":"2023-03-15T03:57:28.437Z","updated":"2023-03-15T03:57:28.437Z","path":"mirrors/index.html","_id":"clf952oyo0000ewj7hohvacp4","title":"","comments":1,"layout":"page","content":"<head>\n    <title> 镜像 </title>\n</head>\n\n<body>\n\n    <h1 align=\"center\"> 镜像 </h1>\n    <div class=\"post-body animated fadeInDown\">\n    <div class=\"card\"><a href=\"https://2745518585.github.io\" target=\"_blank\"><div class=\"thumb\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\" version=\"1.1\" data-view-component=\"true\" class=\"octicon octicon-mark-github\"><path fill-rule=\"evenodd\" d=\"M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0016 8c0-4.42-3.58-8-8-8z\"></path></svg></div></a><div class=\"card-header\"><div><a href=\"https://2745518585.github.io\" target=\"_blank\">Github Pages</a></div></div></div>\n    <div class=\"card\"><a href=\"https://2745518585.netlify.app\" target=\"_blank\"><div class=\"thumb\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\"><defs><path id=\"safari-pinned-tab-icon-a\" d=\"M8.05910844,0.231590298 L14.7684097,6.94089156 C15.0771968,7.24967863 15.0771968,7.75032137 14.7684097,8.05910844 L8.05910844,14.7684097 C7.75032137,15.0771968 7.24967863,15.0771968 6.94089156,14.7684097 L0.231590298,8.05910844 C-0.077196766,7.75032137 -0.077196766,7.24967863 0.231590298,6.94089156 L6.94089156,0.231590298 C7.24967863,-0.077196766 7.75032137,-0.077196766 8.05910844,0.231590298 Z\"></path></defs><g fill=\"none\" fill-rule=\"evenodd\" transform=\"translate(.5 .5)\"><mask id=\"safari-pinned-tab-icon-b\" fill=\"#fff\"><use xlink:href=\"#safari-pinned-tab-icon-a\"></use></mask><path fill=\"#30c8c9\" d=\"M10.9443863,5.34204439 C10.8906467,5.28228603 10.8234723,5.22916749 10.7428629,5.18932858 C10.7361454,5.18932858 10.729428,5.17604894 10.7227105,5.16940912 L11.0384306,3.23722209 C11.0384306,3.22394245 11.0451481,3.21730263 11.0518655,3.21730263 L11.058583,3.21730263 C11.058583,3.21730263 11.0653004,3.21730263 11.0720179,3.22394245 L12.5162694,4.65150332 C12.5229868,4.65814314 12.5229868,4.66478296 12.5229868,4.67142277 C12.5229868,4.67806259 12.5162694,4.68470241 12.5095519,4.69134223 L10.9645387,5.34868421 L10.9578212,5.34868421 C10.9511038,5.34868421 10.9511038,5.34868421 10.9443863,5.34204439 Z M7.67298041,4.27301978 C7.65954539,4.14022417 7.61252283,4.00742857 7.53863024,3.8945523 C7.53191273,3.88791252 7.53191273,3.87463296 7.53863024,3.8613534 L9.15754982,1.3515164 C9.15754982,1.34487662 9.16426733,1.33823684 9.17098484,1.33823684 C9.17770234,1.33823684 9.17770234,1.33823684 9.18441985,1.34487662 L10.6219667,2.77242941 C10.6286842,2.77906919 10.6286842,2.78570897 10.6286842,2.79234875 L10.2525037,5.12291167 C10.2525037,5.13619123 10.2457862,5.14283101 10.2390687,5.14283101 C10.1517411,5.16939014 10.071131,5.20922882 10.0039559,5.26234706 C10.0039559,5.26898684 9.9972384,5.26898684 9.98380338,5.26898684 L7.68641543,4.29293912 C7.67969792,4.28629934 7.67298041,4.27965956 7.67298041,4.27301978 Z M12.9193375,5.0432845 L15.3846606,7.48671899 C15.3980956,7.49335876 15.3980956,7.51327807 15.3846606,7.51327807 L15.3712256,7.5265576 C15.3712256,7.53319737 15.3645081,7.53319737 15.3510731,7.53319737 L11.2265271,5.78693848 C11.2198096,5.78693848 11.2130921,5.77365894 11.2130921,5.76701918 C11.2130921,5.76037941 11.2198096,5.75373964 11.2265271,5.74709987 L12.9059025,5.03664474 C12.9059025,5.03664474 12.91262,5.03664474 12.9193375,5.0432845 Z M11.0183074,6.21189474 L14.9749272,7.88512359 C14.9816447,7.89176338 14.9816447,7.89840318 14.9816447,7.90504298 C14.9816447,7.91168277 14.9816447,7.91832257 14.9749272,7.92496237 L12.7850154,10.096176 C12.7850154,10.1028158 12.7782979,10.1028158 12.7648628,10.1028158 L10.3734254,9.60483101 C10.3599903,9.60483101 10.3532728,9.59819122 10.3532728,9.58491162 C10.3331202,9.39899731 10.2457925,9.23300238 10.098007,9.12012583 C10.0912895,9.11348603 10.0912895,9.10684624 10.0912895,9.10020644 L10.5144933,6.50404581 C10.5144933,6.49076621 10.5279283,6.48412641 10.5346459,6.48412641 C10.7227364,6.45756723 10.8839569,6.36461007 10.9914373,6.21853453 C10.9981548,6.21189474 11.0048723,6.21189474 11.0183074,6.21189474 Z M7.57222646,4.75113158 L9.73526236,5.66742243 C9.74197987,5.67406222 9.74869737,5.68070201 9.74869737,5.69398159 C9.74197987,5.72718053 9.73526236,5.76701927 9.73526236,5.806858 L9.73526236,5.8666161 C9.73526236,5.87325589 9.72854486,5.87989568 9.72182736,5.88653547 C9.72182736,5.88653547 4.97255288,7.91167105 4.96583537,7.91167105 C4.95911787,7.91167105 4.95240037,7.91167105 4.94568286,7.90503126 C4.93896536,7.89839148 4.93896536,7.8851119 4.94568286,7.87847211 L6.72582111,5.12295975 C6.73253861,5.11631996 6.73925611,5.10968017 6.75269112,5.10968017 C6.79971364,5.11631996 6.84001865,5.12295975 6.88032367,5.12295975 C7.14902378,5.12295975 7.39757139,4.99016398 7.54535645,4.76441116 C7.55207395,4.75777137 7.55879145,4.75113158 7.57222646,4.75113158 Z M10.2390508,10.0563158 L12.3416308,10.4879038 C12.3483483,10.4879038 12.3550658,10.4945436 12.3550658,10.5144631 C12.3550658,10.5211029 12.3550658,10.5277427 12.3483483,10.5343825 L9.43294979,13.4227023 C9.43294979,13.4293421 9.42623228,13.4293421 9.41951477,13.4293421 L9.40607975,13.4293421 C9.39936224,13.4227023 9.39264474,13.4160625 9.39264474,13.4027828 L9.89645784,10.3086288 C9.89645784,10.301989 9.90317535,10.2887093 9.90989286,10.2887093 C10.030808,10.2422306 10.1315706,10.1625528 10.2121807,10.0629556 C10.2188982,10.0629556 10.2256157,10.0563158 10.2390508,10.0563158 Z M9.00304338,9.81066447 C9.05678356,10.0164984 9.20456907,10.195773 9.40609477,10.2754507 C9.41952981,10.2820905 9.41952981,10.2953701 9.40609477,10.2953701 C9.40609477,10.2953701 8.79480016,14.0202993 8.79480016,14.0269391 L8.57983942,14.2394128 C8.57983942,14.2460526 8.57312189,14.2460526 8.56640437,14.2460526 C8.55968685,14.2460526 8.55968685,14.2460526 8.55296932,14.2394128 L5.00611709,9.1134852 C4.99939957,9.10684539 4.99939957,9.09356579 5.00611709,9.08692599 C5.02626966,9.06036678 5.03970471,9.03380757 5.05985728,9.00060855 C5.0665748,8.99396875 5.07329232,8.98732895 5.08672737,8.98732895 L8.98289081,9.79074507 C8.99632585,9.79738487 9.00304338,9.80402467 9.00304338,9.81066447 Z M5.18751548,8.53579163 C5.1740805,8.53579163 5.167363,8.52915185 5.167363,8.51587228 C5.167363,8.462754 5.15392802,8.41627551 5.14721053,8.36315723 C5.14721053,8.34987766 5.14721053,8.34323788 5.16064551,8.33659809 C5.16064551,8.33659809 9.93678251,6.29818421 9.9435,6.29818421 C9.9435,6.29818421 9.95021749,6.29818421 9.95693498,6.304824 C9.99052245,6.33802292 10.0173924,6.35794227 10.0442624,6.37786163 C10.0576974,6.37786163 10.0576974,6.3911412 10.0576974,6.39778098 L9.64121285,8.95409807 C9.64121285,8.96737763 9.63449536,8.97401742 9.62106037,8.97401742 C9.39266563,8.98729699 9.19114087,9.12009268 9.0769435,9.31928622 C9.07022601,9.325926 9.06350851,9.33256579 9.05007353,9.33256579 L5.18751548,8.53579163 Z M3.48798236,9.07363495 C3.50813502,9.10683418 3.52828768,9.13339356 3.54844034,9.15995294 C3.55515789,9.16659278 3.55515789,9.17323262 3.55515789,9.17323262 L2.63485302,10.6007993 C2.62813547,10.6074391 2.62141791,10.6140789 2.61470036,10.6140789 C2.61470036,10.6140789 2.60798281,10.6140789 2.60126525,10.6074391 L1.78844124,9.80401788 C1.78172368,9.79737804 1.78172368,9.79073819 1.78172368,9.78409835 C1.78172368,9.7774585 1.78844124,9.77081866 1.79515879,9.77081866 L3.46111214,9.06035526 L3.46782969,9.06035526 C3.47454725,9.06035526 3.4812648,9.06699511 3.48798236,9.07363495 Z M4.6299272,9.40563158 C4.63664468,9.40563158 4.64336216,9.41227139 4.65007964,9.41891119 L8.21034347,14.5846805 C8.21706095,14.5913203 8.21706095,14.6045999 8.21034347,14.6112397 L7.43111591,15.388097 C7.43111591,15.3947368 7.42439844,15.3947368 7.404246,15.388097 L2.95727495,10.9859055 C2.95055747,10.9792657 2.95055747,10.9659861 2.96399243,10.9527064 L3.9313094,9.45211022 C3.93802687,9.44547042 3.94474435,9.43883061 3.95817931,9.43883061 C4.05894149,9.47202964 4.1529862,9.48530925 4.25374838,9.48530925 C4.38138048,9.48530925 4.5022951,9.45875003 4.6299272,9.40563158 Z M4.04551903,7.699176 C4.03880151,7.699176 4.03208399,7.69253622 4.02536647,7.68589643 L2.11759077,4.90382619 C2.11087325,4.89718641 2.11087325,4.88390684 2.11759077,4.87726705 L3.83055839,3.17748189 C3.83055839,3.17084211 3.83727591,3.17084211 3.85071095,3.17084211 C3.85071095,3.17748189 5.87268448,4.02737447 6.10108017,4.12697126 C6.10779769,4.13361104 6.11451521,4.14025083 6.11451521,4.1535304 C6.10108017,4.21328847 6.09436265,4.27304654 6.09436265,4.33280462 C6.09436265,4.53863797 6.17497289,4.73119176 6.31604081,4.87726705 C6.32275833,4.88390684 6.32275833,4.89718641 6.31604081,4.90382619 L4.51574543,7.69253622 C4.50902791,7.699176 4.50231039,7.70581579 4.48887535,7.70581579 C4.41498263,7.68589643 4.33437239,7.67261686 4.26047967,7.67261686 C4.19330447,7.67261686 4.11941175,7.68589643 4.04551903,7.699176 Z M6.34963908,3.72860526 C6.26231182,3.68876621 4.22019732,2.8255867 4.22019732,2.8255867 C4.21347984,2.81894686 4.20676236,2.81894686 4.21347984,2.80566718 C4.21347984,2.79902733 4.21347984,2.79238749 4.22019732,2.78574765 L7.4177187,-0.388097 C7.4177187,-0.394736842 7.42443618,-0.394736842 7.43115366,-0.394736842 C7.43787115,-0.394736842 7.43787115,-0.394736842 7.44458863,-0.388097 L8.82167241,0.973070684 C8.8283899,0.979710526 8.8283899,0.992990211 8.82167241,0.999630053 L7.16245439,3.56924905 C7.15573691,3.57588889 7.14901943,3.58252873 7.13558446,3.58252873 C7.0482572,3.55596936 6.96092993,3.54268968 6.87360267,3.54268968 C6.69223066,3.54268968 6.51085865,3.6090881 6.36979153,3.72196542 C6.36307404,3.72860526 6.36307404,3.72860526 6.34963908,3.72860526 Z M3.44767596,8.15733883 C3.44095846,8.16397863 3.43424095,8.17061842 3.42752345,8.17061842 L-0.374584327,7.373843 C-0.388019337,7.373843 -0.394736842,7.3672032 -0.394736842,7.36056341 C-0.394736842,7.35392361 -0.394736842,7.34728382 -0.388019337,7.34064402 L1.73471221,5.24246874 C1.73471221,5.23582895 1.74142972,5.23582895 1.74814722,5.23582895 C1.76158223,5.24246874 1.76158223,5.24246874 1.76829974,5.24910854 C1.76829974,5.25574833 3.58874357,7.88510723 3.60889608,7.91166641 C3.61561359,7.9183062 3.61561359,7.93158579 3.60889608,7.93822559 C3.54843854,8.00462354 3.48798099,8.07766129 3.44767596,8.15733883 Z M3.23267656,8.60882866 C3.24611148,8.60882866 3.25282895,8.61546841 3.25282895,8.62874791 C3.25282895,8.63538767 3.24611148,8.64202742 3.23267656,8.65530692 L1.39880921,9.43215789 C1.39880921,9.43215789 1.39209175,9.43215789 1.38537428,9.42551814 L-0.085750073,7.96477272 C-0.0924675358,7.95813297 -0.0991849986,7.94485347 -0.0924675358,7.93821371 C-0.085750073,7.93157396 -0.0790326102,7.92493421 -0.0655976845,7.92493421 L3.23267656,8.60882866 Z\" mask=\"url(#safari-pinned-tab-icon-b)\"></path></g></svg></div></a><div class=\"card-header\"><div><a href=\"https://2745518585.netlify.app\" target=\"_blank\">Netlify</a></div></div></div>\n    <style>.links-content{margin-top:1rem}.link-navigation::after{content:\" \";display:block;clear:both}.card{width:150px;margin-left:calc((100% - 300px) / 3);font-size:1rem;padding:0;border-radius:4px;transition-duration:.15s;margin-bottom:1rem;display:block;float:left;box-shadow:0 2px 6px 0 rgba(0,0,0,.12);background:#f5f5f5}.card:hover{transform:scale(1.1);box-shadow:0 2px 6px 0 rgba(0,0,0,.12),0 0 6px 0 rgba(0,0,0,.04)}.card .thumb{width:100%;height:0;padding-bottom:100%;background-size:100% 100%!important}.posts-expand .post-body img{margin:0;padding:0;border:0}.card .card-header{display:block;text-align:center;padding:1rem .25rem;font-weight:500;color:#333;white-space:normal}.card .card-header a{font-style:normal;color:#2bbc8a;font-weight:700;text-decoration:none;border:0}.card .card-header a:hover{color:#29797e;text-decoration:none;border:0}</style><div><div class=\"links-content\"><div class=\"link-navigation\" id=\"links1\"></div></div></div>\n\n    </div>\n</body>","site":{"data":{}},"excerpt":"","more":"<head>\n    <title> 镜像 </title>\n</head>\n\n<body>\n\n    <h1 align=\"center\"> 镜像 </h1>\n    <div class=\"post-body animated fadeInDown\">\n    <div class=\"card\"><a href=\"https://2745518585.github.io\" target=\"_blank\"><div class=\"thumb\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\" version=\"1.1\" data-view-component=\"true\" class=\"octicon octicon-mark-github\"><path fill-rule=\"evenodd\" d=\"M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0016 8c0-4.42-3.58-8-8-8z\"></path></svg></div></a><div class=\"card-header\"><div><a href=\"https://2745518585.github.io\" target=\"_blank\">Github Pages</a></div></div></div>\n    <div class=\"card\"><a href=\"https://2745518585.netlify.app\" target=\"_blank\"><div class=\"thumb\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\"><defs><path id=\"safari-pinned-tab-icon-a\" d=\"M8.05910844,0.231590298 L14.7684097,6.94089156 C15.0771968,7.24967863 15.0771968,7.75032137 14.7684097,8.05910844 L8.05910844,14.7684097 C7.75032137,15.0771968 7.24967863,15.0771968 6.94089156,14.7684097 L0.231590298,8.05910844 C-0.077196766,7.75032137 -0.077196766,7.24967863 0.231590298,6.94089156 L6.94089156,0.231590298 C7.24967863,-0.077196766 7.75032137,-0.077196766 8.05910844,0.231590298 Z\"></path></defs><g fill=\"none\" fill-rule=\"evenodd\" transform=\"translate(.5 .5)\"><mask id=\"safari-pinned-tab-icon-b\" fill=\"#fff\"><use xlink:href=\"#safari-pinned-tab-icon-a\"></use></mask><path fill=\"#30c8c9\" d=\"M10.9443863,5.34204439 C10.8906467,5.28228603 10.8234723,5.22916749 10.7428629,5.18932858 C10.7361454,5.18932858 10.729428,5.17604894 10.7227105,5.16940912 L11.0384306,3.23722209 C11.0384306,3.22394245 11.0451481,3.21730263 11.0518655,3.21730263 L11.058583,3.21730263 C11.058583,3.21730263 11.0653004,3.21730263 11.0720179,3.22394245 L12.5162694,4.65150332 C12.5229868,4.65814314 12.5229868,4.66478296 12.5229868,4.67142277 C12.5229868,4.67806259 12.5162694,4.68470241 12.5095519,4.69134223 L10.9645387,5.34868421 L10.9578212,5.34868421 C10.9511038,5.34868421 10.9511038,5.34868421 10.9443863,5.34204439 Z M7.67298041,4.27301978 C7.65954539,4.14022417 7.61252283,4.00742857 7.53863024,3.8945523 C7.53191273,3.88791252 7.53191273,3.87463296 7.53863024,3.8613534 L9.15754982,1.3515164 C9.15754982,1.34487662 9.16426733,1.33823684 9.17098484,1.33823684 C9.17770234,1.33823684 9.17770234,1.33823684 9.18441985,1.34487662 L10.6219667,2.77242941 C10.6286842,2.77906919 10.6286842,2.78570897 10.6286842,2.79234875 L10.2525037,5.12291167 C10.2525037,5.13619123 10.2457862,5.14283101 10.2390687,5.14283101 C10.1517411,5.16939014 10.071131,5.20922882 10.0039559,5.26234706 C10.0039559,5.26898684 9.9972384,5.26898684 9.98380338,5.26898684 L7.68641543,4.29293912 C7.67969792,4.28629934 7.67298041,4.27965956 7.67298041,4.27301978 Z M12.9193375,5.0432845 L15.3846606,7.48671899 C15.3980956,7.49335876 15.3980956,7.51327807 15.3846606,7.51327807 L15.3712256,7.5265576 C15.3712256,7.53319737 15.3645081,7.53319737 15.3510731,7.53319737 L11.2265271,5.78693848 C11.2198096,5.78693848 11.2130921,5.77365894 11.2130921,5.76701918 C11.2130921,5.76037941 11.2198096,5.75373964 11.2265271,5.74709987 L12.9059025,5.03664474 C12.9059025,5.03664474 12.91262,5.03664474 12.9193375,5.0432845 Z M11.0183074,6.21189474 L14.9749272,7.88512359 C14.9816447,7.89176338 14.9816447,7.89840318 14.9816447,7.90504298 C14.9816447,7.91168277 14.9816447,7.91832257 14.9749272,7.92496237 L12.7850154,10.096176 C12.7850154,10.1028158 12.7782979,10.1028158 12.7648628,10.1028158 L10.3734254,9.60483101 C10.3599903,9.60483101 10.3532728,9.59819122 10.3532728,9.58491162 C10.3331202,9.39899731 10.2457925,9.23300238 10.098007,9.12012583 C10.0912895,9.11348603 10.0912895,9.10684624 10.0912895,9.10020644 L10.5144933,6.50404581 C10.5144933,6.49076621 10.5279283,6.48412641 10.5346459,6.48412641 C10.7227364,6.45756723 10.8839569,6.36461007 10.9914373,6.21853453 C10.9981548,6.21189474 11.0048723,6.21189474 11.0183074,6.21189474 Z M7.57222646,4.75113158 L9.73526236,5.66742243 C9.74197987,5.67406222 9.74869737,5.68070201 9.74869737,5.69398159 C9.74197987,5.72718053 9.73526236,5.76701927 9.73526236,5.806858 L9.73526236,5.8666161 C9.73526236,5.87325589 9.72854486,5.87989568 9.72182736,5.88653547 C9.72182736,5.88653547 4.97255288,7.91167105 4.96583537,7.91167105 C4.95911787,7.91167105 4.95240037,7.91167105 4.94568286,7.90503126 C4.93896536,7.89839148 4.93896536,7.8851119 4.94568286,7.87847211 L6.72582111,5.12295975 C6.73253861,5.11631996 6.73925611,5.10968017 6.75269112,5.10968017 C6.79971364,5.11631996 6.84001865,5.12295975 6.88032367,5.12295975 C7.14902378,5.12295975 7.39757139,4.99016398 7.54535645,4.76441116 C7.55207395,4.75777137 7.55879145,4.75113158 7.57222646,4.75113158 Z M10.2390508,10.0563158 L12.3416308,10.4879038 C12.3483483,10.4879038 12.3550658,10.4945436 12.3550658,10.5144631 C12.3550658,10.5211029 12.3550658,10.5277427 12.3483483,10.5343825 L9.43294979,13.4227023 C9.43294979,13.4293421 9.42623228,13.4293421 9.41951477,13.4293421 L9.40607975,13.4293421 C9.39936224,13.4227023 9.39264474,13.4160625 9.39264474,13.4027828 L9.89645784,10.3086288 C9.89645784,10.301989 9.90317535,10.2887093 9.90989286,10.2887093 C10.030808,10.2422306 10.1315706,10.1625528 10.2121807,10.0629556 C10.2188982,10.0629556 10.2256157,10.0563158 10.2390508,10.0563158 Z M9.00304338,9.81066447 C9.05678356,10.0164984 9.20456907,10.195773 9.40609477,10.2754507 C9.41952981,10.2820905 9.41952981,10.2953701 9.40609477,10.2953701 C9.40609477,10.2953701 8.79480016,14.0202993 8.79480016,14.0269391 L8.57983942,14.2394128 C8.57983942,14.2460526 8.57312189,14.2460526 8.56640437,14.2460526 C8.55968685,14.2460526 8.55968685,14.2460526 8.55296932,14.2394128 L5.00611709,9.1134852 C4.99939957,9.10684539 4.99939957,9.09356579 5.00611709,9.08692599 C5.02626966,9.06036678 5.03970471,9.03380757 5.05985728,9.00060855 C5.0665748,8.99396875 5.07329232,8.98732895 5.08672737,8.98732895 L8.98289081,9.79074507 C8.99632585,9.79738487 9.00304338,9.80402467 9.00304338,9.81066447 Z M5.18751548,8.53579163 C5.1740805,8.53579163 5.167363,8.52915185 5.167363,8.51587228 C5.167363,8.462754 5.15392802,8.41627551 5.14721053,8.36315723 C5.14721053,8.34987766 5.14721053,8.34323788 5.16064551,8.33659809 C5.16064551,8.33659809 9.93678251,6.29818421 9.9435,6.29818421 C9.9435,6.29818421 9.95021749,6.29818421 9.95693498,6.304824 C9.99052245,6.33802292 10.0173924,6.35794227 10.0442624,6.37786163 C10.0576974,6.37786163 10.0576974,6.3911412 10.0576974,6.39778098 L9.64121285,8.95409807 C9.64121285,8.96737763 9.63449536,8.97401742 9.62106037,8.97401742 C9.39266563,8.98729699 9.19114087,9.12009268 9.0769435,9.31928622 C9.07022601,9.325926 9.06350851,9.33256579 9.05007353,9.33256579 L5.18751548,8.53579163 Z M3.48798236,9.07363495 C3.50813502,9.10683418 3.52828768,9.13339356 3.54844034,9.15995294 C3.55515789,9.16659278 3.55515789,9.17323262 3.55515789,9.17323262 L2.63485302,10.6007993 C2.62813547,10.6074391 2.62141791,10.6140789 2.61470036,10.6140789 C2.61470036,10.6140789 2.60798281,10.6140789 2.60126525,10.6074391 L1.78844124,9.80401788 C1.78172368,9.79737804 1.78172368,9.79073819 1.78172368,9.78409835 C1.78172368,9.7774585 1.78844124,9.77081866 1.79515879,9.77081866 L3.46111214,9.06035526 L3.46782969,9.06035526 C3.47454725,9.06035526 3.4812648,9.06699511 3.48798236,9.07363495 Z M4.6299272,9.40563158 C4.63664468,9.40563158 4.64336216,9.41227139 4.65007964,9.41891119 L8.21034347,14.5846805 C8.21706095,14.5913203 8.21706095,14.6045999 8.21034347,14.6112397 L7.43111591,15.388097 C7.43111591,15.3947368 7.42439844,15.3947368 7.404246,15.388097 L2.95727495,10.9859055 C2.95055747,10.9792657 2.95055747,10.9659861 2.96399243,10.9527064 L3.9313094,9.45211022 C3.93802687,9.44547042 3.94474435,9.43883061 3.95817931,9.43883061 C4.05894149,9.47202964 4.1529862,9.48530925 4.25374838,9.48530925 C4.38138048,9.48530925 4.5022951,9.45875003 4.6299272,9.40563158 Z M4.04551903,7.699176 C4.03880151,7.699176 4.03208399,7.69253622 4.02536647,7.68589643 L2.11759077,4.90382619 C2.11087325,4.89718641 2.11087325,4.88390684 2.11759077,4.87726705 L3.83055839,3.17748189 C3.83055839,3.17084211 3.83727591,3.17084211 3.85071095,3.17084211 C3.85071095,3.17748189 5.87268448,4.02737447 6.10108017,4.12697126 C6.10779769,4.13361104 6.11451521,4.14025083 6.11451521,4.1535304 C6.10108017,4.21328847 6.09436265,4.27304654 6.09436265,4.33280462 C6.09436265,4.53863797 6.17497289,4.73119176 6.31604081,4.87726705 C6.32275833,4.88390684 6.32275833,4.89718641 6.31604081,4.90382619 L4.51574543,7.69253622 C4.50902791,7.699176 4.50231039,7.70581579 4.48887535,7.70581579 C4.41498263,7.68589643 4.33437239,7.67261686 4.26047967,7.67261686 C4.19330447,7.67261686 4.11941175,7.68589643 4.04551903,7.699176 Z M6.34963908,3.72860526 C6.26231182,3.68876621 4.22019732,2.8255867 4.22019732,2.8255867 C4.21347984,2.81894686 4.20676236,2.81894686 4.21347984,2.80566718 C4.21347984,2.79902733 4.21347984,2.79238749 4.22019732,2.78574765 L7.4177187,-0.388097 C7.4177187,-0.394736842 7.42443618,-0.394736842 7.43115366,-0.394736842 C7.43787115,-0.394736842 7.43787115,-0.394736842 7.44458863,-0.388097 L8.82167241,0.973070684 C8.8283899,0.979710526 8.8283899,0.992990211 8.82167241,0.999630053 L7.16245439,3.56924905 C7.15573691,3.57588889 7.14901943,3.58252873 7.13558446,3.58252873 C7.0482572,3.55596936 6.96092993,3.54268968 6.87360267,3.54268968 C6.69223066,3.54268968 6.51085865,3.6090881 6.36979153,3.72196542 C6.36307404,3.72860526 6.36307404,3.72860526 6.34963908,3.72860526 Z M3.44767596,8.15733883 C3.44095846,8.16397863 3.43424095,8.17061842 3.42752345,8.17061842 L-0.374584327,7.373843 C-0.388019337,7.373843 -0.394736842,7.3672032 -0.394736842,7.36056341 C-0.394736842,7.35392361 -0.394736842,7.34728382 -0.388019337,7.34064402 L1.73471221,5.24246874 C1.73471221,5.23582895 1.74142972,5.23582895 1.74814722,5.23582895 C1.76158223,5.24246874 1.76158223,5.24246874 1.76829974,5.24910854 C1.76829974,5.25574833 3.58874357,7.88510723 3.60889608,7.91166641 C3.61561359,7.9183062 3.61561359,7.93158579 3.60889608,7.93822559 C3.54843854,8.00462354 3.48798099,8.07766129 3.44767596,8.15733883 Z M3.23267656,8.60882866 C3.24611148,8.60882866 3.25282895,8.61546841 3.25282895,8.62874791 C3.25282895,8.63538767 3.24611148,8.64202742 3.23267656,8.65530692 L1.39880921,9.43215789 C1.39880921,9.43215789 1.39209175,9.43215789 1.38537428,9.42551814 L-0.085750073,7.96477272 C-0.0924675358,7.95813297 -0.0991849986,7.94485347 -0.0924675358,7.93821371 C-0.085750073,7.93157396 -0.0790326102,7.92493421 -0.0655976845,7.92493421 L3.23267656,8.60882866 Z\" mask=\"url(#safari-pinned-tab-icon-b)\"></path></g></svg></div></a><div class=\"card-header\"><div><a href=\"https://2745518585.netlify.app\" target=\"_blank\">Netlify</a></div></div></div>\n    <style>.links-content{margin-top:1rem}.link-navigation::after{content:\" \";display:block;clear:both}.card{width:150px;margin-left:calc((100% - 300px) / 3);font-size:1rem;padding:0;border-radius:4px;transition-duration:.15s;margin-bottom:1rem;display:block;float:left;box-shadow:0 2px 6px 0 rgba(0,0,0,.12);background:#f5f5f5}.card:hover{transform:scale(1.1);box-shadow:0 2px 6px 0 rgba(0,0,0,.12),0 0 6px 0 rgba(0,0,0,.04)}.card .thumb{width:100%;height:0;padding-bottom:100%;background-size:100% 100%!important}.posts-expand .post-body img{margin:0;padding:0;border:0}.card .card-header{display:block;text-align:center;padding:1rem .25rem;font-weight:500;color:#333;white-space:normal}.card .card-header a{font-style:normal;color:#2bbc8a;font-weight:700;text-decoration:none;border:0}.card .card-header a:hover{color:#29797e;text-decoration:none;border:0}</style><div><div class=\"links-content\"><div class=\"link-navigation\" id=\"links1\"></div></div></div>\n\n    </div>\n</body>"}],"Post":[{"title":"AC自动机","date":"2022-02-14T07:23:26.000Z","description":" ","_content":"\n## 前言\nKMP是一种很神奇的算法，它能够快速匹配模式串与文本串。但是如果遇到了多个模式串的情况，KMP 就需要 $O(k\\times(n+m))$ 的时间，在 $k$ 很大的时候，KMP 是过不了这个题的，所以我们就需要一个新的算法：AC自动机。\n## AC自动机\n模板题：[P3808 【模板】AC 自动机（简单版）](https://www.luogu.com.cn/problem/P3808)\n我们已经知道了 Trie 和 KMP，一个是用于储存多个字符串，另一个是在一个文本串中查找一个模式串。而 AC 自动机需要实现在一个文本串中查找多个模式串，所以我们只需要将上面两者结合即可。\n在 KMP 中，每一个节点都有一个失配指针，在文本串与模式串失配后跳转到模式串的对应位置。如果我们把 Trie 上的每一个节点都配上一个失配指针，只要文本串与字典树在此失配后跳转到字典树对应节点即可。失配指针指向的节点对应的字符串一定是适配节点对应的字符串的后缀，这样这个节点才能与文本串匹配。\n但是字典树上不只有一个模式串，在一个位置可能有多个模式串可以匹配上文本串。但是在这个字符串已经与文本串匹配的时候，下一个可以匹配的字符串一定也可以和这个字符串匹配，所以下一个字符串一定是这一个字符串的后缀。刚好，失配指针也是要找到对应字符串的后缀，所以我们在找更多可以匹配的模式串时只需要跳转到失配指针对应的节点即可，~~虽然并没有失配~~。\nAC 自动机的实现大概分为以下三步：建字典树、求失配指针指针、跑 AC 自动机。\n字典树的建立和平常没有什么区别，只是要注意不仅要存每个节点是否有结束的模式串，还要记录有多少个。\n```cpp\nvoid build(char *x)\n{\n    int k=1;    //表示当前节点\n    for(int i=1;x[i];++i)   //依次匹配模式串的每个字符\n    {\n        if(a[k][x[i]-'a']==0) a[k][x[i]-'a']=++q;\n        //如果没有当前字符对应的节点，就新建一个节点。\n        k=a[k][x[i]-'a'];//跳转到下一个节点\n    }\n    ++g[k]; //记录当前节点的模式串个数\n}\n```\n求失配指针相当于是 AC 自动机的核心，也是最难理解的地方。\n在建好字典树后，我们一般用 bfs 遍历整棵树。注意在遍历过程中数组f储存的是已配指针。同样，失配指针是储存在数组f中的。在求一个点的失配指针时，共有2种情况。\n不过在求失配指针时，我们还会用到一些不存在的节点。这些点存在的意义就是让程序在匹配时知道如果文本串对应到这个点就会失配，并直接给出失配指针，这样可以更加的方便。\n在开始前，我们还要将 $0$ 号节点的所有儿子设为根节点，因为如果有一个点对应的字符串无法在字典树中找到它的后缀，它的失配指针就会指向 $0$ 的儿子 $x$，但是实际上它应该跳转到根节点，所以把0号点所有儿子都指向根节点即可。\n当我们搜索到点 $i$，它对应的字符为 $x$，父节点为 $k$。当点i存在时，它的失配指针就是点k的失配指针指向的节点的儿子 $x$。什么意思，见下图：\n![1](https://cdn.luogu.com.cn/upload/image_hosting/udw2lc47.png?x-oss-process=image/resize,m_lfit,h_170,w_225 =300x200)\n![2](https://cdn.luogu.com.cn/upload/image_hosting/jae281vb.png?x-oss-process=image/resize,m_lfit,h_170,w_225 =300x200)\n（图片来自网络）\n第一幅图就是第一步建立出来的字典树，第二幅图表示每个节点的失配指针。举个例子，我们现在在访问最左侧的节点 $c$，它的父节点是上面的点 $b$，点 $b$ 的失配指针指向根节点的儿子 $b$。点 $c$ 对应的字符串是 $abc$。我们先找到 $b$ 的失配节点，也就是中间的 $b$，然后再找到 $b$ 位置对应的儿子 $c$，也就是中间的点 $c$，这样我们就找到了它对应的失配指针。\n如果点 $k$ 的失配指针指向的节点没有儿子节点 $x$ 怎么办？其实是一样的，由于这个点不存在，所以这个位置就不存在原字符串的后缀，它的失配指针其实就直接指向了这个点的失配指针，所以它总会指向一个存在的点。在求完失配指针后，我们还要讲这个点入队来继续 bfs。\n当我们搜索到点 $i$，它对应的字符为 $x$，父节点为 $k$。当点 $i$ 不存在时，点 $k$ 的儿子 $x$ 就是点 $k$ 的失配指针指向的节点的儿子 $x$。\n因为点 $i$ 不存在，所以文本串如果匹配到此处必然失配，所以我们可以简单地将点 $k$ 的儿子 $x$ 指向点i的失配节点。点 $i$ 的失配指针的求法同上，就是点k的失配节点的儿子 $x$ 。由于这个点实际上不存在，所以不需要入队。如图：\n![3](https://cdn.luogu.com.cn/upload/image_hosting/z4n1xw48.png?x-oss-process=image/resize,m_lfit,h_170,w_225 =300x200)\n```cpp\nvoid bfs()\n{\n    queue<int> Q;   //搜索时用的队列\n    for(int i=0;i<=25;++i)  //将节点0的所有儿子设为1\n    {\n        a[0][i]=1;\n    }\n    f[1]=0; //根节点的失配指针只用于求其它点的失配指针\n    Q.push(1);  //根节点入队\n    while(!Q.empty())   //bfs\n    {\n        int k=Q.front();    //提取队首节点\n        Q.pop();\n        for(int i=0;i<=25;++i)  //访问所有儿子节点\n        {\n            if(a[k][i]!=0)  //这个点存在\n            {\n                Q.push(a[k][i]);    //入队\n                f[a[k][i]]=a[f[k]][i];  //求失配指针\n            }\n            else    //这个点不存在\n            {\n                a[k][i]=a[f[k]][i]; //求失配指针\n            }\n        }\n    }\n}\n```\n在求完失配指针后，我们就可以跑 AC 自动机了。\n首先我们需要定义一个变量 $x$ 记录当前匹配到的字典树节点，初始值为 $1$，还有一个变量s储存出现过的模式串个数。\n然后我们要依次访问整个文本串。每一次访问都将x更新为节点x对应文本串当前字符的儿子。如果节点 $x$ 有这个儿子，那么x就会指向这一个儿子节点；如果没有，它就会自动跳转到节点 $x$ 的失配指针指向的节点。然后我们要新定义一个变量 $k = x$，循环访问节点 $k$ 的失配指针指向的节点，找到的这些都是可以与文本串匹配的字符串，所以我们要在这时记录个数，不过还要用一个数组来判断一个模式串是否已经被记录过。如果某一次节点 $k$ 已经被记录过，那么之前一定也记录过点 $k$ 之后所有可以与文本串匹配的模式串，所以可以直接退出循环。\n```cpp\nchar c[1000001];\ncin>>c+1;\nint m=strlen(c+1);\nint s=0,x=1;\nfor(int i=1;i<=m;++i)   //依次访问文本串\n{\n    x=a[x][c[i]-'a'];   //更新当前的点\n    int k=x;\n    while(k!=0&&h[k]==false)//记录所有可以匹配的模式串\n    {\n        s+=g[k];    //计数\n        h[k]=true;  //标记\n        k=f[k];     //跳转至下一个\n    }\n}\n```\n## AC自动机加强版\n模板题：[【模板】AC 自动机（加强版）](https://www.luogu.com.cn/problem/P3796)\n模板题：[【模板】AC 自动机（二次加强版）](https://www.luogu.com.cn/problem/P5357)\n有的时候我们不仅要求出一个模式串是否在文本串中出现过，我们还需要知道它出现的次数。这时候我们就需要修改一下之前的方法，我们不能跳过已经有标记的点了，就像这样：\n``` cpp\nwhile(k!=0)\n{\n    h[k]+=g[k];\n    k=f[k];\n}\n```\n这样下来一个点就可能不止被访问一遍，于是就会导致 $\\color{purple}{TLE}$。如何解决这个问题呢？如果我们把一个点的失配指针指向的点和这个点连接起来，那么就会形成一个链，如果位于链首的点匹配成功一次，意味着后面所有点都会匹配成功一次。所以我们可以先统计第一个点匹配的次数，最后再更新后面所有点，复杂度就可以大大降低了。如何实现？我们再把失配指针当做一条有向边，所有的点必然会形成一个有向无环图，所以只需要在最后进行拓扑排序即可。\n``` cpp\nvoid abc()\n{\n    queue<int> Q;       //定义队列\n    for(int i=1;i<=q;++i)\n    {\n        if(r[i]==0) Q.push(i);      //入度为0的点入队\n    }\n    while(!Q.empty())\n    {\n        int k=Q.front();\n        Q.pop();\n        h[f[k]]+=h[k];      //统计\n        --r[f[k]];      //入度减一\n        if(r[f[k]]==0) Q.push(f[k]);    //如果入度为0则入队\n    }\n}\n```\n## code\n``` cpp\n#include<iostream>\n#include<cstring>\n#include<cstdio>\n#include<queue>\nusing namespace std;\nint n,q=1,a[1000001][26],f[1000001],g[1000001],h[1000001],r[1000001];\nvoid build(char *x,int t)\n{\n    int k=1;\n    for(int i=1;x[i];++i)\n    {\n        if(a[k][x[i]-'a']==0)\n        {\n            a[k][x[i]-'a']=++q;\n        }\n        k=a[k][x[i]-'a'];\n    }\n    g[t]=k;\n}\nvoid bfs()\n{\n    queue<int> Q;\n    for(int i=0;i<=25;++i)\n    {\n        a[0][i]=1;\n    }\n    f[1]=0;\n    Q.push(1);\n    while(!Q.empty())\n    {\n        int k=Q.front();\n        Q.pop();\n        for(int i=0;i<=25;++i)\n        {\n            if(a[k][i]!=0)\n            {\n                Q.push(a[k][i]);\n                f[a[k][i]]=a[f[k]][i];\n                ++r[a[f[k]][i]];\n            }\n            else\n            {\n                a[k][i]=a[f[k]][i];\n            }\n        }\n    }\n}\nvoid abc()\n{\n    queue<int> Q;\n    for(int i=1;i<=q;++i)\n    {\n        if(r[i]==0) Q.push(i);\n    }\n    while(!Q.empty())\n    {\n        int k=Q.front();\n        Q.pop();\n        h[f[k]]+=h[k];\n        --r[f[k]];\n        if(r[f[k]]==0) Q.push(f[k]);\n    }\n}\nint main()\n{\n    scanf(\"%d\",&n);\n    for(int i=1;i<=n;++i)\n    {\n        char x[200001];\n        cin>>x+1;\n        build(x,i);\n    }\n    bfs();\n    char c[2000001];\n    cin>>c+1;\n    int m=strlen(c+1);\n    int x=1;\n    for(int i=1;i<=m;++i)\n    {\n        x=a[x][c[i]-'a'];\n        ++h[x];\n    }\n    abc();\n    for(int i=1;i<=n;++i)\n    {\n        printf(\"%d\\n\",h[g[i]]);\n    }\n    return 0;\n}\n```","source":"_posts/Aho-Corasick-automaton.md","raw":"---\ntitle: 'AC自动机'\ndate: 2022-02-14 15:23:26\ntags: [字符串算法,AC自动机]\ndescription: ' '\n---\n\n## 前言\nKMP是一种很神奇的算法，它能够快速匹配模式串与文本串。但是如果遇到了多个模式串的情况，KMP 就需要 $O(k\\times(n+m))$ 的时间，在 $k$ 很大的时候，KMP 是过不了这个题的，所以我们就需要一个新的算法：AC自动机。\n## AC自动机\n模板题：[P3808 【模板】AC 自动机（简单版）](https://www.luogu.com.cn/problem/P3808)\n我们已经知道了 Trie 和 KMP，一个是用于储存多个字符串，另一个是在一个文本串中查找一个模式串。而 AC 自动机需要实现在一个文本串中查找多个模式串，所以我们只需要将上面两者结合即可。\n在 KMP 中，每一个节点都有一个失配指针，在文本串与模式串失配后跳转到模式串的对应位置。如果我们把 Trie 上的每一个节点都配上一个失配指针，只要文本串与字典树在此失配后跳转到字典树对应节点即可。失配指针指向的节点对应的字符串一定是适配节点对应的字符串的后缀，这样这个节点才能与文本串匹配。\n但是字典树上不只有一个模式串，在一个位置可能有多个模式串可以匹配上文本串。但是在这个字符串已经与文本串匹配的时候，下一个可以匹配的字符串一定也可以和这个字符串匹配，所以下一个字符串一定是这一个字符串的后缀。刚好，失配指针也是要找到对应字符串的后缀，所以我们在找更多可以匹配的模式串时只需要跳转到失配指针对应的节点即可，~~虽然并没有失配~~。\nAC 自动机的实现大概分为以下三步：建字典树、求失配指针指针、跑 AC 自动机。\n字典树的建立和平常没有什么区别，只是要注意不仅要存每个节点是否有结束的模式串，还要记录有多少个。\n```cpp\nvoid build(char *x)\n{\n    int k=1;    //表示当前节点\n    for(int i=1;x[i];++i)   //依次匹配模式串的每个字符\n    {\n        if(a[k][x[i]-'a']==0) a[k][x[i]-'a']=++q;\n        //如果没有当前字符对应的节点，就新建一个节点。\n        k=a[k][x[i]-'a'];//跳转到下一个节点\n    }\n    ++g[k]; //记录当前节点的模式串个数\n}\n```\n求失配指针相当于是 AC 自动机的核心，也是最难理解的地方。\n在建好字典树后，我们一般用 bfs 遍历整棵树。注意在遍历过程中数组f储存的是已配指针。同样，失配指针是储存在数组f中的。在求一个点的失配指针时，共有2种情况。\n不过在求失配指针时，我们还会用到一些不存在的节点。这些点存在的意义就是让程序在匹配时知道如果文本串对应到这个点就会失配，并直接给出失配指针，这样可以更加的方便。\n在开始前，我们还要将 $0$ 号节点的所有儿子设为根节点，因为如果有一个点对应的字符串无法在字典树中找到它的后缀，它的失配指针就会指向 $0$ 的儿子 $x$，但是实际上它应该跳转到根节点，所以把0号点所有儿子都指向根节点即可。\n当我们搜索到点 $i$，它对应的字符为 $x$，父节点为 $k$。当点i存在时，它的失配指针就是点k的失配指针指向的节点的儿子 $x$。什么意思，见下图：\n![1](https://cdn.luogu.com.cn/upload/image_hosting/udw2lc47.png?x-oss-process=image/resize,m_lfit,h_170,w_225 =300x200)\n![2](https://cdn.luogu.com.cn/upload/image_hosting/jae281vb.png?x-oss-process=image/resize,m_lfit,h_170,w_225 =300x200)\n（图片来自网络）\n第一幅图就是第一步建立出来的字典树，第二幅图表示每个节点的失配指针。举个例子，我们现在在访问最左侧的节点 $c$，它的父节点是上面的点 $b$，点 $b$ 的失配指针指向根节点的儿子 $b$。点 $c$ 对应的字符串是 $abc$。我们先找到 $b$ 的失配节点，也就是中间的 $b$，然后再找到 $b$ 位置对应的儿子 $c$，也就是中间的点 $c$，这样我们就找到了它对应的失配指针。\n如果点 $k$ 的失配指针指向的节点没有儿子节点 $x$ 怎么办？其实是一样的，由于这个点不存在，所以这个位置就不存在原字符串的后缀，它的失配指针其实就直接指向了这个点的失配指针，所以它总会指向一个存在的点。在求完失配指针后，我们还要讲这个点入队来继续 bfs。\n当我们搜索到点 $i$，它对应的字符为 $x$，父节点为 $k$。当点 $i$ 不存在时，点 $k$ 的儿子 $x$ 就是点 $k$ 的失配指针指向的节点的儿子 $x$。\n因为点 $i$ 不存在，所以文本串如果匹配到此处必然失配，所以我们可以简单地将点 $k$ 的儿子 $x$ 指向点i的失配节点。点 $i$ 的失配指针的求法同上，就是点k的失配节点的儿子 $x$ 。由于这个点实际上不存在，所以不需要入队。如图：\n![3](https://cdn.luogu.com.cn/upload/image_hosting/z4n1xw48.png?x-oss-process=image/resize,m_lfit,h_170,w_225 =300x200)\n```cpp\nvoid bfs()\n{\n    queue<int> Q;   //搜索时用的队列\n    for(int i=0;i<=25;++i)  //将节点0的所有儿子设为1\n    {\n        a[0][i]=1;\n    }\n    f[1]=0; //根节点的失配指针只用于求其它点的失配指针\n    Q.push(1);  //根节点入队\n    while(!Q.empty())   //bfs\n    {\n        int k=Q.front();    //提取队首节点\n        Q.pop();\n        for(int i=0;i<=25;++i)  //访问所有儿子节点\n        {\n            if(a[k][i]!=0)  //这个点存在\n            {\n                Q.push(a[k][i]);    //入队\n                f[a[k][i]]=a[f[k]][i];  //求失配指针\n            }\n            else    //这个点不存在\n            {\n                a[k][i]=a[f[k]][i]; //求失配指针\n            }\n        }\n    }\n}\n```\n在求完失配指针后，我们就可以跑 AC 自动机了。\n首先我们需要定义一个变量 $x$ 记录当前匹配到的字典树节点，初始值为 $1$，还有一个变量s储存出现过的模式串个数。\n然后我们要依次访问整个文本串。每一次访问都将x更新为节点x对应文本串当前字符的儿子。如果节点 $x$ 有这个儿子，那么x就会指向这一个儿子节点；如果没有，它就会自动跳转到节点 $x$ 的失配指针指向的节点。然后我们要新定义一个变量 $k = x$，循环访问节点 $k$ 的失配指针指向的节点，找到的这些都是可以与文本串匹配的字符串，所以我们要在这时记录个数，不过还要用一个数组来判断一个模式串是否已经被记录过。如果某一次节点 $k$ 已经被记录过，那么之前一定也记录过点 $k$ 之后所有可以与文本串匹配的模式串，所以可以直接退出循环。\n```cpp\nchar c[1000001];\ncin>>c+1;\nint m=strlen(c+1);\nint s=0,x=1;\nfor(int i=1;i<=m;++i)   //依次访问文本串\n{\n    x=a[x][c[i]-'a'];   //更新当前的点\n    int k=x;\n    while(k!=0&&h[k]==false)//记录所有可以匹配的模式串\n    {\n        s+=g[k];    //计数\n        h[k]=true;  //标记\n        k=f[k];     //跳转至下一个\n    }\n}\n```\n## AC自动机加强版\n模板题：[【模板】AC 自动机（加强版）](https://www.luogu.com.cn/problem/P3796)\n模板题：[【模板】AC 自动机（二次加强版）](https://www.luogu.com.cn/problem/P5357)\n有的时候我们不仅要求出一个模式串是否在文本串中出现过，我们还需要知道它出现的次数。这时候我们就需要修改一下之前的方法，我们不能跳过已经有标记的点了，就像这样：\n``` cpp\nwhile(k!=0)\n{\n    h[k]+=g[k];\n    k=f[k];\n}\n```\n这样下来一个点就可能不止被访问一遍，于是就会导致 $\\color{purple}{TLE}$。如何解决这个问题呢？如果我们把一个点的失配指针指向的点和这个点连接起来，那么就会形成一个链，如果位于链首的点匹配成功一次，意味着后面所有点都会匹配成功一次。所以我们可以先统计第一个点匹配的次数，最后再更新后面所有点，复杂度就可以大大降低了。如何实现？我们再把失配指针当做一条有向边，所有的点必然会形成一个有向无环图，所以只需要在最后进行拓扑排序即可。\n``` cpp\nvoid abc()\n{\n    queue<int> Q;       //定义队列\n    for(int i=1;i<=q;++i)\n    {\n        if(r[i]==0) Q.push(i);      //入度为0的点入队\n    }\n    while(!Q.empty())\n    {\n        int k=Q.front();\n        Q.pop();\n        h[f[k]]+=h[k];      //统计\n        --r[f[k]];      //入度减一\n        if(r[f[k]]==0) Q.push(f[k]);    //如果入度为0则入队\n    }\n}\n```\n## code\n``` cpp\n#include<iostream>\n#include<cstring>\n#include<cstdio>\n#include<queue>\nusing namespace std;\nint n,q=1,a[1000001][26],f[1000001],g[1000001],h[1000001],r[1000001];\nvoid build(char *x,int t)\n{\n    int k=1;\n    for(int i=1;x[i];++i)\n    {\n        if(a[k][x[i]-'a']==0)\n        {\n            a[k][x[i]-'a']=++q;\n        }\n        k=a[k][x[i]-'a'];\n    }\n    g[t]=k;\n}\nvoid bfs()\n{\n    queue<int> Q;\n    for(int i=0;i<=25;++i)\n    {\n        a[0][i]=1;\n    }\n    f[1]=0;\n    Q.push(1);\n    while(!Q.empty())\n    {\n        int k=Q.front();\n        Q.pop();\n        for(int i=0;i<=25;++i)\n        {\n            if(a[k][i]!=0)\n            {\n                Q.push(a[k][i]);\n                f[a[k][i]]=a[f[k]][i];\n                ++r[a[f[k]][i]];\n            }\n            else\n            {\n                a[k][i]=a[f[k]][i];\n            }\n        }\n    }\n}\nvoid abc()\n{\n    queue<int> Q;\n    for(int i=1;i<=q;++i)\n    {\n        if(r[i]==0) Q.push(i);\n    }\n    while(!Q.empty())\n    {\n        int k=Q.front();\n        Q.pop();\n        h[f[k]]+=h[k];\n        --r[f[k]];\n        if(r[f[k]]==0) Q.push(f[k]);\n    }\n}\nint main()\n{\n    scanf(\"%d\",&n);\n    for(int i=1;i<=n;++i)\n    {\n        char x[200001];\n        cin>>x+1;\n        build(x,i);\n    }\n    bfs();\n    char c[2000001];\n    cin>>c+1;\n    int m=strlen(c+1);\n    int x=1;\n    for(int i=1;i<=m;++i)\n    {\n        x=a[x][c[i]-'a'];\n        ++h[x];\n    }\n    abc();\n    for(int i=1;i<=n;++i)\n    {\n        printf(\"%d\\n\",h[g[i]]);\n    }\n    return 0;\n}\n```","slug":"Aho-Corasick-automaton","published":1,"updated":"2022-11-28T13:47:47.403Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cleid927700012sjf4lyad8ld","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>KMP是一种很神奇的算法，它能够快速匹配模式串与文本串。但是如果遇到了多个模式串的情况，KMP 就需要 $O(k\\times(n+m))$ 的时间，在 $k$ 很大的时候，KMP 是过不了这个题的，所以我们就需要一个新的算法：AC自动机。</p>\n<h2 id=\"AC自动机\"><a href=\"#AC自动机\" class=\"headerlink\" title=\"AC自动机\"></a>AC自动机</h2><p>模板题：<a href=\"https://www.luogu.com.cn/problem/P3808\">P3808 【模板】AC 自动机（简单版）</a><br>我们已经知道了 Trie 和 KMP，一个是用于储存多个字符串，另一个是在一个文本串中查找一个模式串。而 AC 自动机需要实现在一个文本串中查找多个模式串，所以我们只需要将上面两者结合即可。<br>在 KMP 中，每一个节点都有一个失配指针，在文本串与模式串失配后跳转到模式串的对应位置。如果我们把 Trie 上的每一个节点都配上一个失配指针，只要文本串与字典树在此失配后跳转到字典树对应节点即可。失配指针指向的节点对应的字符串一定是适配节点对应的字符串的后缀，这样这个节点才能与文本串匹配。<br>但是字典树上不只有一个模式串，在一个位置可能有多个模式串可以匹配上文本串。但是在这个字符串已经与文本串匹配的时候，下一个可以匹配的字符串一定也可以和这个字符串匹配，所以下一个字符串一定是这一个字符串的后缀。刚好，失配指针也是要找到对应字符串的后缀，所以我们在找更多可以匹配的模式串时只需要跳转到失配指针对应的节点即可，<del>虽然并没有失配</del>。<br>AC 自动机的实现大概分为以下三步：建字典树、求失配指针指针、跑 AC 自动机。<br>字典树的建立和平常没有什么区别，只是要注意不仅要存每个节点是否有结束的模式串，还要记录有多少个。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"type\">char</span> *x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> k=<span class=\"number\">1</span>;    <span class=\"comment\">//表示当前节点</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;x[i];++i)   <span class=\"comment\">//依次匹配模式串的每个字符</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a[k][x[i]-<span class=\"string\">&#x27;a&#x27;</span>]==<span class=\"number\">0</span>) a[k][x[i]-<span class=\"string\">&#x27;a&#x27;</span>]=++q;</span><br><span class=\"line\">        <span class=\"comment\">//如果没有当前字符对应的节点，就新建一个节点。</span></span><br><span class=\"line\">        k=a[k][x[i]-<span class=\"string\">&#x27;a&#x27;</span>];<span class=\"comment\">//跳转到下一个节点</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ++g[k]; <span class=\"comment\">//记录当前节点的模式串个数</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>求失配指针相当于是 AC 自动机的核心，也是最难理解的地方。<br>在建好字典树后，我们一般用 bfs 遍历整棵树。注意在遍历过程中数组f储存的是已配指针。同样，失配指针是储存在数组f中的。在求一个点的失配指针时，共有2种情况。<br>不过在求失配指针时，我们还会用到一些不存在的节点。这些点存在的意义就是让程序在匹配时知道如果文本串对应到这个点就会失配，并直接给出失配指针，这样可以更加的方便。<br>在开始前，我们还要将 $0$ 号节点的所有儿子设为根节点，因为如果有一个点对应的字符串无法在字典树中找到它的后缀，它的失配指针就会指向 $0$ 的儿子 $x$，但是实际上它应该跳转到根节点，所以把0号点所有儿子都指向根节点即可。<br>当我们搜索到点 $i$，它对应的字符为 $x$，父节点为 $k$。当点i存在时，它的失配指针就是点k的失配指针指向的节点的儿子 $x$。什么意思，见下图：<br>![1](<a href=\"https://cdn.luogu.com.cn/upload/image_hosting/udw2lc47.png?x-oss-process=image/resize,m_lfit,h_170,w_225\">https://cdn.luogu.com.cn/upload/image_hosting/udw2lc47.png?x-oss-process=image/resize,m_lfit,h_170,w_225</a> &#x3D;300x200)<br>![2](<a href=\"https://cdn.luogu.com.cn/upload/image_hosting/jae281vb.png?x-oss-process=image/resize,m_lfit,h_170,w_225\">https://cdn.luogu.com.cn/upload/image_hosting/jae281vb.png?x-oss-process=image/resize,m_lfit,h_170,w_225</a> &#x3D;300x200)<br>（图片来自网络）<br>第一幅图就是第一步建立出来的字典树，第二幅图表示每个节点的失配指针。举个例子，我们现在在访问最左侧的节点 $c$，它的父节点是上面的点 $b$，点 $b$ 的失配指针指向根节点的儿子 $b$。点 $c$ 对应的字符串是 $abc$。我们先找到 $b$ 的失配节点，也就是中间的 $b$，然后再找到 $b$ 位置对应的儿子 $c$，也就是中间的点 $c$，这样我们就找到了它对应的失配指针。<br>如果点 $k$ 的失配指针指向的节点没有儿子节点 $x$ 怎么办？其实是一样的，由于这个点不存在，所以这个位置就不存在原字符串的后缀，它的失配指针其实就直接指向了这个点的失配指针，所以它总会指向一个存在的点。在求完失配指针后，我们还要讲这个点入队来继续 bfs。<br>当我们搜索到点 $i$，它对应的字符为 $x$，父节点为 $k$。当点 $i$ 不存在时，点 $k$ 的儿子 $x$ 就是点 $k$ 的失配指针指向的节点的儿子 $x$。<br>因为点 $i$ 不存在，所以文本串如果匹配到此处必然失配，所以我们可以简单地将点 $k$ 的儿子 $x$ 指向点i的失配节点。点 $i$ 的失配指针的求法同上，就是点k的失配节点的儿子 $x$ 。由于这个点实际上不存在，所以不需要入队。如图：<br>![3](<a href=\"https://cdn.luogu.com.cn/upload/image_hosting/z4n1xw48.png?x-oss-process=image/resize,m_lfit,h_170,w_225\">https://cdn.luogu.com.cn/upload/image_hosting/z4n1xw48.png?x-oss-process=image/resize,m_lfit,h_170,w_225</a> &#x3D;300x200)</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">bfs</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    queue&lt;<span class=\"type\">int</span>&gt; Q;   <span class=\"comment\">//搜索时用的队列</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;=<span class=\"number\">25</span>;++i)  <span class=\"comment\">//将节点0的所有儿子设为1</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        a[<span class=\"number\">0</span>][i]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    f[<span class=\"number\">1</span>]=<span class=\"number\">0</span>; <span class=\"comment\">//根节点的失配指针只用于求其它点的失配指针</span></span><br><span class=\"line\">    Q.<span class=\"built_in\">push</span>(<span class=\"number\">1</span>);  <span class=\"comment\">//根节点入队</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!Q.<span class=\"built_in\">empty</span>())   <span class=\"comment\">//bfs</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> k=Q.<span class=\"built_in\">front</span>();    <span class=\"comment\">//提取队首节点</span></span><br><span class=\"line\">        Q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;=<span class=\"number\">25</span>;++i)  <span class=\"comment\">//访问所有儿子节点</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(a[k][i]!=<span class=\"number\">0</span>)  <span class=\"comment\">//这个点存在</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Q.<span class=\"built_in\">push</span>(a[k][i]);    <span class=\"comment\">//入队</span></span><br><span class=\"line\">                f[a[k][i]]=a[f[k]][i];  <span class=\"comment\">//求失配指针</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span>    <span class=\"comment\">//这个点不存在</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                a[k][i]=a[f[k]][i]; <span class=\"comment\">//求失配指针</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在求完失配指针后，我们就可以跑 AC 自动机了。<br>首先我们需要定义一个变量 $x$ 记录当前匹配到的字典树节点，初始值为 $1$，还有一个变量s储存出现过的模式串个数。<br>然后我们要依次访问整个文本串。每一次访问都将x更新为节点x对应文本串当前字符的儿子。如果节点 $x$ 有这个儿子，那么x就会指向这一个儿子节点；如果没有，它就会自动跳转到节点 $x$ 的失配指针指向的节点。然后我们要新定义一个变量 $k &#x3D; x$，循环访问节点 $k$ 的失配指针指向的节点，找到的这些都是可以与文本串匹配的字符串，所以我们要在这时记录个数，不过还要用一个数组来判断一个模式串是否已经被记录过。如果某一次节点 $k$ 已经被记录过，那么之前一定也记录过点 $k$ 之后所有可以与文本串匹配的模式串，所以可以直接退出循环。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> c[<span class=\"number\">1000001</span>];</span><br><span class=\"line\">cin&gt;&gt;c+<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> m=<span class=\"built_in\">strlen</span>(c+<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"type\">int</span> s=<span class=\"number\">0</span>,x=<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i)   <span class=\"comment\">//依次访问文本串</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    x=a[x][c[i]-<span class=\"string\">&#x27;a&#x27;</span>];   <span class=\"comment\">//更新当前的点</span></span><br><span class=\"line\">    <span class=\"type\">int</span> k=x;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(k!=<span class=\"number\">0</span>&amp;&amp;h[k]==<span class=\"literal\">false</span>)<span class=\"comment\">//记录所有可以匹配的模式串</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        s+=g[k];    <span class=\"comment\">//计数</span></span><br><span class=\"line\">        h[k]=<span class=\"literal\">true</span>;  <span class=\"comment\">//标记</span></span><br><span class=\"line\">        k=f[k];     <span class=\"comment\">//跳转至下一个</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"AC自动机加强版\"><a href=\"#AC自动机加强版\" class=\"headerlink\" title=\"AC自动机加强版\"></a>AC自动机加强版</h2><p>模板题：<a href=\"https://www.luogu.com.cn/problem/P3796\">【模板】AC 自动机（加强版）</a><br>模板题：<a href=\"https://www.luogu.com.cn/problem/P5357\">【模板】AC 自动机（二次加强版）</a><br>有的时候我们不仅要求出一个模式串是否在文本串中出现过，我们还需要知道它出现的次数。这时候我们就需要修改一下之前的方法，我们不能跳过已经有标记的点了，就像这样：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span>(k!=<span class=\"number\">0</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    h[k]+=g[k];</span><br><span class=\"line\">    k=f[k];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样下来一个点就可能不止被访问一遍，于是就会导致 $\\color{purple}{TLE}$。如何解决这个问题呢？如果我们把一个点的失配指针指向的点和这个点连接起来，那么就会形成一个链，如果位于链首的点匹配成功一次，意味着后面所有点都会匹配成功一次。所以我们可以先统计第一个点匹配的次数，最后再更新后面所有点，复杂度就可以大大降低了。如何实现？我们再把失配指针当做一条有向边，所有的点必然会形成一个有向无环图，所以只需要在最后进行拓扑排序即可。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">abc</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    queue&lt;<span class=\"type\">int</span>&gt; Q;       <span class=\"comment\">//定义队列</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=q;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(r[i]==<span class=\"number\">0</span>) Q.<span class=\"built_in\">push</span>(i);      <span class=\"comment\">//入度为0的点入队</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!Q.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> k=Q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">        Q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        h[f[k]]+=h[k];      <span class=\"comment\">//统计</span></span><br><span class=\"line\">        --r[f[k]];      <span class=\"comment\">//入度减一</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(r[f[k]]==<span class=\"number\">0</span>) Q.<span class=\"built_in\">push</span>(f[k]);    <span class=\"comment\">//如果入度为0则入队</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">int</span> n,q=<span class=\"number\">1</span>,a[<span class=\"number\">1000001</span>][<span class=\"number\">26</span>],f[<span class=\"number\">1000001</span>],g[<span class=\"number\">1000001</span>],h[<span class=\"number\">1000001</span>],r[<span class=\"number\">1000001</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"type\">char</span> *x,<span class=\"type\">int</span> t)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> k=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;x[i];++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a[k][x[i]-<span class=\"string\">&#x27;a&#x27;</span>]==<span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            a[k][x[i]-<span class=\"string\">&#x27;a&#x27;</span>]=++q;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        k=a[k][x[i]-<span class=\"string\">&#x27;a&#x27;</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    g[t]=k;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">bfs</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    queue&lt;<span class=\"type\">int</span>&gt; Q;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;=<span class=\"number\">25</span>;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        a[<span class=\"number\">0</span>][i]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    f[<span class=\"number\">1</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    Q.<span class=\"built_in\">push</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!Q.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> k=Q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">        Q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;=<span class=\"number\">25</span>;++i)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(a[k][i]!=<span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Q.<span class=\"built_in\">push</span>(a[k][i]);</span><br><span class=\"line\">                f[a[k][i]]=a[f[k]][i];</span><br><span class=\"line\">                ++r[a[f[k]][i]];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                a[k][i]=a[f[k]][i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">abc</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    queue&lt;<span class=\"type\">int</span>&gt; Q;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=q;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(r[i]==<span class=\"number\">0</span>) Q.<span class=\"built_in\">push</span>(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!Q.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> k=Q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">        Q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        h[f[k]]+=h[k];</span><br><span class=\"line\">        --r[f[k]];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(r[f[k]]==<span class=\"number\">0</span>) Q.<span class=\"built_in\">push</span>(f[k]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">char</span> x[<span class=\"number\">200001</span>];</span><br><span class=\"line\">        cin&gt;&gt;x+<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"built_in\">build</span>(x,i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">bfs</span>();</span><br><span class=\"line\">    <span class=\"type\">char</span> c[<span class=\"number\">2000001</span>];</span><br><span class=\"line\">    cin&gt;&gt;c+<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> m=<span class=\"built_in\">strlen</span>(c+<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"type\">int</span> x=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        x=a[x][c[i]-<span class=\"string\">&#x27;a&#x27;</span>];</span><br><span class=\"line\">        ++h[x];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">abc</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,h[g[i]]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>KMP是一种很神奇的算法，它能够快速匹配模式串与文本串。但是如果遇到了多个模式串的情况，KMP 就需要 $O(k\\times(n+m))$ 的时间，在 $k$ 很大的时候，KMP 是过不了这个题的，所以我们就需要一个新的算法：AC自动机。</p>\n<h2 id=\"AC自动机\"><a href=\"#AC自动机\" class=\"headerlink\" title=\"AC自动机\"></a>AC自动机</h2><p>模板题：<a href=\"https://www.luogu.com.cn/problem/P3808\">P3808 【模板】AC 自动机（简单版）</a><br>我们已经知道了 Trie 和 KMP，一个是用于储存多个字符串，另一个是在一个文本串中查找一个模式串。而 AC 自动机需要实现在一个文本串中查找多个模式串，所以我们只需要将上面两者结合即可。<br>在 KMP 中，每一个节点都有一个失配指针，在文本串与模式串失配后跳转到模式串的对应位置。如果我们把 Trie 上的每一个节点都配上一个失配指针，只要文本串与字典树在此失配后跳转到字典树对应节点即可。失配指针指向的节点对应的字符串一定是适配节点对应的字符串的后缀，这样这个节点才能与文本串匹配。<br>但是字典树上不只有一个模式串，在一个位置可能有多个模式串可以匹配上文本串。但是在这个字符串已经与文本串匹配的时候，下一个可以匹配的字符串一定也可以和这个字符串匹配，所以下一个字符串一定是这一个字符串的后缀。刚好，失配指针也是要找到对应字符串的后缀，所以我们在找更多可以匹配的模式串时只需要跳转到失配指针对应的节点即可，<del>虽然并没有失配</del>。<br>AC 自动机的实现大概分为以下三步：建字典树、求失配指针指针、跑 AC 自动机。<br>字典树的建立和平常没有什么区别，只是要注意不仅要存每个节点是否有结束的模式串，还要记录有多少个。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"type\">char</span> *x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> k=<span class=\"number\">1</span>;    <span class=\"comment\">//表示当前节点</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;x[i];++i)   <span class=\"comment\">//依次匹配模式串的每个字符</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a[k][x[i]-<span class=\"string\">&#x27;a&#x27;</span>]==<span class=\"number\">0</span>) a[k][x[i]-<span class=\"string\">&#x27;a&#x27;</span>]=++q;</span><br><span class=\"line\">        <span class=\"comment\">//如果没有当前字符对应的节点，就新建一个节点。</span></span><br><span class=\"line\">        k=a[k][x[i]-<span class=\"string\">&#x27;a&#x27;</span>];<span class=\"comment\">//跳转到下一个节点</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ++g[k]; <span class=\"comment\">//记录当前节点的模式串个数</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>求失配指针相当于是 AC 自动机的核心，也是最难理解的地方。<br>在建好字典树后，我们一般用 bfs 遍历整棵树。注意在遍历过程中数组f储存的是已配指针。同样，失配指针是储存在数组f中的。在求一个点的失配指针时，共有2种情况。<br>不过在求失配指针时，我们还会用到一些不存在的节点。这些点存在的意义就是让程序在匹配时知道如果文本串对应到这个点就会失配，并直接给出失配指针，这样可以更加的方便。<br>在开始前，我们还要将 $0$ 号节点的所有儿子设为根节点，因为如果有一个点对应的字符串无法在字典树中找到它的后缀，它的失配指针就会指向 $0$ 的儿子 $x$，但是实际上它应该跳转到根节点，所以把0号点所有儿子都指向根节点即可。<br>当我们搜索到点 $i$，它对应的字符为 $x$，父节点为 $k$。当点i存在时，它的失配指针就是点k的失配指针指向的节点的儿子 $x$。什么意思，见下图：<br>![1](<a href=\"https://cdn.luogu.com.cn/upload/image_hosting/udw2lc47.png?x-oss-process=image/resize,m_lfit,h_170,w_225\">https://cdn.luogu.com.cn/upload/image_hosting/udw2lc47.png?x-oss-process=image/resize,m_lfit,h_170,w_225</a> &#x3D;300x200)<br>![2](<a href=\"https://cdn.luogu.com.cn/upload/image_hosting/jae281vb.png?x-oss-process=image/resize,m_lfit,h_170,w_225\">https://cdn.luogu.com.cn/upload/image_hosting/jae281vb.png?x-oss-process=image/resize,m_lfit,h_170,w_225</a> &#x3D;300x200)<br>（图片来自网络）<br>第一幅图就是第一步建立出来的字典树，第二幅图表示每个节点的失配指针。举个例子，我们现在在访问最左侧的节点 $c$，它的父节点是上面的点 $b$，点 $b$ 的失配指针指向根节点的儿子 $b$。点 $c$ 对应的字符串是 $abc$。我们先找到 $b$ 的失配节点，也就是中间的 $b$，然后再找到 $b$ 位置对应的儿子 $c$，也就是中间的点 $c$，这样我们就找到了它对应的失配指针。<br>如果点 $k$ 的失配指针指向的节点没有儿子节点 $x$ 怎么办？其实是一样的，由于这个点不存在，所以这个位置就不存在原字符串的后缀，它的失配指针其实就直接指向了这个点的失配指针，所以它总会指向一个存在的点。在求完失配指针后，我们还要讲这个点入队来继续 bfs。<br>当我们搜索到点 $i$，它对应的字符为 $x$，父节点为 $k$。当点 $i$ 不存在时，点 $k$ 的儿子 $x$ 就是点 $k$ 的失配指针指向的节点的儿子 $x$。<br>因为点 $i$ 不存在，所以文本串如果匹配到此处必然失配，所以我们可以简单地将点 $k$ 的儿子 $x$ 指向点i的失配节点。点 $i$ 的失配指针的求法同上，就是点k的失配节点的儿子 $x$ 。由于这个点实际上不存在，所以不需要入队。如图：<br>![3](<a href=\"https://cdn.luogu.com.cn/upload/image_hosting/z4n1xw48.png?x-oss-process=image/resize,m_lfit,h_170,w_225\">https://cdn.luogu.com.cn/upload/image_hosting/z4n1xw48.png?x-oss-process=image/resize,m_lfit,h_170,w_225</a> &#x3D;300x200)</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">bfs</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    queue&lt;<span class=\"type\">int</span>&gt; Q;   <span class=\"comment\">//搜索时用的队列</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;=<span class=\"number\">25</span>;++i)  <span class=\"comment\">//将节点0的所有儿子设为1</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        a[<span class=\"number\">0</span>][i]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    f[<span class=\"number\">1</span>]=<span class=\"number\">0</span>; <span class=\"comment\">//根节点的失配指针只用于求其它点的失配指针</span></span><br><span class=\"line\">    Q.<span class=\"built_in\">push</span>(<span class=\"number\">1</span>);  <span class=\"comment\">//根节点入队</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!Q.<span class=\"built_in\">empty</span>())   <span class=\"comment\">//bfs</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> k=Q.<span class=\"built_in\">front</span>();    <span class=\"comment\">//提取队首节点</span></span><br><span class=\"line\">        Q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;=<span class=\"number\">25</span>;++i)  <span class=\"comment\">//访问所有儿子节点</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(a[k][i]!=<span class=\"number\">0</span>)  <span class=\"comment\">//这个点存在</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Q.<span class=\"built_in\">push</span>(a[k][i]);    <span class=\"comment\">//入队</span></span><br><span class=\"line\">                f[a[k][i]]=a[f[k]][i];  <span class=\"comment\">//求失配指针</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span>    <span class=\"comment\">//这个点不存在</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                a[k][i]=a[f[k]][i]; <span class=\"comment\">//求失配指针</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在求完失配指针后，我们就可以跑 AC 自动机了。<br>首先我们需要定义一个变量 $x$ 记录当前匹配到的字典树节点，初始值为 $1$，还有一个变量s储存出现过的模式串个数。<br>然后我们要依次访问整个文本串。每一次访问都将x更新为节点x对应文本串当前字符的儿子。如果节点 $x$ 有这个儿子，那么x就会指向这一个儿子节点；如果没有，它就会自动跳转到节点 $x$ 的失配指针指向的节点。然后我们要新定义一个变量 $k &#x3D; x$，循环访问节点 $k$ 的失配指针指向的节点，找到的这些都是可以与文本串匹配的字符串，所以我们要在这时记录个数，不过还要用一个数组来判断一个模式串是否已经被记录过。如果某一次节点 $k$ 已经被记录过，那么之前一定也记录过点 $k$ 之后所有可以与文本串匹配的模式串，所以可以直接退出循环。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> c[<span class=\"number\">1000001</span>];</span><br><span class=\"line\">cin&gt;&gt;c+<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> m=<span class=\"built_in\">strlen</span>(c+<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"type\">int</span> s=<span class=\"number\">0</span>,x=<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i)   <span class=\"comment\">//依次访问文本串</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    x=a[x][c[i]-<span class=\"string\">&#x27;a&#x27;</span>];   <span class=\"comment\">//更新当前的点</span></span><br><span class=\"line\">    <span class=\"type\">int</span> k=x;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(k!=<span class=\"number\">0</span>&amp;&amp;h[k]==<span class=\"literal\">false</span>)<span class=\"comment\">//记录所有可以匹配的模式串</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        s+=g[k];    <span class=\"comment\">//计数</span></span><br><span class=\"line\">        h[k]=<span class=\"literal\">true</span>;  <span class=\"comment\">//标记</span></span><br><span class=\"line\">        k=f[k];     <span class=\"comment\">//跳转至下一个</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"AC自动机加强版\"><a href=\"#AC自动机加强版\" class=\"headerlink\" title=\"AC自动机加强版\"></a>AC自动机加强版</h2><p>模板题：<a href=\"https://www.luogu.com.cn/problem/P3796\">【模板】AC 自动机（加强版）</a><br>模板题：<a href=\"https://www.luogu.com.cn/problem/P5357\">【模板】AC 自动机（二次加强版）</a><br>有的时候我们不仅要求出一个模式串是否在文本串中出现过，我们还需要知道它出现的次数。这时候我们就需要修改一下之前的方法，我们不能跳过已经有标记的点了，就像这样：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span>(k!=<span class=\"number\">0</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    h[k]+=g[k];</span><br><span class=\"line\">    k=f[k];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样下来一个点就可能不止被访问一遍，于是就会导致 $\\color{purple}{TLE}$。如何解决这个问题呢？如果我们把一个点的失配指针指向的点和这个点连接起来，那么就会形成一个链，如果位于链首的点匹配成功一次，意味着后面所有点都会匹配成功一次。所以我们可以先统计第一个点匹配的次数，最后再更新后面所有点，复杂度就可以大大降低了。如何实现？我们再把失配指针当做一条有向边，所有的点必然会形成一个有向无环图，所以只需要在最后进行拓扑排序即可。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">abc</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    queue&lt;<span class=\"type\">int</span>&gt; Q;       <span class=\"comment\">//定义队列</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=q;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(r[i]==<span class=\"number\">0</span>) Q.<span class=\"built_in\">push</span>(i);      <span class=\"comment\">//入度为0的点入队</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!Q.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> k=Q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">        Q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        h[f[k]]+=h[k];      <span class=\"comment\">//统计</span></span><br><span class=\"line\">        --r[f[k]];      <span class=\"comment\">//入度减一</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(r[f[k]]==<span class=\"number\">0</span>) Q.<span class=\"built_in\">push</span>(f[k]);    <span class=\"comment\">//如果入度为0则入队</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">int</span> n,q=<span class=\"number\">1</span>,a[<span class=\"number\">1000001</span>][<span class=\"number\">26</span>],f[<span class=\"number\">1000001</span>],g[<span class=\"number\">1000001</span>],h[<span class=\"number\">1000001</span>],r[<span class=\"number\">1000001</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"type\">char</span> *x,<span class=\"type\">int</span> t)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> k=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;x[i];++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a[k][x[i]-<span class=\"string\">&#x27;a&#x27;</span>]==<span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            a[k][x[i]-<span class=\"string\">&#x27;a&#x27;</span>]=++q;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        k=a[k][x[i]-<span class=\"string\">&#x27;a&#x27;</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    g[t]=k;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">bfs</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    queue&lt;<span class=\"type\">int</span>&gt; Q;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;=<span class=\"number\">25</span>;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        a[<span class=\"number\">0</span>][i]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    f[<span class=\"number\">1</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    Q.<span class=\"built_in\">push</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!Q.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> k=Q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">        Q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;=<span class=\"number\">25</span>;++i)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(a[k][i]!=<span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Q.<span class=\"built_in\">push</span>(a[k][i]);</span><br><span class=\"line\">                f[a[k][i]]=a[f[k]][i];</span><br><span class=\"line\">                ++r[a[f[k]][i]];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                a[k][i]=a[f[k]][i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">abc</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    queue&lt;<span class=\"type\">int</span>&gt; Q;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=q;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(r[i]==<span class=\"number\">0</span>) Q.<span class=\"built_in\">push</span>(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!Q.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> k=Q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">        Q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        h[f[k]]+=h[k];</span><br><span class=\"line\">        --r[f[k]];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(r[f[k]]==<span class=\"number\">0</span>) Q.<span class=\"built_in\">push</span>(f[k]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">char</span> x[<span class=\"number\">200001</span>];</span><br><span class=\"line\">        cin&gt;&gt;x+<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"built_in\">build</span>(x,i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">bfs</span>();</span><br><span class=\"line\">    <span class=\"type\">char</span> c[<span class=\"number\">2000001</span>];</span><br><span class=\"line\">    cin&gt;&gt;c+<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> m=<span class=\"built_in\">strlen</span>(c+<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"type\">int</span> x=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        x=a[x][c[i]-<span class=\"string\">&#x27;a&#x27;</span>];</span><br><span class=\"line\">        ++h[x];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">abc</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,h[g[i]]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"平衡树Treap","date":"2022-02-21T04:55:50.000Z","description":" ","_content":"\n## 前言\n模板题：[P3369 【模板】普通平衡树](https://www.luogu.com.cn/problem/P3369)\n在一堆元素中查找一个元素，线性查找需要 $O(n)$ 的时间，于是人们就发明了 BST 二叉搜索树，一个节点左子树上的元素的值总小于此节点的值，此节点的右子树上的元素的值总小于此节点的值。这样根据一个元素的值就可以快速（$O(\\log n)$）在 BST 上查找到一个元素。BST 有一个特点，就是它的中序遍历序列就是所有元素排序后的结果。不过同样的一些元素组成的 BST 两个 BST 记录的是同一组数。\n![1](/post-images/Balanced-tree-Treap-1.png)\n不过这样还是容易被卡，比如所有元素按照大小顺序加入 BST，这个 BST 就会退化为一个链，复杂度就退化为 $O(n)$ 了，如下图。\n![2](/post-images/Balanced-tree-Treap-2.png?300x)\n这时候我们就需要适当调整这个 BST 的形状，让这个 BST 更加平衡，于是又出现了平衡树，这里介绍一种较简单的平衡树，它就是 Treap。\n## 基本思路\nTreap 其实是一个合成词“Tree+Heap”，翻译过来就是树堆，它既有 BST 的性质，也有堆的性质。Treap 会在插入元素的时候给每个元素一个随机的优先级，然后通过旋转操作，使得它满足 BST 的同时，还要满足一个节点的优先级小于它的所有儿子的优先级。由于优先级是随机的，所以这个 BST 的形状是随机的，就不会出现被卡成一条链的情况（只要人品正常）。\n## 储存及更新\n```cpp\nstruct treap\n{\n    int x,l,r,s,k,t;\n}T[1000001];\n```\n平衡树的储存如上。Treap 的每个节点总共需要储存这几个值：这个节点的元素的值 $x$，这个节点的左、右儿子 $l,r$，这个节点的子树上总共的元素个数 $s$，这个节点的优先级 $k$ 和这个节点的元素个数 $t$。\n平衡树需要动态更新当前子树的节点个数，我们就需要一个类似线段树的 pushup 函数，代码如下：\n```cpp\nvoid pushup(int x)\n{\n    T[x].s=T[T[x].l].s+T[T[x].r].s+T[x].t;\n}\n```\n## 旋转操作\nTreap中非常难懂的一部分就是它的旋转操作，它可以改变 BST 的形状。旋转分为左旋与右旋。右旋操作其实就是将这个节点的父节点变为这个点的右子节点，这个点调整到原父节点的位置，并将这个点的右节点调整为其原父节点的左节点。如下图，从左图到右图的操作就是将 $2$ 号节点进行右旋。\n![3](/post-images/Balanced-tree-Treap-3.png)\n左旋的操作刚好和右旋相反。我们可以发现，第一个BST的中序遍历为 $4,2,5,1,3$ ，而第二个 $4,2,5,1,3$，这两个 BST 实质上记录的东西实质上是一样的，但是它的形状已经改变了。我们就可以通过旋转操作改变一个 BST 的形状。\n由于旋转操作要改变指向当前节点的指针，所以我们要使用传址的方法，这样在旋转改变当前节点的时候在调用它的函数中的指针也会改变。\n旋转操作的代码如下：\n```cpp\nvoid rotate_l(int &x)\n{\n    int p=T[x].r;\n    T[x].r=T[p].l;\n    T[p].l=x;\n    T[p].s=T[x].s;\n    x=p;\n    pushup(x);\n    pushup(T[x].l);\n}\nvoid rotate_r(int &x)\n{\n    int p=T[x].l;\n    T[x].l=T[p].r;\n    T[p].r=x;\n    T[p].s=T[x].s;\n    x=p;\n    pushup(x);\n    pushup(T[x].r);\n}\n```\n## 插入操作\nTreap 的插入操作很简单，只需要一直找到对应元素值与插入值相等的位置或者发现不存在值相等的元素即可。如果我们要插入的元素值为 $k$，每到一个节点，如果对应元素值等于 $k$，就把这个点的元素个数加一；如果 $k$ 小于这个点的元素值，那么就进入这个点的左子节点；如果 $k$ 大于这个点的元素值，那么就进入这个点的右子节点；如果这个点的编号为 $0$，那么表明不存在与 $k$ 相等的元素，就新建一个节点，并随机赋优先级。\n插入操作看似很简单，但是这样有可能不满足堆的性质，我们就需要进行旋转操作。如果左节点的优先级比这个节点小，那么就将这个节点右旋；如果右子节点的优先级比这个节点小，那么就将这个节点左旋。并且更新 Treap 的状态。\n同样，插入操作由于要旋转，也要通过传址的方法传参。\n```cpp\nvoid add(int &x,int k)\n{\n    if(x==0)\n    {\n        x=++q;\n        T[x].l=T[x].r=0;\n        T[x].s=T[x].t=1;\n        T[x].k=k;\n        T[x].h=rand()*rand()%1000000+1;\n        return;\n    }\n    if(k==T[x].k) ++T[x].t;\n    else if(k<T[x].k) add(T[x].l,k);\n    else if(k>T[x].k) add(T[x].r,k);\n    if(T[x].l!=0&&T[x].h>T[T[x].l].h) rotate_r(x);\n    if(T[x].r!=0&&T[x].h>T[T[x].r].h) rotate_l(x);\n    pushup(x);\n}\n```\n## 删除操作\nTreap 的删除操作和插入操作相似，要一直找到对应元素值与删除值相等的位置，然后把这个位置的元素个数减一，如果个数为 $0$ 了，就删除这个节点，并将优先级较小的子节点放在这个位置，不过这时需要注意左右子节点是否存在。如果不存在这个节点，就说明没有这个元素。同样，最后的时候要更新结点个数。\n```cpp\nvoid remove(int &x,int k)\n{\n    if(x==0) return;\n    if(k==T[x].k)\n    {\n        if(T[x].t>1)\n        {\n        \t--T[x].t;\n            pushup(x);\n            return;\n        }\n        if(T[x].l==0&&T[x].r==0)\n        {\n            x=0;\n            return;\n        }\n        if(T[x].l!=0&&(T[x].r==0||T[T[x].l].h<T[T[x].r].h))\n        {\n            rotate_r(x);\n            remove(T[x].r,k);\n        }\n        else\n        {   \n            rotate_l(x);\n            remove(T[x].l,k);\n        }\n        pushup(x);\n        return;\n    }\n    if(k<T[x].k) remove(T[x].l,k);\n    else remove(T[x].r,k);\n    pushup(x);\n}\n```\n## 查询排名\n在 Treap 中查询一个元素的排名，只需要像之前一样一直访问直到找到这个元素即可。根节点在当前子树的排名就是左子树的大小加一，而左子树的所有节点的排名就是这个节点在左子树中的排名，右子树的所有节点的排名就是这个节点在右子树的排名加上左子树以及根节点的大小。由于访问不需要修改节点，就不需要再传址了。\n```cpp\nint num(int x,int k)\n{\n    if(x==0) return 1;\n    if(k==T[x].k) return T[T[x].l].s+1;\n    if(k<T[x].k) return num(T[x].l,k);\n    return T[T[x].l].s+T[x].t+num(T[x].r,k);\n}\n```\n## 查询对应排名的元素\n要查询相应排名的元素，只需要在每一次判断这个元素在当前节点的根节点、左子树还是右子树上。如果当前子树中的排名小于左子树的大小，那么这个元素就在左子树中，这个元素在左子树中的排名就是当前子树中的排名；如果不在左子树中但是排名小于等于左子树大小加上根节点的大小，那么这个元素就是根节点的元素值；否则就在右子树中，在右子树中的排名就是在当前子树中的排名减去左子树的大小和根节点的大小。\n```cpp\nint sum(int x,int k)\n{\n    if(x==0) return 1e9;\n    if(k<T[T[x].l].s+1) return sum(T[x].l,k);\n    if(k<=T[T[x].l].s+T[x].t) return T[x].k;\n    return sum(T[x].r,k-T[T[x].l].s-T[x].t);\n}\n```\n## 查询前驱和后继\n一个点的前驱指的是小于这个元素值的最大的元素，后继指的是大于这个元素值的最小的元素。要找到一个点的前驱，当这个点在这个子树中时，如果要找的元素值小于等于根节点的元素值，说明这个元素在左子树中，就搜索左子树，否则在右子树中或者就是根节点，就搜索右子树。如果在左子树中但是最后没有找到，也就是返回了 $0$，说明这个节点没有在这个子树中，返回 $0$。如果在右子树中没有找到，说明这个元素的前驱就是根节点。最后，返回找到的元素或者 $0$。后继的查询操作刚好相反。\n```cpp\nint find_f(int x,int k)\n{\n    if(x==0) return 0;\n    if(k<=T[x].k) return find_f(T[x].l,k);\n    int p=find_f(T[x].r,k);\n    if(p==0) return T[x].k;\n    return p;\n}\nint find_b(int x,int k)\n{\n    if(x==0) return 0;\n    if(k>=T[x].k) return find_b(T[x].r,k);\n    int p=find_b(T[x].l,k);\n    if(p==0) return T[x].k;\n    return p;\n}\n``` \n## Treap函数的调用\n我们总共学习了 $6$ 个 Treap 的相关函数。调用的时候我们需要调用 Treap 的根节点。由于 Treap 的形状在时刻变化，所以我们需要用一个变量 $r$ 来记录根节点，初始值为 $0$。\n```cpp\nint main()\n{\n    srand(time(NULL));\n    scanf(\"%d\",&m);\n    for(int i=1;i<=m;++i)\n    {\n        int z,k;\n        scanf(\"%d%d\",&z,&k);\n        if(z==1) add(r,k);\n        else if(z==2) remove(r,k);\n        else if(z==3) printf(\"%d\\n\",num(r,k));\n        else if(z==4) printf(\"%d\\n\",sum(r,k));\n        else if(z==5) printf(\"%d\\n\",find_f(r,k));\n        else if(z==6) printf(\"%d\\n\",find_b(r,k));\n    }\n    return 0;\n}\n```\n## code\n```cpp\n```#include<cstdio>\n#include<algorithm>\n#include<ctime>\nusing namespace std;\nint m,r=0,q=0;\nstruct treap\n{\n    int k,l,r,s,h,t;\n}T[1000001];\nvoid pushup(int x)\n{\n    T[x].s=T[T[x].l].s+T[T[x].r].s+T[x].t;\n}\nvoid rotate_l(int &x)\n{\n    int p=T[x].r;\n    T[x].r=T[p].l;\n    T[p].l=x;\n    T[p].s=T[x].s;\n    x=p;\n    pushup(x);\n    pushup(T[x].l);\n}\nvoid rotate_r(int &x)\n{\n    int p=T[x].l;\n    T[x].l=T[p].r;\n    T[p].r=x;\n    T[p].s=T[x].s;\n    x=p;\n    pushup(x);\n    pushup(T[x].r);\n}\nvoid add(int &x,int k)\n{\n    if(x==0)\n    {\n        x=++q;\n        T[x].l=T[x].r=0;\n        T[x].s=T[x].t=1;\n        T[x].k=k;\n        T[x].h=rand()*rand()%1000000+1;\n        return;\n    }\n    if(k==T[x].k) ++T[x].t;\n    else if(k<T[x].k) add(T[x].l,k);\n    else if(k>T[x].k) add(T[x].r,k);\n    if(T[x].l!=0&&T[x].h>T[T[x].l].h) rotate_r(x);\n    if(T[x].r!=0&&T[x].h>T[T[x].r].h) rotate_l(x);\n    pushup(x);\n}\nvoid remove(int &x,int k)\n{\n    if(x==0) return;\n    if(k==T[x].k)\n    {\n        if(T[x].t>1)\n        {\n        \t--T[x].t;\n            pushup(x);\n            return;\n        }\n        if(T[x].l==0&&T[x].r==0)\n        {\n            x=0;\n            return;\n        }\n        if(T[x].l!=0&&(T[x].r==0||T[T[x].l].h<T[T[x].r].h))\n        {\n            rotate_r(x);\n            remove(T[x].r,k);\n        }\n        else\n        {   \n            rotate_l(x);\n            remove(T[x].l,k);\n        }\n        pushup(x);\n        return;\n    }\n    if(k<T[x].k) remove(T[x].l,k);\n    else remove(T[x].r,k);\n    pushup(x);\n}\nint num(int x,int k)\n{\n    if(x==0) return 1;\n    if(k==T[x].k) return T[T[x].l].s+1;\n    if(k<T[x].k) return num(T[x].l,k);\n    return T[T[x].l].s+T[x].t+num(T[x].r,k);\n}\nint sum(int x,int k)\n{\n    if(x==0) return 1e9;\n    if(k<T[T[x].l].s+1) return sum(T[x].l,k);\n    if(k<=T[T[x].l].s+T[x].t) return T[x].k;\n    return sum(T[x].r,k-T[T[x].l].s-T[x].t);\n}\nint find_f(int x,int k)\n{\n    if(x==0) return 0;\n    if(k<=T[x].k) return find_f(T[x].l,k);\n    int p=find_f(T[x].r,k);\n    if(p==0) return T[x].k;\n    return p;\n}\nint find_b(int x,int k)\n{\n    if(x==0) return 0;\n    if(k>=T[x].k) return find_b(T[x].r,k);\n    int p=find_b(T[x].l,k);\n    if(p==0) return T[x].k;\n    return p;\n}\nint main()\n{\n    srand(time(NULL));\n    scanf(\"%d\",&m);\n    for(int i=1;i<=m;++i)\n    {\n        int z,k;\n        scanf(\"%d%d\",&z,&k);\n        if(z==1) add(r,k);\n        else if(z==2) remove(r,k);\n        else if(z==3) printf(\"%d\\n\",num(r,k));\n        else if(z==4) printf(\"%d\\n\",sum(r,k));\n        else if(z==5) printf(\"%d\\n\",find_f(r,k));\n        else if(z==6) printf(\"%d\\n\",find_b(r,k));\n    }\n    return 0;\n}","source":"_posts/Balanced-tree-Treap.md","raw":"---\ntitle: '平衡树Treap'\ndate: 2022-02-21 12:55:50\ntags: [平衡树]\ndescription: ' '\n---\n\n## 前言\n模板题：[P3369 【模板】普通平衡树](https://www.luogu.com.cn/problem/P3369)\n在一堆元素中查找一个元素，线性查找需要 $O(n)$ 的时间，于是人们就发明了 BST 二叉搜索树，一个节点左子树上的元素的值总小于此节点的值，此节点的右子树上的元素的值总小于此节点的值。这样根据一个元素的值就可以快速（$O(\\log n)$）在 BST 上查找到一个元素。BST 有一个特点，就是它的中序遍历序列就是所有元素排序后的结果。不过同样的一些元素组成的 BST 两个 BST 记录的是同一组数。\n![1](/post-images/Balanced-tree-Treap-1.png)\n不过这样还是容易被卡，比如所有元素按照大小顺序加入 BST，这个 BST 就会退化为一个链，复杂度就退化为 $O(n)$ 了，如下图。\n![2](/post-images/Balanced-tree-Treap-2.png?300x)\n这时候我们就需要适当调整这个 BST 的形状，让这个 BST 更加平衡，于是又出现了平衡树，这里介绍一种较简单的平衡树，它就是 Treap。\n## 基本思路\nTreap 其实是一个合成词“Tree+Heap”，翻译过来就是树堆，它既有 BST 的性质，也有堆的性质。Treap 会在插入元素的时候给每个元素一个随机的优先级，然后通过旋转操作，使得它满足 BST 的同时，还要满足一个节点的优先级小于它的所有儿子的优先级。由于优先级是随机的，所以这个 BST 的形状是随机的，就不会出现被卡成一条链的情况（只要人品正常）。\n## 储存及更新\n```cpp\nstruct treap\n{\n    int x,l,r,s,k,t;\n}T[1000001];\n```\n平衡树的储存如上。Treap 的每个节点总共需要储存这几个值：这个节点的元素的值 $x$，这个节点的左、右儿子 $l,r$，这个节点的子树上总共的元素个数 $s$，这个节点的优先级 $k$ 和这个节点的元素个数 $t$。\n平衡树需要动态更新当前子树的节点个数，我们就需要一个类似线段树的 pushup 函数，代码如下：\n```cpp\nvoid pushup(int x)\n{\n    T[x].s=T[T[x].l].s+T[T[x].r].s+T[x].t;\n}\n```\n## 旋转操作\nTreap中非常难懂的一部分就是它的旋转操作，它可以改变 BST 的形状。旋转分为左旋与右旋。右旋操作其实就是将这个节点的父节点变为这个点的右子节点，这个点调整到原父节点的位置，并将这个点的右节点调整为其原父节点的左节点。如下图，从左图到右图的操作就是将 $2$ 号节点进行右旋。\n![3](/post-images/Balanced-tree-Treap-3.png)\n左旋的操作刚好和右旋相反。我们可以发现，第一个BST的中序遍历为 $4,2,5,1,3$ ，而第二个 $4,2,5,1,3$，这两个 BST 实质上记录的东西实质上是一样的，但是它的形状已经改变了。我们就可以通过旋转操作改变一个 BST 的形状。\n由于旋转操作要改变指向当前节点的指针，所以我们要使用传址的方法，这样在旋转改变当前节点的时候在调用它的函数中的指针也会改变。\n旋转操作的代码如下：\n```cpp\nvoid rotate_l(int &x)\n{\n    int p=T[x].r;\n    T[x].r=T[p].l;\n    T[p].l=x;\n    T[p].s=T[x].s;\n    x=p;\n    pushup(x);\n    pushup(T[x].l);\n}\nvoid rotate_r(int &x)\n{\n    int p=T[x].l;\n    T[x].l=T[p].r;\n    T[p].r=x;\n    T[p].s=T[x].s;\n    x=p;\n    pushup(x);\n    pushup(T[x].r);\n}\n```\n## 插入操作\nTreap 的插入操作很简单，只需要一直找到对应元素值与插入值相等的位置或者发现不存在值相等的元素即可。如果我们要插入的元素值为 $k$，每到一个节点，如果对应元素值等于 $k$，就把这个点的元素个数加一；如果 $k$ 小于这个点的元素值，那么就进入这个点的左子节点；如果 $k$ 大于这个点的元素值，那么就进入这个点的右子节点；如果这个点的编号为 $0$，那么表明不存在与 $k$ 相等的元素，就新建一个节点，并随机赋优先级。\n插入操作看似很简单，但是这样有可能不满足堆的性质，我们就需要进行旋转操作。如果左节点的优先级比这个节点小，那么就将这个节点右旋；如果右子节点的优先级比这个节点小，那么就将这个节点左旋。并且更新 Treap 的状态。\n同样，插入操作由于要旋转，也要通过传址的方法传参。\n```cpp\nvoid add(int &x,int k)\n{\n    if(x==0)\n    {\n        x=++q;\n        T[x].l=T[x].r=0;\n        T[x].s=T[x].t=1;\n        T[x].k=k;\n        T[x].h=rand()*rand()%1000000+1;\n        return;\n    }\n    if(k==T[x].k) ++T[x].t;\n    else if(k<T[x].k) add(T[x].l,k);\n    else if(k>T[x].k) add(T[x].r,k);\n    if(T[x].l!=0&&T[x].h>T[T[x].l].h) rotate_r(x);\n    if(T[x].r!=0&&T[x].h>T[T[x].r].h) rotate_l(x);\n    pushup(x);\n}\n```\n## 删除操作\nTreap 的删除操作和插入操作相似，要一直找到对应元素值与删除值相等的位置，然后把这个位置的元素个数减一，如果个数为 $0$ 了，就删除这个节点，并将优先级较小的子节点放在这个位置，不过这时需要注意左右子节点是否存在。如果不存在这个节点，就说明没有这个元素。同样，最后的时候要更新结点个数。\n```cpp\nvoid remove(int &x,int k)\n{\n    if(x==0) return;\n    if(k==T[x].k)\n    {\n        if(T[x].t>1)\n        {\n        \t--T[x].t;\n            pushup(x);\n            return;\n        }\n        if(T[x].l==0&&T[x].r==0)\n        {\n            x=0;\n            return;\n        }\n        if(T[x].l!=0&&(T[x].r==0||T[T[x].l].h<T[T[x].r].h))\n        {\n            rotate_r(x);\n            remove(T[x].r,k);\n        }\n        else\n        {   \n            rotate_l(x);\n            remove(T[x].l,k);\n        }\n        pushup(x);\n        return;\n    }\n    if(k<T[x].k) remove(T[x].l,k);\n    else remove(T[x].r,k);\n    pushup(x);\n}\n```\n## 查询排名\n在 Treap 中查询一个元素的排名，只需要像之前一样一直访问直到找到这个元素即可。根节点在当前子树的排名就是左子树的大小加一，而左子树的所有节点的排名就是这个节点在左子树中的排名，右子树的所有节点的排名就是这个节点在右子树的排名加上左子树以及根节点的大小。由于访问不需要修改节点，就不需要再传址了。\n```cpp\nint num(int x,int k)\n{\n    if(x==0) return 1;\n    if(k==T[x].k) return T[T[x].l].s+1;\n    if(k<T[x].k) return num(T[x].l,k);\n    return T[T[x].l].s+T[x].t+num(T[x].r,k);\n}\n```\n## 查询对应排名的元素\n要查询相应排名的元素，只需要在每一次判断这个元素在当前节点的根节点、左子树还是右子树上。如果当前子树中的排名小于左子树的大小，那么这个元素就在左子树中，这个元素在左子树中的排名就是当前子树中的排名；如果不在左子树中但是排名小于等于左子树大小加上根节点的大小，那么这个元素就是根节点的元素值；否则就在右子树中，在右子树中的排名就是在当前子树中的排名减去左子树的大小和根节点的大小。\n```cpp\nint sum(int x,int k)\n{\n    if(x==0) return 1e9;\n    if(k<T[T[x].l].s+1) return sum(T[x].l,k);\n    if(k<=T[T[x].l].s+T[x].t) return T[x].k;\n    return sum(T[x].r,k-T[T[x].l].s-T[x].t);\n}\n```\n## 查询前驱和后继\n一个点的前驱指的是小于这个元素值的最大的元素，后继指的是大于这个元素值的最小的元素。要找到一个点的前驱，当这个点在这个子树中时，如果要找的元素值小于等于根节点的元素值，说明这个元素在左子树中，就搜索左子树，否则在右子树中或者就是根节点，就搜索右子树。如果在左子树中但是最后没有找到，也就是返回了 $0$，说明这个节点没有在这个子树中，返回 $0$。如果在右子树中没有找到，说明这个元素的前驱就是根节点。最后，返回找到的元素或者 $0$。后继的查询操作刚好相反。\n```cpp\nint find_f(int x,int k)\n{\n    if(x==0) return 0;\n    if(k<=T[x].k) return find_f(T[x].l,k);\n    int p=find_f(T[x].r,k);\n    if(p==0) return T[x].k;\n    return p;\n}\nint find_b(int x,int k)\n{\n    if(x==0) return 0;\n    if(k>=T[x].k) return find_b(T[x].r,k);\n    int p=find_b(T[x].l,k);\n    if(p==0) return T[x].k;\n    return p;\n}\n``` \n## Treap函数的调用\n我们总共学习了 $6$ 个 Treap 的相关函数。调用的时候我们需要调用 Treap 的根节点。由于 Treap 的形状在时刻变化，所以我们需要用一个变量 $r$ 来记录根节点，初始值为 $0$。\n```cpp\nint main()\n{\n    srand(time(NULL));\n    scanf(\"%d\",&m);\n    for(int i=1;i<=m;++i)\n    {\n        int z,k;\n        scanf(\"%d%d\",&z,&k);\n        if(z==1) add(r,k);\n        else if(z==2) remove(r,k);\n        else if(z==3) printf(\"%d\\n\",num(r,k));\n        else if(z==4) printf(\"%d\\n\",sum(r,k));\n        else if(z==5) printf(\"%d\\n\",find_f(r,k));\n        else if(z==6) printf(\"%d\\n\",find_b(r,k));\n    }\n    return 0;\n}\n```\n## code\n```cpp\n```#include<cstdio>\n#include<algorithm>\n#include<ctime>\nusing namespace std;\nint m,r=0,q=0;\nstruct treap\n{\n    int k,l,r,s,h,t;\n}T[1000001];\nvoid pushup(int x)\n{\n    T[x].s=T[T[x].l].s+T[T[x].r].s+T[x].t;\n}\nvoid rotate_l(int &x)\n{\n    int p=T[x].r;\n    T[x].r=T[p].l;\n    T[p].l=x;\n    T[p].s=T[x].s;\n    x=p;\n    pushup(x);\n    pushup(T[x].l);\n}\nvoid rotate_r(int &x)\n{\n    int p=T[x].l;\n    T[x].l=T[p].r;\n    T[p].r=x;\n    T[p].s=T[x].s;\n    x=p;\n    pushup(x);\n    pushup(T[x].r);\n}\nvoid add(int &x,int k)\n{\n    if(x==0)\n    {\n        x=++q;\n        T[x].l=T[x].r=0;\n        T[x].s=T[x].t=1;\n        T[x].k=k;\n        T[x].h=rand()*rand()%1000000+1;\n        return;\n    }\n    if(k==T[x].k) ++T[x].t;\n    else if(k<T[x].k) add(T[x].l,k);\n    else if(k>T[x].k) add(T[x].r,k);\n    if(T[x].l!=0&&T[x].h>T[T[x].l].h) rotate_r(x);\n    if(T[x].r!=0&&T[x].h>T[T[x].r].h) rotate_l(x);\n    pushup(x);\n}\nvoid remove(int &x,int k)\n{\n    if(x==0) return;\n    if(k==T[x].k)\n    {\n        if(T[x].t>1)\n        {\n        \t--T[x].t;\n            pushup(x);\n            return;\n        }\n        if(T[x].l==0&&T[x].r==0)\n        {\n            x=0;\n            return;\n        }\n        if(T[x].l!=0&&(T[x].r==0||T[T[x].l].h<T[T[x].r].h))\n        {\n            rotate_r(x);\n            remove(T[x].r,k);\n        }\n        else\n        {   \n            rotate_l(x);\n            remove(T[x].l,k);\n        }\n        pushup(x);\n        return;\n    }\n    if(k<T[x].k) remove(T[x].l,k);\n    else remove(T[x].r,k);\n    pushup(x);\n}\nint num(int x,int k)\n{\n    if(x==0) return 1;\n    if(k==T[x].k) return T[T[x].l].s+1;\n    if(k<T[x].k) return num(T[x].l,k);\n    return T[T[x].l].s+T[x].t+num(T[x].r,k);\n}\nint sum(int x,int k)\n{\n    if(x==0) return 1e9;\n    if(k<T[T[x].l].s+1) return sum(T[x].l,k);\n    if(k<=T[T[x].l].s+T[x].t) return T[x].k;\n    return sum(T[x].r,k-T[T[x].l].s-T[x].t);\n}\nint find_f(int x,int k)\n{\n    if(x==0) return 0;\n    if(k<=T[x].k) return find_f(T[x].l,k);\n    int p=find_f(T[x].r,k);\n    if(p==0) return T[x].k;\n    return p;\n}\nint find_b(int x,int k)\n{\n    if(x==0) return 0;\n    if(k>=T[x].k) return find_b(T[x].r,k);\n    int p=find_b(T[x].l,k);\n    if(p==0) return T[x].k;\n    return p;\n}\nint main()\n{\n    srand(time(NULL));\n    scanf(\"%d\",&m);\n    for(int i=1;i<=m;++i)\n    {\n        int z,k;\n        scanf(\"%d%d\",&z,&k);\n        if(z==1) add(r,k);\n        else if(z==2) remove(r,k);\n        else if(z==3) printf(\"%d\\n\",num(r,k));\n        else if(z==4) printf(\"%d\\n\",sum(r,k));\n        else if(z==5) printf(\"%d\\n\",find_f(r,k));\n        else if(z==6) printf(\"%d\\n\",find_b(r,k));\n    }\n    return 0;\n}","slug":"Balanced-tree-Treap","published":1,"updated":"2023-03-15T01:57:00.442Z","_id":"cleid927d00032sjf7jgu3bok","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>模板题：<a href=\"https://www.luogu.com.cn/problem/P3369\">P3369 【模板】普通平衡树</a><br>在一堆元素中查找一个元素，线性查找需要 $O(n)$ 的时间，于是人们就发明了 BST 二叉搜索树，一个节点左子树上的元素的值总小于此节点的值，此节点的右子树上的元素的值总小于此节点的值。这样根据一个元素的值就可以快速（$O(\\log n)$）在 BST 上查找到一个元素。BST 有一个特点，就是它的中序遍历序列就是所有元素排序后的结果。不过同样的一些元素组成的 BST 两个 BST 记录的是同一组数。<br><img src=\"/post-images/Balanced-tree-Treap-1.png\" alt=\"1\"><br>不过这样还是容易被卡，比如所有元素按照大小顺序加入 BST，这个 BST 就会退化为一个链，复杂度就退化为 $O(n)$ 了，如下图。<br><img src=\"/post-images/Balanced-tree-Treap-2.png?300x\" alt=\"2\"><br>这时候我们就需要适当调整这个 BST 的形状，让这个 BST 更加平衡，于是又出现了平衡树，这里介绍一种较简单的平衡树，它就是 Treap。</p>\n<h2 id=\"基本思路\"><a href=\"#基本思路\" class=\"headerlink\" title=\"基本思路\"></a>基本思路</h2><p>Treap 其实是一个合成词“Tree+Heap”，翻译过来就是树堆，它既有 BST 的性质，也有堆的性质。Treap 会在插入元素的时候给每个元素一个随机的优先级，然后通过旋转操作，使得它满足 BST 的同时，还要满足一个节点的优先级小于它的所有儿子的优先级。由于优先级是随机的，所以这个 BST 的形状是随机的，就不会出现被卡成一条链的情况（只要人品正常）。</p>\n<h2 id=\"储存及更新\"><a href=\"#储存及更新\" class=\"headerlink\" title=\"储存及更新\"></a>储存及更新</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">treap</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> x,l,r,s,k,t;</span><br><span class=\"line\">&#125;T[<span class=\"number\">1000001</span>];</span><br></pre></td></tr></table></figure>\n<p>平衡树的储存如上。Treap 的每个节点总共需要储存这几个值：这个节点的元素的值 $x$，这个节点的左、右儿子 $l,r$，这个节点的子树上总共的元素个数 $s$，这个节点的优先级 $k$ 和这个节点的元素个数 $t$。<br>平衡树需要动态更新当前子树的节点个数，我们就需要一个类似线段树的 pushup 函数，代码如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pushup</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    T[x].s=T[T[x].l].s+T[T[x].r].s+T[x].t;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"旋转操作\"><a href=\"#旋转操作\" class=\"headerlink\" title=\"旋转操作\"></a>旋转操作</h2><p>Treap中非常难懂的一部分就是它的旋转操作，它可以改变 BST 的形状。旋转分为左旋与右旋。右旋操作其实就是将这个节点的父节点变为这个点的右子节点，这个点调整到原父节点的位置，并将这个点的右节点调整为其原父节点的左节点。如下图，从左图到右图的操作就是将 $2$ 号节点进行右旋。<br><img src=\"/post-images/Balanced-tree-Treap-3.png\" alt=\"3\"><br>左旋的操作刚好和右旋相反。我们可以发现，第一个BST的中序遍历为 $4,2,5,1,3$ ，而第二个 $4,2,5,1,3$，这两个 BST 实质上记录的东西实质上是一样的，但是它的形状已经改变了。我们就可以通过旋转操作改变一个 BST 的形状。<br>由于旋转操作要改变指向当前节点的指针，所以我们要使用传址的方法，这样在旋转改变当前节点的时候在调用它的函数中的指针也会改变。<br>旋转操作的代码如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">rotate_l</span><span class=\"params\">(<span class=\"type\">int</span> &amp;x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> p=T[x].r;</span><br><span class=\"line\">    T[x].r=T[p].l;</span><br><span class=\"line\">    T[p].l=x;</span><br><span class=\"line\">    T[p].s=T[x].s;</span><br><span class=\"line\">    x=p;</span><br><span class=\"line\">    <span class=\"built_in\">pushup</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">pushup</span>(T[x].l);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">rotate_r</span><span class=\"params\">(<span class=\"type\">int</span> &amp;x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> p=T[x].l;</span><br><span class=\"line\">    T[x].l=T[p].r;</span><br><span class=\"line\">    T[p].r=x;</span><br><span class=\"line\">    T[p].s=T[x].s;</span><br><span class=\"line\">    x=p;</span><br><span class=\"line\">    <span class=\"built_in\">pushup</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">pushup</span>(T[x].r);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"插入操作\"><a href=\"#插入操作\" class=\"headerlink\" title=\"插入操作\"></a>插入操作</h2><p>Treap 的插入操作很简单，只需要一直找到对应元素值与插入值相等的位置或者发现不存在值相等的元素即可。如果我们要插入的元素值为 $k$，每到一个节点，如果对应元素值等于 $k$，就把这个点的元素个数加一；如果 $k$ 小于这个点的元素值，那么就进入这个点的左子节点；如果 $k$ 大于这个点的元素值，那么就进入这个点的右子节点；如果这个点的编号为 $0$，那么表明不存在与 $k$ 相等的元素，就新建一个节点，并随机赋优先级。<br>插入操作看似很简单，但是这样有可能不满足堆的性质，我们就需要进行旋转操作。如果左节点的优先级比这个节点小，那么就将这个节点右旋；如果右子节点的优先级比这个节点小，那么就将这个节点左旋。并且更新 Treap 的状态。<br>同样，插入操作由于要旋转，也要通过传址的方法传参。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> &amp;x,<span class=\"type\">int</span> k)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x==<span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        x=++q;</span><br><span class=\"line\">        T[x].l=T[x].r=<span class=\"number\">0</span>;</span><br><span class=\"line\">        T[x].s=T[x].t=<span class=\"number\">1</span>;</span><br><span class=\"line\">        T[x].k=k;</span><br><span class=\"line\">        T[x].h=<span class=\"built_in\">rand</span>()*<span class=\"built_in\">rand</span>()%<span class=\"number\">1000000</span>+<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(k==T[x].k) ++T[x].t;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(k&lt;T[x].k) <span class=\"built_in\">add</span>(T[x].l,k);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(k&gt;T[x].k) <span class=\"built_in\">add</span>(T[x].r,k);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(T[x].l!=<span class=\"number\">0</span>&amp;&amp;T[x].h&gt;T[T[x].l].h) <span class=\"built_in\">rotate_r</span>(x);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(T[x].r!=<span class=\"number\">0</span>&amp;&amp;T[x].h&gt;T[T[x].r].h) <span class=\"built_in\">rotate_l</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">pushup</span>(x);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"删除操作\"><a href=\"#删除操作\" class=\"headerlink\" title=\"删除操作\"></a>删除操作</h2><p>Treap 的删除操作和插入操作相似，要一直找到对应元素值与删除值相等的位置，然后把这个位置的元素个数减一，如果个数为 $0$ 了，就删除这个节点，并将优先级较小的子节点放在这个位置，不过这时需要注意左右子节点是否存在。如果不存在这个节点，就说明没有这个元素。同样，最后的时候要更新结点个数。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">remove</span><span class=\"params\">(<span class=\"type\">int</span> &amp;x,<span class=\"type\">int</span> k)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x==<span class=\"number\">0</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(k==T[x].k)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(T[x].t&gt;<span class=\"number\">1</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        \t--T[x].t;</span><br><span class=\"line\">            <span class=\"built_in\">pushup</span>(x);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(T[x].l==<span class=\"number\">0</span>&amp;&amp;T[x].r==<span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            x=<span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(T[x].l!=<span class=\"number\">0</span>&amp;&amp;(T[x].r==<span class=\"number\">0</span>||T[T[x].l].h&lt;T[T[x].r].h))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">rotate_r</span>(x);</span><br><span class=\"line\">            <span class=\"built_in\">remove</span>(T[x].r,k);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;   </span><br><span class=\"line\">            <span class=\"built_in\">rotate_l</span>(x);</span><br><span class=\"line\">            <span class=\"built_in\">remove</span>(T[x].l,k);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">pushup</span>(x);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(k&lt;T[x].k) <span class=\"built_in\">remove</span>(T[x].l,k);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"built_in\">remove</span>(T[x].r,k);</span><br><span class=\"line\">    <span class=\"built_in\">pushup</span>(x);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"查询排名\"><a href=\"#查询排名\" class=\"headerlink\" title=\"查询排名\"></a>查询排名</h2><p>在 Treap 中查询一个元素的排名，只需要像之前一样一直访问直到找到这个元素即可。根节点在当前子树的排名就是左子树的大小加一，而左子树的所有节点的排名就是这个节点在左子树中的排名，右子树的所有节点的排名就是这个节点在右子树的排名加上左子树以及根节点的大小。由于访问不需要修改节点，就不需要再传址了。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">num</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> k)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(k==T[x].k) <span class=\"keyword\">return</span> T[T[x].l].s+<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(k&lt;T[x].k) <span class=\"keyword\">return</span> <span class=\"built_in\">num</span>(T[x].l,k);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> T[T[x].l].s+T[x].t+<span class=\"built_in\">num</span>(T[x].r,k);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"查询对应排名的元素\"><a href=\"#查询对应排名的元素\" class=\"headerlink\" title=\"查询对应排名的元素\"></a>查询对应排名的元素</h2><p>要查询相应排名的元素，只需要在每一次判断这个元素在当前节点的根节点、左子树还是右子树上。如果当前子树中的排名小于左子树的大小，那么这个元素就在左子树中，这个元素在左子树中的排名就是当前子树中的排名；如果不在左子树中但是排名小于等于左子树大小加上根节点的大小，那么这个元素就是根节点的元素值；否则就在右子树中，在右子树中的排名就是在当前子树中的排名减去左子树的大小和根节点的大小。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">sum</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> k)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">1e9</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(k&lt;T[T[x].l].s+<span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"built_in\">sum</span>(T[x].l,k);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(k&lt;=T[T[x].l].s+T[x].t) <span class=\"keyword\">return</span> T[x].k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">sum</span>(T[x].r,k-T[T[x].l].s-T[x].t);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"查询前驱和后继\"><a href=\"#查询前驱和后继\" class=\"headerlink\" title=\"查询前驱和后继\"></a>查询前驱和后继</h2><p>一个点的前驱指的是小于这个元素值的最大的元素，后继指的是大于这个元素值的最小的元素。要找到一个点的前驱，当这个点在这个子树中时，如果要找的元素值小于等于根节点的元素值，说明这个元素在左子树中，就搜索左子树，否则在右子树中或者就是根节点，就搜索右子树。如果在左子树中但是最后没有找到，也就是返回了 $0$，说明这个节点没有在这个子树中，返回 $0$。如果在右子树中没有找到，说明这个元素的前驱就是根节点。最后，返回找到的元素或者 $0$。后继的查询操作刚好相反。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">find_f</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> k)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(k&lt;=T[x].k) <span class=\"keyword\">return</span> <span class=\"built_in\">find_f</span>(T[x].l,k);</span><br><span class=\"line\">    <span class=\"type\">int</span> p=<span class=\"built_in\">find_f</span>(T[x].r,k);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> T[x].k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">find_b</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> k)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(k&gt;=T[x].k) <span class=\"keyword\">return</span> <span class=\"built_in\">find_b</span>(T[x].r,k);</span><br><span class=\"line\">    <span class=\"type\">int</span> p=<span class=\"built_in\">find_b</span>(T[x].l,k);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> T[x].k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Treap函数的调用\"><a href=\"#Treap函数的调用\" class=\"headerlink\" title=\"Treap函数的调用\"></a>Treap函数的调用</h2><p>我们总共学习了 $6$ 个 Treap 的相关函数。调用的时候我们需要调用 Treap 的根节点。由于 Treap 的形状在时刻变化，所以我们需要用一个变量 $r$ 来记录根节点，初始值为 $0$。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">srand</span>(<span class=\"built_in\">time</span>(<span class=\"literal\">NULL</span>));</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;m);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> z,k;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;z,&amp;k);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(z==<span class=\"number\">1</span>) <span class=\"built_in\">add</span>(r,k);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(z==<span class=\"number\">2</span>) <span class=\"built_in\">remove</span>(r,k);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(z==<span class=\"number\">3</span>) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,<span class=\"built_in\">num</span>(r,k));</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(z==<span class=\"number\">4</span>) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,<span class=\"built_in\">sum</span>(r,k));</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(z==<span class=\"number\">5</span>) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,<span class=\"built_in\">find_f</span>(r,k));</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(z==<span class=\"number\">6</span>) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,<span class=\"built_in\">find_b</span>(r,k));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><p>&#96;&#96;&#96;cpp</p>\n<p>&#96;&#96;&#96;#include<cstdio><br>#include<algorithm><br>#include<ctime><br>using namespace std;<br>int m,r&#x3D;0,q&#x3D;0;<br>struct treap<br>{<br>    int k,l,r,s,h,t;<br>}T[1000001];<br>void pushup(int x)<br>{<br>    T[x].s&#x3D;T[T[x].l].s+T[T[x].r].s+T[x].t;<br>}<br>void rotate_l(int &amp;x)<br>{<br>    int p&#x3D;T[x].r;<br>    T[x].r&#x3D;T[p].l;<br>    T[p].l&#x3D;x;<br>    T[p].s&#x3D;T[x].s;<br>    x&#x3D;p;<br>    pushup(x);<br>    pushup(T[x].l);<br>}<br>void rotate_r(int &amp;x)<br>{<br>    int p&#x3D;T[x].l;<br>    T[x].l&#x3D;T[p].r;<br>    T[p].r&#x3D;x;<br>    T[p].s&#x3D;T[x].s;<br>    x&#x3D;p;<br>    pushup(x);<br>    pushup(T[x].r);<br>}<br>void add(int &amp;x,int k)<br>{<br>    if(x&#x3D;&#x3D;0)<br>    {<br>        x&#x3D;++q;<br>        T[x].l&#x3D;T[x].r&#x3D;0;<br>        T[x].s&#x3D;T[x].t&#x3D;1;<br>        T[x].k&#x3D;k;<br>        T[x].h&#x3D;rand()*rand()%1000000+1;<br>        return;<br>    }<br>    if(k&#x3D;&#x3D;T[x].k) ++T[x].t;<br>    else if(k&lt;T[x].k) add(T[x].l,k);<br>    else if(k&gt;T[x].k) add(T[x].r,k);<br>    if(T[x].l!&#x3D;0&amp;&amp;T[x].h&gt;T[T[x].l].h) rotate_r(x);<br>    if(T[x].r!&#x3D;0&amp;&amp;T[x].h&gt;T[T[x].r].h) rotate_l(x);<br>    pushup(x);<br>}<br>void remove(int &amp;x,int k)<br>{<br>    if(x&#x3D;&#x3D;0) return;<br>    if(k&#x3D;&#x3D;T[x].k)<br>    {<br>        if(T[x].t&gt;1)<br>        {<br>            –T[x].t;<br>            pushup(x);<br>            return;<br>        }<br>        if(T[x].l&#x3D;&#x3D;0&amp;&amp;T[x].r&#x3D;&#x3D;0)<br>        {<br>            x&#x3D;0;<br>            return;<br>        }<br>        if(T[x].l!&#x3D;0&amp;&amp;(T[x].r&#x3D;&#x3D;0||T[T[x].l].h&lt;T[T[x].r].h))<br>        {<br>            rotate_r(x);<br>            remove(T[x].r,k);<br>        }<br>        else<br>        {<br>            rotate_l(x);<br>            remove(T[x].l,k);<br>        }<br>        pushup(x);<br>        return;<br>    }<br>    if(k&lt;T[x].k) remove(T[x].l,k);<br>    else remove(T[x].r,k);<br>    pushup(x);<br>}<br>int num(int x,int k)<br>{<br>    if(x&#x3D;&#x3D;0) return 1;<br>    if(k&#x3D;&#x3D;T[x].k) return T[T[x].l].s+1;<br>    if(k&lt;T[x].k) return num(T[x].l,k);<br>    return T[T[x].l].s+T[x].t+num(T[x].r,k);<br>}<br>int sum(int x,int k)<br>{<br>    if(x&#x3D;&#x3D;0) return 1e9;<br>    if(k&lt;T[T[x].l].s+1) return sum(T[x].l,k);<br>    if(k&lt;&#x3D;T[T[x].l].s+T[x].t) return T[x].k;<br>    return sum(T[x].r,k-T[T[x].l].s-T[x].t);<br>}<br>int find_f(int x,int k)<br>{<br>    if(x&#x3D;&#x3D;0) return 0;<br>    if(k&lt;&#x3D;T[x].k) return find_f(T[x].l,k);<br>    int p&#x3D;find_f(T[x].r,k);<br>    if(p&#x3D;&#x3D;0) return T[x].k;<br>    return p;<br>}<br>int find_b(int x,int k)<br>{<br>    if(x&#x3D;&#x3D;0) return 0;<br>    if(k&gt;&#x3D;T[x].k) return find_b(T[x].r,k);<br>    int p&#x3D;find_b(T[x].l,k);<br>    if(p&#x3D;&#x3D;0) return T[x].k;<br>    return p;<br>}<br>int main()<br>{<br>    srand(time(NULL));<br>    scanf(“%d”,&amp;m);<br>    for(int i&#x3D;1;i&lt;&#x3D;m;++i)<br>    {<br>        int z,k;<br>        scanf(“%d%d”,&amp;z,&amp;k);<br>        if(z&#x3D;&#x3D;1) add(r,k);<br>        else if(z&#x3D;&#x3D;2) remove(r,k);<br>        else if(z&#x3D;&#x3D;3) printf(“%d\\n”,num(r,k));<br>        else if(z&#x3D;&#x3D;4) printf(“%d\\n”,sum(r,k));<br>        else if(z&#x3D;&#x3D;5) printf(“%d\\n”,find_f(r,k));<br>        else if(z&#x3D;&#x3D;6) printf(“%d\\n”,find_b(r,k));<br>    }<br>    return 0;<br>}</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>模板题：<a href=\"https://www.luogu.com.cn/problem/P3369\">P3369 【模板】普通平衡树</a><br>在一堆元素中查找一个元素，线性查找需要 $O(n)$ 的时间，于是人们就发明了 BST 二叉搜索树，一个节点左子树上的元素的值总小于此节点的值，此节点的右子树上的元素的值总小于此节点的值。这样根据一个元素的值就可以快速（$O(\\log n)$）在 BST 上查找到一个元素。BST 有一个特点，就是它的中序遍历序列就是所有元素排序后的结果。不过同样的一些元素组成的 BST 两个 BST 记录的是同一组数。<br><img src=\"/post-images/Balanced-tree-Treap-1.png\" alt=\"1\"><br>不过这样还是容易被卡，比如所有元素按照大小顺序加入 BST，这个 BST 就会退化为一个链，复杂度就退化为 $O(n)$ 了，如下图。<br><img src=\"/post-images/Balanced-tree-Treap-2.png?300x\" alt=\"2\"><br>这时候我们就需要适当调整这个 BST 的形状，让这个 BST 更加平衡，于是又出现了平衡树，这里介绍一种较简单的平衡树，它就是 Treap。</p>\n<h2 id=\"基本思路\"><a href=\"#基本思路\" class=\"headerlink\" title=\"基本思路\"></a>基本思路</h2><p>Treap 其实是一个合成词“Tree+Heap”，翻译过来就是树堆，它既有 BST 的性质，也有堆的性质。Treap 会在插入元素的时候给每个元素一个随机的优先级，然后通过旋转操作，使得它满足 BST 的同时，还要满足一个节点的优先级小于它的所有儿子的优先级。由于优先级是随机的，所以这个 BST 的形状是随机的，就不会出现被卡成一条链的情况（只要人品正常）。</p>\n<h2 id=\"储存及更新\"><a href=\"#储存及更新\" class=\"headerlink\" title=\"储存及更新\"></a>储存及更新</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">treap</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> x,l,r,s,k,t;</span><br><span class=\"line\">&#125;T[<span class=\"number\">1000001</span>];</span><br></pre></td></tr></table></figure>\n<p>平衡树的储存如上。Treap 的每个节点总共需要储存这几个值：这个节点的元素的值 $x$，这个节点的左、右儿子 $l,r$，这个节点的子树上总共的元素个数 $s$，这个节点的优先级 $k$ 和这个节点的元素个数 $t$。<br>平衡树需要动态更新当前子树的节点个数，我们就需要一个类似线段树的 pushup 函数，代码如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pushup</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    T[x].s=T[T[x].l].s+T[T[x].r].s+T[x].t;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"旋转操作\"><a href=\"#旋转操作\" class=\"headerlink\" title=\"旋转操作\"></a>旋转操作</h2><p>Treap中非常难懂的一部分就是它的旋转操作，它可以改变 BST 的形状。旋转分为左旋与右旋。右旋操作其实就是将这个节点的父节点变为这个点的右子节点，这个点调整到原父节点的位置，并将这个点的右节点调整为其原父节点的左节点。如下图，从左图到右图的操作就是将 $2$ 号节点进行右旋。<br><img src=\"/post-images/Balanced-tree-Treap-3.png\" alt=\"3\"><br>左旋的操作刚好和右旋相反。我们可以发现，第一个BST的中序遍历为 $4,2,5,1,3$ ，而第二个 $4,2,5,1,3$，这两个 BST 实质上记录的东西实质上是一样的，但是它的形状已经改变了。我们就可以通过旋转操作改变一个 BST 的形状。<br>由于旋转操作要改变指向当前节点的指针，所以我们要使用传址的方法，这样在旋转改变当前节点的时候在调用它的函数中的指针也会改变。<br>旋转操作的代码如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">rotate_l</span><span class=\"params\">(<span class=\"type\">int</span> &amp;x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> p=T[x].r;</span><br><span class=\"line\">    T[x].r=T[p].l;</span><br><span class=\"line\">    T[p].l=x;</span><br><span class=\"line\">    T[p].s=T[x].s;</span><br><span class=\"line\">    x=p;</span><br><span class=\"line\">    <span class=\"built_in\">pushup</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">pushup</span>(T[x].l);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">rotate_r</span><span class=\"params\">(<span class=\"type\">int</span> &amp;x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> p=T[x].l;</span><br><span class=\"line\">    T[x].l=T[p].r;</span><br><span class=\"line\">    T[p].r=x;</span><br><span class=\"line\">    T[p].s=T[x].s;</span><br><span class=\"line\">    x=p;</span><br><span class=\"line\">    <span class=\"built_in\">pushup</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">pushup</span>(T[x].r);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"插入操作\"><a href=\"#插入操作\" class=\"headerlink\" title=\"插入操作\"></a>插入操作</h2><p>Treap 的插入操作很简单，只需要一直找到对应元素值与插入值相等的位置或者发现不存在值相等的元素即可。如果我们要插入的元素值为 $k$，每到一个节点，如果对应元素值等于 $k$，就把这个点的元素个数加一；如果 $k$ 小于这个点的元素值，那么就进入这个点的左子节点；如果 $k$ 大于这个点的元素值，那么就进入这个点的右子节点；如果这个点的编号为 $0$，那么表明不存在与 $k$ 相等的元素，就新建一个节点，并随机赋优先级。<br>插入操作看似很简单，但是这样有可能不满足堆的性质，我们就需要进行旋转操作。如果左节点的优先级比这个节点小，那么就将这个节点右旋；如果右子节点的优先级比这个节点小，那么就将这个节点左旋。并且更新 Treap 的状态。<br>同样，插入操作由于要旋转，也要通过传址的方法传参。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> &amp;x,<span class=\"type\">int</span> k)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x==<span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        x=++q;</span><br><span class=\"line\">        T[x].l=T[x].r=<span class=\"number\">0</span>;</span><br><span class=\"line\">        T[x].s=T[x].t=<span class=\"number\">1</span>;</span><br><span class=\"line\">        T[x].k=k;</span><br><span class=\"line\">        T[x].h=<span class=\"built_in\">rand</span>()*<span class=\"built_in\">rand</span>()%<span class=\"number\">1000000</span>+<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(k==T[x].k) ++T[x].t;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(k&lt;T[x].k) <span class=\"built_in\">add</span>(T[x].l,k);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(k&gt;T[x].k) <span class=\"built_in\">add</span>(T[x].r,k);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(T[x].l!=<span class=\"number\">0</span>&amp;&amp;T[x].h&gt;T[T[x].l].h) <span class=\"built_in\">rotate_r</span>(x);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(T[x].r!=<span class=\"number\">0</span>&amp;&amp;T[x].h&gt;T[T[x].r].h) <span class=\"built_in\">rotate_l</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">pushup</span>(x);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"删除操作\"><a href=\"#删除操作\" class=\"headerlink\" title=\"删除操作\"></a>删除操作</h2><p>Treap 的删除操作和插入操作相似，要一直找到对应元素值与删除值相等的位置，然后把这个位置的元素个数减一，如果个数为 $0$ 了，就删除这个节点，并将优先级较小的子节点放在这个位置，不过这时需要注意左右子节点是否存在。如果不存在这个节点，就说明没有这个元素。同样，最后的时候要更新结点个数。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">remove</span><span class=\"params\">(<span class=\"type\">int</span> &amp;x,<span class=\"type\">int</span> k)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x==<span class=\"number\">0</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(k==T[x].k)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(T[x].t&gt;<span class=\"number\">1</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        \t--T[x].t;</span><br><span class=\"line\">            <span class=\"built_in\">pushup</span>(x);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(T[x].l==<span class=\"number\">0</span>&amp;&amp;T[x].r==<span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            x=<span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(T[x].l!=<span class=\"number\">0</span>&amp;&amp;(T[x].r==<span class=\"number\">0</span>||T[T[x].l].h&lt;T[T[x].r].h))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">rotate_r</span>(x);</span><br><span class=\"line\">            <span class=\"built_in\">remove</span>(T[x].r,k);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;   </span><br><span class=\"line\">            <span class=\"built_in\">rotate_l</span>(x);</span><br><span class=\"line\">            <span class=\"built_in\">remove</span>(T[x].l,k);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">pushup</span>(x);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(k&lt;T[x].k) <span class=\"built_in\">remove</span>(T[x].l,k);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"built_in\">remove</span>(T[x].r,k);</span><br><span class=\"line\">    <span class=\"built_in\">pushup</span>(x);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"查询排名\"><a href=\"#查询排名\" class=\"headerlink\" title=\"查询排名\"></a>查询排名</h2><p>在 Treap 中查询一个元素的排名，只需要像之前一样一直访问直到找到这个元素即可。根节点在当前子树的排名就是左子树的大小加一，而左子树的所有节点的排名就是这个节点在左子树中的排名，右子树的所有节点的排名就是这个节点在右子树的排名加上左子树以及根节点的大小。由于访问不需要修改节点，就不需要再传址了。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">num</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> k)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(k==T[x].k) <span class=\"keyword\">return</span> T[T[x].l].s+<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(k&lt;T[x].k) <span class=\"keyword\">return</span> <span class=\"built_in\">num</span>(T[x].l,k);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> T[T[x].l].s+T[x].t+<span class=\"built_in\">num</span>(T[x].r,k);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"查询对应排名的元素\"><a href=\"#查询对应排名的元素\" class=\"headerlink\" title=\"查询对应排名的元素\"></a>查询对应排名的元素</h2><p>要查询相应排名的元素，只需要在每一次判断这个元素在当前节点的根节点、左子树还是右子树上。如果当前子树中的排名小于左子树的大小，那么这个元素就在左子树中，这个元素在左子树中的排名就是当前子树中的排名；如果不在左子树中但是排名小于等于左子树大小加上根节点的大小，那么这个元素就是根节点的元素值；否则就在右子树中，在右子树中的排名就是在当前子树中的排名减去左子树的大小和根节点的大小。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">sum</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> k)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">1e9</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(k&lt;T[T[x].l].s+<span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"built_in\">sum</span>(T[x].l,k);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(k&lt;=T[T[x].l].s+T[x].t) <span class=\"keyword\">return</span> T[x].k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">sum</span>(T[x].r,k-T[T[x].l].s-T[x].t);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"查询前驱和后继\"><a href=\"#查询前驱和后继\" class=\"headerlink\" title=\"查询前驱和后继\"></a>查询前驱和后继</h2><p>一个点的前驱指的是小于这个元素值的最大的元素，后继指的是大于这个元素值的最小的元素。要找到一个点的前驱，当这个点在这个子树中时，如果要找的元素值小于等于根节点的元素值，说明这个元素在左子树中，就搜索左子树，否则在右子树中或者就是根节点，就搜索右子树。如果在左子树中但是最后没有找到，也就是返回了 $0$，说明这个节点没有在这个子树中，返回 $0$。如果在右子树中没有找到，说明这个元素的前驱就是根节点。最后，返回找到的元素或者 $0$。后继的查询操作刚好相反。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">find_f</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> k)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(k&lt;=T[x].k) <span class=\"keyword\">return</span> <span class=\"built_in\">find_f</span>(T[x].l,k);</span><br><span class=\"line\">    <span class=\"type\">int</span> p=<span class=\"built_in\">find_f</span>(T[x].r,k);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> T[x].k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">find_b</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> k)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(k&gt;=T[x].k) <span class=\"keyword\">return</span> <span class=\"built_in\">find_b</span>(T[x].r,k);</span><br><span class=\"line\">    <span class=\"type\">int</span> p=<span class=\"built_in\">find_b</span>(T[x].l,k);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> T[x].k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Treap函数的调用\"><a href=\"#Treap函数的调用\" class=\"headerlink\" title=\"Treap函数的调用\"></a>Treap函数的调用</h2><p>我们总共学习了 $6$ 个 Treap 的相关函数。调用的时候我们需要调用 Treap 的根节点。由于 Treap 的形状在时刻变化，所以我们需要用一个变量 $r$ 来记录根节点，初始值为 $0$。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">srand</span>(<span class=\"built_in\">time</span>(<span class=\"literal\">NULL</span>));</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;m);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> z,k;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;z,&amp;k);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(z==<span class=\"number\">1</span>) <span class=\"built_in\">add</span>(r,k);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(z==<span class=\"number\">2</span>) <span class=\"built_in\">remove</span>(r,k);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(z==<span class=\"number\">3</span>) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,<span class=\"built_in\">num</span>(r,k));</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(z==<span class=\"number\">4</span>) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,<span class=\"built_in\">sum</span>(r,k));</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(z==<span class=\"number\">5</span>) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,<span class=\"built_in\">find_f</span>(r,k));</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(z==<span class=\"number\">6</span>) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,<span class=\"built_in\">find_b</span>(r,k));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><p>&#96;&#96;&#96;cpp</p>\n<p>&#96;&#96;&#96;#include<cstdio><br>#include<algorithm><br>#include<ctime><br>using namespace std;<br>int m,r&#x3D;0,q&#x3D;0;<br>struct treap<br>{<br>    int k,l,r,s,h,t;<br>}T[1000001];<br>void pushup(int x)<br>{<br>    T[x].s&#x3D;T[T[x].l].s+T[T[x].r].s+T[x].t;<br>}<br>void rotate_l(int &amp;x)<br>{<br>    int p&#x3D;T[x].r;<br>    T[x].r&#x3D;T[p].l;<br>    T[p].l&#x3D;x;<br>    T[p].s&#x3D;T[x].s;<br>    x&#x3D;p;<br>    pushup(x);<br>    pushup(T[x].l);<br>}<br>void rotate_r(int &amp;x)<br>{<br>    int p&#x3D;T[x].l;<br>    T[x].l&#x3D;T[p].r;<br>    T[p].r&#x3D;x;<br>    T[p].s&#x3D;T[x].s;<br>    x&#x3D;p;<br>    pushup(x);<br>    pushup(T[x].r);<br>}<br>void add(int &amp;x,int k)<br>{<br>    if(x&#x3D;&#x3D;0)<br>    {<br>        x&#x3D;++q;<br>        T[x].l&#x3D;T[x].r&#x3D;0;<br>        T[x].s&#x3D;T[x].t&#x3D;1;<br>        T[x].k&#x3D;k;<br>        T[x].h&#x3D;rand()*rand()%1000000+1;<br>        return;<br>    }<br>    if(k&#x3D;&#x3D;T[x].k) ++T[x].t;<br>    else if(k&lt;T[x].k) add(T[x].l,k);<br>    else if(k&gt;T[x].k) add(T[x].r,k);<br>    if(T[x].l!&#x3D;0&amp;&amp;T[x].h&gt;T[T[x].l].h) rotate_r(x);<br>    if(T[x].r!&#x3D;0&amp;&amp;T[x].h&gt;T[T[x].r].h) rotate_l(x);<br>    pushup(x);<br>}<br>void remove(int &amp;x,int k)<br>{<br>    if(x&#x3D;&#x3D;0) return;<br>    if(k&#x3D;&#x3D;T[x].k)<br>    {<br>        if(T[x].t&gt;1)<br>        {<br>            –T[x].t;<br>            pushup(x);<br>            return;<br>        }<br>        if(T[x].l&#x3D;&#x3D;0&amp;&amp;T[x].r&#x3D;&#x3D;0)<br>        {<br>            x&#x3D;0;<br>            return;<br>        }<br>        if(T[x].l!&#x3D;0&amp;&amp;(T[x].r&#x3D;&#x3D;0||T[T[x].l].h&lt;T[T[x].r].h))<br>        {<br>            rotate_r(x);<br>            remove(T[x].r,k);<br>        }<br>        else<br>        {<br>            rotate_l(x);<br>            remove(T[x].l,k);<br>        }<br>        pushup(x);<br>        return;<br>    }<br>    if(k&lt;T[x].k) remove(T[x].l,k);<br>    else remove(T[x].r,k);<br>    pushup(x);<br>}<br>int num(int x,int k)<br>{<br>    if(x&#x3D;&#x3D;0) return 1;<br>    if(k&#x3D;&#x3D;T[x].k) return T[T[x].l].s+1;<br>    if(k&lt;T[x].k) return num(T[x].l,k);<br>    return T[T[x].l].s+T[x].t+num(T[x].r,k);<br>}<br>int sum(int x,int k)<br>{<br>    if(x&#x3D;&#x3D;0) return 1e9;<br>    if(k&lt;T[T[x].l].s+1) return sum(T[x].l,k);<br>    if(k&lt;&#x3D;T[T[x].l].s+T[x].t) return T[x].k;<br>    return sum(T[x].r,k-T[T[x].l].s-T[x].t);<br>}<br>int find_f(int x,int k)<br>{<br>    if(x&#x3D;&#x3D;0) return 0;<br>    if(k&lt;&#x3D;T[x].k) return find_f(T[x].l,k);<br>    int p&#x3D;find_f(T[x].r,k);<br>    if(p&#x3D;&#x3D;0) return T[x].k;<br>    return p;<br>}<br>int find_b(int x,int k)<br>{<br>    if(x&#x3D;&#x3D;0) return 0;<br>    if(k&gt;&#x3D;T[x].k) return find_b(T[x].r,k);<br>    int p&#x3D;find_b(T[x].l,k);<br>    if(p&#x3D;&#x3D;0) return T[x].k;<br>    return p;<br>}<br>int main()<br>{<br>    srand(time(NULL));<br>    scanf(“%d”,&amp;m);<br>    for(int i&#x3D;1;i&lt;&#x3D;m;++i)<br>    {<br>        int z,k;<br>        scanf(“%d%d”,&amp;z,&amp;k);<br>        if(z&#x3D;&#x3D;1) add(r,k);<br>        else if(z&#x3D;&#x3D;2) remove(r,k);<br>        else if(z&#x3D;&#x3D;3) printf(“%d\\n”,num(r,k));<br>        else if(z&#x3D;&#x3D;4) printf(“%d\\n”,sum(r,k));<br>        else if(z&#x3D;&#x3D;5) printf(“%d\\n”,find_f(r,k));<br>        else if(z&#x3D;&#x3D;6) printf(“%d\\n”,find_b(r,k));<br>    }<br>    return 0;<br>}</p>\n"},{"title":"单调队列优化dp","date":"2022-04-03T13:09:16.000Z","description":" ","_content":"\n## 前言\n经典题：[P2627 [USACO11OPEN]Mowing the Lawn G](https://www.luogu.com.cn/problem/P2627)\n如果 dp 中每一个状态 $f[i]$ 都需要由 $f[j]$ 推过来，形如 $f[i]=\\max(f[j]+x\\times a[i]+y\\times a[j])(i-k\\leqslant j < i)$ 或 $f[i]=\\min(f[j]+x\\times a[i]+y\\times a[j])(i-k\\leqslant j < i)$，这类转移方程的特点是转移方程中有与 $i$ 相关的项和与 $j$ 相关的项的和。如果用朴素方法，就需要枚举 $i,j$ 复杂度为 $O(n^2)$。于是我们就需要一个方法来优化它。\n## 基本思路\n但是有没有发现，如果我们改写一下转移方程，就变成了 $f[i]-x\\times a[i]=\\min(f[j]+y\\times a[j])(i-k\\leqslant j < i)$，对于一个固定的 $i$，左边是定值，我们只需要找到 $[i-k,i)$ 中 $f[j]+y\\times a[j]$ 的最小值（最大值）即可。如何实现？显然，可以用单调队列来实现，我们可以类比之前学过的单调队列优化背包问题，其实实质是一样的。\n于是问题就转化为了求出一个长度为 $k$ 的区间的最小值（最大值），具体实现方法如下：枚举 $i$ ，对于每个 $i$，作如下操作。首先弹出队头，如果队头元素超出了区间范围就一直弹出。然后弹出队尾，如果队尾元素比当前元素大（小）就一直弹出队尾。取队首元素为 $j$，更新 $f[i]$。最后将 $i$ 入队。 \n注意，这里建议手写队列而不是使用双端队列 deque，因为 deque 的常数实在是太大了。\n## code\n$#8195; 此代码为例题 [P2627](https://www.luogu.com.cn/problem/P2627) 的代码。\n```cpp\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\ntypedef long long ll;\nconst int N=100001;\nint n,m,a[N],Q[N],T=0,R=-1;\nll b[N],f[N][2];\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n;++i)\n    {\n        scanf(\"%d\",&a[i]);\n        b[i]=b[i-1]+a[i];\n    }\n    Q[++R]=0;\n    for(int i=1;i<=n;++i)\n    {\n        f[i][0]=max(f[i-1][0],f[i-1][1]);\n        while(T<=R&&i-Q[T]>m) ++T;\n        while(T<=R&&f[Q[R]][0]-b[Q[R]]<=f[i][0]-b[i]) --R;\n        f[i][1]=f[Q[T]][0]+b[i]-b[Q[T]];\n        Q[++R]=i;\n    }\n    printf(\"%lld\",max(f[n][0],f[n][1]));\n    return 0;\n}\n```","source":"_posts/Monotone-queue-dp.md","raw":"---\ntitle: '单调队列优化dp'\ndate: 2022-04-03 21:09:16\ntags: [动态规划,单调队列,单调队列优化dp]\ndescription: ' '\n---\n\n## 前言\n经典题：[P2627 [USACO11OPEN]Mowing the Lawn G](https://www.luogu.com.cn/problem/P2627)\n如果 dp 中每一个状态 $f[i]$ 都需要由 $f[j]$ 推过来，形如 $f[i]=\\max(f[j]+x\\times a[i]+y\\times a[j])(i-k\\leqslant j < i)$ 或 $f[i]=\\min(f[j]+x\\times a[i]+y\\times a[j])(i-k\\leqslant j < i)$，这类转移方程的特点是转移方程中有与 $i$ 相关的项和与 $j$ 相关的项的和。如果用朴素方法，就需要枚举 $i,j$ 复杂度为 $O(n^2)$。于是我们就需要一个方法来优化它。\n## 基本思路\n但是有没有发现，如果我们改写一下转移方程，就变成了 $f[i]-x\\times a[i]=\\min(f[j]+y\\times a[j])(i-k\\leqslant j < i)$，对于一个固定的 $i$，左边是定值，我们只需要找到 $[i-k,i)$ 中 $f[j]+y\\times a[j]$ 的最小值（最大值）即可。如何实现？显然，可以用单调队列来实现，我们可以类比之前学过的单调队列优化背包问题，其实实质是一样的。\n于是问题就转化为了求出一个长度为 $k$ 的区间的最小值（最大值），具体实现方法如下：枚举 $i$ ，对于每个 $i$，作如下操作。首先弹出队头，如果队头元素超出了区间范围就一直弹出。然后弹出队尾，如果队尾元素比当前元素大（小）就一直弹出队尾。取队首元素为 $j$，更新 $f[i]$。最后将 $i$ 入队。 \n注意，这里建议手写队列而不是使用双端队列 deque，因为 deque 的常数实在是太大了。\n## code\n$#8195; 此代码为例题 [P2627](https://www.luogu.com.cn/problem/P2627) 的代码。\n```cpp\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\ntypedef long long ll;\nconst int N=100001;\nint n,m,a[N],Q[N],T=0,R=-1;\nll b[N],f[N][2];\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n;++i)\n    {\n        scanf(\"%d\",&a[i]);\n        b[i]=b[i-1]+a[i];\n    }\n    Q[++R]=0;\n    for(int i=1;i<=n;++i)\n    {\n        f[i][0]=max(f[i-1][0],f[i-1][1]);\n        while(T<=R&&i-Q[T]>m) ++T;\n        while(T<=R&&f[Q[R]][0]-b[Q[R]]<=f[i][0]-b[i]) --R;\n        f[i][1]=f[Q[T]][0]+b[i]-b[Q[T]];\n        Q[++R]=i;\n    }\n    printf(\"%lld\",max(f[n][0],f[n][1]));\n    return 0;\n}\n```","slug":"Monotone-queue-dp","published":1,"updated":"2022-11-28T13:47:47.406Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cleid927g00062sjfbao28mzs","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>经典题：<a href=\"https://www.luogu.com.cn/problem/P2627\">P2627 [USACO11OPEN]Mowing the Lawn G</a><br>如果 dp 中每一个状态 $f[i]$ 都需要由 $f[j]$ 推过来，形如 $f[i]&#x3D;\\max(f[j]+x\\times a[i]+y\\times a[j])(i-k\\leqslant j &lt; i)$ 或 $f[i]&#x3D;\\min(f[j]+x\\times a[i]+y\\times a[j])(i-k\\leqslant j &lt; i)$，这类转移方程的特点是转移方程中有与 $i$ 相关的项和与 $j$ 相关的项的和。如果用朴素方法，就需要枚举 $i,j$ 复杂度为 $O(n^2)$。于是我们就需要一个方法来优化它。</p>\n<h2 id=\"基本思路\"><a href=\"#基本思路\" class=\"headerlink\" title=\"基本思路\"></a>基本思路</h2><p>但是有没有发现，如果我们改写一下转移方程，就变成了 $f[i]-x\\times a[i]&#x3D;\\min(f[j]+y\\times a[j])(i-k\\leqslant j &lt; i)$，对于一个固定的 $i$，左边是定值，我们只需要找到 $[i-k,i)$ 中 $f[j]+y\\times a[j]$ 的最小值（最大值）即可。如何实现？显然，可以用单调队列来实现，我们可以类比之前学过的单调队列优化背包问题，其实实质是一样的。<br>于是问题就转化为了求出一个长度为 $k$ 的区间的最小值（最大值），具体实现方法如下：枚举 $i$ ，对于每个 $i$，作如下操作。首先弹出队头，如果队头元素超出了区间范围就一直弹出。然后弹出队尾，如果队尾元素比当前元素大（小）就一直弹出队尾。取队首元素为 $j$，更新 $f[i]$。最后将 $i$ 入队。<br>注意，这里建议手写队列而不是使用双端队列 deque，因为 deque 的常数实在是太大了。</p>\n<h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><p>$#8195; 此代码为例题 <a href=\"https://www.luogu.com.cn/problem/P2627\">P2627</a> 的代码。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> ll;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">100001</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m,a[N],Q[N],T=<span class=\"number\">0</span>,R=<span class=\"number\">-1</span>;</span><br><span class=\"line\">ll b[N],f[N][<span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class=\"line\">        b[i]=b[i<span class=\"number\">-1</span>]+a[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Q[++R]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        f[i][<span class=\"number\">0</span>]=<span class=\"built_in\">max</span>(f[i<span class=\"number\">-1</span>][<span class=\"number\">0</span>],f[i<span class=\"number\">-1</span>][<span class=\"number\">1</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(T&lt;=R&amp;&amp;i-Q[T]&gt;m) ++T;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(T&lt;=R&amp;&amp;f[Q[R]][<span class=\"number\">0</span>]-b[Q[R]]&lt;=f[i][<span class=\"number\">0</span>]-b[i]) --R;</span><br><span class=\"line\">        f[i][<span class=\"number\">1</span>]=f[Q[T]][<span class=\"number\">0</span>]+b[i]-b[Q[T]];</span><br><span class=\"line\">        Q[++R]=i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld&quot;</span>,<span class=\"built_in\">max</span>(f[n][<span class=\"number\">0</span>],f[n][<span class=\"number\">1</span>]));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>经典题：<a href=\"https://www.luogu.com.cn/problem/P2627\">P2627 [USACO11OPEN]Mowing the Lawn G</a><br>如果 dp 中每一个状态 $f[i]$ 都需要由 $f[j]$ 推过来，形如 $f[i]&#x3D;\\max(f[j]+x\\times a[i]+y\\times a[j])(i-k\\leqslant j &lt; i)$ 或 $f[i]&#x3D;\\min(f[j]+x\\times a[i]+y\\times a[j])(i-k\\leqslant j &lt; i)$，这类转移方程的特点是转移方程中有与 $i$ 相关的项和与 $j$ 相关的项的和。如果用朴素方法，就需要枚举 $i,j$ 复杂度为 $O(n^2)$。于是我们就需要一个方法来优化它。</p>\n<h2 id=\"基本思路\"><a href=\"#基本思路\" class=\"headerlink\" title=\"基本思路\"></a>基本思路</h2><p>但是有没有发现，如果我们改写一下转移方程，就变成了 $f[i]-x\\times a[i]&#x3D;\\min(f[j]+y\\times a[j])(i-k\\leqslant j &lt; i)$，对于一个固定的 $i$，左边是定值，我们只需要找到 $[i-k,i)$ 中 $f[j]+y\\times a[j]$ 的最小值（最大值）即可。如何实现？显然，可以用单调队列来实现，我们可以类比之前学过的单调队列优化背包问题，其实实质是一样的。<br>于是问题就转化为了求出一个长度为 $k$ 的区间的最小值（最大值），具体实现方法如下：枚举 $i$ ，对于每个 $i$，作如下操作。首先弹出队头，如果队头元素超出了区间范围就一直弹出。然后弹出队尾，如果队尾元素比当前元素大（小）就一直弹出队尾。取队首元素为 $j$，更新 $f[i]$。最后将 $i$ 入队。<br>注意，这里建议手写队列而不是使用双端队列 deque，因为 deque 的常数实在是太大了。</p>\n<h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><p>$#8195; 此代码为例题 <a href=\"https://www.luogu.com.cn/problem/P2627\">P2627</a> 的代码。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> ll;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">100001</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m,a[N],Q[N],T=<span class=\"number\">0</span>,R=<span class=\"number\">-1</span>;</span><br><span class=\"line\">ll b[N],f[N][<span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class=\"line\">        b[i]=b[i<span class=\"number\">-1</span>]+a[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Q[++R]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        f[i][<span class=\"number\">0</span>]=<span class=\"built_in\">max</span>(f[i<span class=\"number\">-1</span>][<span class=\"number\">0</span>],f[i<span class=\"number\">-1</span>][<span class=\"number\">1</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(T&lt;=R&amp;&amp;i-Q[T]&gt;m) ++T;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(T&lt;=R&amp;&amp;f[Q[R]][<span class=\"number\">0</span>]-b[Q[R]]&lt;=f[i][<span class=\"number\">0</span>]-b[i]) --R;</span><br><span class=\"line\">        f[i][<span class=\"number\">1</span>]=f[Q[T]][<span class=\"number\">0</span>]+b[i]-b[Q[T]];</span><br><span class=\"line\">        Q[++R]=i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld&quot;</span>,<span class=\"built_in\">max</span>(f[n][<span class=\"number\">0</span>],f[n][<span class=\"number\">1</span>]));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"平衡树Splay","date":"2022-03-15T05:23:25.000Z","description":" ","_content":"\n## 前言\n模板题：[P3369 【模板】普通平衡树](https://www.luogu.com.cn/problem/P3369)\n我们已经学会了使用 Treap 来实现平衡树的功能，但是还有很多其他其它的平衡树，比如 Splay，Splay 不仅有平衡树功能，还可以用于其它地方，这是其它平衡树无法做到的。\n## 基本思路\nSplay 的核心是提根操作，也就是把一个节点提到根节点，每一次操作后都将当前节点提到根节点，这样 Splay 的形状就是在不断变化的，就可以较好地防止被卡。\nSplay 的提根操作不止是讲一个节点提到根节点，它可以将一个节点提到它的某个祖先的儿子节点，这样在一些操作时直接将要操作的节点提到指定位置就可以很简单地解决问题。\n## 储存与更新\n```cpp\nstruct splay\n{\n    int k,a[2],f,s,t;\n}T[10000001];\n```\nSplay 需要储存当前节点的元素值 $k$，左右儿子 $a$，父节点 $f$，当前节点子树的元素总数 $s$，当前节点的元素个数 $t$。\nSplay 的更新方法与Treap相同。\n```cpp\nvoid pushup(int x)\n{\n    T[x].s=T[T[x].a[0]].s+T[T[x].a[1]].s+T[x].t;\n}\n```\n## 提根操作\nSplay 的提根操作同样也要用到 Treap 中的旋转操作，但是它不分左旋和右旋，旋转都是将当前节点旋转到它的父节点的位置。这样一直旋转，直到旋转到对应位置就停止即可。实际上我们会把当前节点旋转到目标节点的儿子节点，要判断当前节点的父节点是否为目标节点。\nSplay 的旋转操作比较麻烦，因为我们需要在旋转的同时判断当前节点 $x$ 与其父节点 $y$、祖父节点 $z$ 的关系。用 $k$ 来储存当前节点 $x$ 是 $y$ 的左儿子还是右儿子，$0$ 表示左儿子，$1$ 表示右儿子。首先 $x$ 连接到 $z$ 的下面，替换 $y$ 的位置；接着把 $x$ 的儿子接到 $y$ 下面；最后把 $y$ 接在 $x$ 的下面。这里用了一个技巧：$k$^$1$ 其实就是 $y$ 除了 $k$ 的另一个儿子，当 $k$  为 $0$ 是，$k$^$1$ 为 $1$ 。\n由于 $0$ 的儿子就是根节点 $rt$，所以如果目标是 $0$，当前节点就是根节点，需要在最后判断。\n```cpp\nvoid rotate(int x)\n{\n    int y=T[x].f,z=T[y].f,k=T[y].a[1]==x;\n    T[z].a[T[z].a[1]==y]=x;\n    T[x].f=z;\n    T[y].a[k]=T[x].a[k^1];\n    T[T[x].a[k^1]].f=y;\n    T[x].a[k^1]=y;\n    T[y].f=x;\n    pushup(x);\n    pushup(y);\n}\nvoid splay(int x,int k)\n{\n    while(T[x].f!=k) rotate(x);\n    if(k==0) rt=x;\n}\n```\n## 建树操作\n不知道为什么，Splay 不加上下界就会 $\\color{red}{WA}$，但是 Treap 就不会。我们需要在最开始时插入两个节点：正无穷和负无穷，来防止越界。根节点最好手动添加，另一个就用插入操作即可。\n```cpp\nvoid build()\n{\n    rt=q=1;\n    T[1].f=0;\n    T[1].s=T[1].t=1;\n    T[1].k=1e9;\n    add(rt,0,-1e9);\n}\n```\n## 插入操作\nSplay 的很多操作与 Treap 极其类似，包括插入操作，只需要在最后的时候进行提根改变Splay的形状即可。\n```cpp\nvoid add(int &x,int f,int k)\n{\n    if(x==0)\n    {\n        x=++q;\n        T[x].k=k;\n        T[x].t=T[x].s=1;\n        T[x].f=f;\n        splay(x,0);\n        return;\n    }\n    if(T[x].k==k)\n    {\n        ++T[x].t;\n        ++T[x].s;\n        splay(x,0);\n        return;\n    }\n    else if(k<T[x].k) add(T[x].a[0],x,k);\n    else add(T[x].a[1],x,k);\n}\n```\n## 删除操作\n利用 Splay 可以改变形状的特点，就可以用独特的方法来删除节点。如果通过提根来使要删除的节点成为叶子结点，就可以直接删除这个点。我们可以先找到这个节点 $x$ 的前驱 $l$ 与后继 $r$，$l$ 和 $r$ 之间只有一个节点 $x$。我们先把 $l$ 提到根节点，再将 $r$ 提到 $l$ 的儿子节点。由于 $T[r].k>T[l].k$ ，所以 $r$ 一定是 $l$ 的右子节点。而 $r$ 的左子树，也就是比 $l$ 大而比 $r$ 小的部分就只有一个节点 $x$，直接删除或元素个数减一即可。\n```cpp\nvoid remove(int k)\n{\n    int l=find_f(rt,rt,k),r=find_b(rt,rt,k);\n    splay(l,0);\n    splay(r,l);\n    --T[T[r].a[0]].t;\n    --T[T[r].a[0]].s;\n    if(T[T[r].a[0]].t==0)\n    {\n        T[T[r].a[0]].k=0;\n        T[r].a[0]=0;\n    }\n    splay(r,0);\n}\n```\n## 查询排名\n在 Splay 中，查询一个元素的排名十分简单，就只需要将这个元素 $x$ 的前驱 $l$ 提到根节点，那么根节点与左子树中的元素一定比这个元素小。而且不存在一个元素比 $l$ 大而比 $x$ 小，也就是 $x$ 没有左儿子，说明比 $x$ 小的元素全部都在根节点与左子树中。所以 $x$ 的排名就是左子树的大小加上根节点的元素个数。\n```cpp\nint num(int k)\n{\n    splay(find_f(rt,rt,k),0);\n    return T[T[rt].a[0]].s+T[rt].t;\n}\n```\n## 查询对应排名的元素\nSplay 的这个操作和 Treap 相同，只需要找到这个节点后将其提根即可。\n```cpp\nint sum(int x,int k)\n{\n    if(x==0) return 0;\n    if(k<T[T[x].a[0]].s+1) return sum(T[x].a[0],k);\n    if(k<=T[T[x].a[0]].s+T[x].t)\n    {\n        splay(x,0);\n        return x;\n    }\n    return sum(T[x].a[1],k-T[T[x].a[0]].s-T[x].t);\n}\n```\n## 查询前驱和后继\nSplay 查询前驱后后继的操作也和 Treap 相同，只需要记录当前节点 $x$ 的根节点 $f$，并在找到了不存在的节点，也就是 $x=0$，那么就将这个点的上一个点也就是 $f$ 提根。对于后继的操作也一模一样。\n由于 Splay 很多操作都要用到前驱和后继，所以这里的前驱和后继返回的都是节点编号，而不是元素的值。\n```cpp\nint find_f(int x,int f,int k)\n{\n    if(x==0)\n    {\n        splay(f,0);\n        return 0;\n    }\n    if(k<=T[x].k) return find_f(T[x].a[0],x,k);\n    int p=find_f(T[x].a[1],x,k);\n    if(p==0) return x;\n    return p;\n}\nint find_b(int x,int f,int k)\n{\n    if(x==0)\n    {\n        splay(f,0);\n        return 0;\n    }\n    if(k>=T[x].k) return find_b(T[x].a[1],x,k);\n    int p=find_b(T[x].a[0],x,k);\n    if(p==0) return x;\n    return p;\n}\n```\n## Splay的调用\nSplay 的这些操作调用方法与 Treap 一样，只有前驱、后继和相应排名的元素是返回的节点编号，需要转换为元素值。\n```cpp\nint main()\n{\n    build();\n    scanf(\"%d\",&m);\n    for(int i=1;i<=m;++i)\n    {\n        int z,k;\n        scanf(\"%d%d\",&z,&k);\n        if(z==1) add(rt,0,k);\n        else if(z==2) remove(k);\n        else if(z==3) printf(\"%d\\n\",num(k));\n        else if(z==4) printf(\"%d\\n\",T[sum(rt,k+1)].k);\n        else if(z==5) printf(\"%d\\n\",T[find_f(rt,rt,k)].k);\n        else if(z==6) printf(\"%d\\n\",T[find_b(rt,rt,k)].k);\n    }\n    return 0;\n}\n```\n## code\n```cpp\n#include<cstdio>\nusing namespace std;\nint n,m,rt=0,q=0;\nstruct splay\n{\n    int k,a[2],f,s,t;\n}T[10000001];\nvoid pushup(int x)\n{\n    T[x].s=T[T[x].a[0]].s+T[T[x].a[1]].s+T[x].t;\n}\nvoid rotate(int x)\n{\n    int y=T[x].f,z=T[y].f,k=T[y].a[1]==x;\n    T[z].a[T[z].a[1]==y]=x;\n    T[x].f=z;\n    T[y].a[k]=T[x].a[k^1];\n    T[T[x].a[k^1]].f=y;\n    T[x].a[k^1]=y;\n    T[y].f=x;\n    pushup(x);\n    pushup(y);\n}\nvoid splay(int x,int k)\n{\n    while(T[x].f!=k) rotate(x);\n    if(k==0) rt=x;\n}\nvoid add(int &x,int f,int k)\n{\n    if(x==0)\n    {\n        x=++q;\n        T[x].k=k;\n        T[x].t=T[x].s=1;\n        T[x].f=f;\n        splay(x,0);\n        return;\n    }\n    if(T[x].k==k)\n    {\n        ++T[x].t;\n        ++T[x].s;\n        splay(x,0);\n        return;\n    }\n    else if(k<T[x].k) add(T[x].a[0],x,k);\n    else add(T[x].a[1],x,k);\n}\nvoid build()\n{\n    rt=q=1;\n    T[1].f=0;\n    T[1].s=T[1].t=1;\n    T[1].k=1e9;\n    add(rt,0,-1e9);\n}\nint find_f(int x,int f,int k)\n{\n    if(x==0)\n    {\n        splay(f,0);\n        return 0;\n    }\n    if(k<=T[x].k) return find_f(T[x].a[0],x,k);\n    int p=find_f(T[x].a[1],x,k);\n    if(p==0) return x;\n    return p;\n}\nint find_b(int x,int f,int k)\n{\n    if(x==0)\n    {\n        splay(f,0);\n        return 0;\n    }\n    if(k>=T[x].k) return find_b(T[x].a[1],x,k);\n    int p=find_b(T[x].a[0],x,k);\n    if(p==0) return x;\n    return p;\n}\nvoid remove(int k)\n{\n    int l=find_f(rt,rt,k),r=find_b(rt,rt,k);\n    splay(l,0);\n    splay(r,l);\n    --T[T[r].a[0]].t;\n    --T[T[r].a[0]].s;\n    if(T[T[r].a[0]].t==0)\n    {\n        T[T[r].a[0]].k=0;\n        T[r].a[0]=0;\n    }\n    splay(r,0);\n}\nint sum(int x,int k)\n{\n    if(x==0) return 0;\n    if(k<T[T[x].a[0]].s+1) return sum(T[x].a[0],k);\n    if(k<=T[T[x].a[0]].s+T[x].t)\n    {\n        splay(x,0);\n        return x;\n    }\n    return sum(T[x].a[1],k-T[T[x].a[0]].s-T[x].t);\n}\nint num(int k)\n{\n    splay(find_f(rt,rt,k),0);\n    return T[T[rt].a[0]].s+T[rt].t;\n}\nint main()\n{\n    build();\n    scanf(\"%d\",&m);\n    for(int i=1;i<=m;++i)\n    {\n        int z,k;\n        scanf(\"%d%d\",&z,&k);\n        if(z==1) add(rt,0,k);\n        else if(z==2) remove(k);\n        else if(z==3) printf(\"%d\\n\",num(k));\n        else if(z==4) printf(\"%d\\n\",T[sum(rt,k+1)].k);\n        else if(z==5) printf(\"%d\\n\",T[find_f(rt,rt,k)].k);\n        else if(z==6) printf(\"%d\\n\",T[find_b(rt,rt,k)].k);\n    }\n    return 0;\n}\n```","source":"_posts/Balanced-tree-Splay.md","raw":"---\ntitle: '平衡树Splay'\ndate: 2022-03-15 13:23:25\ntags: [平衡树]\ndescription: ' '\n---\n\n## 前言\n模板题：[P3369 【模板】普通平衡树](https://www.luogu.com.cn/problem/P3369)\n我们已经学会了使用 Treap 来实现平衡树的功能，但是还有很多其他其它的平衡树，比如 Splay，Splay 不仅有平衡树功能，还可以用于其它地方，这是其它平衡树无法做到的。\n## 基本思路\nSplay 的核心是提根操作，也就是把一个节点提到根节点，每一次操作后都将当前节点提到根节点，这样 Splay 的形状就是在不断变化的，就可以较好地防止被卡。\nSplay 的提根操作不止是讲一个节点提到根节点，它可以将一个节点提到它的某个祖先的儿子节点，这样在一些操作时直接将要操作的节点提到指定位置就可以很简单地解决问题。\n## 储存与更新\n```cpp\nstruct splay\n{\n    int k,a[2],f,s,t;\n}T[10000001];\n```\nSplay 需要储存当前节点的元素值 $k$，左右儿子 $a$，父节点 $f$，当前节点子树的元素总数 $s$，当前节点的元素个数 $t$。\nSplay 的更新方法与Treap相同。\n```cpp\nvoid pushup(int x)\n{\n    T[x].s=T[T[x].a[0]].s+T[T[x].a[1]].s+T[x].t;\n}\n```\n## 提根操作\nSplay 的提根操作同样也要用到 Treap 中的旋转操作，但是它不分左旋和右旋，旋转都是将当前节点旋转到它的父节点的位置。这样一直旋转，直到旋转到对应位置就停止即可。实际上我们会把当前节点旋转到目标节点的儿子节点，要判断当前节点的父节点是否为目标节点。\nSplay 的旋转操作比较麻烦，因为我们需要在旋转的同时判断当前节点 $x$ 与其父节点 $y$、祖父节点 $z$ 的关系。用 $k$ 来储存当前节点 $x$ 是 $y$ 的左儿子还是右儿子，$0$ 表示左儿子，$1$ 表示右儿子。首先 $x$ 连接到 $z$ 的下面，替换 $y$ 的位置；接着把 $x$ 的儿子接到 $y$ 下面；最后把 $y$ 接在 $x$ 的下面。这里用了一个技巧：$k$^$1$ 其实就是 $y$ 除了 $k$ 的另一个儿子，当 $k$  为 $0$ 是，$k$^$1$ 为 $1$ 。\n由于 $0$ 的儿子就是根节点 $rt$，所以如果目标是 $0$，当前节点就是根节点，需要在最后判断。\n```cpp\nvoid rotate(int x)\n{\n    int y=T[x].f,z=T[y].f,k=T[y].a[1]==x;\n    T[z].a[T[z].a[1]==y]=x;\n    T[x].f=z;\n    T[y].a[k]=T[x].a[k^1];\n    T[T[x].a[k^1]].f=y;\n    T[x].a[k^1]=y;\n    T[y].f=x;\n    pushup(x);\n    pushup(y);\n}\nvoid splay(int x,int k)\n{\n    while(T[x].f!=k) rotate(x);\n    if(k==0) rt=x;\n}\n```\n## 建树操作\n不知道为什么，Splay 不加上下界就会 $\\color{red}{WA}$，但是 Treap 就不会。我们需要在最开始时插入两个节点：正无穷和负无穷，来防止越界。根节点最好手动添加，另一个就用插入操作即可。\n```cpp\nvoid build()\n{\n    rt=q=1;\n    T[1].f=0;\n    T[1].s=T[1].t=1;\n    T[1].k=1e9;\n    add(rt,0,-1e9);\n}\n```\n## 插入操作\nSplay 的很多操作与 Treap 极其类似，包括插入操作，只需要在最后的时候进行提根改变Splay的形状即可。\n```cpp\nvoid add(int &x,int f,int k)\n{\n    if(x==0)\n    {\n        x=++q;\n        T[x].k=k;\n        T[x].t=T[x].s=1;\n        T[x].f=f;\n        splay(x,0);\n        return;\n    }\n    if(T[x].k==k)\n    {\n        ++T[x].t;\n        ++T[x].s;\n        splay(x,0);\n        return;\n    }\n    else if(k<T[x].k) add(T[x].a[0],x,k);\n    else add(T[x].a[1],x,k);\n}\n```\n## 删除操作\n利用 Splay 可以改变形状的特点，就可以用独特的方法来删除节点。如果通过提根来使要删除的节点成为叶子结点，就可以直接删除这个点。我们可以先找到这个节点 $x$ 的前驱 $l$ 与后继 $r$，$l$ 和 $r$ 之间只有一个节点 $x$。我们先把 $l$ 提到根节点，再将 $r$ 提到 $l$ 的儿子节点。由于 $T[r].k>T[l].k$ ，所以 $r$ 一定是 $l$ 的右子节点。而 $r$ 的左子树，也就是比 $l$ 大而比 $r$ 小的部分就只有一个节点 $x$，直接删除或元素个数减一即可。\n```cpp\nvoid remove(int k)\n{\n    int l=find_f(rt,rt,k),r=find_b(rt,rt,k);\n    splay(l,0);\n    splay(r,l);\n    --T[T[r].a[0]].t;\n    --T[T[r].a[0]].s;\n    if(T[T[r].a[0]].t==0)\n    {\n        T[T[r].a[0]].k=0;\n        T[r].a[0]=0;\n    }\n    splay(r,0);\n}\n```\n## 查询排名\n在 Splay 中，查询一个元素的排名十分简单，就只需要将这个元素 $x$ 的前驱 $l$ 提到根节点，那么根节点与左子树中的元素一定比这个元素小。而且不存在一个元素比 $l$ 大而比 $x$ 小，也就是 $x$ 没有左儿子，说明比 $x$ 小的元素全部都在根节点与左子树中。所以 $x$ 的排名就是左子树的大小加上根节点的元素个数。\n```cpp\nint num(int k)\n{\n    splay(find_f(rt,rt,k),0);\n    return T[T[rt].a[0]].s+T[rt].t;\n}\n```\n## 查询对应排名的元素\nSplay 的这个操作和 Treap 相同，只需要找到这个节点后将其提根即可。\n```cpp\nint sum(int x,int k)\n{\n    if(x==0) return 0;\n    if(k<T[T[x].a[0]].s+1) return sum(T[x].a[0],k);\n    if(k<=T[T[x].a[0]].s+T[x].t)\n    {\n        splay(x,0);\n        return x;\n    }\n    return sum(T[x].a[1],k-T[T[x].a[0]].s-T[x].t);\n}\n```\n## 查询前驱和后继\nSplay 查询前驱后后继的操作也和 Treap 相同，只需要记录当前节点 $x$ 的根节点 $f$，并在找到了不存在的节点，也就是 $x=0$，那么就将这个点的上一个点也就是 $f$ 提根。对于后继的操作也一模一样。\n由于 Splay 很多操作都要用到前驱和后继，所以这里的前驱和后继返回的都是节点编号，而不是元素的值。\n```cpp\nint find_f(int x,int f,int k)\n{\n    if(x==0)\n    {\n        splay(f,0);\n        return 0;\n    }\n    if(k<=T[x].k) return find_f(T[x].a[0],x,k);\n    int p=find_f(T[x].a[1],x,k);\n    if(p==0) return x;\n    return p;\n}\nint find_b(int x,int f,int k)\n{\n    if(x==0)\n    {\n        splay(f,0);\n        return 0;\n    }\n    if(k>=T[x].k) return find_b(T[x].a[1],x,k);\n    int p=find_b(T[x].a[0],x,k);\n    if(p==0) return x;\n    return p;\n}\n```\n## Splay的调用\nSplay 的这些操作调用方法与 Treap 一样，只有前驱、后继和相应排名的元素是返回的节点编号，需要转换为元素值。\n```cpp\nint main()\n{\n    build();\n    scanf(\"%d\",&m);\n    for(int i=1;i<=m;++i)\n    {\n        int z,k;\n        scanf(\"%d%d\",&z,&k);\n        if(z==1) add(rt,0,k);\n        else if(z==2) remove(k);\n        else if(z==3) printf(\"%d\\n\",num(k));\n        else if(z==4) printf(\"%d\\n\",T[sum(rt,k+1)].k);\n        else if(z==5) printf(\"%d\\n\",T[find_f(rt,rt,k)].k);\n        else if(z==6) printf(\"%d\\n\",T[find_b(rt,rt,k)].k);\n    }\n    return 0;\n}\n```\n## code\n```cpp\n#include<cstdio>\nusing namespace std;\nint n,m,rt=0,q=0;\nstruct splay\n{\n    int k,a[2],f,s,t;\n}T[10000001];\nvoid pushup(int x)\n{\n    T[x].s=T[T[x].a[0]].s+T[T[x].a[1]].s+T[x].t;\n}\nvoid rotate(int x)\n{\n    int y=T[x].f,z=T[y].f,k=T[y].a[1]==x;\n    T[z].a[T[z].a[1]==y]=x;\n    T[x].f=z;\n    T[y].a[k]=T[x].a[k^1];\n    T[T[x].a[k^1]].f=y;\n    T[x].a[k^1]=y;\n    T[y].f=x;\n    pushup(x);\n    pushup(y);\n}\nvoid splay(int x,int k)\n{\n    while(T[x].f!=k) rotate(x);\n    if(k==0) rt=x;\n}\nvoid add(int &x,int f,int k)\n{\n    if(x==0)\n    {\n        x=++q;\n        T[x].k=k;\n        T[x].t=T[x].s=1;\n        T[x].f=f;\n        splay(x,0);\n        return;\n    }\n    if(T[x].k==k)\n    {\n        ++T[x].t;\n        ++T[x].s;\n        splay(x,0);\n        return;\n    }\n    else if(k<T[x].k) add(T[x].a[0],x,k);\n    else add(T[x].a[1],x,k);\n}\nvoid build()\n{\n    rt=q=1;\n    T[1].f=0;\n    T[1].s=T[1].t=1;\n    T[1].k=1e9;\n    add(rt,0,-1e9);\n}\nint find_f(int x,int f,int k)\n{\n    if(x==0)\n    {\n        splay(f,0);\n        return 0;\n    }\n    if(k<=T[x].k) return find_f(T[x].a[0],x,k);\n    int p=find_f(T[x].a[1],x,k);\n    if(p==0) return x;\n    return p;\n}\nint find_b(int x,int f,int k)\n{\n    if(x==0)\n    {\n        splay(f,0);\n        return 0;\n    }\n    if(k>=T[x].k) return find_b(T[x].a[1],x,k);\n    int p=find_b(T[x].a[0],x,k);\n    if(p==0) return x;\n    return p;\n}\nvoid remove(int k)\n{\n    int l=find_f(rt,rt,k),r=find_b(rt,rt,k);\n    splay(l,0);\n    splay(r,l);\n    --T[T[r].a[0]].t;\n    --T[T[r].a[0]].s;\n    if(T[T[r].a[0]].t==0)\n    {\n        T[T[r].a[0]].k=0;\n        T[r].a[0]=0;\n    }\n    splay(r,0);\n}\nint sum(int x,int k)\n{\n    if(x==0) return 0;\n    if(k<T[T[x].a[0]].s+1) return sum(T[x].a[0],k);\n    if(k<=T[T[x].a[0]].s+T[x].t)\n    {\n        splay(x,0);\n        return x;\n    }\n    return sum(T[x].a[1],k-T[T[x].a[0]].s-T[x].t);\n}\nint num(int k)\n{\n    splay(find_f(rt,rt,k),0);\n    return T[T[rt].a[0]].s+T[rt].t;\n}\nint main()\n{\n    build();\n    scanf(\"%d\",&m);\n    for(int i=1;i<=m;++i)\n    {\n        int z,k;\n        scanf(\"%d%d\",&z,&k);\n        if(z==1) add(rt,0,k);\n        else if(z==2) remove(k);\n        else if(z==3) printf(\"%d\\n\",num(k));\n        else if(z==4) printf(\"%d\\n\",T[sum(rt,k+1)].k);\n        else if(z==5) printf(\"%d\\n\",T[find_f(rt,rt,k)].k);\n        else if(z==6) printf(\"%d\\n\",T[find_b(rt,rt,k)].k);\n    }\n    return 0;\n}\n```","slug":"Balanced-tree-Splay","published":1,"updated":"2022-11-28T13:47:47.412Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cleid927h00082sjf2w45abmm","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>模板题：<a href=\"https://www.luogu.com.cn/problem/P3369\">P3369 【模板】普通平衡树</a><br>我们已经学会了使用 Treap 来实现平衡树的功能，但是还有很多其他其它的平衡树，比如 Splay，Splay 不仅有平衡树功能，还可以用于其它地方，这是其它平衡树无法做到的。</p>\n<h2 id=\"基本思路\"><a href=\"#基本思路\" class=\"headerlink\" title=\"基本思路\"></a>基本思路</h2><p>Splay 的核心是提根操作，也就是把一个节点提到根节点，每一次操作后都将当前节点提到根节点，这样 Splay 的形状就是在不断变化的，就可以较好地防止被卡。<br>Splay 的提根操作不止是讲一个节点提到根节点，它可以将一个节点提到它的某个祖先的儿子节点，这样在一些操作时直接将要操作的节点提到指定位置就可以很简单地解决问题。</p>\n<h2 id=\"储存与更新\"><a href=\"#储存与更新\" class=\"headerlink\" title=\"储存与更新\"></a>储存与更新</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">splay</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> k,a[<span class=\"number\">2</span>],f,s,t;</span><br><span class=\"line\">&#125;T[<span class=\"number\">10000001</span>];</span><br></pre></td></tr></table></figure>\n<p>Splay 需要储存当前节点的元素值 $k$，左右儿子 $a$，父节点 $f$，当前节点子树的元素总数 $s$，当前节点的元素个数 $t$。<br>Splay 的更新方法与Treap相同。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pushup</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    T[x].s=T[T[x].a[<span class=\"number\">0</span>]].s+T[T[x].a[<span class=\"number\">1</span>]].s+T[x].t;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"提根操作\"><a href=\"#提根操作\" class=\"headerlink\" title=\"提根操作\"></a>提根操作</h2><p>Splay 的提根操作同样也要用到 Treap 中的旋转操作，但是它不分左旋和右旋，旋转都是将当前节点旋转到它的父节点的位置。这样一直旋转，直到旋转到对应位置就停止即可。实际上我们会把当前节点旋转到目标节点的儿子节点，要判断当前节点的父节点是否为目标节点。<br>Splay 的旋转操作比较麻烦，因为我们需要在旋转的同时判断当前节点 $x$ 与其父节点 $y$、祖父节点 $z$ 的关系。用 $k$ 来储存当前节点 $x$ 是 $y$ 的左儿子还是右儿子，$0$ 表示左儿子，$1$ 表示右儿子。首先 $x$ 连接到 $z$ 的下面，替换 $y$ 的位置；接着把 $x$ 的儿子接到 $y$ 下面；最后把 $y$ 接在 $x$ 的下面。这里用了一个技巧：$k$^$1$ 其实就是 $y$ 除了 $k$ 的另一个儿子，当 $k$  为 $0$ 是，$k$^$1$ 为 $1$ 。<br>由于 $0$ 的儿子就是根节点 $rt$，所以如果目标是 $0$，当前节点就是根节点，需要在最后判断。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">rotate</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> y=T[x].f,z=T[y].f,k=T[y].a[<span class=\"number\">1</span>]==x;</span><br><span class=\"line\">    T[z].a[T[z].a[<span class=\"number\">1</span>]==y]=x;</span><br><span class=\"line\">    T[x].f=z;</span><br><span class=\"line\">    T[y].a[k]=T[x].a[k^<span class=\"number\">1</span>];</span><br><span class=\"line\">    T[T[x].a[k^<span class=\"number\">1</span>]].f=y;</span><br><span class=\"line\">    T[x].a[k^<span class=\"number\">1</span>]=y;</span><br><span class=\"line\">    T[y].f=x;</span><br><span class=\"line\">    <span class=\"built_in\">pushup</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">pushup</span>(y);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">splay</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> k)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(T[x].f!=k) <span class=\"built_in\">rotate</span>(x);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(k==<span class=\"number\">0</span>) rt=x;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"建树操作\"><a href=\"#建树操作\" class=\"headerlink\" title=\"建树操作\"></a>建树操作</h2><p>不知道为什么，Splay 不加上下界就会 $\\color{red}{WA}$，但是 Treap 就不会。我们需要在最开始时插入两个节点：正无穷和负无穷，来防止越界。根节点最好手动添加，另一个就用插入操作即可。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">build</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    rt=q=<span class=\"number\">1</span>;</span><br><span class=\"line\">    T[<span class=\"number\">1</span>].f=<span class=\"number\">0</span>;</span><br><span class=\"line\">    T[<span class=\"number\">1</span>].s=T[<span class=\"number\">1</span>].t=<span class=\"number\">1</span>;</span><br><span class=\"line\">    T[<span class=\"number\">1</span>].k=<span class=\"number\">1e9</span>;</span><br><span class=\"line\">    <span class=\"built_in\">add</span>(rt,<span class=\"number\">0</span>,<span class=\"number\">-1e9</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"插入操作\"><a href=\"#插入操作\" class=\"headerlink\" title=\"插入操作\"></a>插入操作</h2><p>Splay 的很多操作与 Treap 极其类似，包括插入操作，只需要在最后的时候进行提根改变Splay的形状即可。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> &amp;x,<span class=\"type\">int</span> f,<span class=\"type\">int</span> k)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x==<span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        x=++q;</span><br><span class=\"line\">        T[x].k=k;</span><br><span class=\"line\">        T[x].t=T[x].s=<span class=\"number\">1</span>;</span><br><span class=\"line\">        T[x].f=f;</span><br><span class=\"line\">        <span class=\"built_in\">splay</span>(x,<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(T[x].k==k)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ++T[x].t;</span><br><span class=\"line\">        ++T[x].s;</span><br><span class=\"line\">        <span class=\"built_in\">splay</span>(x,<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(k&lt;T[x].k) <span class=\"built_in\">add</span>(T[x].a[<span class=\"number\">0</span>],x,k);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"built_in\">add</span>(T[x].a[<span class=\"number\">1</span>],x,k);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"删除操作\"><a href=\"#删除操作\" class=\"headerlink\" title=\"删除操作\"></a>删除操作</h2><p>利用 Splay 可以改变形状的特点，就可以用独特的方法来删除节点。如果通过提根来使要删除的节点成为叶子结点，就可以直接删除这个点。我们可以先找到这个节点 $x$ 的前驱 $l$ 与后继 $r$，$l$ 和 $r$ 之间只有一个节点 $x$。我们先把 $l$ 提到根节点，再将 $r$ 提到 $l$ 的儿子节点。由于 $T[r].k&gt;T[l].k$ ，所以 $r$ 一定是 $l$ 的右子节点。而 $r$ 的左子树，也就是比 $l$ 大而比 $r$ 小的部分就只有一个节点 $x$，直接删除或元素个数减一即可。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">remove</span><span class=\"params\">(<span class=\"type\">int</span> k)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> l=<span class=\"built_in\">find_f</span>(rt,rt,k),r=<span class=\"built_in\">find_b</span>(rt,rt,k);</span><br><span class=\"line\">    <span class=\"built_in\">splay</span>(l,<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">splay</span>(r,l);</span><br><span class=\"line\">    --T[T[r].a[<span class=\"number\">0</span>]].t;</span><br><span class=\"line\">    --T[T[r].a[<span class=\"number\">0</span>]].s;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(T[T[r].a[<span class=\"number\">0</span>]].t==<span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        T[T[r].a[<span class=\"number\">0</span>]].k=<span class=\"number\">0</span>;</span><br><span class=\"line\">        T[r].a[<span class=\"number\">0</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">splay</span>(r,<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"查询排名\"><a href=\"#查询排名\" class=\"headerlink\" title=\"查询排名\"></a>查询排名</h2><p>在 Splay 中，查询一个元素的排名十分简单，就只需要将这个元素 $x$ 的前驱 $l$ 提到根节点，那么根节点与左子树中的元素一定比这个元素小。而且不存在一个元素比 $l$ 大而比 $x$ 小，也就是 $x$ 没有左儿子，说明比 $x$ 小的元素全部都在根节点与左子树中。所以 $x$ 的排名就是左子树的大小加上根节点的元素个数。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">num</span><span class=\"params\">(<span class=\"type\">int</span> k)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">splay</span>(<span class=\"built_in\">find_f</span>(rt,rt,k),<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> T[T[rt].a[<span class=\"number\">0</span>]].s+T[rt].t;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"查询对应排名的元素\"><a href=\"#查询对应排名的元素\" class=\"headerlink\" title=\"查询对应排名的元素\"></a>查询对应排名的元素</h2><p>Splay 的这个操作和 Treap 相同，只需要找到这个节点后将其提根即可。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">sum</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> k)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(k&lt;T[T[x].a[<span class=\"number\">0</span>]].s+<span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"built_in\">sum</span>(T[x].a[<span class=\"number\">0</span>],k);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(k&lt;=T[T[x].a[<span class=\"number\">0</span>]].s+T[x].t)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">splay</span>(x,<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">sum</span>(T[x].a[<span class=\"number\">1</span>],k-T[T[x].a[<span class=\"number\">0</span>]].s-T[x].t);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"查询前驱和后继\"><a href=\"#查询前驱和后继\" class=\"headerlink\" title=\"查询前驱和后继\"></a>查询前驱和后继</h2><p>Splay 查询前驱后后继的操作也和 Treap 相同，只需要记录当前节点 $x$ 的根节点 $f$，并在找到了不存在的节点，也就是 $x&#x3D;0$，那么就将这个点的上一个点也就是 $f$ 提根。对于后继的操作也一模一样。<br>由于 Splay 很多操作都要用到前驱和后继，所以这里的前驱和后继返回的都是节点编号，而不是元素的值。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">find_f</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> f,<span class=\"type\">int</span> k)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x==<span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">splay</span>(f,<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(k&lt;=T[x].k) <span class=\"keyword\">return</span> <span class=\"built_in\">find_f</span>(T[x].a[<span class=\"number\">0</span>],x,k);</span><br><span class=\"line\">    <span class=\"type\">int</span> p=<span class=\"built_in\">find_f</span>(T[x].a[<span class=\"number\">1</span>],x,k);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">find_b</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> f,<span class=\"type\">int</span> k)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x==<span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">splay</span>(f,<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(k&gt;=T[x].k) <span class=\"keyword\">return</span> <span class=\"built_in\">find_b</span>(T[x].a[<span class=\"number\">1</span>],x,k);</span><br><span class=\"line\">    <span class=\"type\">int</span> p=<span class=\"built_in\">find_b</span>(T[x].a[<span class=\"number\">0</span>],x,k);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Splay的调用\"><a href=\"#Splay的调用\" class=\"headerlink\" title=\"Splay的调用\"></a>Splay的调用</h2><p>Splay 的这些操作调用方法与 Treap 一样，只有前驱、后继和相应排名的元素是返回的节点编号，需要转换为元素值。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">build</span>();</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;m);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> z,k;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;z,&amp;k);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(z==<span class=\"number\">1</span>) <span class=\"built_in\">add</span>(rt,<span class=\"number\">0</span>,k);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(z==<span class=\"number\">2</span>) <span class=\"built_in\">remove</span>(k);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(z==<span class=\"number\">3</span>) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,<span class=\"built_in\">num</span>(k));</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(z==<span class=\"number\">4</span>) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,T[<span class=\"built_in\">sum</span>(rt,k+<span class=\"number\">1</span>)].k);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(z==<span class=\"number\">5</span>) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,T[<span class=\"built_in\">find_f</span>(rt,rt,k)].k);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(z==<span class=\"number\">6</span>) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,T[<span class=\"built_in\">find_b</span>(rt,rt,k)].k);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m,rt=<span class=\"number\">0</span>,q=<span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">splay</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> k,a[<span class=\"number\">2</span>],f,s,t;</span><br><span class=\"line\">&#125;T[<span class=\"number\">10000001</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pushup</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    T[x].s=T[T[x].a[<span class=\"number\">0</span>]].s+T[T[x].a[<span class=\"number\">1</span>]].s+T[x].t;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">rotate</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> y=T[x].f,z=T[y].f,k=T[y].a[<span class=\"number\">1</span>]==x;</span><br><span class=\"line\">    T[z].a[T[z].a[<span class=\"number\">1</span>]==y]=x;</span><br><span class=\"line\">    T[x].f=z;</span><br><span class=\"line\">    T[y].a[k]=T[x].a[k^<span class=\"number\">1</span>];</span><br><span class=\"line\">    T[T[x].a[k^<span class=\"number\">1</span>]].f=y;</span><br><span class=\"line\">    T[x].a[k^<span class=\"number\">1</span>]=y;</span><br><span class=\"line\">    T[y].f=x;</span><br><span class=\"line\">    <span class=\"built_in\">pushup</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">pushup</span>(y);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">splay</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> k)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(T[x].f!=k) <span class=\"built_in\">rotate</span>(x);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(k==<span class=\"number\">0</span>) rt=x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> &amp;x,<span class=\"type\">int</span> f,<span class=\"type\">int</span> k)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x==<span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        x=++q;</span><br><span class=\"line\">        T[x].k=k;</span><br><span class=\"line\">        T[x].t=T[x].s=<span class=\"number\">1</span>;</span><br><span class=\"line\">        T[x].f=f;</span><br><span class=\"line\">        <span class=\"built_in\">splay</span>(x,<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(T[x].k==k)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ++T[x].t;</span><br><span class=\"line\">        ++T[x].s;</span><br><span class=\"line\">        <span class=\"built_in\">splay</span>(x,<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(k&lt;T[x].k) <span class=\"built_in\">add</span>(T[x].a[<span class=\"number\">0</span>],x,k);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"built_in\">add</span>(T[x].a[<span class=\"number\">1</span>],x,k);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">build</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    rt=q=<span class=\"number\">1</span>;</span><br><span class=\"line\">    T[<span class=\"number\">1</span>].f=<span class=\"number\">0</span>;</span><br><span class=\"line\">    T[<span class=\"number\">1</span>].s=T[<span class=\"number\">1</span>].t=<span class=\"number\">1</span>;</span><br><span class=\"line\">    T[<span class=\"number\">1</span>].k=<span class=\"number\">1e9</span>;</span><br><span class=\"line\">    <span class=\"built_in\">add</span>(rt,<span class=\"number\">0</span>,<span class=\"number\">-1e9</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">find_f</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> f,<span class=\"type\">int</span> k)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x==<span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">splay</span>(f,<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(k&lt;=T[x].k) <span class=\"keyword\">return</span> <span class=\"built_in\">find_f</span>(T[x].a[<span class=\"number\">0</span>],x,k);</span><br><span class=\"line\">    <span class=\"type\">int</span> p=<span class=\"built_in\">find_f</span>(T[x].a[<span class=\"number\">1</span>],x,k);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">find_b</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> f,<span class=\"type\">int</span> k)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x==<span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">splay</span>(f,<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(k&gt;=T[x].k) <span class=\"keyword\">return</span> <span class=\"built_in\">find_b</span>(T[x].a[<span class=\"number\">1</span>],x,k);</span><br><span class=\"line\">    <span class=\"type\">int</span> p=<span class=\"built_in\">find_b</span>(T[x].a[<span class=\"number\">0</span>],x,k);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">remove</span><span class=\"params\">(<span class=\"type\">int</span> k)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> l=<span class=\"built_in\">find_f</span>(rt,rt,k),r=<span class=\"built_in\">find_b</span>(rt,rt,k);</span><br><span class=\"line\">    <span class=\"built_in\">splay</span>(l,<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">splay</span>(r,l);</span><br><span class=\"line\">    --T[T[r].a[<span class=\"number\">0</span>]].t;</span><br><span class=\"line\">    --T[T[r].a[<span class=\"number\">0</span>]].s;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(T[T[r].a[<span class=\"number\">0</span>]].t==<span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        T[T[r].a[<span class=\"number\">0</span>]].k=<span class=\"number\">0</span>;</span><br><span class=\"line\">        T[r].a[<span class=\"number\">0</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">splay</span>(r,<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">sum</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> k)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(k&lt;T[T[x].a[<span class=\"number\">0</span>]].s+<span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"built_in\">sum</span>(T[x].a[<span class=\"number\">0</span>],k);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(k&lt;=T[T[x].a[<span class=\"number\">0</span>]].s+T[x].t)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">splay</span>(x,<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">sum</span>(T[x].a[<span class=\"number\">1</span>],k-T[T[x].a[<span class=\"number\">0</span>]].s-T[x].t);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">num</span><span class=\"params\">(<span class=\"type\">int</span> k)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">splay</span>(<span class=\"built_in\">find_f</span>(rt,rt,k),<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> T[T[rt].a[<span class=\"number\">0</span>]].s+T[rt].t;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">build</span>();</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;m);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> z,k;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;z,&amp;k);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(z==<span class=\"number\">1</span>) <span class=\"built_in\">add</span>(rt,<span class=\"number\">0</span>,k);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(z==<span class=\"number\">2</span>) <span class=\"built_in\">remove</span>(k);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(z==<span class=\"number\">3</span>) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,<span class=\"built_in\">num</span>(k));</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(z==<span class=\"number\">4</span>) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,T[<span class=\"built_in\">sum</span>(rt,k+<span class=\"number\">1</span>)].k);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(z==<span class=\"number\">5</span>) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,T[<span class=\"built_in\">find_f</span>(rt,rt,k)].k);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(z==<span class=\"number\">6</span>) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,T[<span class=\"built_in\">find_b</span>(rt,rt,k)].k);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>模板题：<a href=\"https://www.luogu.com.cn/problem/P3369\">P3369 【模板】普通平衡树</a><br>我们已经学会了使用 Treap 来实现平衡树的功能，但是还有很多其他其它的平衡树，比如 Splay，Splay 不仅有平衡树功能，还可以用于其它地方，这是其它平衡树无法做到的。</p>\n<h2 id=\"基本思路\"><a href=\"#基本思路\" class=\"headerlink\" title=\"基本思路\"></a>基本思路</h2><p>Splay 的核心是提根操作，也就是把一个节点提到根节点，每一次操作后都将当前节点提到根节点，这样 Splay 的形状就是在不断变化的，就可以较好地防止被卡。<br>Splay 的提根操作不止是讲一个节点提到根节点，它可以将一个节点提到它的某个祖先的儿子节点，这样在一些操作时直接将要操作的节点提到指定位置就可以很简单地解决问题。</p>\n<h2 id=\"储存与更新\"><a href=\"#储存与更新\" class=\"headerlink\" title=\"储存与更新\"></a>储存与更新</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">splay</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> k,a[<span class=\"number\">2</span>],f,s,t;</span><br><span class=\"line\">&#125;T[<span class=\"number\">10000001</span>];</span><br></pre></td></tr></table></figure>\n<p>Splay 需要储存当前节点的元素值 $k$，左右儿子 $a$，父节点 $f$，当前节点子树的元素总数 $s$，当前节点的元素个数 $t$。<br>Splay 的更新方法与Treap相同。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pushup</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    T[x].s=T[T[x].a[<span class=\"number\">0</span>]].s+T[T[x].a[<span class=\"number\">1</span>]].s+T[x].t;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"提根操作\"><a href=\"#提根操作\" class=\"headerlink\" title=\"提根操作\"></a>提根操作</h2><p>Splay 的提根操作同样也要用到 Treap 中的旋转操作，但是它不分左旋和右旋，旋转都是将当前节点旋转到它的父节点的位置。这样一直旋转，直到旋转到对应位置就停止即可。实际上我们会把当前节点旋转到目标节点的儿子节点，要判断当前节点的父节点是否为目标节点。<br>Splay 的旋转操作比较麻烦，因为我们需要在旋转的同时判断当前节点 $x$ 与其父节点 $y$、祖父节点 $z$ 的关系。用 $k$ 来储存当前节点 $x$ 是 $y$ 的左儿子还是右儿子，$0$ 表示左儿子，$1$ 表示右儿子。首先 $x$ 连接到 $z$ 的下面，替换 $y$ 的位置；接着把 $x$ 的儿子接到 $y$ 下面；最后把 $y$ 接在 $x$ 的下面。这里用了一个技巧：$k$^$1$ 其实就是 $y$ 除了 $k$ 的另一个儿子，当 $k$  为 $0$ 是，$k$^$1$ 为 $1$ 。<br>由于 $0$ 的儿子就是根节点 $rt$，所以如果目标是 $0$，当前节点就是根节点，需要在最后判断。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">rotate</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> y=T[x].f,z=T[y].f,k=T[y].a[<span class=\"number\">1</span>]==x;</span><br><span class=\"line\">    T[z].a[T[z].a[<span class=\"number\">1</span>]==y]=x;</span><br><span class=\"line\">    T[x].f=z;</span><br><span class=\"line\">    T[y].a[k]=T[x].a[k^<span class=\"number\">1</span>];</span><br><span class=\"line\">    T[T[x].a[k^<span class=\"number\">1</span>]].f=y;</span><br><span class=\"line\">    T[x].a[k^<span class=\"number\">1</span>]=y;</span><br><span class=\"line\">    T[y].f=x;</span><br><span class=\"line\">    <span class=\"built_in\">pushup</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">pushup</span>(y);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">splay</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> k)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(T[x].f!=k) <span class=\"built_in\">rotate</span>(x);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(k==<span class=\"number\">0</span>) rt=x;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"建树操作\"><a href=\"#建树操作\" class=\"headerlink\" title=\"建树操作\"></a>建树操作</h2><p>不知道为什么，Splay 不加上下界就会 $\\color{red}{WA}$，但是 Treap 就不会。我们需要在最开始时插入两个节点：正无穷和负无穷，来防止越界。根节点最好手动添加，另一个就用插入操作即可。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">build</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    rt=q=<span class=\"number\">1</span>;</span><br><span class=\"line\">    T[<span class=\"number\">1</span>].f=<span class=\"number\">0</span>;</span><br><span class=\"line\">    T[<span class=\"number\">1</span>].s=T[<span class=\"number\">1</span>].t=<span class=\"number\">1</span>;</span><br><span class=\"line\">    T[<span class=\"number\">1</span>].k=<span class=\"number\">1e9</span>;</span><br><span class=\"line\">    <span class=\"built_in\">add</span>(rt,<span class=\"number\">0</span>,<span class=\"number\">-1e9</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"插入操作\"><a href=\"#插入操作\" class=\"headerlink\" title=\"插入操作\"></a>插入操作</h2><p>Splay 的很多操作与 Treap 极其类似，包括插入操作，只需要在最后的时候进行提根改变Splay的形状即可。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> &amp;x,<span class=\"type\">int</span> f,<span class=\"type\">int</span> k)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x==<span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        x=++q;</span><br><span class=\"line\">        T[x].k=k;</span><br><span class=\"line\">        T[x].t=T[x].s=<span class=\"number\">1</span>;</span><br><span class=\"line\">        T[x].f=f;</span><br><span class=\"line\">        <span class=\"built_in\">splay</span>(x,<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(T[x].k==k)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ++T[x].t;</span><br><span class=\"line\">        ++T[x].s;</span><br><span class=\"line\">        <span class=\"built_in\">splay</span>(x,<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(k&lt;T[x].k) <span class=\"built_in\">add</span>(T[x].a[<span class=\"number\">0</span>],x,k);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"built_in\">add</span>(T[x].a[<span class=\"number\">1</span>],x,k);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"删除操作\"><a href=\"#删除操作\" class=\"headerlink\" title=\"删除操作\"></a>删除操作</h2><p>利用 Splay 可以改变形状的特点，就可以用独特的方法来删除节点。如果通过提根来使要删除的节点成为叶子结点，就可以直接删除这个点。我们可以先找到这个节点 $x$ 的前驱 $l$ 与后继 $r$，$l$ 和 $r$ 之间只有一个节点 $x$。我们先把 $l$ 提到根节点，再将 $r$ 提到 $l$ 的儿子节点。由于 $T[r].k&gt;T[l].k$ ，所以 $r$ 一定是 $l$ 的右子节点。而 $r$ 的左子树，也就是比 $l$ 大而比 $r$ 小的部分就只有一个节点 $x$，直接删除或元素个数减一即可。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">remove</span><span class=\"params\">(<span class=\"type\">int</span> k)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> l=<span class=\"built_in\">find_f</span>(rt,rt,k),r=<span class=\"built_in\">find_b</span>(rt,rt,k);</span><br><span class=\"line\">    <span class=\"built_in\">splay</span>(l,<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">splay</span>(r,l);</span><br><span class=\"line\">    --T[T[r].a[<span class=\"number\">0</span>]].t;</span><br><span class=\"line\">    --T[T[r].a[<span class=\"number\">0</span>]].s;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(T[T[r].a[<span class=\"number\">0</span>]].t==<span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        T[T[r].a[<span class=\"number\">0</span>]].k=<span class=\"number\">0</span>;</span><br><span class=\"line\">        T[r].a[<span class=\"number\">0</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">splay</span>(r,<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"查询排名\"><a href=\"#查询排名\" class=\"headerlink\" title=\"查询排名\"></a>查询排名</h2><p>在 Splay 中，查询一个元素的排名十分简单，就只需要将这个元素 $x$ 的前驱 $l$ 提到根节点，那么根节点与左子树中的元素一定比这个元素小。而且不存在一个元素比 $l$ 大而比 $x$ 小，也就是 $x$ 没有左儿子，说明比 $x$ 小的元素全部都在根节点与左子树中。所以 $x$ 的排名就是左子树的大小加上根节点的元素个数。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">num</span><span class=\"params\">(<span class=\"type\">int</span> k)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">splay</span>(<span class=\"built_in\">find_f</span>(rt,rt,k),<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> T[T[rt].a[<span class=\"number\">0</span>]].s+T[rt].t;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"查询对应排名的元素\"><a href=\"#查询对应排名的元素\" class=\"headerlink\" title=\"查询对应排名的元素\"></a>查询对应排名的元素</h2><p>Splay 的这个操作和 Treap 相同，只需要找到这个节点后将其提根即可。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">sum</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> k)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(k&lt;T[T[x].a[<span class=\"number\">0</span>]].s+<span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"built_in\">sum</span>(T[x].a[<span class=\"number\">0</span>],k);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(k&lt;=T[T[x].a[<span class=\"number\">0</span>]].s+T[x].t)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">splay</span>(x,<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">sum</span>(T[x].a[<span class=\"number\">1</span>],k-T[T[x].a[<span class=\"number\">0</span>]].s-T[x].t);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"查询前驱和后继\"><a href=\"#查询前驱和后继\" class=\"headerlink\" title=\"查询前驱和后继\"></a>查询前驱和后继</h2><p>Splay 查询前驱后后继的操作也和 Treap 相同，只需要记录当前节点 $x$ 的根节点 $f$，并在找到了不存在的节点，也就是 $x&#x3D;0$，那么就将这个点的上一个点也就是 $f$ 提根。对于后继的操作也一模一样。<br>由于 Splay 很多操作都要用到前驱和后继，所以这里的前驱和后继返回的都是节点编号，而不是元素的值。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">find_f</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> f,<span class=\"type\">int</span> k)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x==<span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">splay</span>(f,<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(k&lt;=T[x].k) <span class=\"keyword\">return</span> <span class=\"built_in\">find_f</span>(T[x].a[<span class=\"number\">0</span>],x,k);</span><br><span class=\"line\">    <span class=\"type\">int</span> p=<span class=\"built_in\">find_f</span>(T[x].a[<span class=\"number\">1</span>],x,k);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">find_b</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> f,<span class=\"type\">int</span> k)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x==<span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">splay</span>(f,<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(k&gt;=T[x].k) <span class=\"keyword\">return</span> <span class=\"built_in\">find_b</span>(T[x].a[<span class=\"number\">1</span>],x,k);</span><br><span class=\"line\">    <span class=\"type\">int</span> p=<span class=\"built_in\">find_b</span>(T[x].a[<span class=\"number\">0</span>],x,k);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Splay的调用\"><a href=\"#Splay的调用\" class=\"headerlink\" title=\"Splay的调用\"></a>Splay的调用</h2><p>Splay 的这些操作调用方法与 Treap 一样，只有前驱、后继和相应排名的元素是返回的节点编号，需要转换为元素值。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">build</span>();</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;m);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> z,k;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;z,&amp;k);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(z==<span class=\"number\">1</span>) <span class=\"built_in\">add</span>(rt,<span class=\"number\">0</span>,k);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(z==<span class=\"number\">2</span>) <span class=\"built_in\">remove</span>(k);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(z==<span class=\"number\">3</span>) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,<span class=\"built_in\">num</span>(k));</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(z==<span class=\"number\">4</span>) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,T[<span class=\"built_in\">sum</span>(rt,k+<span class=\"number\">1</span>)].k);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(z==<span class=\"number\">5</span>) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,T[<span class=\"built_in\">find_f</span>(rt,rt,k)].k);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(z==<span class=\"number\">6</span>) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,T[<span class=\"built_in\">find_b</span>(rt,rt,k)].k);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m,rt=<span class=\"number\">0</span>,q=<span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">splay</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> k,a[<span class=\"number\">2</span>],f,s,t;</span><br><span class=\"line\">&#125;T[<span class=\"number\">10000001</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pushup</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    T[x].s=T[T[x].a[<span class=\"number\">0</span>]].s+T[T[x].a[<span class=\"number\">1</span>]].s+T[x].t;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">rotate</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> y=T[x].f,z=T[y].f,k=T[y].a[<span class=\"number\">1</span>]==x;</span><br><span class=\"line\">    T[z].a[T[z].a[<span class=\"number\">1</span>]==y]=x;</span><br><span class=\"line\">    T[x].f=z;</span><br><span class=\"line\">    T[y].a[k]=T[x].a[k^<span class=\"number\">1</span>];</span><br><span class=\"line\">    T[T[x].a[k^<span class=\"number\">1</span>]].f=y;</span><br><span class=\"line\">    T[x].a[k^<span class=\"number\">1</span>]=y;</span><br><span class=\"line\">    T[y].f=x;</span><br><span class=\"line\">    <span class=\"built_in\">pushup</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">pushup</span>(y);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">splay</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> k)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(T[x].f!=k) <span class=\"built_in\">rotate</span>(x);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(k==<span class=\"number\">0</span>) rt=x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> &amp;x,<span class=\"type\">int</span> f,<span class=\"type\">int</span> k)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x==<span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        x=++q;</span><br><span class=\"line\">        T[x].k=k;</span><br><span class=\"line\">        T[x].t=T[x].s=<span class=\"number\">1</span>;</span><br><span class=\"line\">        T[x].f=f;</span><br><span class=\"line\">        <span class=\"built_in\">splay</span>(x,<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(T[x].k==k)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ++T[x].t;</span><br><span class=\"line\">        ++T[x].s;</span><br><span class=\"line\">        <span class=\"built_in\">splay</span>(x,<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(k&lt;T[x].k) <span class=\"built_in\">add</span>(T[x].a[<span class=\"number\">0</span>],x,k);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"built_in\">add</span>(T[x].a[<span class=\"number\">1</span>],x,k);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">build</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    rt=q=<span class=\"number\">1</span>;</span><br><span class=\"line\">    T[<span class=\"number\">1</span>].f=<span class=\"number\">0</span>;</span><br><span class=\"line\">    T[<span class=\"number\">1</span>].s=T[<span class=\"number\">1</span>].t=<span class=\"number\">1</span>;</span><br><span class=\"line\">    T[<span class=\"number\">1</span>].k=<span class=\"number\">1e9</span>;</span><br><span class=\"line\">    <span class=\"built_in\">add</span>(rt,<span class=\"number\">0</span>,<span class=\"number\">-1e9</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">find_f</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> f,<span class=\"type\">int</span> k)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x==<span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">splay</span>(f,<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(k&lt;=T[x].k) <span class=\"keyword\">return</span> <span class=\"built_in\">find_f</span>(T[x].a[<span class=\"number\">0</span>],x,k);</span><br><span class=\"line\">    <span class=\"type\">int</span> p=<span class=\"built_in\">find_f</span>(T[x].a[<span class=\"number\">1</span>],x,k);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">find_b</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> f,<span class=\"type\">int</span> k)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x==<span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">splay</span>(f,<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(k&gt;=T[x].k) <span class=\"keyword\">return</span> <span class=\"built_in\">find_b</span>(T[x].a[<span class=\"number\">1</span>],x,k);</span><br><span class=\"line\">    <span class=\"type\">int</span> p=<span class=\"built_in\">find_b</span>(T[x].a[<span class=\"number\">0</span>],x,k);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">remove</span><span class=\"params\">(<span class=\"type\">int</span> k)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> l=<span class=\"built_in\">find_f</span>(rt,rt,k),r=<span class=\"built_in\">find_b</span>(rt,rt,k);</span><br><span class=\"line\">    <span class=\"built_in\">splay</span>(l,<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">splay</span>(r,l);</span><br><span class=\"line\">    --T[T[r].a[<span class=\"number\">0</span>]].t;</span><br><span class=\"line\">    --T[T[r].a[<span class=\"number\">0</span>]].s;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(T[T[r].a[<span class=\"number\">0</span>]].t==<span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        T[T[r].a[<span class=\"number\">0</span>]].k=<span class=\"number\">0</span>;</span><br><span class=\"line\">        T[r].a[<span class=\"number\">0</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">splay</span>(r,<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">sum</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> k)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(k&lt;T[T[x].a[<span class=\"number\">0</span>]].s+<span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"built_in\">sum</span>(T[x].a[<span class=\"number\">0</span>],k);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(k&lt;=T[T[x].a[<span class=\"number\">0</span>]].s+T[x].t)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">splay</span>(x,<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">sum</span>(T[x].a[<span class=\"number\">1</span>],k-T[T[x].a[<span class=\"number\">0</span>]].s-T[x].t);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">num</span><span class=\"params\">(<span class=\"type\">int</span> k)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">splay</span>(<span class=\"built_in\">find_f</span>(rt,rt,k),<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> T[T[rt].a[<span class=\"number\">0</span>]].s+T[rt].t;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">build</span>();</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;m);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> z,k;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;z,&amp;k);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(z==<span class=\"number\">1</span>) <span class=\"built_in\">add</span>(rt,<span class=\"number\">0</span>,k);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(z==<span class=\"number\">2</span>) <span class=\"built_in\">remove</span>(k);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(z==<span class=\"number\">3</span>) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,<span class=\"built_in\">num</span>(k));</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(z==<span class=\"number\">4</span>) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,T[<span class=\"built_in\">sum</span>(rt,k+<span class=\"number\">1</span>)].k);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(z==<span class=\"number\">5</span>) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,T[<span class=\"built_in\">find_f</span>(rt,rt,k)].k);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(z==<span class=\"number\">6</span>) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,T[<span class=\"built_in\">find_b</span>(rt,rt,k)].k);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"CF1495F 题解","date":"2023-02-24T08:36:26.000Z","description":" ","_content":"\n### 题意\n\n有一排格子，每个格子有三个数 $p_i,a_i,b_i$，现在你要玩一个游戏，你站在第一个格子上，要跳到第 $n+1$ 个格子，$p_{n+1}=\\infty$。有一个格子集合 $S$，你必须跳到 $S$ 中的所有格子(其它随意)。\n\n假设你站在格子 $i$，下一步你可以选择 : \n\n- 花费 $a_i$ 的代价，跳到 $i+1$。\n\n- 花费 $b_i$ 的代价，跳到 $i$ 后面第一个满足 $p_j>p_i$ 的位置 $j$。\n\n一轮游戏的代价是跳的总代价。\n\n$q$ 次询问，每次可以在上一次的 $S$ 中添加或删除一个元素。\n\n### 思路\n\n因为起点是 $1$，终点是 $n+1$，我们直接把这两个点塞进 $S$，并无法删除。\n\n首先因为需要经过 $S$ 中的所有点，我们可以转换为 $S$ 中相邻两点的距离和，也就是 $dis(S_1,S_k) = \\sum_{i=1}^{k-1} dis(S_{i-1},S_i)$。由于相邻两次询问只修改了一个点，所以相邻两次询问的答案只有 $O(1)$ 次询问的差距，比如第 $t$ 次添加一个点 $S_k$，就有：\n\n$$ans_t = ans_{t-1} - dis(S_{t-1},S_{t+1}) + dis(S_{t-1},S_t) + dis(S_t,S_{t+1})$$\n\n把询问离线下来后，就变成了 $O(n)$ 次询问 $dis(x,y)$。\n\n我们把第一种走法和第二种走法放在一起看，看起来我们可以把左端点 $l$ 从 $n+1$ 移到 $1$，过程中处理跳跃 $l,r$ 的走法造成的贡献。如果当前情况下 $l$ 到 $r$ 的代价比直接走这个区间的代价小，那么就按原来的走，否则就走这个区间。但是这样并不对，因为我们按局部最优走，可能一下子走过了某个跳跃位置，导致结果不优。\n\n但是我们还没有用到第二种走法的特殊之处，分析一下可以发现，第二种走法的区间之间要么包含要么不交。所以像上面那样走是不会跳过某个跳跃位置的。如果一个跳跃 $l,r$ 能造成贡献，那么 $l$ 到 $[r,n+1]$ 的代价都相应的减小相同的值 ，用树状数组即可维护。\n\n### code\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<vector>\n#include<set>\nusing namespace std;\ntypedef long long ll;\nconst int N=1000001;\nint n,m,c[N],d[N];\nll a[N],b[N],f[N],T[N];\nset<int> Set;\nstruct str\n{\n    int x,u,t;\n};\nvector<str> e[N];\nbool cmp(int x,int y)\n{\n    return c[x]>c[y];\n}\nvoid add(int x,ll k)\n{\n    while(x<=n+1)\n    {\n        T[x]+=k;\n        x+=(x&-x);\n    }\n}\nll sum(int x)\n{\n    ll s=0;\n    while(x>=1)\n    {\n        s+=T[x];\n        x-=(x&-x);\n    }\n    return s;\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n;++i)\n    {\n        scanf(\"%d\",&c[i]);\n    }\n    for(int i=1;i<=n;++i)\n    {\n        scanf(\"%lld\",&a[i]);\n    }\n    for(int i=1;i<=n;++i)\n    {\n        scanf(\"%lld\",&b[i]);\n    }\n    c[n+1]=1e9;\n    for(int i=n;i>=1;--i)\n    {\n        int x=i+1;\n        while(c[x]<=c[i]) x=d[x];\n        d[i]=x;\n    }\n    Set.insert(1);\n    Set.insert(n+1);\n    e[1].push_back((str){n+1,1,0});\n    for(int i=1;i<=m;++i)\n    {\n        int x;\n        scanf(\"%d\",&x);\n        if(x==1) continue;\n        if(Set.count(x))\n        {\n            int z1=*(--Set.find(x)),z2=*(++Set.find(x));\n            e[z1].push_back((str){x,-1,i});\n            e[x].push_back((str){z2,-1,i});\n            e[z1].push_back((str){z2,1,i});\n            Set.erase(x);\n        }\n        else\n        {\n            Set.insert(x);\n            int z1=*(--Set.find(x)),z2=*(++Set.find(x));\n            e[z1].push_back((str){x,1,i});\n            e[x].push_back((str){z2,1,i});\n            e[z1].push_back((str){z2,-1,i});\n        }\n    }\n    for(int i=n+1;i>=1;--i)\n    {\n        if(i<=n)\n        {\n            add(i+1,a[i]);\n            ll z=sum(d[i]);\n            if(b[i]<z) add(d[i],b[i]-z);\n        }\n        for(int j=0;j<e[i].size();++j)\n        {\n            f[e[i][j].t]+=e[i][j].u*sum(e[i][j].x);\n        }\n    }\n    for(int i=1;i<=m;++i) f[i]+=f[i-1];\n    for(int i=1;i<=m;++i)\n    {\n        printf(\"%lld\\n\",f[i]);\n    }\n    return 0;\n}\n```\n\n","source":"_posts/CF1495F-solution.md","raw":"---\ntitle: 'CF1495F 题解'\ndate: 2023-02-24 16:36:26\ntags: [CF]\ndescription: ' '\n---\n\n### 题意\n\n有一排格子，每个格子有三个数 $p_i,a_i,b_i$，现在你要玩一个游戏，你站在第一个格子上，要跳到第 $n+1$ 个格子，$p_{n+1}=\\infty$。有一个格子集合 $S$，你必须跳到 $S$ 中的所有格子(其它随意)。\n\n假设你站在格子 $i$，下一步你可以选择 : \n\n- 花费 $a_i$ 的代价，跳到 $i+1$。\n\n- 花费 $b_i$ 的代价，跳到 $i$ 后面第一个满足 $p_j>p_i$ 的位置 $j$。\n\n一轮游戏的代价是跳的总代价。\n\n$q$ 次询问，每次可以在上一次的 $S$ 中添加或删除一个元素。\n\n### 思路\n\n因为起点是 $1$，终点是 $n+1$，我们直接把这两个点塞进 $S$，并无法删除。\n\n首先因为需要经过 $S$ 中的所有点，我们可以转换为 $S$ 中相邻两点的距离和，也就是 $dis(S_1,S_k) = \\sum_{i=1}^{k-1} dis(S_{i-1},S_i)$。由于相邻两次询问只修改了一个点，所以相邻两次询问的答案只有 $O(1)$ 次询问的差距，比如第 $t$ 次添加一个点 $S_k$，就有：\n\n$$ans_t = ans_{t-1} - dis(S_{t-1},S_{t+1}) + dis(S_{t-1},S_t) + dis(S_t,S_{t+1})$$\n\n把询问离线下来后，就变成了 $O(n)$ 次询问 $dis(x,y)$。\n\n我们把第一种走法和第二种走法放在一起看，看起来我们可以把左端点 $l$ 从 $n+1$ 移到 $1$，过程中处理跳跃 $l,r$ 的走法造成的贡献。如果当前情况下 $l$ 到 $r$ 的代价比直接走这个区间的代价小，那么就按原来的走，否则就走这个区间。但是这样并不对，因为我们按局部最优走，可能一下子走过了某个跳跃位置，导致结果不优。\n\n但是我们还没有用到第二种走法的特殊之处，分析一下可以发现，第二种走法的区间之间要么包含要么不交。所以像上面那样走是不会跳过某个跳跃位置的。如果一个跳跃 $l,r$ 能造成贡献，那么 $l$ 到 $[r,n+1]$ 的代价都相应的减小相同的值 ，用树状数组即可维护。\n\n### code\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<vector>\n#include<set>\nusing namespace std;\ntypedef long long ll;\nconst int N=1000001;\nint n,m,c[N],d[N];\nll a[N],b[N],f[N],T[N];\nset<int> Set;\nstruct str\n{\n    int x,u,t;\n};\nvector<str> e[N];\nbool cmp(int x,int y)\n{\n    return c[x]>c[y];\n}\nvoid add(int x,ll k)\n{\n    while(x<=n+1)\n    {\n        T[x]+=k;\n        x+=(x&-x);\n    }\n}\nll sum(int x)\n{\n    ll s=0;\n    while(x>=1)\n    {\n        s+=T[x];\n        x-=(x&-x);\n    }\n    return s;\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n;++i)\n    {\n        scanf(\"%d\",&c[i]);\n    }\n    for(int i=1;i<=n;++i)\n    {\n        scanf(\"%lld\",&a[i]);\n    }\n    for(int i=1;i<=n;++i)\n    {\n        scanf(\"%lld\",&b[i]);\n    }\n    c[n+1]=1e9;\n    for(int i=n;i>=1;--i)\n    {\n        int x=i+1;\n        while(c[x]<=c[i]) x=d[x];\n        d[i]=x;\n    }\n    Set.insert(1);\n    Set.insert(n+1);\n    e[1].push_back((str){n+1,1,0});\n    for(int i=1;i<=m;++i)\n    {\n        int x;\n        scanf(\"%d\",&x);\n        if(x==1) continue;\n        if(Set.count(x))\n        {\n            int z1=*(--Set.find(x)),z2=*(++Set.find(x));\n            e[z1].push_back((str){x,-1,i});\n            e[x].push_back((str){z2,-1,i});\n            e[z1].push_back((str){z2,1,i});\n            Set.erase(x);\n        }\n        else\n        {\n            Set.insert(x);\n            int z1=*(--Set.find(x)),z2=*(++Set.find(x));\n            e[z1].push_back((str){x,1,i});\n            e[x].push_back((str){z2,1,i});\n            e[z1].push_back((str){z2,-1,i});\n        }\n    }\n    for(int i=n+1;i>=1;--i)\n    {\n        if(i<=n)\n        {\n            add(i+1,a[i]);\n            ll z=sum(d[i]);\n            if(b[i]<z) add(d[i],b[i]-z);\n        }\n        for(int j=0;j<e[i].size();++j)\n        {\n            f[e[i][j].t]+=e[i][j].u*sum(e[i][j].x);\n        }\n    }\n    for(int i=1;i<=m;++i) f[i]+=f[i-1];\n    for(int i=1;i<=m;++i)\n    {\n        printf(\"%lld\\n\",f[i]);\n    }\n    return 0;\n}\n```\n\n","slug":"CF1495F-solution","published":1,"updated":"2023-02-24T10:11:48.635Z","_id":"cleid927i00092sjf8suf0nx4","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h3><p>有一排格子，每个格子有三个数 $p_i,a_i,b_i$，现在你要玩一个游戏，你站在第一个格子上，要跳到第 $n+1$ 个格子，$p_{n+1}&#x3D;\\infty$。有一个格子集合 $S$，你必须跳到 $S$ 中的所有格子(其它随意)。</p>\n<p>假设你站在格子 $i$，下一步你可以选择 : </p>\n<ul>\n<li><p>花费 $a_i$ 的代价，跳到 $i+1$。</p>\n</li>\n<li><p>花费 $b_i$ 的代价，跳到 $i$ 后面第一个满足 $p_j&gt;p_i$ 的位置 $j$。</p>\n</li>\n</ul>\n<p>一轮游戏的代价是跳的总代价。</p>\n<p>$q$ 次询问，每次可以在上一次的 $S$ 中添加或删除一个元素。</p>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>因为起点是 $1$，终点是 $n+1$，我们直接把这两个点塞进 $S$，并无法删除。</p>\n<p>首先因为需要经过 $S$ 中的所有点，我们可以转换为 $S$ 中相邻两点的距离和，也就是 $dis(S_1,S_k) &#x3D; \\sum_{i&#x3D;1}^{k-1} dis(S_{i-1},S_i)$。由于相邻两次询问只修改了一个点，所以相邻两次询问的答案只有 $O(1)$ 次询问的差距，比如第 $t$ 次添加一个点 $S_k$，就有：</p>\n<p>$$ans_t &#x3D; ans_{t-1} - dis(S_{t-1},S_{t+1}) + dis(S_{t-1},S_t) + dis(S_t,S_{t+1})$$</p>\n<p>把询问离线下来后，就变成了 $O(n)$ 次询问 $dis(x,y)$。</p>\n<p>我们把第一种走法和第二种走法放在一起看，看起来我们可以把左端点 $l$ 从 $n+1$ 移到 $1$，过程中处理跳跃 $l,r$ 的走法造成的贡献。如果当前情况下 $l$ 到 $r$ 的代价比直接走这个区间的代价小，那么就按原来的走，否则就走这个区间。但是这样并不对，因为我们按局部最优走，可能一下子走过了某个跳跃位置，导致结果不优。</p>\n<p>但是我们还没有用到第二种走法的特殊之处，分析一下可以发现，第二种走法的区间之间要么包含要么不交。所以像上面那样走是不会跳过某个跳跃位置的。如果一个跳跃 $l,r$ 能造成贡献，那么 $l$ 到 $[r,n+1]$ 的代价都相应的减小相同的值 ，用树状数组即可维护。</p>\n<h3 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> ll;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1000001</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m,c[N],d[N];</span><br><span class=\"line\">ll a[N],b[N],f[N],T[N];</span><br><span class=\"line\">set&lt;<span class=\"type\">int</span>&gt; Set;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">str</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> x,u,t;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">vector&lt;str&gt; e[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> c[x]&gt;c[y];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> x,ll k)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(x&lt;=n+<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        T[x]+=k;</span><br><span class=\"line\">        x+=(x&amp;-x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">sum</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ll s=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(x&gt;=<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        s+=T[x];</span><br><span class=\"line\">        x-=(x&amp;-x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;c[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%lld&quot;</span>,&amp;a[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%lld&quot;</span>,&amp;b[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    c[n+<span class=\"number\">1</span>]=<span class=\"number\">1e9</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=n;i&gt;=<span class=\"number\">1</span>;--i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x=i+<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(c[x]&lt;=c[i]) x=d[x];</span><br><span class=\"line\">        d[i]=x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Set.<span class=\"built_in\">insert</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    Set.<span class=\"built_in\">insert</span>(n+<span class=\"number\">1</span>);</span><br><span class=\"line\">    e[<span class=\"number\">1</span>].<span class=\"built_in\">push_back</span>((str)&#123;n+<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>&#125;);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;x);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x==<span class=\"number\">1</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(Set.<span class=\"built_in\">count</span>(x))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> z1=*(--Set.<span class=\"built_in\">find</span>(x)),z2=*(++Set.<span class=\"built_in\">find</span>(x));</span><br><span class=\"line\">            e[z1].<span class=\"built_in\">push_back</span>((str)&#123;x,<span class=\"number\">-1</span>,i&#125;);</span><br><span class=\"line\">            e[x].<span class=\"built_in\">push_back</span>((str)&#123;z2,<span class=\"number\">-1</span>,i&#125;);</span><br><span class=\"line\">            e[z1].<span class=\"built_in\">push_back</span>((str)&#123;z2,<span class=\"number\">1</span>,i&#125;);</span><br><span class=\"line\">            Set.<span class=\"built_in\">erase</span>(x);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Set.<span class=\"built_in\">insert</span>(x);</span><br><span class=\"line\">            <span class=\"type\">int</span> z1=*(--Set.<span class=\"built_in\">find</span>(x)),z2=*(++Set.<span class=\"built_in\">find</span>(x));</span><br><span class=\"line\">            e[z1].<span class=\"built_in\">push_back</span>((str)&#123;x,<span class=\"number\">1</span>,i&#125;);</span><br><span class=\"line\">            e[x].<span class=\"built_in\">push_back</span>((str)&#123;z2,<span class=\"number\">1</span>,i&#125;);</span><br><span class=\"line\">            e[z1].<span class=\"built_in\">push_back</span>((str)&#123;z2,<span class=\"number\">-1</span>,i&#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=n+<span class=\"number\">1</span>;i&gt;=<span class=\"number\">1</span>;--i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i&lt;=n)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">add</span>(i+<span class=\"number\">1</span>,a[i]);</span><br><span class=\"line\">            ll z=<span class=\"built_in\">sum</span>(d[i]);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(b[i]&lt;z) <span class=\"built_in\">add</span>(d[i],b[i]-z);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;e[i].<span class=\"built_in\">size</span>();++j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            f[e[i][j].t]+=e[i][j].u*<span class=\"built_in\">sum</span>(e[i][j].x);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i) f[i]+=f[i<span class=\"number\">-1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>,f[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h3><p>有一排格子，每个格子有三个数 $p_i,a_i,b_i$，现在你要玩一个游戏，你站在第一个格子上，要跳到第 $n+1$ 个格子，$p_{n+1}&#x3D;\\infty$。有一个格子集合 $S$，你必须跳到 $S$ 中的所有格子(其它随意)。</p>\n<p>假设你站在格子 $i$，下一步你可以选择 : </p>\n<ul>\n<li><p>花费 $a_i$ 的代价，跳到 $i+1$。</p>\n</li>\n<li><p>花费 $b_i$ 的代价，跳到 $i$ 后面第一个满足 $p_j&gt;p_i$ 的位置 $j$。</p>\n</li>\n</ul>\n<p>一轮游戏的代价是跳的总代价。</p>\n<p>$q$ 次询问，每次可以在上一次的 $S$ 中添加或删除一个元素。</p>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>因为起点是 $1$，终点是 $n+1$，我们直接把这两个点塞进 $S$，并无法删除。</p>\n<p>首先因为需要经过 $S$ 中的所有点，我们可以转换为 $S$ 中相邻两点的距离和，也就是 $dis(S_1,S_k) &#x3D; \\sum_{i&#x3D;1}^{k-1} dis(S_{i-1},S_i)$。由于相邻两次询问只修改了一个点，所以相邻两次询问的答案只有 $O(1)$ 次询问的差距，比如第 $t$ 次添加一个点 $S_k$，就有：</p>\n<p>$$ans_t &#x3D; ans_{t-1} - dis(S_{t-1},S_{t+1}) + dis(S_{t-1},S_t) + dis(S_t,S_{t+1})$$</p>\n<p>把询问离线下来后，就变成了 $O(n)$ 次询问 $dis(x,y)$。</p>\n<p>我们把第一种走法和第二种走法放在一起看，看起来我们可以把左端点 $l$ 从 $n+1$ 移到 $1$，过程中处理跳跃 $l,r$ 的走法造成的贡献。如果当前情况下 $l$ 到 $r$ 的代价比直接走这个区间的代价小，那么就按原来的走，否则就走这个区间。但是这样并不对，因为我们按局部最优走，可能一下子走过了某个跳跃位置，导致结果不优。</p>\n<p>但是我们还没有用到第二种走法的特殊之处，分析一下可以发现，第二种走法的区间之间要么包含要么不交。所以像上面那样走是不会跳过某个跳跃位置的。如果一个跳跃 $l,r$ 能造成贡献，那么 $l$ 到 $[r,n+1]$ 的代价都相应的减小相同的值 ，用树状数组即可维护。</p>\n<h3 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> ll;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1000001</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m,c[N],d[N];</span><br><span class=\"line\">ll a[N],b[N],f[N],T[N];</span><br><span class=\"line\">set&lt;<span class=\"type\">int</span>&gt; Set;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">str</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> x,u,t;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">vector&lt;str&gt; e[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> c[x]&gt;c[y];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> x,ll k)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(x&lt;=n+<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        T[x]+=k;</span><br><span class=\"line\">        x+=(x&amp;-x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">sum</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ll s=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(x&gt;=<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        s+=T[x];</span><br><span class=\"line\">        x-=(x&amp;-x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;c[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%lld&quot;</span>,&amp;a[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%lld&quot;</span>,&amp;b[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    c[n+<span class=\"number\">1</span>]=<span class=\"number\">1e9</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=n;i&gt;=<span class=\"number\">1</span>;--i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x=i+<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(c[x]&lt;=c[i]) x=d[x];</span><br><span class=\"line\">        d[i]=x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Set.<span class=\"built_in\">insert</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    Set.<span class=\"built_in\">insert</span>(n+<span class=\"number\">1</span>);</span><br><span class=\"line\">    e[<span class=\"number\">1</span>].<span class=\"built_in\">push_back</span>((str)&#123;n+<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>&#125;);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;x);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x==<span class=\"number\">1</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(Set.<span class=\"built_in\">count</span>(x))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> z1=*(--Set.<span class=\"built_in\">find</span>(x)),z2=*(++Set.<span class=\"built_in\">find</span>(x));</span><br><span class=\"line\">            e[z1].<span class=\"built_in\">push_back</span>((str)&#123;x,<span class=\"number\">-1</span>,i&#125;);</span><br><span class=\"line\">            e[x].<span class=\"built_in\">push_back</span>((str)&#123;z2,<span class=\"number\">-1</span>,i&#125;);</span><br><span class=\"line\">            e[z1].<span class=\"built_in\">push_back</span>((str)&#123;z2,<span class=\"number\">1</span>,i&#125;);</span><br><span class=\"line\">            Set.<span class=\"built_in\">erase</span>(x);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Set.<span class=\"built_in\">insert</span>(x);</span><br><span class=\"line\">            <span class=\"type\">int</span> z1=*(--Set.<span class=\"built_in\">find</span>(x)),z2=*(++Set.<span class=\"built_in\">find</span>(x));</span><br><span class=\"line\">            e[z1].<span class=\"built_in\">push_back</span>((str)&#123;x,<span class=\"number\">1</span>,i&#125;);</span><br><span class=\"line\">            e[x].<span class=\"built_in\">push_back</span>((str)&#123;z2,<span class=\"number\">1</span>,i&#125;);</span><br><span class=\"line\">            e[z1].<span class=\"built_in\">push_back</span>((str)&#123;z2,<span class=\"number\">-1</span>,i&#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=n+<span class=\"number\">1</span>;i&gt;=<span class=\"number\">1</span>;--i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i&lt;=n)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">add</span>(i+<span class=\"number\">1</span>,a[i]);</span><br><span class=\"line\">            ll z=<span class=\"built_in\">sum</span>(d[i]);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(b[i]&lt;z) <span class=\"built_in\">add</span>(d[i],b[i]-z);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;e[i].<span class=\"built_in\">size</span>();++j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            f[e[i][j].t]+=e[i][j].u*<span class=\"built_in\">sum</span>(e[i][j].x);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i) f[i]+=f[i<span class=\"number\">-1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>,f[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"关于 Orita","date":"2023-02-01T09:00:00.000Z","description":"Useful OI Tools","_content":"\n[Orita](https://github.com/2745518585/Orita) 是由 [赵悦岑](https://github.com/2745518585/) 开发的一款 OI 工具，包括评测、对拍、数据生成等，主要由 C++ 语言编写。\n\n目前 Dev 版本已经发布。\n\n持续更新中，现阶段经常会有 bug，可能无法正常运行，之后的版本会尽快修复。目前仅可在 windows 环境下使用。\n\n使用方法详见 [说明文档](https://github.com/2745518585/Orita#readme)。\n","source":"_posts/Orita-about.md","raw":"---\ntitle: '关于 Orita'\ndate: 2023-02-01 17:00:00\ntags: [Orita]\ndescription: 'Useful OI Tools'\n---\n\n[Orita](https://github.com/2745518585/Orita) 是由 [赵悦岑](https://github.com/2745518585/) 开发的一款 OI 工具，包括评测、对拍、数据生成等，主要由 C++ 语言编写。\n\n目前 Dev 版本已经发布。\n\n持续更新中，现阶段经常会有 bug，可能无法正常运行，之后的版本会尽快修复。目前仅可在 windows 环境下使用。\n\n使用方法详见 [说明文档](https://github.com/2745518585/Orita#readme)。\n","slug":"Orita-about","published":1,"updated":"2023-02-01T09:19:13.519Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cleid927j000b2sjfdbacdluq","content":"<p><a href=\"https://github.com/2745518585/Orita\">Orita</a> 是由 <a href=\"https://github.com/2745518585/\">赵悦岑</a> 开发的一款 OI 工具，包括评测、对拍、数据生成等，主要由 C++ 语言编写。</p>\n<p>目前 Dev 版本已经发布。</p>\n<p>持续更新中，现阶段经常会有 bug，可能无法正常运行，之后的版本会尽快修复。目前仅可在 windows 环境下使用。</p>\n<p>使用方法详见 <a href=\"https://github.com/2745518585/Orita#readme\">说明文档</a>。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://github.com/2745518585/Orita\">Orita</a> 是由 <a href=\"https://github.com/2745518585/\">赵悦岑</a> 开发的一款 OI 工具，包括评测、对拍、数据生成等，主要由 C++ 语言编写。</p>\n<p>目前 Dev 版本已经发布。</p>\n<p>持续更新中，现阶段经常会有 bug，可能无法正常运行，之后的版本会尽快修复。目前仅可在 windows 环境下使用。</p>\n<p>使用方法详见 <a href=\"https://github.com/2745518585/Orita#readme\">说明文档</a>。</p>\n"},{"title":"多重背包（单调队列优化）","date":"2022-02-14T09:10:39.000Z","description":" ","_content":"\n## 前言\n多重背包问题的时间复杂度为 $O(nm^2)$，复杂度很高，所以我们需要将其优化。其中一种办法就是使用单调队列优化，可以使复杂度达到 $O(nm)$。\n## 单调队列\n单调队列的一个元素有两个值：元素的值和位置（下标），单调队列会保证队首元素是原数列中值最小（或最大）的。单调队列的作用可以看下面的模板题：\n[P1886 滑动窗口 /【模板】单调队列](https://www.luogu.com.cn/problem/P1886)\n有一个长为 $n$ 的序列 $a$，以及一个大小为 $k$ 的窗口。现在这个从左边开始向右滑动，每次滑动一个单位，求出每次滑动后窗口中的最大值和最小值。\n了解了单调队列的用途，我们以样例为例来看它如何实现。STL中的双端队列可以实现单调队列，但是常数不得不说有一点大，所以一般单调队列都用手写队列来实现。\n$\\text{1 3 -1 -3 5 3 6 7}$\n首先定义两个队列 $p$ 与 $q$（也可以定义结构体队列），$p$ 中是每个元素在原数列的位置，$q$ 中是每个元素的值。\n(1) 将 $1$ 入队，$q = \\{ 1 \\},p = \\{ 1 \\}$，此时队首元素为 $1$；\n(2) 将 $3$ 入队，由于 $3 > 1$，所以 $q = \\{ 1,3 \\},p = \\{ 1,2 \\}$，此时队首元素为 $1$；\n(3) 将 $-1$ 入队，由于 $-1 < 3,-1 < 1$，所以 $1$ 和 $3$ 都出队，$q = \\{ -1 \\},p = \\{ 3 \\}$，此时队首元素为 $-1$；\n(4) 将 $-3$ 入队，同理 $-3 < -1$，所以将 $-1$ 出队，此时$q = \\{ -3 \\},p = \\{ 4 \\}$，队首元素为 $-3$；\n(5) 将 $5$ 入队，此时$q = \\{ -3,5 \\},p = \\{ 4,5 \\}$，队首元素为 $-3$；\n(6) 将 $3$ 入队，由于 $3 < 5$，所以$q = \\{ -3,3 \\},p = \\{ 4,6 \\}$，队首元素为 $-3$；\n(7) 将 $6$ 入队，由于 $4 \\leqslant 7 - 3$，也就是 $-3$ 已经不在窗口中了，所以弹出 $-3$ ，此时$q = \\{ 3,6 \\},p = \\{ 6,7 \\}$，队首元素为 $3$；\n(8) 将 $7$ 入队，此时$q = \\{ 3,6,7 \\},p = \\{ 6,7,8 \\}$，队首元素为 $3$；\n可以观察到每一次操作的队首元素都是当前窗口中的最小值（除了(1)(2)，因为此时已经入队的元素个数少于窗口大小）。我们可以简单总结以下这些操作：设元素总数为 $n$，窗口大小为 $m$，对于一个即将入队的元素 $x_i$ ，如果队尾元素满足 $x_i < q_{back}$，那么弹出队尾元素，如果队首元素对应的在原数列中的位置 $p_{front} \\leqslant i - m$，那么弹出队首元素，然后将 $x_i$ 加入到 $q$ 的队尾，$i$ 加入到 $p$ 的队尾，如果 $x_i \\geqslant m$，则队首元素就是当前窗口中的最小元素。\n同理，我们也可以推出最大值的求法。下面上代码：\n``` cpp\n#include<cstdio>\nusing namespace std;\nint n,m,a[1000001],q[1000001],p[1000001],T,R;\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n;++i)\n    {\n        scanf(\"%d\",&a[i]);\n    }\n    T=0,R=-1;\n    for(int i=1;i<=n;++i)\n    {\n        while(T<=R&&p[T]<=i-m) ++T;\n        while(T<=R&&q[R]>a[i]) --R;\n        q[++R]=a[i];\n        p[R]=i;\n        if(i>=m) printf(\"%d \",q[T]);\n    }\n    printf(\"\\n\");\n    T=0,R=-1;\n    for(int i=1;i<=n;++i)\n    {\n        while(T<=R&&p[T]<=i-m) ++T;\n        while(T<=R&&q[R]<a[i]) --R;\n        q[++R]=a[i];\n        p[R]=i;\n        if(i>=m) printf(\"%d \",q[T]);\n    }\n    return 0;\n}\n```\n## 单调队列优化多重背包\n单调队列如何能和背包扯上关系的？设这件物品体积为 $v$，价值为 $w$，数量为$k$，我们来看一下多重背包的状态转移方程：\n$f[m] = \\max(f[m], f[m-v]+w, f[m-2\\times v]+2\\times w, f[m-3\\times v]+3\\times w,\\cdots)$\n将 $m$ 换为其他数，我们就可以得到：\n$f[j]=f[j]$\n$f[j+v]=\\max(f[j]+w,f[j+v])$\n$f[j+2\\times v]=\\max(f[j]+2\\times w,f[j+v]+w,f[j+2\\times v])$\n$f[j+3\\times v]=\\max(f[j]+3\\times w,f[j+v]+2\\times w,f[j+2\\times v]+w,f[j+3\\times v])$\n稍加转换，可得：\n$f[j+0\\times v]=\\max(f[j])$\n$f[j+1\\times v]=\\max(f[j],f[j+v]-w)+w$\n$f[j+2\\times v]=\\max(f[j],f[j+v]-w,f[j+2\\times v]-2\\times w)+2\\times w$\n$f[j+3\\times v]=\\max(f[j],f[j+v]-w,f[j+2\\times v]-2\\times w,f[j+3\\times v]-3\\times w)+3\\times w$\n是不是惊人的相似。\n这样就可以得到：\n$f[j+k\\times v]=\\max(f[j],f[j+v]-w,f[j+2\\times v]-2\\times w,f[j+3\\times v]-3\\times w,\\cdots,f[j+k\\times v]-k\\times w)+k\\times w$\n我们就可以看成有一个大小为 $k$的窗口在数列上扫过，每一个状态对应一个窗口。这样这个问题就成功地转换成了单调队列的问题了。\n``` cpp\n#include<cstdio>\nusing namespace std;\nint n,m,q[1000001],p[1000001],T=-1,R=0,f[100001];\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n;++i)\n    {\n        int a,b,c;\n        scanf(\"%d%d%d\",&b,&a,&c);\n        for(int j=0;j<a;++j)\n        {\n            T=0;\n            R=-1;\n            for(int k=j;k<=m;k+=a)\n            {\n                while(T<=R&&k-p[T]>a*c) ++T;\n                while(T<=R&&q[R]+(k-p[R])/a*b<=f[k]) --R;\n                p[++R]=k;\n                q[R]=f[k];\n                f[k]=q[T]+(k-p[T])/a*b;\n            }\n        }\n    }\n    printf(\"%d\",f[m]);\n    return 0;\n}\n```","source":"_posts/Monotone-queue-optimization-knapsack.md","raw":"---\ntitle: '多重背包（单调队列优化）'\ndate: 2022-02-14 17:10:39\ntags: [动态规划,背包,单调队列,单调队列优化dp]\ndescription: ' '\n---\n\n## 前言\n多重背包问题的时间复杂度为 $O(nm^2)$，复杂度很高，所以我们需要将其优化。其中一种办法就是使用单调队列优化，可以使复杂度达到 $O(nm)$。\n## 单调队列\n单调队列的一个元素有两个值：元素的值和位置（下标），单调队列会保证队首元素是原数列中值最小（或最大）的。单调队列的作用可以看下面的模板题：\n[P1886 滑动窗口 /【模板】单调队列](https://www.luogu.com.cn/problem/P1886)\n有一个长为 $n$ 的序列 $a$，以及一个大小为 $k$ 的窗口。现在这个从左边开始向右滑动，每次滑动一个单位，求出每次滑动后窗口中的最大值和最小值。\n了解了单调队列的用途，我们以样例为例来看它如何实现。STL中的双端队列可以实现单调队列，但是常数不得不说有一点大，所以一般单调队列都用手写队列来实现。\n$\\text{1 3 -1 -3 5 3 6 7}$\n首先定义两个队列 $p$ 与 $q$（也可以定义结构体队列），$p$ 中是每个元素在原数列的位置，$q$ 中是每个元素的值。\n(1) 将 $1$ 入队，$q = \\{ 1 \\},p = \\{ 1 \\}$，此时队首元素为 $1$；\n(2) 将 $3$ 入队，由于 $3 > 1$，所以 $q = \\{ 1,3 \\},p = \\{ 1,2 \\}$，此时队首元素为 $1$；\n(3) 将 $-1$ 入队，由于 $-1 < 3,-1 < 1$，所以 $1$ 和 $3$ 都出队，$q = \\{ -1 \\},p = \\{ 3 \\}$，此时队首元素为 $-1$；\n(4) 将 $-3$ 入队，同理 $-3 < -1$，所以将 $-1$ 出队，此时$q = \\{ -3 \\},p = \\{ 4 \\}$，队首元素为 $-3$；\n(5) 将 $5$ 入队，此时$q = \\{ -3,5 \\},p = \\{ 4,5 \\}$，队首元素为 $-3$；\n(6) 将 $3$ 入队，由于 $3 < 5$，所以$q = \\{ -3,3 \\},p = \\{ 4,6 \\}$，队首元素为 $-3$；\n(7) 将 $6$ 入队，由于 $4 \\leqslant 7 - 3$，也就是 $-3$ 已经不在窗口中了，所以弹出 $-3$ ，此时$q = \\{ 3,6 \\},p = \\{ 6,7 \\}$，队首元素为 $3$；\n(8) 将 $7$ 入队，此时$q = \\{ 3,6,7 \\},p = \\{ 6,7,8 \\}$，队首元素为 $3$；\n可以观察到每一次操作的队首元素都是当前窗口中的最小值（除了(1)(2)，因为此时已经入队的元素个数少于窗口大小）。我们可以简单总结以下这些操作：设元素总数为 $n$，窗口大小为 $m$，对于一个即将入队的元素 $x_i$ ，如果队尾元素满足 $x_i < q_{back}$，那么弹出队尾元素，如果队首元素对应的在原数列中的位置 $p_{front} \\leqslant i - m$，那么弹出队首元素，然后将 $x_i$ 加入到 $q$ 的队尾，$i$ 加入到 $p$ 的队尾，如果 $x_i \\geqslant m$，则队首元素就是当前窗口中的最小元素。\n同理，我们也可以推出最大值的求法。下面上代码：\n``` cpp\n#include<cstdio>\nusing namespace std;\nint n,m,a[1000001],q[1000001],p[1000001],T,R;\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n;++i)\n    {\n        scanf(\"%d\",&a[i]);\n    }\n    T=0,R=-1;\n    for(int i=1;i<=n;++i)\n    {\n        while(T<=R&&p[T]<=i-m) ++T;\n        while(T<=R&&q[R]>a[i]) --R;\n        q[++R]=a[i];\n        p[R]=i;\n        if(i>=m) printf(\"%d \",q[T]);\n    }\n    printf(\"\\n\");\n    T=0,R=-1;\n    for(int i=1;i<=n;++i)\n    {\n        while(T<=R&&p[T]<=i-m) ++T;\n        while(T<=R&&q[R]<a[i]) --R;\n        q[++R]=a[i];\n        p[R]=i;\n        if(i>=m) printf(\"%d \",q[T]);\n    }\n    return 0;\n}\n```\n## 单调队列优化多重背包\n单调队列如何能和背包扯上关系的？设这件物品体积为 $v$，价值为 $w$，数量为$k$，我们来看一下多重背包的状态转移方程：\n$f[m] = \\max(f[m], f[m-v]+w, f[m-2\\times v]+2\\times w, f[m-3\\times v]+3\\times w,\\cdots)$\n将 $m$ 换为其他数，我们就可以得到：\n$f[j]=f[j]$\n$f[j+v]=\\max(f[j]+w,f[j+v])$\n$f[j+2\\times v]=\\max(f[j]+2\\times w,f[j+v]+w,f[j+2\\times v])$\n$f[j+3\\times v]=\\max(f[j]+3\\times w,f[j+v]+2\\times w,f[j+2\\times v]+w,f[j+3\\times v])$\n稍加转换，可得：\n$f[j+0\\times v]=\\max(f[j])$\n$f[j+1\\times v]=\\max(f[j],f[j+v]-w)+w$\n$f[j+2\\times v]=\\max(f[j],f[j+v]-w,f[j+2\\times v]-2\\times w)+2\\times w$\n$f[j+3\\times v]=\\max(f[j],f[j+v]-w,f[j+2\\times v]-2\\times w,f[j+3\\times v]-3\\times w)+3\\times w$\n是不是惊人的相似。\n这样就可以得到：\n$f[j+k\\times v]=\\max(f[j],f[j+v]-w,f[j+2\\times v]-2\\times w,f[j+3\\times v]-3\\times w,\\cdots,f[j+k\\times v]-k\\times w)+k\\times w$\n我们就可以看成有一个大小为 $k$的窗口在数列上扫过，每一个状态对应一个窗口。这样这个问题就成功地转换成了单调队列的问题了。\n``` cpp\n#include<cstdio>\nusing namespace std;\nint n,m,q[1000001],p[1000001],T=-1,R=0,f[100001];\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n;++i)\n    {\n        int a,b,c;\n        scanf(\"%d%d%d\",&b,&a,&c);\n        for(int j=0;j<a;++j)\n        {\n            T=0;\n            R=-1;\n            for(int k=j;k<=m;k+=a)\n            {\n                while(T<=R&&k-p[T]>a*c) ++T;\n                while(T<=R&&q[R]+(k-p[R])/a*b<=f[k]) --R;\n                p[++R]=k;\n                q[R]=f[k];\n                f[k]=q[T]+(k-p[T])/a*b;\n            }\n        }\n    }\n    printf(\"%d\",f[m]);\n    return 0;\n}\n```","slug":"Monotone-queue-optimization-knapsack","published":1,"updated":"2022-11-28T13:47:47.407Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cleid927j000c2sjf824b1rcu","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>多重背包问题的时间复杂度为 $O(nm^2)$，复杂度很高，所以我们需要将其优化。其中一种办法就是使用单调队列优化，可以使复杂度达到 $O(nm)$。</p>\n<h2 id=\"单调队列\"><a href=\"#单调队列\" class=\"headerlink\" title=\"单调队列\"></a>单调队列</h2><p>单调队列的一个元素有两个值：元素的值和位置（下标），单调队列会保证队首元素是原数列中值最小（或最大）的。单调队列的作用可以看下面的模板题：<br><a href=\"https://www.luogu.com.cn/problem/P1886\">P1886 滑动窗口 &#x2F;【模板】单调队列</a><br>有一个长为 $n$ 的序列 $a$，以及一个大小为 $k$ 的窗口。现在这个从左边开始向右滑动，每次滑动一个单位，求出每次滑动后窗口中的最大值和最小值。<br>了解了单调队列的用途，我们以样例为例来看它如何实现。STL中的双端队列可以实现单调队列，但是常数不得不说有一点大，所以一般单调队列都用手写队列来实现。<br>$\\text{1 3 -1 -3 5 3 6 7}$<br>首先定义两个队列 $p$ 与 $q$（也可以定义结构体队列），$p$ 中是每个元素在原数列的位置，$q$ 中是每个元素的值。<br>(1) 将 $1$ 入队，$q &#x3D; { 1 },p &#x3D; { 1 }$，此时队首元素为 $1$；<br>(2) 将 $3$ 入队，由于 $3 &gt; 1$，所以 $q &#x3D; { 1,3 },p &#x3D; { 1,2 }$，此时队首元素为 $1$；<br>(3) 将 $-1$ 入队，由于 $-1 &lt; 3,-1 &lt; 1$，所以 $1$ 和 $3$ 都出队，$q &#x3D; { -1 },p &#x3D; { 3 }$，此时队首元素为 $-1$；<br>(4) 将 $-3$ 入队，同理 $-3 &lt; -1$，所以将 $-1$ 出队，此时$q &#x3D; { -3 },p &#x3D; { 4 }$，队首元素为 $-3$；<br>(5) 将 $5$ 入队，此时$q &#x3D; { -3,5 },p &#x3D; { 4,5 }$，队首元素为 $-3$；<br>(6) 将 $3$ 入队，由于 $3 &lt; 5$，所以$q &#x3D; { -3,3 },p &#x3D; { 4,6 }$，队首元素为 $-3$；<br>(7) 将 $6$ 入队，由于 $4 \\leqslant 7 - 3$，也就是 $-3$ 已经不在窗口中了，所以弹出 $-3$ ，此时$q &#x3D; { 3,6 },p &#x3D; { 6,7 }$，队首元素为 $3$；<br>(8) 将 $7$ 入队，此时$q &#x3D; { 3,6,7 },p &#x3D; { 6,7,8 }$，队首元素为 $3$；<br>可以观察到每一次操作的队首元素都是当前窗口中的最小值（除了(1)(2)，因为此时已经入队的元素个数少于窗口大小）。我们可以简单总结以下这些操作：设元素总数为 $n$，窗口大小为 $m$，对于一个即将入队的元素 $x_i$ ，如果队尾元素满足 $x_i &lt; q_{back}$，那么弹出队尾元素，如果队首元素对应的在原数列中的位置 $p_{front} \\leqslant i - m$，那么弹出队首元素，然后将 $x_i$ 加入到 $q$ 的队尾，$i$ 加入到 $p$ 的队尾，如果 $x_i \\geqslant m$，则队首元素就是当前窗口中的最小元素。<br>同理，我们也可以推出最大值的求法。下面上代码：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m,a[<span class=\"number\">1000001</span>],q[<span class=\"number\">1000001</span>],p[<span class=\"number\">1000001</span>],T,R;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    T=<span class=\"number\">0</span>,R=<span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(T&lt;=R&amp;&amp;p[T]&lt;=i-m) ++T;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(T&lt;=R&amp;&amp;q[R]&gt;a[i]) --R;</span><br><span class=\"line\">        q[++R]=a[i];</span><br><span class=\"line\">        p[R]=i;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i&gt;=m) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>,q[T]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">    T=<span class=\"number\">0</span>,R=<span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(T&lt;=R&amp;&amp;p[T]&lt;=i-m) ++T;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(T&lt;=R&amp;&amp;q[R]&lt;a[i]) --R;</span><br><span class=\"line\">        q[++R]=a[i];</span><br><span class=\"line\">        p[R]=i;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i&gt;=m) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>,q[T]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"单调队列优化多重背包\"><a href=\"#单调队列优化多重背包\" class=\"headerlink\" title=\"单调队列优化多重背包\"></a>单调队列优化多重背包</h2><p>单调队列如何能和背包扯上关系的？设这件物品体积为 $v$，价值为 $w$，数量为$k$，我们来看一下多重背包的状态转移方程：<br>$f[m] &#x3D; \\max(f[m], f[m-v]+w, f[m-2\\times v]+2\\times w, f[m-3\\times v]+3\\times w,\\cdots)$<br>将 $m$ 换为其他数，我们就可以得到：<br>$f[j]&#x3D;f[j]$<br>$f[j+v]&#x3D;\\max(f[j]+w,f[j+v])$<br>$f[j+2\\times v]&#x3D;\\max(f[j]+2\\times w,f[j+v]+w,f[j+2\\times v])$<br>$f[j+3\\times v]&#x3D;\\max(f[j]+3\\times w,f[j+v]+2\\times w,f[j+2\\times v]+w,f[j+3\\times v])$<br>稍加转换，可得：<br>$f[j+0\\times v]&#x3D;\\max(f[j])$<br>$f[j+1\\times v]&#x3D;\\max(f[j],f[j+v]-w)+w$<br>$f[j+2\\times v]&#x3D;\\max(f[j],f[j+v]-w,f[j+2\\times v]-2\\times w)+2\\times w$<br>$f[j+3\\times v]&#x3D;\\max(f[j],f[j+v]-w,f[j+2\\times v]-2\\times w,f[j+3\\times v]-3\\times w)+3\\times w$<br>是不是惊人的相似。<br>这样就可以得到：<br>$f[j+k\\times v]&#x3D;\\max(f[j],f[j+v]-w,f[j+2\\times v]-2\\times w,f[j+3\\times v]-3\\times w,\\cdots,f[j+k\\times v]-k\\times w)+k\\times w$<br>我们就可以看成有一个大小为 $k$的窗口在数列上扫过，每一个状态对应一个窗口。这样这个问题就成功地转换成了单调队列的问题了。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m,q[<span class=\"number\">1000001</span>],p[<span class=\"number\">1000001</span>],T=<span class=\"number\">-1</span>,R=<span class=\"number\">0</span>,f[<span class=\"number\">100001</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> a,b,c;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>,&amp;b,&amp;a,&amp;c);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;a;++j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            T=<span class=\"number\">0</span>;</span><br><span class=\"line\">            R=<span class=\"number\">-1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> k=j;k&lt;=m;k+=a)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">while</span>(T&lt;=R&amp;&amp;k-p[T]&gt;a*c) ++T;</span><br><span class=\"line\">                <span class=\"keyword\">while</span>(T&lt;=R&amp;&amp;q[R]+(k-p[R])/a*b&lt;=f[k]) --R;</span><br><span class=\"line\">                p[++R]=k;</span><br><span class=\"line\">                q[R]=f[k];</span><br><span class=\"line\">                f[k]=q[T]+(k-p[T])/a*b;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,f[m]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>多重背包问题的时间复杂度为 $O(nm^2)$，复杂度很高，所以我们需要将其优化。其中一种办法就是使用单调队列优化，可以使复杂度达到 $O(nm)$。</p>\n<h2 id=\"单调队列\"><a href=\"#单调队列\" class=\"headerlink\" title=\"单调队列\"></a>单调队列</h2><p>单调队列的一个元素有两个值：元素的值和位置（下标），单调队列会保证队首元素是原数列中值最小（或最大）的。单调队列的作用可以看下面的模板题：<br><a href=\"https://www.luogu.com.cn/problem/P1886\">P1886 滑动窗口 &#x2F;【模板】单调队列</a><br>有一个长为 $n$ 的序列 $a$，以及一个大小为 $k$ 的窗口。现在这个从左边开始向右滑动，每次滑动一个单位，求出每次滑动后窗口中的最大值和最小值。<br>了解了单调队列的用途，我们以样例为例来看它如何实现。STL中的双端队列可以实现单调队列，但是常数不得不说有一点大，所以一般单调队列都用手写队列来实现。<br>$\\text{1 3 -1 -3 5 3 6 7}$<br>首先定义两个队列 $p$ 与 $q$（也可以定义结构体队列），$p$ 中是每个元素在原数列的位置，$q$ 中是每个元素的值。<br>(1) 将 $1$ 入队，$q &#x3D; { 1 },p &#x3D; { 1 }$，此时队首元素为 $1$；<br>(2) 将 $3$ 入队，由于 $3 &gt; 1$，所以 $q &#x3D; { 1,3 },p &#x3D; { 1,2 }$，此时队首元素为 $1$；<br>(3) 将 $-1$ 入队，由于 $-1 &lt; 3,-1 &lt; 1$，所以 $1$ 和 $3$ 都出队，$q &#x3D; { -1 },p &#x3D; { 3 }$，此时队首元素为 $-1$；<br>(4) 将 $-3$ 入队，同理 $-3 &lt; -1$，所以将 $-1$ 出队，此时$q &#x3D; { -3 },p &#x3D; { 4 }$，队首元素为 $-3$；<br>(5) 将 $5$ 入队，此时$q &#x3D; { -3,5 },p &#x3D; { 4,5 }$，队首元素为 $-3$；<br>(6) 将 $3$ 入队，由于 $3 &lt; 5$，所以$q &#x3D; { -3,3 },p &#x3D; { 4,6 }$，队首元素为 $-3$；<br>(7) 将 $6$ 入队，由于 $4 \\leqslant 7 - 3$，也就是 $-3$ 已经不在窗口中了，所以弹出 $-3$ ，此时$q &#x3D; { 3,6 },p &#x3D; { 6,7 }$，队首元素为 $3$；<br>(8) 将 $7$ 入队，此时$q &#x3D; { 3,6,7 },p &#x3D; { 6,7,8 }$，队首元素为 $3$；<br>可以观察到每一次操作的队首元素都是当前窗口中的最小值（除了(1)(2)，因为此时已经入队的元素个数少于窗口大小）。我们可以简单总结以下这些操作：设元素总数为 $n$，窗口大小为 $m$，对于一个即将入队的元素 $x_i$ ，如果队尾元素满足 $x_i &lt; q_{back}$，那么弹出队尾元素，如果队首元素对应的在原数列中的位置 $p_{front} \\leqslant i - m$，那么弹出队首元素，然后将 $x_i$ 加入到 $q$ 的队尾，$i$ 加入到 $p$ 的队尾，如果 $x_i \\geqslant m$，则队首元素就是当前窗口中的最小元素。<br>同理，我们也可以推出最大值的求法。下面上代码：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m,a[<span class=\"number\">1000001</span>],q[<span class=\"number\">1000001</span>],p[<span class=\"number\">1000001</span>],T,R;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    T=<span class=\"number\">0</span>,R=<span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(T&lt;=R&amp;&amp;p[T]&lt;=i-m) ++T;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(T&lt;=R&amp;&amp;q[R]&gt;a[i]) --R;</span><br><span class=\"line\">        q[++R]=a[i];</span><br><span class=\"line\">        p[R]=i;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i&gt;=m) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>,q[T]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">    T=<span class=\"number\">0</span>,R=<span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(T&lt;=R&amp;&amp;p[T]&lt;=i-m) ++T;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(T&lt;=R&amp;&amp;q[R]&lt;a[i]) --R;</span><br><span class=\"line\">        q[++R]=a[i];</span><br><span class=\"line\">        p[R]=i;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i&gt;=m) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>,q[T]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"单调队列优化多重背包\"><a href=\"#单调队列优化多重背包\" class=\"headerlink\" title=\"单调队列优化多重背包\"></a>单调队列优化多重背包</h2><p>单调队列如何能和背包扯上关系的？设这件物品体积为 $v$，价值为 $w$，数量为$k$，我们来看一下多重背包的状态转移方程：<br>$f[m] &#x3D; \\max(f[m], f[m-v]+w, f[m-2\\times v]+2\\times w, f[m-3\\times v]+3\\times w,\\cdots)$<br>将 $m$ 换为其他数，我们就可以得到：<br>$f[j]&#x3D;f[j]$<br>$f[j+v]&#x3D;\\max(f[j]+w,f[j+v])$<br>$f[j+2\\times v]&#x3D;\\max(f[j]+2\\times w,f[j+v]+w,f[j+2\\times v])$<br>$f[j+3\\times v]&#x3D;\\max(f[j]+3\\times w,f[j+v]+2\\times w,f[j+2\\times v]+w,f[j+3\\times v])$<br>稍加转换，可得：<br>$f[j+0\\times v]&#x3D;\\max(f[j])$<br>$f[j+1\\times v]&#x3D;\\max(f[j],f[j+v]-w)+w$<br>$f[j+2\\times v]&#x3D;\\max(f[j],f[j+v]-w,f[j+2\\times v]-2\\times w)+2\\times w$<br>$f[j+3\\times v]&#x3D;\\max(f[j],f[j+v]-w,f[j+2\\times v]-2\\times w,f[j+3\\times v]-3\\times w)+3\\times w$<br>是不是惊人的相似。<br>这样就可以得到：<br>$f[j+k\\times v]&#x3D;\\max(f[j],f[j+v]-w,f[j+2\\times v]-2\\times w,f[j+3\\times v]-3\\times w,\\cdots,f[j+k\\times v]-k\\times w)+k\\times w$<br>我们就可以看成有一个大小为 $k$的窗口在数列上扫过，每一个状态对应一个窗口。这样这个问题就成功地转换成了单调队列的问题了。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m,q[<span class=\"number\">1000001</span>],p[<span class=\"number\">1000001</span>],T=<span class=\"number\">-1</span>,R=<span class=\"number\">0</span>,f[<span class=\"number\">100001</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> a,b,c;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>,&amp;b,&amp;a,&amp;c);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;a;++j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            T=<span class=\"number\">0</span>;</span><br><span class=\"line\">            R=<span class=\"number\">-1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> k=j;k&lt;=m;k+=a)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">while</span>(T&lt;=R&amp;&amp;k-p[T]&gt;a*c) ++T;</span><br><span class=\"line\">                <span class=\"keyword\">while</span>(T&lt;=R&amp;&amp;q[R]+(k-p[R])/a*b&lt;=f[k]) --R;</span><br><span class=\"line\">                p[++R]=k;</span><br><span class=\"line\">                q[R]=f[k];</span><br><span class=\"line\">                f[k]=q[T]+(k-p[T])/a*b;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,f[m]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"P1231 教辅的组成","date":"2022-04-16T11:14:44.000Z","description":" ","_content":"\n[P1231 教辅的组成](https://www.luogu.com.cn/problem/P1231)\n## 分析\n这道题咋一看非常简单，只需要将书和练习册、答案的对应关系转换成边，每条边容量为 $1$，规定一个顺序：$\\text{源点} \\rightarrow \\text{练习册} \\rightarrow \\text{书}\\rightarrow \\text{答案} \\rightarrow \\text{汇点}$。但是我们发现，如果简单地按照上面这种方式建图，可能有多于 $1$ 的流量流过一本书，也就是这本书被选了两次，这是不允许的。如何解决？这就要用到最大流的一个经典思想：拆点。\n![1](/post-images/P1231-solution-1.png?400x)\n拆点的思想就是把一个点拆成两个点，其中入边全部连在一个点，出边连在另一个点，并把两个点用容量为 $1$ 的边相连，这样就可以保证流过每个点的流量最多为 $1$。将这个思想加入到上面建的图中，就可以解决这个问题了。\n## code\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<queue>\nusing namespace std;\nint n,n1,n2,n3,m1,m2,p=1,s1,s2,t[10001],f[10001];\nstruct str\n{\n    int m,q,r;\n}a[1000001];\nvoid road(int x,int y,int r)\n{\n    a[++p].m=y;\n    a[p].q=t[x];\n    t[x]=p;\n    a[p].r=r;\n}\nbool bfs()\n{\n    queue<int> Q;\n    Q.push(s1);\n    for(int i=1;i<=n;++i) f[i]=0;\n    f[s1]=1;\n    while(!Q.empty())\n    {\n        int k=Q.front();\n        Q.pop();\n        for(int i=t[k];i!=0;i=a[i].q)\n        {\n            if(f[a[i].m]==0&&a[i].r!=0)\n            {\n                f[a[i].m]=f[k]+1;\n                Q.push(a[i].m);\n            }\n        }\n    }\n    return f[s2]!=0;\n}\nint dfs(int x,int r)\n{\n    if(x==s2) return r;\n    int s=0;\n    for(int i=t[x];i!=0;i=a[i].q)\n    {\n        if(f[a[i].m]==f[x]+1&&a[i].r!=0)\n        {\n            int z=dfs(a[i].m,min(r,a[i].r));\n            if(z!=0)\n            {\n                a[i].r-=z;\n                a[i^1].r+=z;\n                r-=z;\n                s+=z;\n            }\n        }\n    }\n    return s;\n}\nint main()\n{\n    scanf(\"%d%d%d%d\",&n1,&n2,&n3,&m1);\n    n=n1*2+n2+n3+2;\n    s1=1;\n    s2=n;\n    for(int i=1;i<=m1;++i)\n    {\n        int x,y;\n        scanf(\"%d%d\",&x,&y);\n        road(y+n1*2+1,x+1,1);\n        road(x+1,y+n1*2+1,0);\n    }\n    scanf(\"%d\",&m2);\n    for(int i=1;i<=m2;++i)\n    {\n        int x,y;\n        scanf(\"%d%d\",&x,&y);\n        road(x+n1+1,y+n1*2+n2+1,1);\n        road(y+n1*2+n2+1,x+n1+1,0);\n    }\n    for(int i=1;i<=n1;++i)\n    {\n        road(i+1,i+n1+1,1);\n        road(i+n1+1,i+1,0);\n    }\n    for(int i=1;i<=n2;++i)\n    {\n        road(1,i+n1*2+1,1);\n        road(i+n1*2+1,1,0);\n    }\n    for(int i=1;i<=n3;++i)\n    {\n        road(i+n1*2+n2+1,n,1);\n        road(n,i+n1*2+n2+1,0);\n    }\n    int r=0;\n    while(bfs())\n    {\n        r+=dfs(s1,1e9);\n    }\n    printf(\"%d\",r);\n    return 0;\n}\n```","source":"_posts/P1231-solution.md","raw":"---\ntitle: 'P1231 教辅的组成'\ndate: 2022-04-16 19:14:44\ntags: [网络流,最大流]\ndescription: ' '\n---\n\n[P1231 教辅的组成](https://www.luogu.com.cn/problem/P1231)\n## 分析\n这道题咋一看非常简单，只需要将书和练习册、答案的对应关系转换成边，每条边容量为 $1$，规定一个顺序：$\\text{源点} \\rightarrow \\text{练习册} \\rightarrow \\text{书}\\rightarrow \\text{答案} \\rightarrow \\text{汇点}$。但是我们发现，如果简单地按照上面这种方式建图，可能有多于 $1$ 的流量流过一本书，也就是这本书被选了两次，这是不允许的。如何解决？这就要用到最大流的一个经典思想：拆点。\n![1](/post-images/P1231-solution-1.png?400x)\n拆点的思想就是把一个点拆成两个点，其中入边全部连在一个点，出边连在另一个点，并把两个点用容量为 $1$ 的边相连，这样就可以保证流过每个点的流量最多为 $1$。将这个思想加入到上面建的图中，就可以解决这个问题了。\n## code\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<queue>\nusing namespace std;\nint n,n1,n2,n3,m1,m2,p=1,s1,s2,t[10001],f[10001];\nstruct str\n{\n    int m,q,r;\n}a[1000001];\nvoid road(int x,int y,int r)\n{\n    a[++p].m=y;\n    a[p].q=t[x];\n    t[x]=p;\n    a[p].r=r;\n}\nbool bfs()\n{\n    queue<int> Q;\n    Q.push(s1);\n    for(int i=1;i<=n;++i) f[i]=0;\n    f[s1]=1;\n    while(!Q.empty())\n    {\n        int k=Q.front();\n        Q.pop();\n        for(int i=t[k];i!=0;i=a[i].q)\n        {\n            if(f[a[i].m]==0&&a[i].r!=0)\n            {\n                f[a[i].m]=f[k]+1;\n                Q.push(a[i].m);\n            }\n        }\n    }\n    return f[s2]!=0;\n}\nint dfs(int x,int r)\n{\n    if(x==s2) return r;\n    int s=0;\n    for(int i=t[x];i!=0;i=a[i].q)\n    {\n        if(f[a[i].m]==f[x]+1&&a[i].r!=0)\n        {\n            int z=dfs(a[i].m,min(r,a[i].r));\n            if(z!=0)\n            {\n                a[i].r-=z;\n                a[i^1].r+=z;\n                r-=z;\n                s+=z;\n            }\n        }\n    }\n    return s;\n}\nint main()\n{\n    scanf(\"%d%d%d%d\",&n1,&n2,&n3,&m1);\n    n=n1*2+n2+n3+2;\n    s1=1;\n    s2=n;\n    for(int i=1;i<=m1;++i)\n    {\n        int x,y;\n        scanf(\"%d%d\",&x,&y);\n        road(y+n1*2+1,x+1,1);\n        road(x+1,y+n1*2+1,0);\n    }\n    scanf(\"%d\",&m2);\n    for(int i=1;i<=m2;++i)\n    {\n        int x,y;\n        scanf(\"%d%d\",&x,&y);\n        road(x+n1+1,y+n1*2+n2+1,1);\n        road(y+n1*2+n2+1,x+n1+1,0);\n    }\n    for(int i=1;i<=n1;++i)\n    {\n        road(i+1,i+n1+1,1);\n        road(i+n1+1,i+1,0);\n    }\n    for(int i=1;i<=n2;++i)\n    {\n        road(1,i+n1*2+1,1);\n        road(i+n1*2+1,1,0);\n    }\n    for(int i=1;i<=n3;++i)\n    {\n        road(i+n1*2+n2+1,n,1);\n        road(n,i+n1*2+n2+1,0);\n    }\n    int r=0;\n    while(bfs())\n    {\n        r+=dfs(s1,1e9);\n    }\n    printf(\"%d\",r);\n    return 0;\n}\n```","slug":"P1231-solution","published":1,"updated":"2023-03-15T01:57:00.433Z","_id":"cleid927k000e2sjfevbr0nyb","comments":1,"layout":"post","photos":[],"link":"","content":"<p><a href=\"https://www.luogu.com.cn/problem/P1231\">P1231 教辅的组成</a></p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>这道题咋一看非常简单，只需要将书和练习册、答案的对应关系转换成边，每条边容量为 $1$，规定一个顺序：$\\text{源点} \\rightarrow \\text{练习册} \\rightarrow \\text{书}\\rightarrow \\text{答案} \\rightarrow \\text{汇点}$。但是我们发现，如果简单地按照上面这种方式建图，可能有多于 $1$ 的流量流过一本书，也就是这本书被选了两次，这是不允许的。如何解决？这就要用到最大流的一个经典思想：拆点。<br><img src=\"/post-images/P1231-solution-1.png?400x\" alt=\"1\"><br>拆点的思想就是把一个点拆成两个点，其中入边全部连在一个点，出边连在另一个点，并把两个点用容量为 $1$ 的边相连，这样就可以保证流过每个点的流量最多为 $1$。将这个思想加入到上面建的图中，就可以解决这个问题了。</p>\n<h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">int</span> n,n1,n2,n3,m1,m2,p=<span class=\"number\">1</span>,s1,s2,t[<span class=\"number\">10001</span>],f[<span class=\"number\">10001</span>];</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">str</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> m,q,r;</span><br><span class=\"line\">&#125;a[<span class=\"number\">1000001</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">road</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y,<span class=\"type\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    a[++p].m=y;</span><br><span class=\"line\">    a[p].q=t[x];</span><br><span class=\"line\">    t[x]=p;</span><br><span class=\"line\">    a[p].r=r;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">bfs</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    queue&lt;<span class=\"type\">int</span>&gt; Q;</span><br><span class=\"line\">    Q.<span class=\"built_in\">push</span>(s1);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i) f[i]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    f[s1]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!Q.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> k=Q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">        Q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t[k];i!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(f[a[i].m]==<span class=\"number\">0</span>&amp;&amp;a[i].r!=<span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                f[a[i].m]=f[k]+<span class=\"number\">1</span>;</span><br><span class=\"line\">                Q.<span class=\"built_in\">push</span>(a[i].m);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> f[s2]!=<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x==s2) <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">    <span class=\"type\">int</span> s=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t[x];i!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(f[a[i].m]==f[x]+<span class=\"number\">1</span>&amp;&amp;a[i].r!=<span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> z=<span class=\"built_in\">dfs</span>(a[i].m,<span class=\"built_in\">min</span>(r,a[i].r));</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(z!=<span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                a[i].r-=z;</span><br><span class=\"line\">                a[i^<span class=\"number\">1</span>].r+=z;</span><br><span class=\"line\">                r-=z;</span><br><span class=\"line\">                s+=z;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d%d&quot;</span>,&amp;n1,&amp;n2,&amp;n3,&amp;m1);</span><br><span class=\"line\">    n=n1*<span class=\"number\">2</span>+n2+n3+<span class=\"number\">2</span>;</span><br><span class=\"line\">    s1=<span class=\"number\">1</span>;</span><br><span class=\"line\">    s2=n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m1;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x,y;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;x,&amp;y);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(y+n1*<span class=\"number\">2</span>+<span class=\"number\">1</span>,x+<span class=\"number\">1</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(x+<span class=\"number\">1</span>,y+n1*<span class=\"number\">2</span>+<span class=\"number\">1</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;m2);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m2;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x,y;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;x,&amp;y);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(x+n1+<span class=\"number\">1</span>,y+n1*<span class=\"number\">2</span>+n2+<span class=\"number\">1</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(y+n1*<span class=\"number\">2</span>+n2+<span class=\"number\">1</span>,x+n1+<span class=\"number\">1</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n1;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(i+<span class=\"number\">1</span>,i+n1+<span class=\"number\">1</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(i+n1+<span class=\"number\">1</span>,i+<span class=\"number\">1</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n2;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(<span class=\"number\">1</span>,i+n1*<span class=\"number\">2</span>+<span class=\"number\">1</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(i+n1*<span class=\"number\">2</span>+<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n3;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(i+n1*<span class=\"number\">2</span>+n2+<span class=\"number\">1</span>,n,<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(n,i+n1*<span class=\"number\">2</span>+n2+<span class=\"number\">1</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> r=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">bfs</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        r+=<span class=\"built_in\">dfs</span>(s1,<span class=\"number\">1e9</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,r);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://www.luogu.com.cn/problem/P1231\">P1231 教辅的组成</a></p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>这道题咋一看非常简单，只需要将书和练习册、答案的对应关系转换成边，每条边容量为 $1$，规定一个顺序：$\\text{源点} \\rightarrow \\text{练习册} \\rightarrow \\text{书}\\rightarrow \\text{答案} \\rightarrow \\text{汇点}$。但是我们发现，如果简单地按照上面这种方式建图，可能有多于 $1$ 的流量流过一本书，也就是这本书被选了两次，这是不允许的。如何解决？这就要用到最大流的一个经典思想：拆点。<br><img src=\"/post-images/P1231-solution-1.png?400x\" alt=\"1\"><br>拆点的思想就是把一个点拆成两个点，其中入边全部连在一个点，出边连在另一个点，并把两个点用容量为 $1$ 的边相连，这样就可以保证流过每个点的流量最多为 $1$。将这个思想加入到上面建的图中，就可以解决这个问题了。</p>\n<h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">int</span> n,n1,n2,n3,m1,m2,p=<span class=\"number\">1</span>,s1,s2,t[<span class=\"number\">10001</span>],f[<span class=\"number\">10001</span>];</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">str</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> m,q,r;</span><br><span class=\"line\">&#125;a[<span class=\"number\">1000001</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">road</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y,<span class=\"type\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    a[++p].m=y;</span><br><span class=\"line\">    a[p].q=t[x];</span><br><span class=\"line\">    t[x]=p;</span><br><span class=\"line\">    a[p].r=r;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">bfs</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    queue&lt;<span class=\"type\">int</span>&gt; Q;</span><br><span class=\"line\">    Q.<span class=\"built_in\">push</span>(s1);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i) f[i]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    f[s1]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!Q.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> k=Q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">        Q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t[k];i!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(f[a[i].m]==<span class=\"number\">0</span>&amp;&amp;a[i].r!=<span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                f[a[i].m]=f[k]+<span class=\"number\">1</span>;</span><br><span class=\"line\">                Q.<span class=\"built_in\">push</span>(a[i].m);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> f[s2]!=<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x==s2) <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">    <span class=\"type\">int</span> s=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t[x];i!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(f[a[i].m]==f[x]+<span class=\"number\">1</span>&amp;&amp;a[i].r!=<span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> z=<span class=\"built_in\">dfs</span>(a[i].m,<span class=\"built_in\">min</span>(r,a[i].r));</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(z!=<span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                a[i].r-=z;</span><br><span class=\"line\">                a[i^<span class=\"number\">1</span>].r+=z;</span><br><span class=\"line\">                r-=z;</span><br><span class=\"line\">                s+=z;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d%d&quot;</span>,&amp;n1,&amp;n2,&amp;n3,&amp;m1);</span><br><span class=\"line\">    n=n1*<span class=\"number\">2</span>+n2+n3+<span class=\"number\">2</span>;</span><br><span class=\"line\">    s1=<span class=\"number\">1</span>;</span><br><span class=\"line\">    s2=n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m1;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x,y;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;x,&amp;y);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(y+n1*<span class=\"number\">2</span>+<span class=\"number\">1</span>,x+<span class=\"number\">1</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(x+<span class=\"number\">1</span>,y+n1*<span class=\"number\">2</span>+<span class=\"number\">1</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;m2);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m2;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x,y;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;x,&amp;y);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(x+n1+<span class=\"number\">1</span>,y+n1*<span class=\"number\">2</span>+n2+<span class=\"number\">1</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(y+n1*<span class=\"number\">2</span>+n2+<span class=\"number\">1</span>,x+n1+<span class=\"number\">1</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n1;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(i+<span class=\"number\">1</span>,i+n1+<span class=\"number\">1</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(i+n1+<span class=\"number\">1</span>,i+<span class=\"number\">1</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n2;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(<span class=\"number\">1</span>,i+n1*<span class=\"number\">2</span>+<span class=\"number\">1</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(i+n1*<span class=\"number\">2</span>+<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n3;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(i+n1*<span class=\"number\">2</span>+n2+<span class=\"number\">1</span>,n,<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(n,i+n1*<span class=\"number\">2</span>+n2+<span class=\"number\">1</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> r=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">bfs</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        r+=<span class=\"built_in\">dfs</span>(s1,<span class=\"number\">1e9</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,r);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"P1251 餐巾计划问题","date":"2022-05-10T04:41:34.000Z","description":" ","_content":"\n[P1251 餐巾计划问题](https://www.luogu.com.cn/problem/P1251)\n## 分析\n这是一道及其经典的费用流问题，我们只需要把餐巾看做流量即可。但是我们会发现，餐巾还分为两类：一类是干净的餐巾，另一类是脏的餐巾，这两种不能混在一起。对于这种状态有分类的题目，我们最好使用分层图来解决，每一层都代表一种状态，这样就可以分开不同状态的流量了。这道题中由于每天早上需要赶紧餐巾，然后把脏餐巾送到晚上，而晚上收到脏餐巾，又要给其他早上提供干净餐巾，我们就可以把整个图拆成两部分：早上和晚上。\n然后我们要保证每天早上都有足够的干净餐巾，解决方法非常简单只需要从每天早上向汇点连边，容量为 $r_i$，同时从源点向晚上连边，容量为 $r_i$。但是这样一天用不完的餐巾就没法继续使用了，我们只需要从每天早上或晚上向下一条边连边，就表示我们可以把餐巾留到后面使用。\n解决了这些，剩下的我们按题意连边即可。要连的边有以下 $6$ 种。\n1. 第 $i$ 天早上向汇点连边，容量为 $r_i$，费用为 $0$。\n2. 源点向第 $i$ 天晚上连边，容量为 $r_i$，费用为 $0$。\n3. 第 $i$ 天晚上向第 $i+1$ 天晚上连边，容量为 $inf$，费用为 $0$。\n4. 源点向第 $i$ 天早上连边，容量为 $inf$，费用为 $p$。\n5. 第 $i$ 天晚上向第 $i+m$ 天早上连边，容量为 $inf$，费用为 $f$。\n6. 第 $i$ 天晚上向第 $i+n$ 天早上连边，容量为 $inf$，费用为 $s$。\n## code\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<queue>\nusing namespace std;\ntypedef long long ll;\nint n,N,s1,s2,p=1,t[10001],r[10001];\nll b[10001],f[10001],g[10001],w0,w1,w2,t1,t2;\nbool h[10001];\nstruct str\n{\n    int x,m,q;\n    ll r,w;\n}a[1000001];\nvoid road(int x,int y,ll r,ll w)\n{\n    a[++p].x=x;\n    a[p].m=y;\n    a[p].q=t[x];\n    t[x]=p;\n    a[p].r=r;\n    a[p].w=w;\n}\nbool SPFA()\n{\n    queue<int> Q;\n    Q.push(s1);\n    for(int i=1;i<=N;++i)\n    {\n        f[i]=1e18;\n        g[i]=1e18;\n        h[i]=false;\n        r[i]=0;\n    }\n    g[s1]=0;\n    h[s1]=true;\n    while(!Q.empty())\n    {\n        int k=Q.front();\n        Q.pop();\n        if(h[k]==false) continue;\n        h[k]=false;\n        for(int i=t[k];i!=0;i=a[i].q)\n        {\n            if(a[i].r>0&&g[k]+a[i].w<g[a[i].m])\n            {\n                f[a[i].m]=min(f[k],a[i].r);\n                g[a[i].m]=g[k]+a[i].w;\n                r[a[i].m]=i;\n                Q.push(a[i].m);\n                h[a[i].m]=true;\n            }\n        }\n    }\n    if(f[s2]!=1e18) return true;\n    return false;\n}\nint main()\n{\n    scanf(\"%d\",&n);\n    for(int i=1;i<=n;++i)\n    {\n        scanf(\"%lld\",&b[i]);\n    }\n    scanf(\"%lld%lld%lld%lld%lld\",&w0,&t1,&w1,&t2,&w2);\n    s1=n*2+1;\n    s2=n*2+2;\n    N=n*2+2;\n    for(int i=1;i<=n;++i)\n    {\n        road(i*2-1,s2,b[i],0);\n        road(s2,i*2-1,0,0);\n    }\n    for(int i=1;i<=n;++i)\n    {\n        road(s1,i*2,b[i],0);\n        road(i*2,s1,0,0);\n    }\n    for(int i=1;i<=n-1;++i)\n    {\n        road(i*2,(i+1)*2,1e18,0);\n        road((i+1)*2,i*2,0,0);\n    }\n    for(int i=1;i<=n;++i)\n    {\n        road(s1,i*2-1,1e18,w0);\n        road(i*2-1,s1,0,-w0);\n    }\n    for(int i=1;i<=n-t1;++i)\n    {\n        road(i*2,(i+t1)*2-1,1e18,w1);\n        road((i+t1)*2-1,i*2,0,-w1);\n    }\n    for(int i=1;i<=n-t2;++i)\n    {\n        road(i*2,(i+t2)*2-1,1e18,w2);\n        road((i+t2)*2-1,i*2,0,-w2);\n    }\n    ll w=0;\n    while(SPFA())\n    {\n        w+=f[s2]*g[s2];\n        int x=s2;\n        while(x!=s1)\n        {\n            a[r[x]].r-=f[s2];\n            a[r[x]^1].r+=f[s2];\n            x=a[r[x]].x;\n        }\n    }\n    printf(\"%lld\",w);\n    return 0;\n}\n```","source":"_posts/P1251-solution.md","raw":"---\ntitle: 'P1251 餐巾计划问题'\ndate: 2022-05-10 12:41:34\ntags: [网络流,费用流]\ndescription: ' '\n---\n\n[P1251 餐巾计划问题](https://www.luogu.com.cn/problem/P1251)\n## 分析\n这是一道及其经典的费用流问题，我们只需要把餐巾看做流量即可。但是我们会发现，餐巾还分为两类：一类是干净的餐巾，另一类是脏的餐巾，这两种不能混在一起。对于这种状态有分类的题目，我们最好使用分层图来解决，每一层都代表一种状态，这样就可以分开不同状态的流量了。这道题中由于每天早上需要赶紧餐巾，然后把脏餐巾送到晚上，而晚上收到脏餐巾，又要给其他早上提供干净餐巾，我们就可以把整个图拆成两部分：早上和晚上。\n然后我们要保证每天早上都有足够的干净餐巾，解决方法非常简单只需要从每天早上向汇点连边，容量为 $r_i$，同时从源点向晚上连边，容量为 $r_i$。但是这样一天用不完的餐巾就没法继续使用了，我们只需要从每天早上或晚上向下一条边连边，就表示我们可以把餐巾留到后面使用。\n解决了这些，剩下的我们按题意连边即可。要连的边有以下 $6$ 种。\n1. 第 $i$ 天早上向汇点连边，容量为 $r_i$，费用为 $0$。\n2. 源点向第 $i$ 天晚上连边，容量为 $r_i$，费用为 $0$。\n3. 第 $i$ 天晚上向第 $i+1$ 天晚上连边，容量为 $inf$，费用为 $0$。\n4. 源点向第 $i$ 天早上连边，容量为 $inf$，费用为 $p$。\n5. 第 $i$ 天晚上向第 $i+m$ 天早上连边，容量为 $inf$，费用为 $f$。\n6. 第 $i$ 天晚上向第 $i+n$ 天早上连边，容量为 $inf$，费用为 $s$。\n## code\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<queue>\nusing namespace std;\ntypedef long long ll;\nint n,N,s1,s2,p=1,t[10001],r[10001];\nll b[10001],f[10001],g[10001],w0,w1,w2,t1,t2;\nbool h[10001];\nstruct str\n{\n    int x,m,q;\n    ll r,w;\n}a[1000001];\nvoid road(int x,int y,ll r,ll w)\n{\n    a[++p].x=x;\n    a[p].m=y;\n    a[p].q=t[x];\n    t[x]=p;\n    a[p].r=r;\n    a[p].w=w;\n}\nbool SPFA()\n{\n    queue<int> Q;\n    Q.push(s1);\n    for(int i=1;i<=N;++i)\n    {\n        f[i]=1e18;\n        g[i]=1e18;\n        h[i]=false;\n        r[i]=0;\n    }\n    g[s1]=0;\n    h[s1]=true;\n    while(!Q.empty())\n    {\n        int k=Q.front();\n        Q.pop();\n        if(h[k]==false) continue;\n        h[k]=false;\n        for(int i=t[k];i!=0;i=a[i].q)\n        {\n            if(a[i].r>0&&g[k]+a[i].w<g[a[i].m])\n            {\n                f[a[i].m]=min(f[k],a[i].r);\n                g[a[i].m]=g[k]+a[i].w;\n                r[a[i].m]=i;\n                Q.push(a[i].m);\n                h[a[i].m]=true;\n            }\n        }\n    }\n    if(f[s2]!=1e18) return true;\n    return false;\n}\nint main()\n{\n    scanf(\"%d\",&n);\n    for(int i=1;i<=n;++i)\n    {\n        scanf(\"%lld\",&b[i]);\n    }\n    scanf(\"%lld%lld%lld%lld%lld\",&w0,&t1,&w1,&t2,&w2);\n    s1=n*2+1;\n    s2=n*2+2;\n    N=n*2+2;\n    for(int i=1;i<=n;++i)\n    {\n        road(i*2-1,s2,b[i],0);\n        road(s2,i*2-1,0,0);\n    }\n    for(int i=1;i<=n;++i)\n    {\n        road(s1,i*2,b[i],0);\n        road(i*2,s1,0,0);\n    }\n    for(int i=1;i<=n-1;++i)\n    {\n        road(i*2,(i+1)*2,1e18,0);\n        road((i+1)*2,i*2,0,0);\n    }\n    for(int i=1;i<=n;++i)\n    {\n        road(s1,i*2-1,1e18,w0);\n        road(i*2-1,s1,0,-w0);\n    }\n    for(int i=1;i<=n-t1;++i)\n    {\n        road(i*2,(i+t1)*2-1,1e18,w1);\n        road((i+t1)*2-1,i*2,0,-w1);\n    }\n    for(int i=1;i<=n-t2;++i)\n    {\n        road(i*2,(i+t2)*2-1,1e18,w2);\n        road((i+t2)*2-1,i*2,0,-w2);\n    }\n    ll w=0;\n    while(SPFA())\n    {\n        w+=f[s2]*g[s2];\n        int x=s2;\n        while(x!=s1)\n        {\n            a[r[x]].r-=f[s2];\n            a[r[x]^1].r+=f[s2];\n            x=a[r[x]].x;\n        }\n    }\n    printf(\"%lld\",w);\n    return 0;\n}\n```","slug":"P1251-solution","published":1,"updated":"2022-11-28T13:47:47.407Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cleid927k000g2sjf44n1be47","content":"<p><a href=\"https://www.luogu.com.cn/problem/P1251\">P1251 餐巾计划问题</a></p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>这是一道及其经典的费用流问题，我们只需要把餐巾看做流量即可。但是我们会发现，餐巾还分为两类：一类是干净的餐巾，另一类是脏的餐巾，这两种不能混在一起。对于这种状态有分类的题目，我们最好使用分层图来解决，每一层都代表一种状态，这样就可以分开不同状态的流量了。这道题中由于每天早上需要赶紧餐巾，然后把脏餐巾送到晚上，而晚上收到脏餐巾，又要给其他早上提供干净餐巾，我们就可以把整个图拆成两部分：早上和晚上。<br>然后我们要保证每天早上都有足够的干净餐巾，解决方法非常简单只需要从每天早上向汇点连边，容量为 $r_i$，同时从源点向晚上连边，容量为 $r_i$。但是这样一天用不完的餐巾就没法继续使用了，我们只需要从每天早上或晚上向下一条边连边，就表示我们可以把餐巾留到后面使用。<br>解决了这些，剩下的我们按题意连边即可。要连的边有以下 $6$ 种。</p>\n<ol>\n<li>第 $i$ 天早上向汇点连边，容量为 $r_i$，费用为 $0$。</li>\n<li>源点向第 $i$ 天晚上连边，容量为 $r_i$，费用为 $0$。</li>\n<li>第 $i$ 天晚上向第 $i+1$ 天晚上连边，容量为 $inf$，费用为 $0$。</li>\n<li>源点向第 $i$ 天早上连边，容量为 $inf$，费用为 $p$。</li>\n<li>第 $i$ 天晚上向第 $i+m$ 天早上连边，容量为 $inf$，费用为 $f$。</li>\n<li>第 $i$ 天晚上向第 $i+n$ 天早上连边，容量为 $inf$，费用为 $s$。</li>\n</ol>\n<h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> ll;</span><br><span class=\"line\"><span class=\"type\">int</span> n,N,s1,s2,p=<span class=\"number\">1</span>,t[<span class=\"number\">10001</span>],r[<span class=\"number\">10001</span>];</span><br><span class=\"line\">ll b[<span class=\"number\">10001</span>],f[<span class=\"number\">10001</span>],g[<span class=\"number\">10001</span>],w0,w1,w2,t1,t2;</span><br><span class=\"line\"><span class=\"type\">bool</span> h[<span class=\"number\">10001</span>];</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">str</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> x,m,q;</span><br><span class=\"line\">    ll r,w;</span><br><span class=\"line\">&#125;a[<span class=\"number\">1000001</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">road</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y,ll r,ll w)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    a[++p].x=x;</span><br><span class=\"line\">    a[p].m=y;</span><br><span class=\"line\">    a[p].q=t[x];</span><br><span class=\"line\">    t[x]=p;</span><br><span class=\"line\">    a[p].r=r;</span><br><span class=\"line\">    a[p].w=w;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">SPFA</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    queue&lt;<span class=\"type\">int</span>&gt; Q;</span><br><span class=\"line\">    Q.<span class=\"built_in\">push</span>(s1);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=N;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        f[i]=<span class=\"number\">1e18</span>;</span><br><span class=\"line\">        g[i]=<span class=\"number\">1e18</span>;</span><br><span class=\"line\">        h[i]=<span class=\"literal\">false</span>;</span><br><span class=\"line\">        r[i]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    g[s1]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    h[s1]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!Q.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> k=Q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">        Q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(h[k]==<span class=\"literal\">false</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        h[k]=<span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t[k];i!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(a[i].r&gt;<span class=\"number\">0</span>&amp;&amp;g[k]+a[i].w&lt;g[a[i].m])</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                f[a[i].m]=<span class=\"built_in\">min</span>(f[k],a[i].r);</span><br><span class=\"line\">                g[a[i].m]=g[k]+a[i].w;</span><br><span class=\"line\">                r[a[i].m]=i;</span><br><span class=\"line\">                Q.<span class=\"built_in\">push</span>(a[i].m);</span><br><span class=\"line\">                h[a[i].m]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(f[s2]!=<span class=\"number\">1e18</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%lld&quot;</span>,&amp;b[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%lld%lld%lld%lld%lld&quot;</span>,&amp;w0,&amp;t1,&amp;w1,&amp;t2,&amp;w2);</span><br><span class=\"line\">    s1=n*<span class=\"number\">2</span>+<span class=\"number\">1</span>;</span><br><span class=\"line\">    s2=n*<span class=\"number\">2</span>+<span class=\"number\">2</span>;</span><br><span class=\"line\">    N=n*<span class=\"number\">2</span>+<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(i*<span class=\"number\">2</span><span class=\"number\">-1</span>,s2,b[i],<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(s2,i*<span class=\"number\">2</span><span class=\"number\">-1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(s1,i*<span class=\"number\">2</span>,b[i],<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(i*<span class=\"number\">2</span>,s1,<span class=\"number\">0</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n<span class=\"number\">-1</span>;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(i*<span class=\"number\">2</span>,(i+<span class=\"number\">1</span>)*<span class=\"number\">2</span>,<span class=\"number\">1e18</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>((i+<span class=\"number\">1</span>)*<span class=\"number\">2</span>,i*<span class=\"number\">2</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(s1,i*<span class=\"number\">2</span><span class=\"number\">-1</span>,<span class=\"number\">1e18</span>,w0);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(i*<span class=\"number\">2</span><span class=\"number\">-1</span>,s1,<span class=\"number\">0</span>,-w0);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n-t1;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(i*<span class=\"number\">2</span>,(i+t1)*<span class=\"number\">2</span><span class=\"number\">-1</span>,<span class=\"number\">1e18</span>,w1);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>((i+t1)*<span class=\"number\">2</span><span class=\"number\">-1</span>,i*<span class=\"number\">2</span>,<span class=\"number\">0</span>,-w1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n-t2;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(i*<span class=\"number\">2</span>,(i+t2)*<span class=\"number\">2</span><span class=\"number\">-1</span>,<span class=\"number\">1e18</span>,w2);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>((i+t2)*<span class=\"number\">2</span><span class=\"number\">-1</span>,i*<span class=\"number\">2</span>,<span class=\"number\">0</span>,-w2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ll w=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">SPFA</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        w+=f[s2]*g[s2];</span><br><span class=\"line\">        <span class=\"type\">int</span> x=s2;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(x!=s1)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            a[r[x]].r-=f[s2];</span><br><span class=\"line\">            a[r[x]^<span class=\"number\">1</span>].r+=f[s2];</span><br><span class=\"line\">            x=a[r[x]].x;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld&quot;</span>,w);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://www.luogu.com.cn/problem/P1251\">P1251 餐巾计划问题</a></p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>这是一道及其经典的费用流问题，我们只需要把餐巾看做流量即可。但是我们会发现，餐巾还分为两类：一类是干净的餐巾，另一类是脏的餐巾，这两种不能混在一起。对于这种状态有分类的题目，我们最好使用分层图来解决，每一层都代表一种状态，这样就可以分开不同状态的流量了。这道题中由于每天早上需要赶紧餐巾，然后把脏餐巾送到晚上，而晚上收到脏餐巾，又要给其他早上提供干净餐巾，我们就可以把整个图拆成两部分：早上和晚上。<br>然后我们要保证每天早上都有足够的干净餐巾，解决方法非常简单只需要从每天早上向汇点连边，容量为 $r_i$，同时从源点向晚上连边，容量为 $r_i$。但是这样一天用不完的餐巾就没法继续使用了，我们只需要从每天早上或晚上向下一条边连边，就表示我们可以把餐巾留到后面使用。<br>解决了这些，剩下的我们按题意连边即可。要连的边有以下 $6$ 种。</p>\n<ol>\n<li>第 $i$ 天早上向汇点连边，容量为 $r_i$，费用为 $0$。</li>\n<li>源点向第 $i$ 天晚上连边，容量为 $r_i$，费用为 $0$。</li>\n<li>第 $i$ 天晚上向第 $i+1$ 天晚上连边，容量为 $inf$，费用为 $0$。</li>\n<li>源点向第 $i$ 天早上连边，容量为 $inf$，费用为 $p$。</li>\n<li>第 $i$ 天晚上向第 $i+m$ 天早上连边，容量为 $inf$，费用为 $f$。</li>\n<li>第 $i$ 天晚上向第 $i+n$ 天早上连边，容量为 $inf$，费用为 $s$。</li>\n</ol>\n<h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> ll;</span><br><span class=\"line\"><span class=\"type\">int</span> n,N,s1,s2,p=<span class=\"number\">1</span>,t[<span class=\"number\">10001</span>],r[<span class=\"number\">10001</span>];</span><br><span class=\"line\">ll b[<span class=\"number\">10001</span>],f[<span class=\"number\">10001</span>],g[<span class=\"number\">10001</span>],w0,w1,w2,t1,t2;</span><br><span class=\"line\"><span class=\"type\">bool</span> h[<span class=\"number\">10001</span>];</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">str</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> x,m,q;</span><br><span class=\"line\">    ll r,w;</span><br><span class=\"line\">&#125;a[<span class=\"number\">1000001</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">road</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y,ll r,ll w)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    a[++p].x=x;</span><br><span class=\"line\">    a[p].m=y;</span><br><span class=\"line\">    a[p].q=t[x];</span><br><span class=\"line\">    t[x]=p;</span><br><span class=\"line\">    a[p].r=r;</span><br><span class=\"line\">    a[p].w=w;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">SPFA</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    queue&lt;<span class=\"type\">int</span>&gt; Q;</span><br><span class=\"line\">    Q.<span class=\"built_in\">push</span>(s1);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=N;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        f[i]=<span class=\"number\">1e18</span>;</span><br><span class=\"line\">        g[i]=<span class=\"number\">1e18</span>;</span><br><span class=\"line\">        h[i]=<span class=\"literal\">false</span>;</span><br><span class=\"line\">        r[i]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    g[s1]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    h[s1]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!Q.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> k=Q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">        Q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(h[k]==<span class=\"literal\">false</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        h[k]=<span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t[k];i!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(a[i].r&gt;<span class=\"number\">0</span>&amp;&amp;g[k]+a[i].w&lt;g[a[i].m])</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                f[a[i].m]=<span class=\"built_in\">min</span>(f[k],a[i].r);</span><br><span class=\"line\">                g[a[i].m]=g[k]+a[i].w;</span><br><span class=\"line\">                r[a[i].m]=i;</span><br><span class=\"line\">                Q.<span class=\"built_in\">push</span>(a[i].m);</span><br><span class=\"line\">                h[a[i].m]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(f[s2]!=<span class=\"number\">1e18</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%lld&quot;</span>,&amp;b[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%lld%lld%lld%lld%lld&quot;</span>,&amp;w0,&amp;t1,&amp;w1,&amp;t2,&amp;w2);</span><br><span class=\"line\">    s1=n*<span class=\"number\">2</span>+<span class=\"number\">1</span>;</span><br><span class=\"line\">    s2=n*<span class=\"number\">2</span>+<span class=\"number\">2</span>;</span><br><span class=\"line\">    N=n*<span class=\"number\">2</span>+<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(i*<span class=\"number\">2</span><span class=\"number\">-1</span>,s2,b[i],<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(s2,i*<span class=\"number\">2</span><span class=\"number\">-1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(s1,i*<span class=\"number\">2</span>,b[i],<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(i*<span class=\"number\">2</span>,s1,<span class=\"number\">0</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n<span class=\"number\">-1</span>;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(i*<span class=\"number\">2</span>,(i+<span class=\"number\">1</span>)*<span class=\"number\">2</span>,<span class=\"number\">1e18</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>((i+<span class=\"number\">1</span>)*<span class=\"number\">2</span>,i*<span class=\"number\">2</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(s1,i*<span class=\"number\">2</span><span class=\"number\">-1</span>,<span class=\"number\">1e18</span>,w0);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(i*<span class=\"number\">2</span><span class=\"number\">-1</span>,s1,<span class=\"number\">0</span>,-w0);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n-t1;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(i*<span class=\"number\">2</span>,(i+t1)*<span class=\"number\">2</span><span class=\"number\">-1</span>,<span class=\"number\">1e18</span>,w1);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>((i+t1)*<span class=\"number\">2</span><span class=\"number\">-1</span>,i*<span class=\"number\">2</span>,<span class=\"number\">0</span>,-w1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n-t2;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(i*<span class=\"number\">2</span>,(i+t2)*<span class=\"number\">2</span><span class=\"number\">-1</span>,<span class=\"number\">1e18</span>,w2);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>((i+t2)*<span class=\"number\">2</span><span class=\"number\">-1</span>,i*<span class=\"number\">2</span>,<span class=\"number\">0</span>,-w2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ll w=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">SPFA</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        w+=f[s2]*g[s2];</span><br><span class=\"line\">        <span class=\"type\">int</span> x=s2;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(x!=s1)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            a[r[x]].r-=f[s2];</span><br><span class=\"line\">            a[r[x]^<span class=\"number\">1</span>].r+=f[s2];</span><br><span class=\"line\">            x=a[r[x]].x;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld&quot;</span>,w);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"P1343 地震逃生","date":"2022-04-13T05:37:16.000Z","description":" ","_content":"\n[P1343 地震逃生](https://www.luogu.com.cn/problem/P1343)\n## 分析\n这道题我们把学生看成流量，可以发现这道题就是最大流模板题，注意处理分的批数。\n## code\n```cpp\n#include<cmath>\n#include<cstdio>\n#include<queue>\nusing namespace std;\nint n,m,p=1,t[10001],f[10001];\nstruct str\n{\n    int m,q,w;\n}a[100001];\nvoid road(int x,int y,int w)\n{\n    a[++p].m=y;\n    a[p].q=t[x];\n    t[x]=p;\n    a[p].w=w;\n}\nbool bfs()\n{\n    queue<int> q;\n    q.push(1);\n    for(int i=1;i<=n;++i) f[i]=0;\n    f[1]=1;\n    while(!q.empty())\n    {\n        int k=q.front();\n        q.pop();\n        for(int i=t[k];i!=0;i=a[i].q)\n        {\n            if(f[a[i].m]==0&&a[i].w>0)\n            {\n                f[a[i].m]=f[k]+1;\n                q.push(a[i].m);\n            }\n        }\n    }\n    if(f[n]!=0) return true;\n    return false;\n}\nint dfs(int x,int w)\n{\n    if(x==n) return w;\n    int s=0;\n    for(int i=t[x];i!=0;i=a[i].q)\n    {\n        if(f[a[i].m]==f[x]+1&&a[i].w>0)\n        {\n            int z=dfs(a[i].m,min(w,a[i].w));\n            if(z!=0)\n            {\n                a[i].w-=z;\n                a[i^1].w+=z;\n                w-=z;\n                s+=z;\n            }\n            else f[a[i].m]=0;\n        }\n    }\n    return s;\n}\nint main()\n{\n    int r;\n    scanf(\"%d%d%d\",&n,&m,&r);\n    for(int i=1;i<=m;++i)\n    {\n        int x,y,w;\n        scanf(\"%d%d%d\",&x,&y,&w);\n        road(x,y,w);\n        road(y,x,0);\n    }\n    int s=0;\n    while(bfs()==true)\n    {\n        s+=dfs(1,1e9);\n    }\n    if(s==0) printf(\"Orz Ni Jinan Saint Cow!\");\n    else printf(\"%d %d\",s,int(ceil(r*1.0/s)));\n}\n```","source":"_posts/P1343-solution.md","raw":"---\ntitle: 'P1343 地震逃生'\ndate: 2022-04-13 13:37:16\ntags: [网络流,最大流]\ndescription: ' '\n---\n\n[P1343 地震逃生](https://www.luogu.com.cn/problem/P1343)\n## 分析\n这道题我们把学生看成流量，可以发现这道题就是最大流模板题，注意处理分的批数。\n## code\n```cpp\n#include<cmath>\n#include<cstdio>\n#include<queue>\nusing namespace std;\nint n,m,p=1,t[10001],f[10001];\nstruct str\n{\n    int m,q,w;\n}a[100001];\nvoid road(int x,int y,int w)\n{\n    a[++p].m=y;\n    a[p].q=t[x];\n    t[x]=p;\n    a[p].w=w;\n}\nbool bfs()\n{\n    queue<int> q;\n    q.push(1);\n    for(int i=1;i<=n;++i) f[i]=0;\n    f[1]=1;\n    while(!q.empty())\n    {\n        int k=q.front();\n        q.pop();\n        for(int i=t[k];i!=0;i=a[i].q)\n        {\n            if(f[a[i].m]==0&&a[i].w>0)\n            {\n                f[a[i].m]=f[k]+1;\n                q.push(a[i].m);\n            }\n        }\n    }\n    if(f[n]!=0) return true;\n    return false;\n}\nint dfs(int x,int w)\n{\n    if(x==n) return w;\n    int s=0;\n    for(int i=t[x];i!=0;i=a[i].q)\n    {\n        if(f[a[i].m]==f[x]+1&&a[i].w>0)\n        {\n            int z=dfs(a[i].m,min(w,a[i].w));\n            if(z!=0)\n            {\n                a[i].w-=z;\n                a[i^1].w+=z;\n                w-=z;\n                s+=z;\n            }\n            else f[a[i].m]=0;\n        }\n    }\n    return s;\n}\nint main()\n{\n    int r;\n    scanf(\"%d%d%d\",&n,&m,&r);\n    for(int i=1;i<=m;++i)\n    {\n        int x,y,w;\n        scanf(\"%d%d%d\",&x,&y,&w);\n        road(x,y,w);\n        road(y,x,0);\n    }\n    int s=0;\n    while(bfs()==true)\n    {\n        s+=dfs(1,1e9);\n    }\n    if(s==0) printf(\"Orz Ni Jinan Saint Cow!\");\n    else printf(\"%d %d\",s,int(ceil(r*1.0/s)));\n}\n```","slug":"P1343-solution","published":1,"updated":"2022-11-28T13:47:47.407Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cleid927m000j2sjf1b2b0yae","content":"<p><a href=\"https://www.luogu.com.cn/problem/P1343\">P1343 地震逃生</a></p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>这道题我们把学生看成流量，可以发现这道题就是最大流模板题，注意处理分的批数。</p>\n<h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m,p=<span class=\"number\">1</span>,t[<span class=\"number\">10001</span>],f[<span class=\"number\">10001</span>];</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">str</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> m,q,w;</span><br><span class=\"line\">&#125;a[<span class=\"number\">100001</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">road</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y,<span class=\"type\">int</span> w)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    a[++p].m=y;</span><br><span class=\"line\">    a[p].q=t[x];</span><br><span class=\"line\">    t[x]=p;</span><br><span class=\"line\">    a[p].w=w;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">bfs</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    queue&lt;<span class=\"type\">int</span>&gt; q;</span><br><span class=\"line\">    q.<span class=\"built_in\">push</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i) f[i]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    f[<span class=\"number\">1</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!q.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> k=q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">        q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t[k];i!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(f[a[i].m]==<span class=\"number\">0</span>&amp;&amp;a[i].w&gt;<span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                f[a[i].m]=f[k]+<span class=\"number\">1</span>;</span><br><span class=\"line\">                q.<span class=\"built_in\">push</span>(a[i].m);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(f[n]!=<span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> w)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x==n) <span class=\"keyword\">return</span> w;</span><br><span class=\"line\">    <span class=\"type\">int</span> s=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t[x];i!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(f[a[i].m]==f[x]+<span class=\"number\">1</span>&amp;&amp;a[i].w&gt;<span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> z=<span class=\"built_in\">dfs</span>(a[i].m,<span class=\"built_in\">min</span>(w,a[i].w));</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(z!=<span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                a[i].w-=z;</span><br><span class=\"line\">                a[i^<span class=\"number\">1</span>].w+=z;</span><br><span class=\"line\">                w-=z;</span><br><span class=\"line\">                s+=z;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> f[a[i].m]=<span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> r;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;r);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x,y,w;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>,&amp;x,&amp;y,&amp;w);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(x,y,w);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(y,x,<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> s=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">bfs</span>()==<span class=\"literal\">true</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        s+=<span class=\"built_in\">dfs</span>(<span class=\"number\">1</span>,<span class=\"number\">1e9</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(s==<span class=\"number\">0</span>) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Orz Ni Jinan Saint Cow!&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d %d&quot;</span>,s,<span class=\"built_in\">int</span>(<span class=\"built_in\">ceil</span>(r*<span class=\"number\">1.0</span>/s)));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://www.luogu.com.cn/problem/P1343\">P1343 地震逃生</a></p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>这道题我们把学生看成流量，可以发现这道题就是最大流模板题，注意处理分的批数。</p>\n<h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m,p=<span class=\"number\">1</span>,t[<span class=\"number\">10001</span>],f[<span class=\"number\">10001</span>];</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">str</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> m,q,w;</span><br><span class=\"line\">&#125;a[<span class=\"number\">100001</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">road</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y,<span class=\"type\">int</span> w)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    a[++p].m=y;</span><br><span class=\"line\">    a[p].q=t[x];</span><br><span class=\"line\">    t[x]=p;</span><br><span class=\"line\">    a[p].w=w;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">bfs</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    queue&lt;<span class=\"type\">int</span>&gt; q;</span><br><span class=\"line\">    q.<span class=\"built_in\">push</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i) f[i]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    f[<span class=\"number\">1</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!q.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> k=q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">        q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t[k];i!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(f[a[i].m]==<span class=\"number\">0</span>&amp;&amp;a[i].w&gt;<span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                f[a[i].m]=f[k]+<span class=\"number\">1</span>;</span><br><span class=\"line\">                q.<span class=\"built_in\">push</span>(a[i].m);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(f[n]!=<span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> w)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x==n) <span class=\"keyword\">return</span> w;</span><br><span class=\"line\">    <span class=\"type\">int</span> s=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t[x];i!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(f[a[i].m]==f[x]+<span class=\"number\">1</span>&amp;&amp;a[i].w&gt;<span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> z=<span class=\"built_in\">dfs</span>(a[i].m,<span class=\"built_in\">min</span>(w,a[i].w));</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(z!=<span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                a[i].w-=z;</span><br><span class=\"line\">                a[i^<span class=\"number\">1</span>].w+=z;</span><br><span class=\"line\">                w-=z;</span><br><span class=\"line\">                s+=z;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> f[a[i].m]=<span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> r;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;r);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x,y,w;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>,&amp;x,&amp;y,&amp;w);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(x,y,w);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(y,x,<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> s=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">bfs</span>()==<span class=\"literal\">true</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        s+=<span class=\"built_in\">dfs</span>(<span class=\"number\">1</span>,<span class=\"number\">1e9</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(s==<span class=\"number\">0</span>) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Orz Ni Jinan Saint Cow!&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d %d&quot;</span>,s,<span class=\"built_in\">int</span>(<span class=\"built_in\">ceil</span>(r*<span class=\"number\">1.0</span>/s)));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"P2065 [TJOI2011]卡片","date":"2022-03-08T04:38:09.000Z","description":" ","_content":"\n[P2065 [TJOI2011]卡片](https://www.luogu.com.cn/problem/P2065)\n## 分析\n这道题显然可以用最大流来做，将红色卡片放在一边，蓝色卡片放在另一边，从源点 $s$ 向每个红色卡片连一条容量为 $1$ 的边，从每个蓝色卡片向汇点 $t$ 连一条容量为 $1$ 的边，并把所有公约数不为 $1$ 的异色卡片用一条容量为 $1$ 的边连起来，再从源点向汇点跑最大流即可。这道题看似可以这样简单地建图，但是这样其实会 $\\color{purple}{TLE}$ ，只有 $70$ 分。分析一下，我们总共有 $n\\times m$ 条边，每一次都要跑一边最大公约数，这些数最大是 $1000000$ ，很容易被卡掉。我们需要一个新的建边方法。\n![1](/post-images/P2065-solution-1.png?500x)\n我们之前的方法需要 $n\\times m$ 条边，如果能找到一种 $n+m$ 次的建边就可以了。建边的标准是两个数的最大公约数不为 $1$ ，也就是两个数存在同样的质因数。这 $n+m$ 个数中对于异色的卡片，所有有质因数 $2$ 的数都相互匹配，有质因数 $3$ 的数都可以相互匹配，等等。如果我们把有质因数 $2$ 的连在一个点上，有质因数 $3$ 的连在一个点上，依此类推，只需要 $n+m$ 次分解质因数即可。其中红色卡片与质因数点的边由红色卡片指向质因数点，蓝色卡片与质因数点的边由质因数点指向蓝色卡片，再连接源汇点就可以了。如图：\n![2](/post-images/P2065-solution-2.png?600x)\n## code\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<queue>\n#include<cmath>\nusing namespace std;\nint N,n1,n2,q=0,p=1,s1,s2,t[10001],t0[10001],f[10001],g[10001],d[10000001];\nbool u=true;\nstruct str\n{\n    int m,q,r;\n}a[1000001];\nint gcd(int a,int b)\n{\n    if(b==0) return a;\n    return gcd(b,a%b);\n}\nvoid road(int x,int y,int r)\n{\n    a[++p].m=y;\n    a[p].q=t[x];\n    t[x]=p;\n    a[p].r=r;\n}\nvoid bfs()\n{\n    queue<int> Q;\n    Q.push(s2);\n    f[s2]=1;\n    g[1]=1;\n    while(!Q.empty())\n    {\n        int k=Q.front();\n        Q.pop();\n        for(int i=t[k];i!=0;i=a[i].q)\n        {\n            if(f[a[i].m]==0)\n            {\n                f[a[i].m]=f[k]+1;\n                ++g[f[a[i].m]];\n                Q.push(a[i].m);\n            }\n        }\n    }\n}\nint dfs(int x,int r)\n{\n    if(x==s2) return r;\n    int s=0;\n    for(int i=t0[x];i!=0;i=a[i].q)\n    {\n        t0[x]=i;\n        if(f[x]==f[a[i].m]+1&&a[i].r!=0)\n        {\n            int z=dfs(a[i].m,min(r,a[i].r));\n            if(z!=0)\n            {\n                a[i].r-=z;\n                a[i^1].r+=z;\n                r-=z;\n                s+=z;\n            }\n            if(r==0) return s;\n        }\n    }\n    --g[f[x]];\n    if(g[f[x]]==0) u=false;\n    ++f[x];\n    ++g[f[x]];\n    return s;\n}\nvoid ss1(int k,int x)\n{\n    for(int i=2;i<=sqrt(x)&&x!=1;++i)\n    {\n        if(x%i==0)\n        {\n            if(d[i]==0) d[i]=++q;\n            road(k,n1+n2+d[i],1);\n            road(n1+n2+d[i],k,0);\n        }\n        while(x%i==0) x/=i;\n    }\n    if(x>1)\n    {\n        if(d[x]==0) d[x]=++q;\n        road(k,n1+n2+d[x],1);\n        road(n1+n2+d[x],k,0);\n    }\n}\nvoid ss2(int k,int x)\n{\n    for(int i=2;i<=sqrt(x)&&x!=1;++i)\n    {\n        if(x%i==0)\n        {\n            if(d[i]==0) d[i]=++q;\n            road(n1+n2+d[i],k,1);\n            road(k,n1+n2+d[i],0);\n        }\n        while(x%i==0) x/=i;\n    }\n    if(x>1)\n    {\n        if(d[x]==0) d[x]=++q;\n        road(n1+n2+d[x],k,1);\n        road(k,n1+n2+d[x],0);\n    }\n}\nvoid abc()\n{\n    scanf(\"%d%d\",&n1,&n2);\n    p=1;\n    for(int i=1;i<=N;++i) f[i]=g[i]=t[i]=0;\n    u=true;\n    for(int i=1;i<=n1;++i)\n    {\n        int x;\n        scanf(\"%d\",&x);\n        ss1(i,x);\n    }\n    for(int i=1;i<=n2;++i)\n    {\n        int x;\n        scanf(\"%d\",&x);\n        ss2(n1+i,x);\n    }\n    N=n1+n2+q+2;\n    s1=N-1;\n    s2=N;\n    for(int i=1;i<=n1;++i)\n    {\n        road(s1,i,1);\n        road(i,s1,0);\n    }\n    for(int i=1;i<=n2;++i)\n    {\n        road(n1+i,s2,1);\n        road(s2,n1+i,0);\n    }\n    bfs();\n    int r=0;\n    while(u==true)\n    {\n        for(int i=1;i<=N;++i) t0[i]=t[i];\n        r+=dfs(s1,1e18);\n    }\n    printf(\"%d\\n\",r);\n    return;\n}\nint main()\n{\n    int T;\n    scanf(\"%d\",&T);\n    while(T--) abc();\n    return 0;\n}\n```","source":"_posts/P2065-solution.md","raw":"---\ntitle: 'P2065 [TJOI2011]卡片'\ndate: 2022-03-08 12:38:09\ntags: [网络流,最大流]\ndescription: ' '\n---\n\n[P2065 [TJOI2011]卡片](https://www.luogu.com.cn/problem/P2065)\n## 分析\n这道题显然可以用最大流来做，将红色卡片放在一边，蓝色卡片放在另一边，从源点 $s$ 向每个红色卡片连一条容量为 $1$ 的边，从每个蓝色卡片向汇点 $t$ 连一条容量为 $1$ 的边，并把所有公约数不为 $1$ 的异色卡片用一条容量为 $1$ 的边连起来，再从源点向汇点跑最大流即可。这道题看似可以这样简单地建图，但是这样其实会 $\\color{purple}{TLE}$ ，只有 $70$ 分。分析一下，我们总共有 $n\\times m$ 条边，每一次都要跑一边最大公约数，这些数最大是 $1000000$ ，很容易被卡掉。我们需要一个新的建边方法。\n![1](/post-images/P2065-solution-1.png?500x)\n我们之前的方法需要 $n\\times m$ 条边，如果能找到一种 $n+m$ 次的建边就可以了。建边的标准是两个数的最大公约数不为 $1$ ，也就是两个数存在同样的质因数。这 $n+m$ 个数中对于异色的卡片，所有有质因数 $2$ 的数都相互匹配，有质因数 $3$ 的数都可以相互匹配，等等。如果我们把有质因数 $2$ 的连在一个点上，有质因数 $3$ 的连在一个点上，依此类推，只需要 $n+m$ 次分解质因数即可。其中红色卡片与质因数点的边由红色卡片指向质因数点，蓝色卡片与质因数点的边由质因数点指向蓝色卡片，再连接源汇点就可以了。如图：\n![2](/post-images/P2065-solution-2.png?600x)\n## code\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<queue>\n#include<cmath>\nusing namespace std;\nint N,n1,n2,q=0,p=1,s1,s2,t[10001],t0[10001],f[10001],g[10001],d[10000001];\nbool u=true;\nstruct str\n{\n    int m,q,r;\n}a[1000001];\nint gcd(int a,int b)\n{\n    if(b==0) return a;\n    return gcd(b,a%b);\n}\nvoid road(int x,int y,int r)\n{\n    a[++p].m=y;\n    a[p].q=t[x];\n    t[x]=p;\n    a[p].r=r;\n}\nvoid bfs()\n{\n    queue<int> Q;\n    Q.push(s2);\n    f[s2]=1;\n    g[1]=1;\n    while(!Q.empty())\n    {\n        int k=Q.front();\n        Q.pop();\n        for(int i=t[k];i!=0;i=a[i].q)\n        {\n            if(f[a[i].m]==0)\n            {\n                f[a[i].m]=f[k]+1;\n                ++g[f[a[i].m]];\n                Q.push(a[i].m);\n            }\n        }\n    }\n}\nint dfs(int x,int r)\n{\n    if(x==s2) return r;\n    int s=0;\n    for(int i=t0[x];i!=0;i=a[i].q)\n    {\n        t0[x]=i;\n        if(f[x]==f[a[i].m]+1&&a[i].r!=0)\n        {\n            int z=dfs(a[i].m,min(r,a[i].r));\n            if(z!=0)\n            {\n                a[i].r-=z;\n                a[i^1].r+=z;\n                r-=z;\n                s+=z;\n            }\n            if(r==0) return s;\n        }\n    }\n    --g[f[x]];\n    if(g[f[x]]==0) u=false;\n    ++f[x];\n    ++g[f[x]];\n    return s;\n}\nvoid ss1(int k,int x)\n{\n    for(int i=2;i<=sqrt(x)&&x!=1;++i)\n    {\n        if(x%i==0)\n        {\n            if(d[i]==0) d[i]=++q;\n            road(k,n1+n2+d[i],1);\n            road(n1+n2+d[i],k,0);\n        }\n        while(x%i==0) x/=i;\n    }\n    if(x>1)\n    {\n        if(d[x]==0) d[x]=++q;\n        road(k,n1+n2+d[x],1);\n        road(n1+n2+d[x],k,0);\n    }\n}\nvoid ss2(int k,int x)\n{\n    for(int i=2;i<=sqrt(x)&&x!=1;++i)\n    {\n        if(x%i==0)\n        {\n            if(d[i]==0) d[i]=++q;\n            road(n1+n2+d[i],k,1);\n            road(k,n1+n2+d[i],0);\n        }\n        while(x%i==0) x/=i;\n    }\n    if(x>1)\n    {\n        if(d[x]==0) d[x]=++q;\n        road(n1+n2+d[x],k,1);\n        road(k,n1+n2+d[x],0);\n    }\n}\nvoid abc()\n{\n    scanf(\"%d%d\",&n1,&n2);\n    p=1;\n    for(int i=1;i<=N;++i) f[i]=g[i]=t[i]=0;\n    u=true;\n    for(int i=1;i<=n1;++i)\n    {\n        int x;\n        scanf(\"%d\",&x);\n        ss1(i,x);\n    }\n    for(int i=1;i<=n2;++i)\n    {\n        int x;\n        scanf(\"%d\",&x);\n        ss2(n1+i,x);\n    }\n    N=n1+n2+q+2;\n    s1=N-1;\n    s2=N;\n    for(int i=1;i<=n1;++i)\n    {\n        road(s1,i,1);\n        road(i,s1,0);\n    }\n    for(int i=1;i<=n2;++i)\n    {\n        road(n1+i,s2,1);\n        road(s2,n1+i,0);\n    }\n    bfs();\n    int r=0;\n    while(u==true)\n    {\n        for(int i=1;i<=N;++i) t0[i]=t[i];\n        r+=dfs(s1,1e18);\n    }\n    printf(\"%d\\n\",r);\n    return;\n}\nint main()\n{\n    int T;\n    scanf(\"%d\",&T);\n    while(T--) abc();\n    return 0;\n}\n```","slug":"P2065-solution","published":1,"updated":"2023-03-15T01:57:00.433Z","_id":"cleid927m000l2sjf1irbc40m","comments":1,"layout":"post","photos":[],"link":"","content":"<p><a href=\"https://www.luogu.com.cn/problem/P2065\">P2065 [TJOI2011]卡片</a></p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>这道题显然可以用最大流来做，将红色卡片放在一边，蓝色卡片放在另一边，从源点 $s$ 向每个红色卡片连一条容量为 $1$ 的边，从每个蓝色卡片向汇点 $t$ 连一条容量为 $1$ 的边，并把所有公约数不为 $1$ 的异色卡片用一条容量为 $1$ 的边连起来，再从源点向汇点跑最大流即可。这道题看似可以这样简单地建图，但是这样其实会 $\\color{purple}{TLE}$ ，只有 $70$ 分。分析一下，我们总共有 $n\\times m$ 条边，每一次都要跑一边最大公约数，这些数最大是 $1000000$ ，很容易被卡掉。我们需要一个新的建边方法。<br><img src=\"/post-images/P2065-solution-1.png?500x\" alt=\"1\"><br>我们之前的方法需要 $n\\times m$ 条边，如果能找到一种 $n+m$ 次的建边就可以了。建边的标准是两个数的最大公约数不为 $1$ ，也就是两个数存在同样的质因数。这 $n+m$ 个数中对于异色的卡片，所有有质因数 $2$ 的数都相互匹配，有质因数 $3$ 的数都可以相互匹配，等等。如果我们把有质因数 $2$ 的连在一个点上，有质因数 $3$ 的连在一个点上，依此类推，只需要 $n+m$ 次分解质因数即可。其中红色卡片与质因数点的边由红色卡片指向质因数点，蓝色卡片与质因数点的边由质因数点指向蓝色卡片，再连接源汇点就可以了。如图：<br><img src=\"/post-images/P2065-solution-2.png?600x\" alt=\"2\"></p>\n<h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">int</span> N,n1,n2,q=<span class=\"number\">0</span>,p=<span class=\"number\">1</span>,s1,s2,t[<span class=\"number\">10001</span>],t0[<span class=\"number\">10001</span>],f[<span class=\"number\">10001</span>],g[<span class=\"number\">10001</span>],d[<span class=\"number\">10000001</span>];</span><br><span class=\"line\"><span class=\"type\">bool</span> u=<span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">str</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> m,q,r;</span><br><span class=\"line\">&#125;a[<span class=\"number\">1000001</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">gcd</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(b==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">gcd</span>(b,a%b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">road</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y,<span class=\"type\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    a[++p].m=y;</span><br><span class=\"line\">    a[p].q=t[x];</span><br><span class=\"line\">    t[x]=p;</span><br><span class=\"line\">    a[p].r=r;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">bfs</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    queue&lt;<span class=\"type\">int</span>&gt; Q;</span><br><span class=\"line\">    Q.<span class=\"built_in\">push</span>(s2);</span><br><span class=\"line\">    f[s2]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    g[<span class=\"number\">1</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!Q.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> k=Q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">        Q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t[k];i!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(f[a[i].m]==<span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                f[a[i].m]=f[k]+<span class=\"number\">1</span>;</span><br><span class=\"line\">                ++g[f[a[i].m]];</span><br><span class=\"line\">                Q.<span class=\"built_in\">push</span>(a[i].m);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x==s2) <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">    <span class=\"type\">int</span> s=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t0[x];i!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        t0[x]=i;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(f[x]==f[a[i].m]+<span class=\"number\">1</span>&amp;&amp;a[i].r!=<span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> z=<span class=\"built_in\">dfs</span>(a[i].m,<span class=\"built_in\">min</span>(r,a[i].r));</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(z!=<span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                a[i].r-=z;</span><br><span class=\"line\">                a[i^<span class=\"number\">1</span>].r+=z;</span><br><span class=\"line\">                r-=z;</span><br><span class=\"line\">                s+=z;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(r==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    --g[f[x]];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(g[f[x]]==<span class=\"number\">0</span>) u=<span class=\"literal\">false</span>;</span><br><span class=\"line\">    ++f[x];</span><br><span class=\"line\">    ++g[f[x]];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">ss1</span><span class=\"params\">(<span class=\"type\">int</span> k,<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">2</span>;i&lt;=<span class=\"built_in\">sqrt</span>(x)&amp;&amp;x!=<span class=\"number\">1</span>;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x%i==<span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(d[i]==<span class=\"number\">0</span>) d[i]=++q;</span><br><span class=\"line\">            <span class=\"built_in\">road</span>(k,n1+n2+d[i],<span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"built_in\">road</span>(n1+n2+d[i],k,<span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(x%i==<span class=\"number\">0</span>) x/=i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x&gt;<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(d[x]==<span class=\"number\">0</span>) d[x]=++q;</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(k,n1+n2+d[x],<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(n1+n2+d[x],k,<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">ss2</span><span class=\"params\">(<span class=\"type\">int</span> k,<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">2</span>;i&lt;=<span class=\"built_in\">sqrt</span>(x)&amp;&amp;x!=<span class=\"number\">1</span>;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x%i==<span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(d[i]==<span class=\"number\">0</span>) d[i]=++q;</span><br><span class=\"line\">            <span class=\"built_in\">road</span>(n1+n2+d[i],k,<span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"built_in\">road</span>(k,n1+n2+d[i],<span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(x%i==<span class=\"number\">0</span>) x/=i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x&gt;<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(d[x]==<span class=\"number\">0</span>) d[x]=++q;</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(n1+n2+d[x],k,<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(k,n1+n2+d[x],<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">abc</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;n1,&amp;n2);</span><br><span class=\"line\">    p=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=N;++i) f[i]=g[i]=t[i]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    u=<span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n1;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;x);</span><br><span class=\"line\">        <span class=\"built_in\">ss1</span>(i,x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n2;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;x);</span><br><span class=\"line\">        <span class=\"built_in\">ss2</span>(n1+i,x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    N=n1+n2+q+<span class=\"number\">2</span>;</span><br><span class=\"line\">    s1=N<span class=\"number\">-1</span>;</span><br><span class=\"line\">    s2=N;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n1;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(s1,i,<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(i,s1,<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n2;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(n1+i,s2,<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(s2,n1+i,<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">bfs</span>();</span><br><span class=\"line\">    <span class=\"type\">int</span> r=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(u==<span class=\"literal\">true</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=N;++i) t0[i]=t[i];</span><br><span class=\"line\">        r+=<span class=\"built_in\">dfs</span>(s1,<span class=\"number\">1e18</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,r);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> T;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;T);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(T--) <span class=\"built_in\">abc</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://www.luogu.com.cn/problem/P2065\">P2065 [TJOI2011]卡片</a></p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>这道题显然可以用最大流来做，将红色卡片放在一边，蓝色卡片放在另一边，从源点 $s$ 向每个红色卡片连一条容量为 $1$ 的边，从每个蓝色卡片向汇点 $t$ 连一条容量为 $1$ 的边，并把所有公约数不为 $1$ 的异色卡片用一条容量为 $1$ 的边连起来，再从源点向汇点跑最大流即可。这道题看似可以这样简单地建图，但是这样其实会 $\\color{purple}{TLE}$ ，只有 $70$ 分。分析一下，我们总共有 $n\\times m$ 条边，每一次都要跑一边最大公约数，这些数最大是 $1000000$ ，很容易被卡掉。我们需要一个新的建边方法。<br><img src=\"/post-images/P2065-solution-1.png?500x\" alt=\"1\"><br>我们之前的方法需要 $n\\times m$ 条边，如果能找到一种 $n+m$ 次的建边就可以了。建边的标准是两个数的最大公约数不为 $1$ ，也就是两个数存在同样的质因数。这 $n+m$ 个数中对于异色的卡片，所有有质因数 $2$ 的数都相互匹配，有质因数 $3$ 的数都可以相互匹配，等等。如果我们把有质因数 $2$ 的连在一个点上，有质因数 $3$ 的连在一个点上，依此类推，只需要 $n+m$ 次分解质因数即可。其中红色卡片与质因数点的边由红色卡片指向质因数点，蓝色卡片与质因数点的边由质因数点指向蓝色卡片，再连接源汇点就可以了。如图：<br><img src=\"/post-images/P2065-solution-2.png?600x\" alt=\"2\"></p>\n<h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">int</span> N,n1,n2,q=<span class=\"number\">0</span>,p=<span class=\"number\">1</span>,s1,s2,t[<span class=\"number\">10001</span>],t0[<span class=\"number\">10001</span>],f[<span class=\"number\">10001</span>],g[<span class=\"number\">10001</span>],d[<span class=\"number\">10000001</span>];</span><br><span class=\"line\"><span class=\"type\">bool</span> u=<span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">str</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> m,q,r;</span><br><span class=\"line\">&#125;a[<span class=\"number\">1000001</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">gcd</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(b==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">gcd</span>(b,a%b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">road</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y,<span class=\"type\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    a[++p].m=y;</span><br><span class=\"line\">    a[p].q=t[x];</span><br><span class=\"line\">    t[x]=p;</span><br><span class=\"line\">    a[p].r=r;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">bfs</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    queue&lt;<span class=\"type\">int</span>&gt; Q;</span><br><span class=\"line\">    Q.<span class=\"built_in\">push</span>(s2);</span><br><span class=\"line\">    f[s2]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    g[<span class=\"number\">1</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!Q.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> k=Q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">        Q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t[k];i!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(f[a[i].m]==<span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                f[a[i].m]=f[k]+<span class=\"number\">1</span>;</span><br><span class=\"line\">                ++g[f[a[i].m]];</span><br><span class=\"line\">                Q.<span class=\"built_in\">push</span>(a[i].m);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x==s2) <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">    <span class=\"type\">int</span> s=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t0[x];i!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        t0[x]=i;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(f[x]==f[a[i].m]+<span class=\"number\">1</span>&amp;&amp;a[i].r!=<span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> z=<span class=\"built_in\">dfs</span>(a[i].m,<span class=\"built_in\">min</span>(r,a[i].r));</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(z!=<span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                a[i].r-=z;</span><br><span class=\"line\">                a[i^<span class=\"number\">1</span>].r+=z;</span><br><span class=\"line\">                r-=z;</span><br><span class=\"line\">                s+=z;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(r==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    --g[f[x]];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(g[f[x]]==<span class=\"number\">0</span>) u=<span class=\"literal\">false</span>;</span><br><span class=\"line\">    ++f[x];</span><br><span class=\"line\">    ++g[f[x]];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">ss1</span><span class=\"params\">(<span class=\"type\">int</span> k,<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">2</span>;i&lt;=<span class=\"built_in\">sqrt</span>(x)&amp;&amp;x!=<span class=\"number\">1</span>;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x%i==<span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(d[i]==<span class=\"number\">0</span>) d[i]=++q;</span><br><span class=\"line\">            <span class=\"built_in\">road</span>(k,n1+n2+d[i],<span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"built_in\">road</span>(n1+n2+d[i],k,<span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(x%i==<span class=\"number\">0</span>) x/=i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x&gt;<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(d[x]==<span class=\"number\">0</span>) d[x]=++q;</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(k,n1+n2+d[x],<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(n1+n2+d[x],k,<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">ss2</span><span class=\"params\">(<span class=\"type\">int</span> k,<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">2</span>;i&lt;=<span class=\"built_in\">sqrt</span>(x)&amp;&amp;x!=<span class=\"number\">1</span>;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x%i==<span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(d[i]==<span class=\"number\">0</span>) d[i]=++q;</span><br><span class=\"line\">            <span class=\"built_in\">road</span>(n1+n2+d[i],k,<span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"built_in\">road</span>(k,n1+n2+d[i],<span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(x%i==<span class=\"number\">0</span>) x/=i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x&gt;<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(d[x]==<span class=\"number\">0</span>) d[x]=++q;</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(n1+n2+d[x],k,<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(k,n1+n2+d[x],<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">abc</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;n1,&amp;n2);</span><br><span class=\"line\">    p=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=N;++i) f[i]=g[i]=t[i]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    u=<span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n1;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;x);</span><br><span class=\"line\">        <span class=\"built_in\">ss1</span>(i,x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n2;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;x);</span><br><span class=\"line\">        <span class=\"built_in\">ss2</span>(n1+i,x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    N=n1+n2+q+<span class=\"number\">2</span>;</span><br><span class=\"line\">    s1=N<span class=\"number\">-1</span>;</span><br><span class=\"line\">    s2=N;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n1;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(s1,i,<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(i,s1,<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n2;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(n1+i,s2,<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(s2,n1+i,<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">bfs</span>();</span><br><span class=\"line\">    <span class=\"type\">int</span> r=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(u==<span class=\"literal\">true</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=N;++i) t0[i]=t[i];</span><br><span class=\"line\">        r+=<span class=\"built_in\">dfs</span>(s1,<span class=\"number\">1e18</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,r);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> T;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;T);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(T--) <span class=\"built_in\">abc</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"P1402 酒店之王","date":"2022-04-16T11:30:44.000Z","description":" ","_content":"\n[P1402 酒店之王](https://www.luogu.com.cn/problem/P1402)\n## 分析\n这道题也是一道需要拆点的题，和 P1231 一样，这里不再赘述。\n## code\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<queue>\nusing namespace std;\nint n,n1,n2,n3,p=1,s1,s2,t[10001],f[10001];\nstruct str\n{\n    int m,q,r;\n}a[1000001];\nvoid road(int x,int y,int r)\n{\n    a[++p].m=y;\n    a[p].q=t[x];\n    t[x]=p;\n    a[p].r=r;\n}\nbool bfs()\n{\n    queue<int> Q;\n    Q.push(s1);\n    for(int i=1;i<=n;++i) f[i]=0;\n    f[s1]=1;\n    while(!Q.empty())\n    {\n        int k=Q.front();\n        Q.pop();\n        for(int i=t[k];i!=0;i=a[i].q)\n        {\n            if(f[a[i].m]==0&&a[i].r!=0)\n            {\n                f[a[i].m]=f[k]+1;\n                Q.push(a[i].m);\n            }\n        }\n    }\n    return f[s2]!=0;\n}\nint dfs(int x,int r)\n{\n    if(x==s2) return r;\n    int s=0;\n    for(int i=t[x];i!=0;i=a[i].q)\n    {\n        if(f[a[i].m]==f[x]+1&&a[i].r!=0)\n        {\n            int z=dfs(a[i].m,min(r,a[i].r));\n            if(z!=0)\n            {\n                a[i].r-=z;\n                a[i^1].r+=z;\n                r-=z;\n                s+=z;\n            }\n        }\n    }\n    return s;\n}\nint main()\n{\n    scanf(\"%d%d%d\",&n1,&n2,&n3);\n    n=n1*2+n2+n3+2;\n    s1=1;\n    s2=n;\n    for(int i=1;i<=n1;++i)\n    {\n        for(int j=1;j<=n2;++j)\n        {\n            int x;\n            scanf(\"%d\",&x);\n            if(x==1)\n            {\n                road(j+n1*2+1,i+1,1);\n                road(i+1,j+n1*2+1,0);\n            }\n        }\n    }\n    for(int i=1;i<=n1;++i)\n    {\n        for(int j=1;j<=n3;++j)\n        {\n            int x;\n            scanf(\"%d\",&x);\n            if(x==1)\n            {\n                road(i+n1+1,j+n1*2+n2+1,1);\n                road(j+n1*2+n2+1,i+n1+1,0);\n            }\n        }\n    }\n    for(int i=1;i<=n1;++i)\n    {\n        road(i+1,i+n1+1,1);\n        road(i+n1+1,i+1,0);\n    }\n    for(int i=1;i<=n2;++i)\n    {\n        road(1,i+n1*2+1,1);\n        road(i+n1*2+1,1,0);\n    }\n    for(int i=1;i<=n3;++i)\n    {\n        road(i+n1*2+n2+1,n,1);\n        road(n,i+n1*2+n2+1,0);\n    }\n    int r=0;\n    while(bfs())\n    {\n        r+=dfs(s1,1e9);\n    }\n    printf(\"%d\",r);\n    return 0;\n}\n```","source":"_posts/P1402-solution.md","raw":"---\ntitle: 'P1402 酒店之王'\ndate: 2022-04-16 19:30:44\ntags: [网络流,最大流]\ndescription: ' '\n---\n\n[P1402 酒店之王](https://www.luogu.com.cn/problem/P1402)\n## 分析\n这道题也是一道需要拆点的题，和 P1231 一样，这里不再赘述。\n## code\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<queue>\nusing namespace std;\nint n,n1,n2,n3,p=1,s1,s2,t[10001],f[10001];\nstruct str\n{\n    int m,q,r;\n}a[1000001];\nvoid road(int x,int y,int r)\n{\n    a[++p].m=y;\n    a[p].q=t[x];\n    t[x]=p;\n    a[p].r=r;\n}\nbool bfs()\n{\n    queue<int> Q;\n    Q.push(s1);\n    for(int i=1;i<=n;++i) f[i]=0;\n    f[s1]=1;\n    while(!Q.empty())\n    {\n        int k=Q.front();\n        Q.pop();\n        for(int i=t[k];i!=0;i=a[i].q)\n        {\n            if(f[a[i].m]==0&&a[i].r!=0)\n            {\n                f[a[i].m]=f[k]+1;\n                Q.push(a[i].m);\n            }\n        }\n    }\n    return f[s2]!=0;\n}\nint dfs(int x,int r)\n{\n    if(x==s2) return r;\n    int s=0;\n    for(int i=t[x];i!=0;i=a[i].q)\n    {\n        if(f[a[i].m]==f[x]+1&&a[i].r!=0)\n        {\n            int z=dfs(a[i].m,min(r,a[i].r));\n            if(z!=0)\n            {\n                a[i].r-=z;\n                a[i^1].r+=z;\n                r-=z;\n                s+=z;\n            }\n        }\n    }\n    return s;\n}\nint main()\n{\n    scanf(\"%d%d%d\",&n1,&n2,&n3);\n    n=n1*2+n2+n3+2;\n    s1=1;\n    s2=n;\n    for(int i=1;i<=n1;++i)\n    {\n        for(int j=1;j<=n2;++j)\n        {\n            int x;\n            scanf(\"%d\",&x);\n            if(x==1)\n            {\n                road(j+n1*2+1,i+1,1);\n                road(i+1,j+n1*2+1,0);\n            }\n        }\n    }\n    for(int i=1;i<=n1;++i)\n    {\n        for(int j=1;j<=n3;++j)\n        {\n            int x;\n            scanf(\"%d\",&x);\n            if(x==1)\n            {\n                road(i+n1+1,j+n1*2+n2+1,1);\n                road(j+n1*2+n2+1,i+n1+1,0);\n            }\n        }\n    }\n    for(int i=1;i<=n1;++i)\n    {\n        road(i+1,i+n1+1,1);\n        road(i+n1+1,i+1,0);\n    }\n    for(int i=1;i<=n2;++i)\n    {\n        road(1,i+n1*2+1,1);\n        road(i+n1*2+1,1,0);\n    }\n    for(int i=1;i<=n3;++i)\n    {\n        road(i+n1*2+n2+1,n,1);\n        road(n,i+n1*2+n2+1,0);\n    }\n    int r=0;\n    while(bfs())\n    {\n        r+=dfs(s1,1e9);\n    }\n    printf(\"%d\",r);\n    return 0;\n}\n```","slug":"P1402-solution","published":1,"updated":"2022-11-28T13:47:47.407Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cleid927n000n2sjfg1769o0o","content":"<p><a href=\"https://www.luogu.com.cn/problem/P1402\">P1402 酒店之王</a></p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>这道题也是一道需要拆点的题，和 P1231 一样，这里不再赘述。</p>\n<h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">int</span> n,n1,n2,n3,p=<span class=\"number\">1</span>,s1,s2,t[<span class=\"number\">10001</span>],f[<span class=\"number\">10001</span>];</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">str</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> m,q,r;</span><br><span class=\"line\">&#125;a[<span class=\"number\">1000001</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">road</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y,<span class=\"type\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    a[++p].m=y;</span><br><span class=\"line\">    a[p].q=t[x];</span><br><span class=\"line\">    t[x]=p;</span><br><span class=\"line\">    a[p].r=r;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">bfs</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    queue&lt;<span class=\"type\">int</span>&gt; Q;</span><br><span class=\"line\">    Q.<span class=\"built_in\">push</span>(s1);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i) f[i]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    f[s1]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!Q.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> k=Q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">        Q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t[k];i!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(f[a[i].m]==<span class=\"number\">0</span>&amp;&amp;a[i].r!=<span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                f[a[i].m]=f[k]+<span class=\"number\">1</span>;</span><br><span class=\"line\">                Q.<span class=\"built_in\">push</span>(a[i].m);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> f[s2]!=<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x==s2) <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">    <span class=\"type\">int</span> s=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t[x];i!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(f[a[i].m]==f[x]+<span class=\"number\">1</span>&amp;&amp;a[i].r!=<span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> z=<span class=\"built_in\">dfs</span>(a[i].m,<span class=\"built_in\">min</span>(r,a[i].r));</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(z!=<span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                a[i].r-=z;</span><br><span class=\"line\">                a[i^<span class=\"number\">1</span>].r+=z;</span><br><span class=\"line\">                r-=z;</span><br><span class=\"line\">                s+=z;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>,&amp;n1,&amp;n2,&amp;n3);</span><br><span class=\"line\">    n=n1*<span class=\"number\">2</span>+n2+n3+<span class=\"number\">2</span>;</span><br><span class=\"line\">    s1=<span class=\"number\">1</span>;</span><br><span class=\"line\">    s2=n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n1;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=n2;++j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> x;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;x);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(x==<span class=\"number\">1</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">road</span>(j+n1*<span class=\"number\">2</span>+<span class=\"number\">1</span>,i+<span class=\"number\">1</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">                <span class=\"built_in\">road</span>(i+<span class=\"number\">1</span>,j+n1*<span class=\"number\">2</span>+<span class=\"number\">1</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n1;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=n3;++j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> x;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;x);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(x==<span class=\"number\">1</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">road</span>(i+n1+<span class=\"number\">1</span>,j+n1*<span class=\"number\">2</span>+n2+<span class=\"number\">1</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">                <span class=\"built_in\">road</span>(j+n1*<span class=\"number\">2</span>+n2+<span class=\"number\">1</span>,i+n1+<span class=\"number\">1</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n1;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(i+<span class=\"number\">1</span>,i+n1+<span class=\"number\">1</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(i+n1+<span class=\"number\">1</span>,i+<span class=\"number\">1</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n2;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(<span class=\"number\">1</span>,i+n1*<span class=\"number\">2</span>+<span class=\"number\">1</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(i+n1*<span class=\"number\">2</span>+<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n3;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(i+n1*<span class=\"number\">2</span>+n2+<span class=\"number\">1</span>,n,<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(n,i+n1*<span class=\"number\">2</span>+n2+<span class=\"number\">1</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> r=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">bfs</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        r+=<span class=\"built_in\">dfs</span>(s1,<span class=\"number\">1e9</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,r);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://www.luogu.com.cn/problem/P1402\">P1402 酒店之王</a></p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>这道题也是一道需要拆点的题，和 P1231 一样，这里不再赘述。</p>\n<h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">int</span> n,n1,n2,n3,p=<span class=\"number\">1</span>,s1,s2,t[<span class=\"number\">10001</span>],f[<span class=\"number\">10001</span>];</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">str</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> m,q,r;</span><br><span class=\"line\">&#125;a[<span class=\"number\">1000001</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">road</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y,<span class=\"type\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    a[++p].m=y;</span><br><span class=\"line\">    a[p].q=t[x];</span><br><span class=\"line\">    t[x]=p;</span><br><span class=\"line\">    a[p].r=r;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">bfs</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    queue&lt;<span class=\"type\">int</span>&gt; Q;</span><br><span class=\"line\">    Q.<span class=\"built_in\">push</span>(s1);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i) f[i]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    f[s1]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!Q.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> k=Q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">        Q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t[k];i!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(f[a[i].m]==<span class=\"number\">0</span>&amp;&amp;a[i].r!=<span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                f[a[i].m]=f[k]+<span class=\"number\">1</span>;</span><br><span class=\"line\">                Q.<span class=\"built_in\">push</span>(a[i].m);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> f[s2]!=<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x==s2) <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">    <span class=\"type\">int</span> s=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t[x];i!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(f[a[i].m]==f[x]+<span class=\"number\">1</span>&amp;&amp;a[i].r!=<span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> z=<span class=\"built_in\">dfs</span>(a[i].m,<span class=\"built_in\">min</span>(r,a[i].r));</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(z!=<span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                a[i].r-=z;</span><br><span class=\"line\">                a[i^<span class=\"number\">1</span>].r+=z;</span><br><span class=\"line\">                r-=z;</span><br><span class=\"line\">                s+=z;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>,&amp;n1,&amp;n2,&amp;n3);</span><br><span class=\"line\">    n=n1*<span class=\"number\">2</span>+n2+n3+<span class=\"number\">2</span>;</span><br><span class=\"line\">    s1=<span class=\"number\">1</span>;</span><br><span class=\"line\">    s2=n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n1;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=n2;++j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> x;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;x);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(x==<span class=\"number\">1</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">road</span>(j+n1*<span class=\"number\">2</span>+<span class=\"number\">1</span>,i+<span class=\"number\">1</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">                <span class=\"built_in\">road</span>(i+<span class=\"number\">1</span>,j+n1*<span class=\"number\">2</span>+<span class=\"number\">1</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n1;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=n3;++j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> x;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;x);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(x==<span class=\"number\">1</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">road</span>(i+n1+<span class=\"number\">1</span>,j+n1*<span class=\"number\">2</span>+n2+<span class=\"number\">1</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">                <span class=\"built_in\">road</span>(j+n1*<span class=\"number\">2</span>+n2+<span class=\"number\">1</span>,i+n1+<span class=\"number\">1</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n1;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(i+<span class=\"number\">1</span>,i+n1+<span class=\"number\">1</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(i+n1+<span class=\"number\">1</span>,i+<span class=\"number\">1</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n2;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(<span class=\"number\">1</span>,i+n1*<span class=\"number\">2</span>+<span class=\"number\">1</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(i+n1*<span class=\"number\">2</span>+<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n3;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(i+n1*<span class=\"number\">2</span>+n2+<span class=\"number\">1</span>,n,<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(n,i+n1*<span class=\"number\">2</span>+n2+<span class=\"number\">1</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> r=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">bfs</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        r+=<span class=\"built_in\">dfs</span>(s1,<span class=\"number\">1e9</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,r);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"P2120 [ZJOI2007]仓库建设","date":"2022-04-04T01:32:30.000Z","description":" ","_content":"\n[P2120 [ZJOI2007]仓库建设](https://www.luogu.com.cn/problem/P2120)\n## 分析\n这道题是一道很经典又很裸的斜率优化 dp，用 $f[i]$ 表示在 $i$ 号点建立仓库的最小费用，用斜率优化即可。但是转移的时候，我们需要知道第 $j+1$ 个仓库至第 $i$ 个仓库之间的所有仓库到仓库 $i$ 的距离，也就是\n$$\\sum_{k=j+1}^{i} (b[k] \\times (a[i]-a[k]))$$\n我们把这个式子拆开，得到\n$$\\sum_{k=j+1}^{i} (b[k] \\times a[i])-\\sum_{k=j+1}^{i} (b[k] \\times a[k])$$\n也就是\n$$a[i] \\times \\sum_{k=j+1}^{i} b[k]-\\sum_{k=j+1}^{i} (b[k] \\times a[k])$$\n我们只需要把 $b[i]$ 和 $a[i] \\times b[i]$ 分别前缀和，就可以解决这个问题了。\n但是，如果你打的是裸的斜率优化，你就会发现神奇的东西 $\\color{red}{\\text{Unaccepted 100}}$。为什么？这 hack 数据是真的神，因为我们忽略了一点，如果后面有一堆仓库没有成品怎么办。这种情况下我们就不一定要在 $n$ 工厂建仓库了，只需要在第一个有成品的工厂之后建即可。\n## code\n```cpp\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\ntypedef long long ll;\nconst int N=3000001;\nint n,a[N],b[N],c[N],Q[N*2],T=0,R=0;\nll d[N],e[N],f[N];\nll abc(int x,int y)\n{\n    if(d[x]==d[y]) return 1e18;\n    return ((f[x]+e[x])-(f[y]+e[y]))/(d[x]-d[y]);\n}\nint main()\n{\n    scanf(\"%d\",&n);\n    for(int i=1;i<=n;++i)\n    {\n        scanf(\"%d%d%d\",&a[i],&b[i],&c[i]);\n        d[i]=d[i-1]+b[i];\n        e[i]=e[i-1]+a[i]*b[i];\n    }\n    for(int i=1;i<=n;++i)\n    {\n        while(T<R&&abc(Q[T],Q[T+1])<a[i]) ++T;\n        f[i]=f[Q[T]]+a[i]*(d[i]-d[Q[T]])-(e[i]-e[Q[T]])+c[i];\n        while(T<R&&abc(Q[R-1],Q[R])>abc(Q[R],i)) --R;\n        Q[++R]=i;\n    }\n    ll s=1e18;\n    for(int i=n;i>=1;--i)\n    {\n        s=min(s,f[i]);\n        if(b[i]) break;\n    }\n    printf(\"%lld\",s);\n    return 0;\n}\n```\n","source":"_posts/P2120-solution.md","raw":"---\ntitle: 'P2120 [ZJOI2007]仓库建设'\ndate: 2022-04-04 09:32:30\ntags: [动态规划,单调队列,斜率优化dp]\ndescription: ' '\n---\n\n[P2120 [ZJOI2007]仓库建设](https://www.luogu.com.cn/problem/P2120)\n## 分析\n这道题是一道很经典又很裸的斜率优化 dp，用 $f[i]$ 表示在 $i$ 号点建立仓库的最小费用，用斜率优化即可。但是转移的时候，我们需要知道第 $j+1$ 个仓库至第 $i$ 个仓库之间的所有仓库到仓库 $i$ 的距离，也就是\n$$\\sum_{k=j+1}^{i} (b[k] \\times (a[i]-a[k]))$$\n我们把这个式子拆开，得到\n$$\\sum_{k=j+1}^{i} (b[k] \\times a[i])-\\sum_{k=j+1}^{i} (b[k] \\times a[k])$$\n也就是\n$$a[i] \\times \\sum_{k=j+1}^{i} b[k]-\\sum_{k=j+1}^{i} (b[k] \\times a[k])$$\n我们只需要把 $b[i]$ 和 $a[i] \\times b[i]$ 分别前缀和，就可以解决这个问题了。\n但是，如果你打的是裸的斜率优化，你就会发现神奇的东西 $\\color{red}{\\text{Unaccepted 100}}$。为什么？这 hack 数据是真的神，因为我们忽略了一点，如果后面有一堆仓库没有成品怎么办。这种情况下我们就不一定要在 $n$ 工厂建仓库了，只需要在第一个有成品的工厂之后建即可。\n## code\n```cpp\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\ntypedef long long ll;\nconst int N=3000001;\nint n,a[N],b[N],c[N],Q[N*2],T=0,R=0;\nll d[N],e[N],f[N];\nll abc(int x,int y)\n{\n    if(d[x]==d[y]) return 1e18;\n    return ((f[x]+e[x])-(f[y]+e[y]))/(d[x]-d[y]);\n}\nint main()\n{\n    scanf(\"%d\",&n);\n    for(int i=1;i<=n;++i)\n    {\n        scanf(\"%d%d%d\",&a[i],&b[i],&c[i]);\n        d[i]=d[i-1]+b[i];\n        e[i]=e[i-1]+a[i]*b[i];\n    }\n    for(int i=1;i<=n;++i)\n    {\n        while(T<R&&abc(Q[T],Q[T+1])<a[i]) ++T;\n        f[i]=f[Q[T]]+a[i]*(d[i]-d[Q[T]])-(e[i]-e[Q[T]])+c[i];\n        while(T<R&&abc(Q[R-1],Q[R])>abc(Q[R],i)) --R;\n        Q[++R]=i;\n    }\n    ll s=1e18;\n    for(int i=n;i>=1;--i)\n    {\n        s=min(s,f[i]);\n        if(b[i]) break;\n    }\n    printf(\"%lld\",s);\n    return 0;\n}\n```\n","slug":"P2120-solution","published":1,"updated":"2022-11-28T13:47:47.407Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cleid927n000o2sjf564e186p","content":"<p><a href=\"https://www.luogu.com.cn/problem/P2120\">P2120 [ZJOI2007]仓库建设</a></p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>这道题是一道很经典又很裸的斜率优化 dp，用 $f[i]$ 表示在 $i$ 号点建立仓库的最小费用，用斜率优化即可。但是转移的时候，我们需要知道第 $j+1$ 个仓库至第 $i$ 个仓库之间的所有仓库到仓库 $i$ 的距离，也就是<br>$$\\sum_{k&#x3D;j+1}^{i} (b[k] \\times (a[i]-a[k]))$$<br>我们把这个式子拆开，得到<br>$$\\sum_{k&#x3D;j+1}^{i} (b[k] \\times a[i])-\\sum_{k&#x3D;j+1}^{i} (b[k] \\times a[k])$$<br>也就是<br>$$a[i] \\times \\sum_{k&#x3D;j+1}^{i} b[k]-\\sum_{k&#x3D;j+1}^{i} (b[k] \\times a[k])$$<br>我们只需要把 $b[i]$ 和 $a[i] \\times b[i]$ 分别前缀和，就可以解决这个问题了。<br>但是，如果你打的是裸的斜率优化，你就会发现神奇的东西 $\\color{red}{\\text{Unaccepted 100}}$。为什么？这 hack 数据是真的神，因为我们忽略了一点，如果后面有一堆仓库没有成品怎么办。这种情况下我们就不一定要在 $n$ 工厂建仓库了，只需要在第一个有成品的工厂之后建即可。</p>\n<h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> ll;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">3000001</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> n,a[N],b[N],c[N],Q[N*<span class=\"number\">2</span>],T=<span class=\"number\">0</span>,R=<span class=\"number\">0</span>;</span><br><span class=\"line\">ll d[N],e[N],f[N];</span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">abc</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(d[x]==d[y]) <span class=\"keyword\">return</span> <span class=\"number\">1e18</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ((f[x]+e[x])-(f[y]+e[y]))/(d[x]-d[y]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>,&amp;a[i],&amp;b[i],&amp;c[i]);</span><br><span class=\"line\">        d[i]=d[i<span class=\"number\">-1</span>]+b[i];</span><br><span class=\"line\">        e[i]=e[i<span class=\"number\">-1</span>]+a[i]*b[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(T&lt;R&amp;&amp;<span class=\"built_in\">abc</span>(Q[T],Q[T+<span class=\"number\">1</span>])&lt;a[i]) ++T;</span><br><span class=\"line\">        f[i]=f[Q[T]]+a[i]*(d[i]-d[Q[T]])-(e[i]-e[Q[T]])+c[i];</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(T&lt;R&amp;&amp;<span class=\"built_in\">abc</span>(Q[R<span class=\"number\">-1</span>],Q[R])&gt;<span class=\"built_in\">abc</span>(Q[R],i)) --R;</span><br><span class=\"line\">        Q[++R]=i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ll s=<span class=\"number\">1e18</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=n;i&gt;=<span class=\"number\">1</span>;--i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        s=<span class=\"built_in\">min</span>(s,f[i]);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(b[i]) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld&quot;</span>,s);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://www.luogu.com.cn/problem/P2120\">P2120 [ZJOI2007]仓库建设</a></p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>这道题是一道很经典又很裸的斜率优化 dp，用 $f[i]$ 表示在 $i$ 号点建立仓库的最小费用，用斜率优化即可。但是转移的时候，我们需要知道第 $j+1$ 个仓库至第 $i$ 个仓库之间的所有仓库到仓库 $i$ 的距离，也就是<br>$$\\sum_{k&#x3D;j+1}^{i} (b[k] \\times (a[i]-a[k]))$$<br>我们把这个式子拆开，得到<br>$$\\sum_{k&#x3D;j+1}^{i} (b[k] \\times a[i])-\\sum_{k&#x3D;j+1}^{i} (b[k] \\times a[k])$$<br>也就是<br>$$a[i] \\times \\sum_{k&#x3D;j+1}^{i} b[k]-\\sum_{k&#x3D;j+1}^{i} (b[k] \\times a[k])$$<br>我们只需要把 $b[i]$ 和 $a[i] \\times b[i]$ 分别前缀和，就可以解决这个问题了。<br>但是，如果你打的是裸的斜率优化，你就会发现神奇的东西 $\\color{red}{\\text{Unaccepted 100}}$。为什么？这 hack 数据是真的神，因为我们忽略了一点，如果后面有一堆仓库没有成品怎么办。这种情况下我们就不一定要在 $n$ 工厂建仓库了，只需要在第一个有成品的工厂之后建即可。</p>\n<h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> ll;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">3000001</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> n,a[N],b[N],c[N],Q[N*<span class=\"number\">2</span>],T=<span class=\"number\">0</span>,R=<span class=\"number\">0</span>;</span><br><span class=\"line\">ll d[N],e[N],f[N];</span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">abc</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(d[x]==d[y]) <span class=\"keyword\">return</span> <span class=\"number\">1e18</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ((f[x]+e[x])-(f[y]+e[y]))/(d[x]-d[y]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>,&amp;a[i],&amp;b[i],&amp;c[i]);</span><br><span class=\"line\">        d[i]=d[i<span class=\"number\">-1</span>]+b[i];</span><br><span class=\"line\">        e[i]=e[i<span class=\"number\">-1</span>]+a[i]*b[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(T&lt;R&amp;&amp;<span class=\"built_in\">abc</span>(Q[T],Q[T+<span class=\"number\">1</span>])&lt;a[i]) ++T;</span><br><span class=\"line\">        f[i]=f[Q[T]]+a[i]*(d[i]-d[Q[T]])-(e[i]-e[Q[T]])+c[i];</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(T&lt;R&amp;&amp;<span class=\"built_in\">abc</span>(Q[R<span class=\"number\">-1</span>],Q[R])&gt;<span class=\"built_in\">abc</span>(Q[R],i)) --R;</span><br><span class=\"line\">        Q[++R]=i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ll s=<span class=\"number\">1e18</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=n;i&gt;=<span class=\"number\">1</span>;--i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        s=<span class=\"built_in\">min</span>(s,f[i]);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(b[i]) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld&quot;</span>,s);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"P2472 [SCOI2007] 蜥蜴","date":"2022-04-16T11:39:42.000Z","description":" ","_content":"\n[P2472 [SCOI2007] 蜥蜴](https://www.luogu.com.cn/problem/P2472)\n## 分析\n这道题同样也要拆点，每个点最多能经过的蜥蜴数就是它的高度，拆点后中间边的流量设为这个石柱的高度即可。剩下的就枚举两个合法石柱并建边，把源点和有蜥蜴的点相连，容量为 $1$，把能跳出地图的点与汇点相连。\n## code\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<queue>\nusing namespace std;\nint m,n,N,d,o,p=1,s1,s2,t[10001],t0[10001],f[10001];\nstruct str\n{\n    int m,q,r;\n}a[1000001];\nvoid road(int x,int y,int r)\n{\n    a[++p].m=y;\n    a[p].q=t[x];\n    t[x]=p;\n    a[p].r=r;\n}\nbool bfs()\n{\n    queue<int> Q;\n    Q.push(s1);\n    for(int i=1;i<=N;++i) f[i]=0;\n    f[s1]=1;\n    while(!Q.empty())\n    {\n        int k=Q.front();\n        Q.pop();\n        for(int i=t[k];i!=0;i=a[i].q)\n        {\n            if(f[a[i].m]==0&&a[i].r!=0)\n            {\n                f[a[i].m]=f[k]+1;\n                Q.push(a[i].m);\n            }\n        }\n    }\n    return f[s2]!=0;\n}\nint dfs(int x,int r)\n{\n    if(x==s2) return r;\n    int s=0;\n    for(int i=t0[x];i!=0;i=a[i].q)\n    {\n        t0[x]=i;\n        if(f[a[i].m]==f[x]+1&&a[i].r!=0)\n        {\n            int z=dfs(a[i].m,min(r,a[i].r));\n            if(z!=0)\n            {\n                a[i].r-=z;\n                a[i^1].r+=z;\n                r-=z;\n                s+=z;\n            }\n            else f[a[i].m]=0;\n            if(r==0) return s; \n        }\n    }\n    return s;\n}\nint main()\n{\n    scanf(\"%d%d%d\",&m,&n,&d);\n    N=m*n*2+2;\n    s1=N-1;\n    s2=N;\n    for(int i=1;i<=m;++i)\n    {\n        scanf(\"\\n\");\n        for(int j=1;j<=n;++j)\n        {\n            int r=getchar()-'0';\n            if(r!=0)\n            {\n                int a1=(i-1)*n+j;\n                road(a1+m*n,a1,r);\n                road(a1,a1+m*n,0);\n            }\n        }\n    }\n    for(int i=1;i<=m;++i)\n    {\n        scanf(\"\\n\");\n        for(int j=1;j<=n;++j)\n        {\n            char z=getchar();\n            if(z=='L')\n            {\n                ++o;\n                int a1=(i-1)*n+j;\n                road(s1,a1+m*n,1);\n                road(a1+m*n,s1,0);\n            }\n        }\n    }\n    for(int i=1;i<=m;++i)\n    {\n        for(int j=1;j<=n;++j)\n        {\n            if(i<=d||i>=m-d+1||j<=d||j>=n-d+1)\n            {\n                int a1=(i-1)*n+j;\n                road(a1,s2,1e9);\n                road(s2,a1,0);\n            }\n        }\n    }\n    for(int i=1;i<=m;++i)\n    {\n        for(int j=1;j<=n;++j)\n        {\n            int a1=(i-1)*n+j;\n            for(int k=1;k<=m;++k)\n            {\n                for(int l=1;l<=n;++l)\n                {\n                    int a2=(k-1)*n+l;\n                    if((i-k)*(i-k)+(j-l)*(j-l)<=d*d)\n                    {\n                        road(a1,a2+m*n,1e9);\n                        road(a2+m*n,a1,0);\n                    }\n                }\n            }\n        }\n    }\n    int r=0;\n    while(bfs())\n    {\n        for(int i=1;i<=N;++i) t0[i]=t[i];\n        r+=dfs(s1,1e9);\n    }\n    printf(\"%d\",o-r);\n    return 0;\n}\n```","source":"_posts/P2472-solution.md","raw":"---\ntitle: 'P2472 [SCOI2007] 蜥蜴'\ndate: 2022-04-16 19:39:42\ntags: [网络流,最大流]\ndescription: ' '\n---\n\n[P2472 [SCOI2007] 蜥蜴](https://www.luogu.com.cn/problem/P2472)\n## 分析\n这道题同样也要拆点，每个点最多能经过的蜥蜴数就是它的高度，拆点后中间边的流量设为这个石柱的高度即可。剩下的就枚举两个合法石柱并建边，把源点和有蜥蜴的点相连，容量为 $1$，把能跳出地图的点与汇点相连。\n## code\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<queue>\nusing namespace std;\nint m,n,N,d,o,p=1,s1,s2,t[10001],t0[10001],f[10001];\nstruct str\n{\n    int m,q,r;\n}a[1000001];\nvoid road(int x,int y,int r)\n{\n    a[++p].m=y;\n    a[p].q=t[x];\n    t[x]=p;\n    a[p].r=r;\n}\nbool bfs()\n{\n    queue<int> Q;\n    Q.push(s1);\n    for(int i=1;i<=N;++i) f[i]=0;\n    f[s1]=1;\n    while(!Q.empty())\n    {\n        int k=Q.front();\n        Q.pop();\n        for(int i=t[k];i!=0;i=a[i].q)\n        {\n            if(f[a[i].m]==0&&a[i].r!=0)\n            {\n                f[a[i].m]=f[k]+1;\n                Q.push(a[i].m);\n            }\n        }\n    }\n    return f[s2]!=0;\n}\nint dfs(int x,int r)\n{\n    if(x==s2) return r;\n    int s=0;\n    for(int i=t0[x];i!=0;i=a[i].q)\n    {\n        t0[x]=i;\n        if(f[a[i].m]==f[x]+1&&a[i].r!=0)\n        {\n            int z=dfs(a[i].m,min(r,a[i].r));\n            if(z!=0)\n            {\n                a[i].r-=z;\n                a[i^1].r+=z;\n                r-=z;\n                s+=z;\n            }\n            else f[a[i].m]=0;\n            if(r==0) return s; \n        }\n    }\n    return s;\n}\nint main()\n{\n    scanf(\"%d%d%d\",&m,&n,&d);\n    N=m*n*2+2;\n    s1=N-1;\n    s2=N;\n    for(int i=1;i<=m;++i)\n    {\n        scanf(\"\\n\");\n        for(int j=1;j<=n;++j)\n        {\n            int r=getchar()-'0';\n            if(r!=0)\n            {\n                int a1=(i-1)*n+j;\n                road(a1+m*n,a1,r);\n                road(a1,a1+m*n,0);\n            }\n        }\n    }\n    for(int i=1;i<=m;++i)\n    {\n        scanf(\"\\n\");\n        for(int j=1;j<=n;++j)\n        {\n            char z=getchar();\n            if(z=='L')\n            {\n                ++o;\n                int a1=(i-1)*n+j;\n                road(s1,a1+m*n,1);\n                road(a1+m*n,s1,0);\n            }\n        }\n    }\n    for(int i=1;i<=m;++i)\n    {\n        for(int j=1;j<=n;++j)\n        {\n            if(i<=d||i>=m-d+1||j<=d||j>=n-d+1)\n            {\n                int a1=(i-1)*n+j;\n                road(a1,s2,1e9);\n                road(s2,a1,0);\n            }\n        }\n    }\n    for(int i=1;i<=m;++i)\n    {\n        for(int j=1;j<=n;++j)\n        {\n            int a1=(i-1)*n+j;\n            for(int k=1;k<=m;++k)\n            {\n                for(int l=1;l<=n;++l)\n                {\n                    int a2=(k-1)*n+l;\n                    if((i-k)*(i-k)+(j-l)*(j-l)<=d*d)\n                    {\n                        road(a1,a2+m*n,1e9);\n                        road(a2+m*n,a1,0);\n                    }\n                }\n            }\n        }\n    }\n    int r=0;\n    while(bfs())\n    {\n        for(int i=1;i<=N;++i) t0[i]=t[i];\n        r+=dfs(s1,1e9);\n    }\n    printf(\"%d\",o-r);\n    return 0;\n}\n```","slug":"P2472-solution","published":1,"updated":"2022-11-28T13:47:47.407Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cleid927o000p2sjf502n90zb","content":"<p><a href=\"https://www.luogu.com.cn/problem/P2472\">P2472 [SCOI2007] 蜥蜴</a></p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>这道题同样也要拆点，每个点最多能经过的蜥蜴数就是它的高度，拆点后中间边的流量设为这个石柱的高度即可。剩下的就枚举两个合法石柱并建边，把源点和有蜥蜴的点相连，容量为 $1$，把能跳出地图的点与汇点相连。</p>\n<h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">int</span> m,n,N,d,o,p=<span class=\"number\">1</span>,s1,s2,t[<span class=\"number\">10001</span>],t0[<span class=\"number\">10001</span>],f[<span class=\"number\">10001</span>];</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">str</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> m,q,r;</span><br><span class=\"line\">&#125;a[<span class=\"number\">1000001</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">road</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y,<span class=\"type\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    a[++p].m=y;</span><br><span class=\"line\">    a[p].q=t[x];</span><br><span class=\"line\">    t[x]=p;</span><br><span class=\"line\">    a[p].r=r;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">bfs</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    queue&lt;<span class=\"type\">int</span>&gt; Q;</span><br><span class=\"line\">    Q.<span class=\"built_in\">push</span>(s1);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=N;++i) f[i]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    f[s1]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!Q.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> k=Q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">        Q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t[k];i!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(f[a[i].m]==<span class=\"number\">0</span>&amp;&amp;a[i].r!=<span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                f[a[i].m]=f[k]+<span class=\"number\">1</span>;</span><br><span class=\"line\">                Q.<span class=\"built_in\">push</span>(a[i].m);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> f[s2]!=<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x==s2) <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">    <span class=\"type\">int</span> s=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t0[x];i!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        t0[x]=i;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(f[a[i].m]==f[x]+<span class=\"number\">1</span>&amp;&amp;a[i].r!=<span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> z=<span class=\"built_in\">dfs</span>(a[i].m,<span class=\"built_in\">min</span>(r,a[i].r));</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(z!=<span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                a[i].r-=z;</span><br><span class=\"line\">                a[i^<span class=\"number\">1</span>].r+=z;</span><br><span class=\"line\">                r-=z;</span><br><span class=\"line\">                s+=z;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> f[a[i].m]=<span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(r==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> s; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>,&amp;m,&amp;n,&amp;d);</span><br><span class=\"line\">    N=m*n*<span class=\"number\">2</span>+<span class=\"number\">2</span>;</span><br><span class=\"line\">    s1=N<span class=\"number\">-1</span>;</span><br><span class=\"line\">    s2=N;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=n;++j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> r=<span class=\"built_in\">getchar</span>()-<span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(r!=<span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> a1=(i<span class=\"number\">-1</span>)*n+j;</span><br><span class=\"line\">                <span class=\"built_in\">road</span>(a1+m*n,a1,r);</span><br><span class=\"line\">                <span class=\"built_in\">road</span>(a1,a1+m*n,<span class=\"number\">0</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=n;++j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">char</span> z=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(z==<span class=\"string\">&#x27;L&#x27;</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                ++o;</span><br><span class=\"line\">                <span class=\"type\">int</span> a1=(i<span class=\"number\">-1</span>)*n+j;</span><br><span class=\"line\">                <span class=\"built_in\">road</span>(s1,a1+m*n,<span class=\"number\">1</span>);</span><br><span class=\"line\">                <span class=\"built_in\">road</span>(a1+m*n,s1,<span class=\"number\">0</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=n;++j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i&lt;=d||i&gt;=m-d+<span class=\"number\">1</span>||j&lt;=d||j&gt;=n-d+<span class=\"number\">1</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> a1=(i<span class=\"number\">-1</span>)*n+j;</span><br><span class=\"line\">                <span class=\"built_in\">road</span>(a1,s2,<span class=\"number\">1e9</span>);</span><br><span class=\"line\">                <span class=\"built_in\">road</span>(s2,a1,<span class=\"number\">0</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=n;++j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> a1=(i<span class=\"number\">-1</span>)*n+j;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> k=<span class=\"number\">1</span>;k&lt;=m;++k)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"type\">int</span> l=<span class=\"number\">1</span>;l&lt;=n;++l)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"type\">int</span> a2=(k<span class=\"number\">-1</span>)*n+l;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>((i-k)*(i-k)+(j-l)*(j-l)&lt;=d*d)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"built_in\">road</span>(a1,a2+m*n,<span class=\"number\">1e9</span>);</span><br><span class=\"line\">                        <span class=\"built_in\">road</span>(a2+m*n,a1,<span class=\"number\">0</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> r=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">bfs</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=N;++i) t0[i]=t[i];</span><br><span class=\"line\">        r+=<span class=\"built_in\">dfs</span>(s1,<span class=\"number\">1e9</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,o-r);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://www.luogu.com.cn/problem/P2472\">P2472 [SCOI2007] 蜥蜴</a></p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>这道题同样也要拆点，每个点最多能经过的蜥蜴数就是它的高度，拆点后中间边的流量设为这个石柱的高度即可。剩下的就枚举两个合法石柱并建边，把源点和有蜥蜴的点相连，容量为 $1$，把能跳出地图的点与汇点相连。</p>\n<h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">int</span> m,n,N,d,o,p=<span class=\"number\">1</span>,s1,s2,t[<span class=\"number\">10001</span>],t0[<span class=\"number\">10001</span>],f[<span class=\"number\">10001</span>];</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">str</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> m,q,r;</span><br><span class=\"line\">&#125;a[<span class=\"number\">1000001</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">road</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y,<span class=\"type\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    a[++p].m=y;</span><br><span class=\"line\">    a[p].q=t[x];</span><br><span class=\"line\">    t[x]=p;</span><br><span class=\"line\">    a[p].r=r;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">bfs</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    queue&lt;<span class=\"type\">int</span>&gt; Q;</span><br><span class=\"line\">    Q.<span class=\"built_in\">push</span>(s1);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=N;++i) f[i]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    f[s1]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!Q.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> k=Q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">        Q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t[k];i!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(f[a[i].m]==<span class=\"number\">0</span>&amp;&amp;a[i].r!=<span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                f[a[i].m]=f[k]+<span class=\"number\">1</span>;</span><br><span class=\"line\">                Q.<span class=\"built_in\">push</span>(a[i].m);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> f[s2]!=<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x==s2) <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">    <span class=\"type\">int</span> s=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t0[x];i!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        t0[x]=i;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(f[a[i].m]==f[x]+<span class=\"number\">1</span>&amp;&amp;a[i].r!=<span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> z=<span class=\"built_in\">dfs</span>(a[i].m,<span class=\"built_in\">min</span>(r,a[i].r));</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(z!=<span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                a[i].r-=z;</span><br><span class=\"line\">                a[i^<span class=\"number\">1</span>].r+=z;</span><br><span class=\"line\">                r-=z;</span><br><span class=\"line\">                s+=z;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> f[a[i].m]=<span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(r==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> s; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>,&amp;m,&amp;n,&amp;d);</span><br><span class=\"line\">    N=m*n*<span class=\"number\">2</span>+<span class=\"number\">2</span>;</span><br><span class=\"line\">    s1=N<span class=\"number\">-1</span>;</span><br><span class=\"line\">    s2=N;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=n;++j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> r=<span class=\"built_in\">getchar</span>()-<span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(r!=<span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> a1=(i<span class=\"number\">-1</span>)*n+j;</span><br><span class=\"line\">                <span class=\"built_in\">road</span>(a1+m*n,a1,r);</span><br><span class=\"line\">                <span class=\"built_in\">road</span>(a1,a1+m*n,<span class=\"number\">0</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=n;++j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">char</span> z=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(z==<span class=\"string\">&#x27;L&#x27;</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                ++o;</span><br><span class=\"line\">                <span class=\"type\">int</span> a1=(i<span class=\"number\">-1</span>)*n+j;</span><br><span class=\"line\">                <span class=\"built_in\">road</span>(s1,a1+m*n,<span class=\"number\">1</span>);</span><br><span class=\"line\">                <span class=\"built_in\">road</span>(a1+m*n,s1,<span class=\"number\">0</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=n;++j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i&lt;=d||i&gt;=m-d+<span class=\"number\">1</span>||j&lt;=d||j&gt;=n-d+<span class=\"number\">1</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> a1=(i<span class=\"number\">-1</span>)*n+j;</span><br><span class=\"line\">                <span class=\"built_in\">road</span>(a1,s2,<span class=\"number\">1e9</span>);</span><br><span class=\"line\">                <span class=\"built_in\">road</span>(s2,a1,<span class=\"number\">0</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=n;++j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> a1=(i<span class=\"number\">-1</span>)*n+j;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> k=<span class=\"number\">1</span>;k&lt;=m;++k)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"type\">int</span> l=<span class=\"number\">1</span>;l&lt;=n;++l)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"type\">int</span> a2=(k<span class=\"number\">-1</span>)*n+l;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>((i-k)*(i-k)+(j-l)*(j-l)&lt;=d*d)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"built_in\">road</span>(a1,a2+m*n,<span class=\"number\">1e9</span>);</span><br><span class=\"line\">                        <span class=\"built_in\">road</span>(a2+m*n,a1,<span class=\"number\">0</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> r=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">bfs</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=N;++i) t0[i]=t[i];</span><br><span class=\"line\">        r+=<span class=\"built_in\">dfs</span>(s1,<span class=\"number\">1e9</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,o-r);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"P2604 [ZJOI2010]网络扩容","date":"2022-05-10T05:25:28.000Z","description":" ","_content":"\n[P2604 [ZJOI2010]网络扩容](https://www.luogu.com.cn/problem/P2604)\n## 分析\n我们先来分析一下这个问题：我们要在一个图中跑费用流，当一条边流量在 $c$ 以下时，费用为 $0$，当这条边容量超过 $c$ 时，超过部分的费用为 $w$。我们可以发现，图中每一条边都有 $2$ 种计费方式，而且是分段的一次函数。这时候我们要用到经典的“拆边”，将这条边拆成 $2$ 条边，一条边的容量为 $c$，费用为 $0$，另一条边容量为 $inf$，费用为 $w$。如果这条边的流量不超过 $c$，那么为了费用最小，所有流量都会从第 $1$ 条边流过。而如果流量超过 $c$，多余的部分就会从第 $2$ 条边流过，且多余部分费用为 $w$。这种方法有时非常好用，但是仅限于此分段函数的斜率单调不下降的时候，也就是费用逐渐变大，否则无法使用（在最大费用最大流时相反）。\n注意在跑完第一遍最大流之后的初始化。\n## code\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<queue>\nusing namespace std;\ntypedef long long ll;\nconst int N=10001,M=100001;\nint n,m,r0,p=1,v,s1,s2,t[N],t0[N];\nll f[N],b[N][4];\nbool h[N];\nstruct str\n{\n    int m,q;\n    ll r,w;\n}a[M];\nvoid road(int x,int y,ll r,ll w)\n{\n    a[++p].m=y;\n    a[p].q=t[x];\n    t[x]=p;\n    a[p].r=r;\n    a[p].w=w;\n}\nbool SPFA()\n{\n    queue<int> Q;\n    Q.push(s1);\n    for(int i=1;i<=n+1;++i)\n    {\n        f[i]=1e18;\n        h[i]=false;\n    }\n    f[s1]=0;\n    h[s1]=true;\n    while(!Q.empty())\n    {\n        int k=Q.front();\n        Q.pop();\n        if(h[k]==false) continue;\n        h[k]=false;\n        for(int i=t[k];i!=0;i=a[i].q)\n        {\n            if(a[i].r>0&&f[k]+a[i].w<f[a[i].m])\n            {\n                f[a[i].m]=f[k]+a[i].w;\n                Q.push(a[i].m);\n                h[a[i].m]=true;\n            }\n        }\n    }\n    if(f[s2]!=1e18) return true;\n    return false;\n}\nll dfs(int x,ll r)\n{\n    if(x==s2) return r;\n    ll s=0;\n    for(int i=t0[x];i!=0;i=a[i].q)\n    {\n        t0[x]=i;\n        if(h[a[i].m]==false&&a[i].r>0&&f[a[i].m]==f[x]+a[i].w)\n        {\n            h[a[i].m]=true;\n            ll z=dfs(a[i].m,min(r,a[i].r));\n            h[a[i].m]=false;\n            if(z!=0)\n            {\n                a[i].r-=z;\n                a[i^1].r+=z;\n                r-=z;\n                s+=z;\n                v+=z*a[i].w;\n            }\n            else f[a[i].m]=0;\n            if(r==0) return s; \n        }\n    }\n    return s;\n}\nint main()\n{\n    scanf(\"%d%d%d\",&n,&m,&r0);\n    s1=1,s2=n;\n    for(int i=1;i<=m;++i)\n    {\n        int x,y;\n        ll r,w;\n        scanf(\"%d%d%lld%lld\",&x,&y,&r,&w);\n        b[i][0]=x,b[i][1]=y,b[i][2]=r,b[i][3]=w;\n        road(x,y,r,0);\n        road(y,x,0,0);\n    }\n    ll r=0;\n    while(SPFA())\n    {\n        for(int i=1;i<=n+1;++i) \n        {\n            t0[i]=t[i];\n            h[i]=false;\n        }\n        r+=dfs(s1,1e18);\n    }\n    printf(\"%lld \",r);\n    s1=n+1;\n    road(s1,1,r0,0);\n    road(1,s1,0,0);\n    for(int i=1;i<=m;++i)\n    {\n        road(b[i][0],b[i][1],1e18,b[i][3]);\n        road(b[i][1],b[i][0],0,-b[i][3]);\n    }\n    v=0;\n    while(SPFA())\n    {\n        for(int i=1;i<=n+1;++i) \n        {\n            t0[i]=t[i];\n            h[i]=false;\n        }\n        r+=dfs(s1,1e18);\n    }\n    printf(\"%lld\",v);\n    return 0;\n}\n```","source":"_posts/P2604-solution.md","raw":"---\ntitle: 'P2604 [ZJOI2010]网络扩容'\ndate: 2022-05-10 13:25:28\ntags: [网络流,费用流]\ndescription: ' '\n---\n\n[P2604 [ZJOI2010]网络扩容](https://www.luogu.com.cn/problem/P2604)\n## 分析\n我们先来分析一下这个问题：我们要在一个图中跑费用流，当一条边流量在 $c$ 以下时，费用为 $0$，当这条边容量超过 $c$ 时，超过部分的费用为 $w$。我们可以发现，图中每一条边都有 $2$ 种计费方式，而且是分段的一次函数。这时候我们要用到经典的“拆边”，将这条边拆成 $2$ 条边，一条边的容量为 $c$，费用为 $0$，另一条边容量为 $inf$，费用为 $w$。如果这条边的流量不超过 $c$，那么为了费用最小，所有流量都会从第 $1$ 条边流过。而如果流量超过 $c$，多余的部分就会从第 $2$ 条边流过，且多余部分费用为 $w$。这种方法有时非常好用，但是仅限于此分段函数的斜率单调不下降的时候，也就是费用逐渐变大，否则无法使用（在最大费用最大流时相反）。\n注意在跑完第一遍最大流之后的初始化。\n## code\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<queue>\nusing namespace std;\ntypedef long long ll;\nconst int N=10001,M=100001;\nint n,m,r0,p=1,v,s1,s2,t[N],t0[N];\nll f[N],b[N][4];\nbool h[N];\nstruct str\n{\n    int m,q;\n    ll r,w;\n}a[M];\nvoid road(int x,int y,ll r,ll w)\n{\n    a[++p].m=y;\n    a[p].q=t[x];\n    t[x]=p;\n    a[p].r=r;\n    a[p].w=w;\n}\nbool SPFA()\n{\n    queue<int> Q;\n    Q.push(s1);\n    for(int i=1;i<=n+1;++i)\n    {\n        f[i]=1e18;\n        h[i]=false;\n    }\n    f[s1]=0;\n    h[s1]=true;\n    while(!Q.empty())\n    {\n        int k=Q.front();\n        Q.pop();\n        if(h[k]==false) continue;\n        h[k]=false;\n        for(int i=t[k];i!=0;i=a[i].q)\n        {\n            if(a[i].r>0&&f[k]+a[i].w<f[a[i].m])\n            {\n                f[a[i].m]=f[k]+a[i].w;\n                Q.push(a[i].m);\n                h[a[i].m]=true;\n            }\n        }\n    }\n    if(f[s2]!=1e18) return true;\n    return false;\n}\nll dfs(int x,ll r)\n{\n    if(x==s2) return r;\n    ll s=0;\n    for(int i=t0[x];i!=0;i=a[i].q)\n    {\n        t0[x]=i;\n        if(h[a[i].m]==false&&a[i].r>0&&f[a[i].m]==f[x]+a[i].w)\n        {\n            h[a[i].m]=true;\n            ll z=dfs(a[i].m,min(r,a[i].r));\n            h[a[i].m]=false;\n            if(z!=0)\n            {\n                a[i].r-=z;\n                a[i^1].r+=z;\n                r-=z;\n                s+=z;\n                v+=z*a[i].w;\n            }\n            else f[a[i].m]=0;\n            if(r==0) return s; \n        }\n    }\n    return s;\n}\nint main()\n{\n    scanf(\"%d%d%d\",&n,&m,&r0);\n    s1=1,s2=n;\n    for(int i=1;i<=m;++i)\n    {\n        int x,y;\n        ll r,w;\n        scanf(\"%d%d%lld%lld\",&x,&y,&r,&w);\n        b[i][0]=x,b[i][1]=y,b[i][2]=r,b[i][3]=w;\n        road(x,y,r,0);\n        road(y,x,0,0);\n    }\n    ll r=0;\n    while(SPFA())\n    {\n        for(int i=1;i<=n+1;++i) \n        {\n            t0[i]=t[i];\n            h[i]=false;\n        }\n        r+=dfs(s1,1e18);\n    }\n    printf(\"%lld \",r);\n    s1=n+1;\n    road(s1,1,r0,0);\n    road(1,s1,0,0);\n    for(int i=1;i<=m;++i)\n    {\n        road(b[i][0],b[i][1],1e18,b[i][3]);\n        road(b[i][1],b[i][0],0,-b[i][3]);\n    }\n    v=0;\n    while(SPFA())\n    {\n        for(int i=1;i<=n+1;++i) \n        {\n            t0[i]=t[i];\n            h[i]=false;\n        }\n        r+=dfs(s1,1e18);\n    }\n    printf(\"%lld\",v);\n    return 0;\n}\n```","slug":"P2604-solution","published":1,"updated":"2022-11-28T13:47:47.407Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cleid927p000r2sjfd36zemgi","content":"<p><a href=\"https://www.luogu.com.cn/problem/P2604\">P2604 [ZJOI2010]网络扩容</a></p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>我们先来分析一下这个问题：我们要在一个图中跑费用流，当一条边流量在 $c$ 以下时，费用为 $0$，当这条边容量超过 $c$ 时，超过部分的费用为 $w$。我们可以发现，图中每一条边都有 $2$ 种计费方式，而且是分段的一次函数。这时候我们要用到经典的“拆边”，将这条边拆成 $2$ 条边，一条边的容量为 $c$，费用为 $0$，另一条边容量为 $inf$，费用为 $w$。如果这条边的流量不超过 $c$，那么为了费用最小，所有流量都会从第 $1$ 条边流过。而如果流量超过 $c$，多余的部分就会从第 $2$ 条边流过，且多余部分费用为 $w$。这种方法有时非常好用，但是仅限于此分段函数的斜率单调不下降的时候，也就是费用逐渐变大，否则无法使用（在最大费用最大流时相反）。<br>注意在跑完第一遍最大流之后的初始化。</p>\n<h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> ll;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">10001</span>,M=<span class=\"number\">100001</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m,r0,p=<span class=\"number\">1</span>,v,s1,s2,t[N],t0[N];</span><br><span class=\"line\">ll f[N],b[N][<span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"type\">bool</span> h[N];</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">str</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> m,q;</span><br><span class=\"line\">    ll r,w;</span><br><span class=\"line\">&#125;a[M];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">road</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y,ll r,ll w)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    a[++p].m=y;</span><br><span class=\"line\">    a[p].q=t[x];</span><br><span class=\"line\">    t[x]=p;</span><br><span class=\"line\">    a[p].r=r;</span><br><span class=\"line\">    a[p].w=w;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">SPFA</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    queue&lt;<span class=\"type\">int</span>&gt; Q;</span><br><span class=\"line\">    Q.<span class=\"built_in\">push</span>(s1);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n+<span class=\"number\">1</span>;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        f[i]=<span class=\"number\">1e18</span>;</span><br><span class=\"line\">        h[i]=<span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    f[s1]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    h[s1]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!Q.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> k=Q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">        Q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(h[k]==<span class=\"literal\">false</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        h[k]=<span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t[k];i!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(a[i].r&gt;<span class=\"number\">0</span>&amp;&amp;f[k]+a[i].w&lt;f[a[i].m])</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                f[a[i].m]=f[k]+a[i].w;</span><br><span class=\"line\">                Q.<span class=\"built_in\">push</span>(a[i].m);</span><br><span class=\"line\">                h[a[i].m]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(f[s2]!=<span class=\"number\">1e18</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> x,ll r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x==s2) <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">    ll s=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t0[x];i!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        t0[x]=i;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(h[a[i].m]==<span class=\"literal\">false</span>&amp;&amp;a[i].r&gt;<span class=\"number\">0</span>&amp;&amp;f[a[i].m]==f[x]+a[i].w)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            h[a[i].m]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">            ll z=<span class=\"built_in\">dfs</span>(a[i].m,<span class=\"built_in\">min</span>(r,a[i].r));</span><br><span class=\"line\">            h[a[i].m]=<span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(z!=<span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                a[i].r-=z;</span><br><span class=\"line\">                a[i^<span class=\"number\">1</span>].r+=z;</span><br><span class=\"line\">                r-=z;</span><br><span class=\"line\">                s+=z;</span><br><span class=\"line\">                v+=z*a[i].w;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> f[a[i].m]=<span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(r==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> s; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;r0);</span><br><span class=\"line\">    s1=<span class=\"number\">1</span>,s2=n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x,y;</span><br><span class=\"line\">        ll r,w;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%lld%lld&quot;</span>,&amp;x,&amp;y,&amp;r,&amp;w);</span><br><span class=\"line\">        b[i][<span class=\"number\">0</span>]=x,b[i][<span class=\"number\">1</span>]=y,b[i][<span class=\"number\">2</span>]=r,b[i][<span class=\"number\">3</span>]=w;</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(x,y,r,<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(y,x,<span class=\"number\">0</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ll r=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">SPFA</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n+<span class=\"number\">1</span>;++i) </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            t0[i]=t[i];</span><br><span class=\"line\">            h[i]=<span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        r+=<span class=\"built_in\">dfs</span>(s1,<span class=\"number\">1e18</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld &quot;</span>,r);</span><br><span class=\"line\">    s1=n+<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">road</span>(s1,<span class=\"number\">1</span>,r0,<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">road</span>(<span class=\"number\">1</span>,s1,<span class=\"number\">0</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(b[i][<span class=\"number\">0</span>],b[i][<span class=\"number\">1</span>],<span class=\"number\">1e18</span>,b[i][<span class=\"number\">3</span>]);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(b[i][<span class=\"number\">1</span>],b[i][<span class=\"number\">0</span>],<span class=\"number\">0</span>,-b[i][<span class=\"number\">3</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    v=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">SPFA</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n+<span class=\"number\">1</span>;++i) </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            t0[i]=t[i];</span><br><span class=\"line\">            h[i]=<span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        r+=<span class=\"built_in\">dfs</span>(s1,<span class=\"number\">1e18</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld&quot;</span>,v);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://www.luogu.com.cn/problem/P2604\">P2604 [ZJOI2010]网络扩容</a></p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>我们先来分析一下这个问题：我们要在一个图中跑费用流，当一条边流量在 $c$ 以下时，费用为 $0$，当这条边容量超过 $c$ 时，超过部分的费用为 $w$。我们可以发现，图中每一条边都有 $2$ 种计费方式，而且是分段的一次函数。这时候我们要用到经典的“拆边”，将这条边拆成 $2$ 条边，一条边的容量为 $c$，费用为 $0$，另一条边容量为 $inf$，费用为 $w$。如果这条边的流量不超过 $c$，那么为了费用最小，所有流量都会从第 $1$ 条边流过。而如果流量超过 $c$，多余的部分就会从第 $2$ 条边流过，且多余部分费用为 $w$。这种方法有时非常好用，但是仅限于此分段函数的斜率单调不下降的时候，也就是费用逐渐变大，否则无法使用（在最大费用最大流时相反）。<br>注意在跑完第一遍最大流之后的初始化。</p>\n<h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> ll;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">10001</span>,M=<span class=\"number\">100001</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m,r0,p=<span class=\"number\">1</span>,v,s1,s2,t[N],t0[N];</span><br><span class=\"line\">ll f[N],b[N][<span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"type\">bool</span> h[N];</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">str</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> m,q;</span><br><span class=\"line\">    ll r,w;</span><br><span class=\"line\">&#125;a[M];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">road</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y,ll r,ll w)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    a[++p].m=y;</span><br><span class=\"line\">    a[p].q=t[x];</span><br><span class=\"line\">    t[x]=p;</span><br><span class=\"line\">    a[p].r=r;</span><br><span class=\"line\">    a[p].w=w;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">SPFA</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    queue&lt;<span class=\"type\">int</span>&gt; Q;</span><br><span class=\"line\">    Q.<span class=\"built_in\">push</span>(s1);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n+<span class=\"number\">1</span>;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        f[i]=<span class=\"number\">1e18</span>;</span><br><span class=\"line\">        h[i]=<span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    f[s1]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    h[s1]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!Q.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> k=Q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">        Q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(h[k]==<span class=\"literal\">false</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        h[k]=<span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t[k];i!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(a[i].r&gt;<span class=\"number\">0</span>&amp;&amp;f[k]+a[i].w&lt;f[a[i].m])</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                f[a[i].m]=f[k]+a[i].w;</span><br><span class=\"line\">                Q.<span class=\"built_in\">push</span>(a[i].m);</span><br><span class=\"line\">                h[a[i].m]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(f[s2]!=<span class=\"number\">1e18</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> x,ll r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x==s2) <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">    ll s=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t0[x];i!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        t0[x]=i;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(h[a[i].m]==<span class=\"literal\">false</span>&amp;&amp;a[i].r&gt;<span class=\"number\">0</span>&amp;&amp;f[a[i].m]==f[x]+a[i].w)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            h[a[i].m]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">            ll z=<span class=\"built_in\">dfs</span>(a[i].m,<span class=\"built_in\">min</span>(r,a[i].r));</span><br><span class=\"line\">            h[a[i].m]=<span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(z!=<span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                a[i].r-=z;</span><br><span class=\"line\">                a[i^<span class=\"number\">1</span>].r+=z;</span><br><span class=\"line\">                r-=z;</span><br><span class=\"line\">                s+=z;</span><br><span class=\"line\">                v+=z*a[i].w;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> f[a[i].m]=<span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(r==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> s; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;r0);</span><br><span class=\"line\">    s1=<span class=\"number\">1</span>,s2=n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x,y;</span><br><span class=\"line\">        ll r,w;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%lld%lld&quot;</span>,&amp;x,&amp;y,&amp;r,&amp;w);</span><br><span class=\"line\">        b[i][<span class=\"number\">0</span>]=x,b[i][<span class=\"number\">1</span>]=y,b[i][<span class=\"number\">2</span>]=r,b[i][<span class=\"number\">3</span>]=w;</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(x,y,r,<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(y,x,<span class=\"number\">0</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ll r=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">SPFA</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n+<span class=\"number\">1</span>;++i) </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            t0[i]=t[i];</span><br><span class=\"line\">            h[i]=<span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        r+=<span class=\"built_in\">dfs</span>(s1,<span class=\"number\">1e18</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld &quot;</span>,r);</span><br><span class=\"line\">    s1=n+<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">road</span>(s1,<span class=\"number\">1</span>,r0,<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">road</span>(<span class=\"number\">1</span>,s1,<span class=\"number\">0</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(b[i][<span class=\"number\">0</span>],b[i][<span class=\"number\">1</span>],<span class=\"number\">1e18</span>,b[i][<span class=\"number\">3</span>]);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(b[i][<span class=\"number\">1</span>],b[i][<span class=\"number\">0</span>],<span class=\"number\">0</span>,-b[i][<span class=\"number\">3</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    v=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">SPFA</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n+<span class=\"number\">1</span>;++i) </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            t0[i]=t[i];</span><br><span class=\"line\">            h[i]=<span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        r+=<span class=\"built_in\">dfs</span>(s1,<span class=\"number\">1e18</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld&quot;</span>,v);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"P2754 [CTSC1999]家园 / 星际转移问题","date":"2022-04-16T10:36:23.000Z","description":" ","_content":"\n[P2754 [CTSC1999]家园 / 星际转移问题](https://www.luogu.com.cn/problem/P2754)\n## 分析\n这道题其实也可以用网络流来做，每一个太空站（地球、月球）在每个时间都建一个点。由于人可以在太空站上停留，所以每一个点都要向下一个时间的对应点连边，容量为正无穷。对于每个太空船将当前时间的起点和终点连接起来，容量为太空船的承载能力。建出来的图如下：\n![1](/post-images/P2754-solution-1.png)\n（图片来自网络）\n但是我们只能在确定时间的情况下求出最多的转移人数，无法直接求出最少天数，必须二分。但是还有另一个方法，假设我们已经跑了时间在 $m$ 以内的图，得到了最大流和残留网络，如果我们加上 $m+1$ 时间的点和边，再在残留网络上跑最大流，将得到的最大流加在原来的最大流上，是不是就可以得到 $m+1$ 天的转移人数了？因为这相当于我们已经找到了一些増广路，继续寻找更多増广路的过程。这样我们跑出 $1\\sim m$ 时间的最大转移人数，只相当于跑了一遍时间 $m$ 的图上的最大流。对于无解情况，我们只需要选一个比较大的数，如果都跑不出来就判无解即可。\n## code\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<queue>\nusing namespace std;\nint N,M=200,n,m,q,p=1,s1,s2,t[10001],t0[10001],f[10001],e[201][501],y[501],z[501];\nbool u=true;\nstruct str\n{\n    int m,q;\n    int r;\n}a[1000001];\nvoid road(int x,int y,int r)\n{\n    a[++p].m=y;\n    a[p].q=t[x];\n    t[x]=p;\n    a[p].r=r;\n}\nbool bfs()\n{\n    queue<int> Q;\n    Q.push(s1);\n    for(int i=1;i<=N;++i) f[i]=0;\n    f[s1]=1;\n    while(!Q.empty())\n    {\n        int k=Q.front();\n        Q.pop();\n        for(int i=t[k];i!=0;i=a[i].q)\n        {\n            if(f[a[i].m]==0&&a[i].r!=0)\n            {\n                f[a[i].m]=f[k]+1;\n                Q.push(a[i].m);\n            }\n        }\n    }\n    return f[s2]!=0;\n}\nint dfs(int x,int r)\n{\n    if(x==s2) return r;\n    int s=0;\n    for(int i=t0[x];i!=0;i=a[i].q)\n    {\n        t0[x]=i;\n        if(f[a[i].m]==f[x]+1&&a[i].r!=0)\n        {\n            int z=dfs(a[i].m,min(r,a[i].r));\n            if(z!=0)\n            {\n                a[i].r-=z;\n                a[i^1].r+=z;\n                r-=z;\n                s+=z;\n            }\n            else f[a[i].m]=0;\n            if(r==0) return s; \n        }\n    }\n    return s;\n}\nint main()\n{\n    scanf(\"%d%d%d\",&n,&m,&q);\n    n+=2;\n    for(int i=1;i<=m;++i)\n    {\n        scanf(\"%d%d\",&z[i],&y[i]);\n        for(int j=0;j<=y[i]-1;++j)\n        {\n            scanf(\"%d\",&e[i][j]);\n            e[i][j]+=2;\n        }\n    }\n    s1=2;\n    int r=0;\n    for(int i=1;i<=M;++i)\n    {\n        N=(i+1)*n;\n        s2=i*n+1;\n        for(int j=1;j<=n;++j)\n        {\n            road((i-1)*n+j,i*n+j,1e9);\n            road(i*n+j,(i-1)*n+j,0);\n        }\n        for(int j=1;j<=m;++j)\n        {\n            road((i-1)*n+e[j][(i-1)%y[j]],i*n+e[j][i%y[j]],z[j]);\n            road(i*n+e[j][i%y[j]],(i-1)*n+e[j][(i-1)%y[j]],0);\n        }\n        while(bfs())\n        {\n            for(int j=1;j<=N;++j) t0[j]=t[j];\n            r+=dfs(s1,1e9);\n        }\n        if(r>=q)\n        {\n            printf(\"%d\",i);\n            return 0;\n        }\n    }\n    printf(\"0\");\n    return 0;\n}\n\n```","source":"_posts/P2754-solution.md","raw":"---\ntitle: 'P2754 [CTSC1999]家园 / 星际转移问题'\ndate: 2022-04-16 18:36:23\ntags: [网络流,最大流]\ndescription: ' '\n---\n\n[P2754 [CTSC1999]家园 / 星际转移问题](https://www.luogu.com.cn/problem/P2754)\n## 分析\n这道题其实也可以用网络流来做，每一个太空站（地球、月球）在每个时间都建一个点。由于人可以在太空站上停留，所以每一个点都要向下一个时间的对应点连边，容量为正无穷。对于每个太空船将当前时间的起点和终点连接起来，容量为太空船的承载能力。建出来的图如下：\n![1](/post-images/P2754-solution-1.png)\n（图片来自网络）\n但是我们只能在确定时间的情况下求出最多的转移人数，无法直接求出最少天数，必须二分。但是还有另一个方法，假设我们已经跑了时间在 $m$ 以内的图，得到了最大流和残留网络，如果我们加上 $m+1$ 时间的点和边，再在残留网络上跑最大流，将得到的最大流加在原来的最大流上，是不是就可以得到 $m+1$ 天的转移人数了？因为这相当于我们已经找到了一些増广路，继续寻找更多増广路的过程。这样我们跑出 $1\\sim m$ 时间的最大转移人数，只相当于跑了一遍时间 $m$ 的图上的最大流。对于无解情况，我们只需要选一个比较大的数，如果都跑不出来就判无解即可。\n## code\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<queue>\nusing namespace std;\nint N,M=200,n,m,q,p=1,s1,s2,t[10001],t0[10001],f[10001],e[201][501],y[501],z[501];\nbool u=true;\nstruct str\n{\n    int m,q;\n    int r;\n}a[1000001];\nvoid road(int x,int y,int r)\n{\n    a[++p].m=y;\n    a[p].q=t[x];\n    t[x]=p;\n    a[p].r=r;\n}\nbool bfs()\n{\n    queue<int> Q;\n    Q.push(s1);\n    for(int i=1;i<=N;++i) f[i]=0;\n    f[s1]=1;\n    while(!Q.empty())\n    {\n        int k=Q.front();\n        Q.pop();\n        for(int i=t[k];i!=0;i=a[i].q)\n        {\n            if(f[a[i].m]==0&&a[i].r!=0)\n            {\n                f[a[i].m]=f[k]+1;\n                Q.push(a[i].m);\n            }\n        }\n    }\n    return f[s2]!=0;\n}\nint dfs(int x,int r)\n{\n    if(x==s2) return r;\n    int s=0;\n    for(int i=t0[x];i!=0;i=a[i].q)\n    {\n        t0[x]=i;\n        if(f[a[i].m]==f[x]+1&&a[i].r!=0)\n        {\n            int z=dfs(a[i].m,min(r,a[i].r));\n            if(z!=0)\n            {\n                a[i].r-=z;\n                a[i^1].r+=z;\n                r-=z;\n                s+=z;\n            }\n            else f[a[i].m]=0;\n            if(r==0) return s; \n        }\n    }\n    return s;\n}\nint main()\n{\n    scanf(\"%d%d%d\",&n,&m,&q);\n    n+=2;\n    for(int i=1;i<=m;++i)\n    {\n        scanf(\"%d%d\",&z[i],&y[i]);\n        for(int j=0;j<=y[i]-1;++j)\n        {\n            scanf(\"%d\",&e[i][j]);\n            e[i][j]+=2;\n        }\n    }\n    s1=2;\n    int r=0;\n    for(int i=1;i<=M;++i)\n    {\n        N=(i+1)*n;\n        s2=i*n+1;\n        for(int j=1;j<=n;++j)\n        {\n            road((i-1)*n+j,i*n+j,1e9);\n            road(i*n+j,(i-1)*n+j,0);\n        }\n        for(int j=1;j<=m;++j)\n        {\n            road((i-1)*n+e[j][(i-1)%y[j]],i*n+e[j][i%y[j]],z[j]);\n            road(i*n+e[j][i%y[j]],(i-1)*n+e[j][(i-1)%y[j]],0);\n        }\n        while(bfs())\n        {\n            for(int j=1;j<=N;++j) t0[j]=t[j];\n            r+=dfs(s1,1e9);\n        }\n        if(r>=q)\n        {\n            printf(\"%d\",i);\n            return 0;\n        }\n    }\n    printf(\"0\");\n    return 0;\n}\n\n```","slug":"P2754-solution","published":1,"updated":"2022-11-28T13:55:21.975Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cleid927q000s2sjf80l34ggh","content":"<p><a href=\"https://www.luogu.com.cn/problem/P2754\">P2754 [CTSC1999]家园 &#x2F; 星际转移问题</a></p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>这道题其实也可以用网络流来做，每一个太空站（地球、月球）在每个时间都建一个点。由于人可以在太空站上停留，所以每一个点都要向下一个时间的对应点连边，容量为正无穷。对于每个太空船将当前时间的起点和终点连接起来，容量为太空船的承载能力。建出来的图如下：<br><img src=\"/post-images/P2754-solution-1.png\" alt=\"1\"><br>（图片来自网络）<br>但是我们只能在确定时间的情况下求出最多的转移人数，无法直接求出最少天数，必须二分。但是还有另一个方法，假设我们已经跑了时间在 $m$ 以内的图，得到了最大流和残留网络，如果我们加上 $m+1$ 时间的点和边，再在残留网络上跑最大流，将得到的最大流加在原来的最大流上，是不是就可以得到 $m+1$ 天的转移人数了？因为这相当于我们已经找到了一些増广路，继续寻找更多増广路的过程。这样我们跑出 $1\\sim m$ 时间的最大转移人数，只相当于跑了一遍时间 $m$ 的图上的最大流。对于无解情况，我们只需要选一个比较大的数，如果都跑不出来就判无解即可。</p>\n<h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">int</span> N,M=<span class=\"number\">200</span>,n,m,q,p=<span class=\"number\">1</span>,s1,s2,t[<span class=\"number\">10001</span>],t0[<span class=\"number\">10001</span>],f[<span class=\"number\">10001</span>],e[<span class=\"number\">201</span>][<span class=\"number\">501</span>],y[<span class=\"number\">501</span>],z[<span class=\"number\">501</span>];</span><br><span class=\"line\"><span class=\"type\">bool</span> u=<span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">str</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> m,q;</span><br><span class=\"line\">    <span class=\"type\">int</span> r;</span><br><span class=\"line\">&#125;a[<span class=\"number\">1000001</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">road</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y,<span class=\"type\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    a[++p].m=y;</span><br><span class=\"line\">    a[p].q=t[x];</span><br><span class=\"line\">    t[x]=p;</span><br><span class=\"line\">    a[p].r=r;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">bfs</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    queue&lt;<span class=\"type\">int</span>&gt; Q;</span><br><span class=\"line\">    Q.<span class=\"built_in\">push</span>(s1);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=N;++i) f[i]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    f[s1]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!Q.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> k=Q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">        Q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t[k];i!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(f[a[i].m]==<span class=\"number\">0</span>&amp;&amp;a[i].r!=<span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                f[a[i].m]=f[k]+<span class=\"number\">1</span>;</span><br><span class=\"line\">                Q.<span class=\"built_in\">push</span>(a[i].m);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> f[s2]!=<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x==s2) <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">    <span class=\"type\">int</span> s=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t0[x];i!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        t0[x]=i;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(f[a[i].m]==f[x]+<span class=\"number\">1</span>&amp;&amp;a[i].r!=<span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> z=<span class=\"built_in\">dfs</span>(a[i].m,<span class=\"built_in\">min</span>(r,a[i].r));</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(z!=<span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                a[i].r-=z;</span><br><span class=\"line\">                a[i^<span class=\"number\">1</span>].r+=z;</span><br><span class=\"line\">                r-=z;</span><br><span class=\"line\">                s+=z;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> f[a[i].m]=<span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(r==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> s; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;q);</span><br><span class=\"line\">    n+=<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;z[i],&amp;y[i]);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;=y[i]<span class=\"number\">-1</span>;++j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;e[i][j]);</span><br><span class=\"line\">            e[i][j]+=<span class=\"number\">2</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    s1=<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> r=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=M;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        N=(i+<span class=\"number\">1</span>)*n;</span><br><span class=\"line\">        s2=i*n+<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=n;++j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">road</span>((i<span class=\"number\">-1</span>)*n+j,i*n+j,<span class=\"number\">1e9</span>);</span><br><span class=\"line\">            <span class=\"built_in\">road</span>(i*n+j,(i<span class=\"number\">-1</span>)*n+j,<span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=m;++j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">road</span>((i<span class=\"number\">-1</span>)*n+e[j][(i<span class=\"number\">-1</span>)%y[j]],i*n+e[j][i%y[j]],z[j]);</span><br><span class=\"line\">            <span class=\"built_in\">road</span>(i*n+e[j][i%y[j]],(i<span class=\"number\">-1</span>)*n+e[j][(i<span class=\"number\">-1</span>)%y[j]],<span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"built_in\">bfs</span>())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=N;++j) t0[j]=t[j];</span><br><span class=\"line\">            r+=<span class=\"built_in\">dfs</span>(s1,<span class=\"number\">1e9</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(r&gt;=q)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,i);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;0&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://www.luogu.com.cn/problem/P2754\">P2754 [CTSC1999]家园 &#x2F; 星际转移问题</a></p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>这道题其实也可以用网络流来做，每一个太空站（地球、月球）在每个时间都建一个点。由于人可以在太空站上停留，所以每一个点都要向下一个时间的对应点连边，容量为正无穷。对于每个太空船将当前时间的起点和终点连接起来，容量为太空船的承载能力。建出来的图如下：<br><img src=\"/post-images/P2754-solution-1.png\" alt=\"1\"><br>（图片来自网络）<br>但是我们只能在确定时间的情况下求出最多的转移人数，无法直接求出最少天数，必须二分。但是还有另一个方法，假设我们已经跑了时间在 $m$ 以内的图，得到了最大流和残留网络，如果我们加上 $m+1$ 时间的点和边，再在残留网络上跑最大流，将得到的最大流加在原来的最大流上，是不是就可以得到 $m+1$ 天的转移人数了？因为这相当于我们已经找到了一些増广路，继续寻找更多増广路的过程。这样我们跑出 $1\\sim m$ 时间的最大转移人数，只相当于跑了一遍时间 $m$ 的图上的最大流。对于无解情况，我们只需要选一个比较大的数，如果都跑不出来就判无解即可。</p>\n<h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">int</span> N,M=<span class=\"number\">200</span>,n,m,q,p=<span class=\"number\">1</span>,s1,s2,t[<span class=\"number\">10001</span>],t0[<span class=\"number\">10001</span>],f[<span class=\"number\">10001</span>],e[<span class=\"number\">201</span>][<span class=\"number\">501</span>],y[<span class=\"number\">501</span>],z[<span class=\"number\">501</span>];</span><br><span class=\"line\"><span class=\"type\">bool</span> u=<span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">str</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> m,q;</span><br><span class=\"line\">    <span class=\"type\">int</span> r;</span><br><span class=\"line\">&#125;a[<span class=\"number\">1000001</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">road</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y,<span class=\"type\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    a[++p].m=y;</span><br><span class=\"line\">    a[p].q=t[x];</span><br><span class=\"line\">    t[x]=p;</span><br><span class=\"line\">    a[p].r=r;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">bfs</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    queue&lt;<span class=\"type\">int</span>&gt; Q;</span><br><span class=\"line\">    Q.<span class=\"built_in\">push</span>(s1);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=N;++i) f[i]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    f[s1]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!Q.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> k=Q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">        Q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t[k];i!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(f[a[i].m]==<span class=\"number\">0</span>&amp;&amp;a[i].r!=<span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                f[a[i].m]=f[k]+<span class=\"number\">1</span>;</span><br><span class=\"line\">                Q.<span class=\"built_in\">push</span>(a[i].m);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> f[s2]!=<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x==s2) <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">    <span class=\"type\">int</span> s=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t0[x];i!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        t0[x]=i;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(f[a[i].m]==f[x]+<span class=\"number\">1</span>&amp;&amp;a[i].r!=<span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> z=<span class=\"built_in\">dfs</span>(a[i].m,<span class=\"built_in\">min</span>(r,a[i].r));</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(z!=<span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                a[i].r-=z;</span><br><span class=\"line\">                a[i^<span class=\"number\">1</span>].r+=z;</span><br><span class=\"line\">                r-=z;</span><br><span class=\"line\">                s+=z;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> f[a[i].m]=<span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(r==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> s; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;q);</span><br><span class=\"line\">    n+=<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;z[i],&amp;y[i]);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;=y[i]<span class=\"number\">-1</span>;++j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;e[i][j]);</span><br><span class=\"line\">            e[i][j]+=<span class=\"number\">2</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    s1=<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> r=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=M;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        N=(i+<span class=\"number\">1</span>)*n;</span><br><span class=\"line\">        s2=i*n+<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=n;++j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">road</span>((i<span class=\"number\">-1</span>)*n+j,i*n+j,<span class=\"number\">1e9</span>);</span><br><span class=\"line\">            <span class=\"built_in\">road</span>(i*n+j,(i<span class=\"number\">-1</span>)*n+j,<span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=m;++j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">road</span>((i<span class=\"number\">-1</span>)*n+e[j][(i<span class=\"number\">-1</span>)%y[j]],i*n+e[j][i%y[j]],z[j]);</span><br><span class=\"line\">            <span class=\"built_in\">road</span>(i*n+e[j][i%y[j]],(i<span class=\"number\">-1</span>)*n+e[j][(i<span class=\"number\">-1</span>)%y[j]],<span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"built_in\">bfs</span>())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=N;++j) t0[j]=t[j];</span><br><span class=\"line\">            r+=<span class=\"built_in\">dfs</span>(s1,<span class=\"number\">1e9</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(r&gt;=q)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,i);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;0&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"P2740 [USACO4.2]草地排水Drainage Ditches","date":"2022-04-13T05:43:36.000Z","description":" ","_content":"\n[P2740 [USACO4.2]草地排水Drainage Ditches](https://www.luogu.com.cn/problem/P2740)\n## 分析\n最大流的模板。\n## code\n```cpp\n#include<cstdio>\n#include<queue>\n#include<algorithm>\nusing namespace std;\ntypedef long long ll;\nint n,m,p=1,t[10001],f[10001];\nstruct str\n{\n    int m,q;\n    ll w;\n}a[10000001];\nvoid road(int x,int y,ll w)\n{\n    a[++p].m=y;\n    a[p].w=w;\n    a[p].q=t[x];\n    t[x]=p;\n}\nbool bfs()\n{\n    queue<int> q;\n    q.push(1);\n    for(int i=1;i<=n;++i) f[i]=0;\n    f[1]=1;\n    while(!q.empty())\n    {\n        int k=q.front();\n        q.pop();\n        for(int i=t[k];i!=0;i=a[i].q)\n        {\n            if(f[a[i].m]==0&&a[i].w>0)\n            {\n                f[a[i].m]=f[k]+1;\n                q.push(a[i].m);\n            }\n        }\n    }\n    if(f[n]!=0) return true;\n    return false;\n}\nll dfs(int x,ll w)\n{\n    if(x==n) return w;\n    ll v=0;\n    for(int i=t[x];i!=0&&w!=0;i=a[i].q)\n    {\n        if(f[a[i].m]==f[x]+1&&a[i].w>0)\n        {\n            ll z=dfs(a[i].m,min(w,a[i].w));\n            a[i].w-=z;\n            a[i^1].w+=z;\n            w-=z;\n            v+=z;\n        }\n    }\n    if(v==0) f[x]=0;\n    return v;\n}\nint main()\n{\n    scanf(\"%d%d\",&m,&n);\n    for(int i=1;i<=m;++i)\n    {\n        int x,y;\n        ll w;\n        scanf(\"%d%d%lld\",&x,&y,&w);\n        road(x,y,w);\n        road(y,x,0);\n    }\n    ll w=0;\n    while(bfs()==true)\n    {\n        w+=dfs(1,1e18);\n    }\n    printf(\"%lld\",w);\n    return 0;\n}\n```","source":"_posts/P2740-solution.md","raw":"---\ntitle: 'P2740 [USACO4.2]草地排水Drainage Ditches'\ndate: 2022-04-13 13:43:36\ntags: [网络流,最大流]\ndescription: ' '\n---\n\n[P2740 [USACO4.2]草地排水Drainage Ditches](https://www.luogu.com.cn/problem/P2740)\n## 分析\n最大流的模板。\n## code\n```cpp\n#include<cstdio>\n#include<queue>\n#include<algorithm>\nusing namespace std;\ntypedef long long ll;\nint n,m,p=1,t[10001],f[10001];\nstruct str\n{\n    int m,q;\n    ll w;\n}a[10000001];\nvoid road(int x,int y,ll w)\n{\n    a[++p].m=y;\n    a[p].w=w;\n    a[p].q=t[x];\n    t[x]=p;\n}\nbool bfs()\n{\n    queue<int> q;\n    q.push(1);\n    for(int i=1;i<=n;++i) f[i]=0;\n    f[1]=1;\n    while(!q.empty())\n    {\n        int k=q.front();\n        q.pop();\n        for(int i=t[k];i!=0;i=a[i].q)\n        {\n            if(f[a[i].m]==0&&a[i].w>0)\n            {\n                f[a[i].m]=f[k]+1;\n                q.push(a[i].m);\n            }\n        }\n    }\n    if(f[n]!=0) return true;\n    return false;\n}\nll dfs(int x,ll w)\n{\n    if(x==n) return w;\n    ll v=0;\n    for(int i=t[x];i!=0&&w!=0;i=a[i].q)\n    {\n        if(f[a[i].m]==f[x]+1&&a[i].w>0)\n        {\n            ll z=dfs(a[i].m,min(w,a[i].w));\n            a[i].w-=z;\n            a[i^1].w+=z;\n            w-=z;\n            v+=z;\n        }\n    }\n    if(v==0) f[x]=0;\n    return v;\n}\nint main()\n{\n    scanf(\"%d%d\",&m,&n);\n    for(int i=1;i<=m;++i)\n    {\n        int x,y;\n        ll w;\n        scanf(\"%d%d%lld\",&x,&y,&w);\n        road(x,y,w);\n        road(y,x,0);\n    }\n    ll w=0;\n    while(bfs()==true)\n    {\n        w+=dfs(1,1e18);\n    }\n    printf(\"%lld\",w);\n    return 0;\n}\n```","slug":"P2740-solution","published":1,"updated":"2022-11-28T13:47:47.410Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cleid927t000u2sjf6sr039m6","content":"<p><a href=\"https://www.luogu.com.cn/problem/P2740\">P2740 [USACO4.2]草地排水Drainage Ditches</a></p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>最大流的模板。</p>\n<h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> ll;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m,p=<span class=\"number\">1</span>,t[<span class=\"number\">10001</span>],f[<span class=\"number\">10001</span>];</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">str</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> m,q;</span><br><span class=\"line\">    ll w;</span><br><span class=\"line\">&#125;a[<span class=\"number\">10000001</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">road</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y,ll w)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    a[++p].m=y;</span><br><span class=\"line\">    a[p].w=w;</span><br><span class=\"line\">    a[p].q=t[x];</span><br><span class=\"line\">    t[x]=p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">bfs</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    queue&lt;<span class=\"type\">int</span>&gt; q;</span><br><span class=\"line\">    q.<span class=\"built_in\">push</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i) f[i]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    f[<span class=\"number\">1</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!q.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> k=q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">        q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t[k];i!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(f[a[i].m]==<span class=\"number\">0</span>&amp;&amp;a[i].w&gt;<span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                f[a[i].m]=f[k]+<span class=\"number\">1</span>;</span><br><span class=\"line\">                q.<span class=\"built_in\">push</span>(a[i].m);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(f[n]!=<span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> x,ll w)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x==n) <span class=\"keyword\">return</span> w;</span><br><span class=\"line\">    ll v=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t[x];i!=<span class=\"number\">0</span>&amp;&amp;w!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(f[a[i].m]==f[x]+<span class=\"number\">1</span>&amp;&amp;a[i].w&gt;<span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ll z=<span class=\"built_in\">dfs</span>(a[i].m,<span class=\"built_in\">min</span>(w,a[i].w));</span><br><span class=\"line\">            a[i].w-=z;</span><br><span class=\"line\">            a[i^<span class=\"number\">1</span>].w+=z;</span><br><span class=\"line\">            w-=z;</span><br><span class=\"line\">            v+=z;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(v==<span class=\"number\">0</span>) f[x]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> v;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;m,&amp;n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x,y;</span><br><span class=\"line\">        ll w;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%lld&quot;</span>,&amp;x,&amp;y,&amp;w);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(x,y,w);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(y,x,<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ll w=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">bfs</span>()==<span class=\"literal\">true</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        w+=<span class=\"built_in\">dfs</span>(<span class=\"number\">1</span>,<span class=\"number\">1e18</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld&quot;</span>,w);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://www.luogu.com.cn/problem/P2740\">P2740 [USACO4.2]草地排水Drainage Ditches</a></p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>最大流的模板。</p>\n<h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> ll;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m,p=<span class=\"number\">1</span>,t[<span class=\"number\">10001</span>],f[<span class=\"number\">10001</span>];</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">str</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> m,q;</span><br><span class=\"line\">    ll w;</span><br><span class=\"line\">&#125;a[<span class=\"number\">10000001</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">road</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y,ll w)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    a[++p].m=y;</span><br><span class=\"line\">    a[p].w=w;</span><br><span class=\"line\">    a[p].q=t[x];</span><br><span class=\"line\">    t[x]=p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">bfs</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    queue&lt;<span class=\"type\">int</span>&gt; q;</span><br><span class=\"line\">    q.<span class=\"built_in\">push</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i) f[i]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    f[<span class=\"number\">1</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!q.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> k=q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">        q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t[k];i!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(f[a[i].m]==<span class=\"number\">0</span>&amp;&amp;a[i].w&gt;<span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                f[a[i].m]=f[k]+<span class=\"number\">1</span>;</span><br><span class=\"line\">                q.<span class=\"built_in\">push</span>(a[i].m);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(f[n]!=<span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> x,ll w)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x==n) <span class=\"keyword\">return</span> w;</span><br><span class=\"line\">    ll v=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t[x];i!=<span class=\"number\">0</span>&amp;&amp;w!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(f[a[i].m]==f[x]+<span class=\"number\">1</span>&amp;&amp;a[i].w&gt;<span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ll z=<span class=\"built_in\">dfs</span>(a[i].m,<span class=\"built_in\">min</span>(w,a[i].w));</span><br><span class=\"line\">            a[i].w-=z;</span><br><span class=\"line\">            a[i^<span class=\"number\">1</span>].w+=z;</span><br><span class=\"line\">            w-=z;</span><br><span class=\"line\">            v+=z;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(v==<span class=\"number\">0</span>) f[x]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> v;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;m,&amp;n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x,y;</span><br><span class=\"line\">        ll w;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%lld&quot;</span>,&amp;x,&amp;y,&amp;w);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(x,y,w);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(y,x,<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ll w=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">bfs</span>()==<span class=\"literal\">true</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        w+=<span class=\"built_in\">dfs</span>(<span class=\"number\">1</span>,<span class=\"number\">1e18</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld&quot;</span>,w);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"P2774 方格取数问题","date":"2022-04-17T03:25:18.000Z","description":" ","_content":"\n[P2774 方格取数问题](https://www.luogu.com.cn/problem/P2774)\n## 分析\n这实际上也是一道网络流的问题，但是和以前做的题都不一样，同时也很难想到怎么做。题目中要求任意两个相邻的方格不能同时取，如果我们把一个方格放在 A 组，另一个方块放在 B 组，那么所有和 A 中方格相邻的方格都要放在 B 组，和 B 中方格相邻的都要放在 A 组。我们可以发现，同一组中方格横纵坐标的和奇偶性相同，这样我们就可以直接分组了。于是我们就把这个图分成了两组，只有两组之间有关系，同一组的方格没有关系，是不是很像二分图？我们把所有相邻的方格都用一条边连上，问题转换为删去一些节点，使得两组之间连通，求出删去节点权值的最小值。\n于是我们又可以自然而然地想到最小割（最小割=最大流），但是最小割删去的是边，而不是点。我们转化一下，将源点和 A 组所有点相连，汇点和 B 组所有点相连，容量均为该点对应的数，这样删去一条边的代价刚好是对应点的数值。但是我们不能删去两组之间的边，为了不删去这些边，把这些边的容量设为正无穷，就永远不可能删去这些边了。由于最小割 $=$ 最大流，所以我们只需要跑一遍最大流即可。注意只能由 A 组连向 B 组或 B 组连向 A 组，不能同时连。\n建出来的图大概长这样：\n![1](/post-images/P2774-solution-1.png)\n## code\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<queue>\nusing namespace std;\ntypedef long long ll;\nconst int N=10001,M=1000001;\nint n,m,p=1,s1,s2,t[N],t0[N],f[N];\nll q;\nstruct str\n{\n    int m,q;\n    ll r;\n}a[M];\nvoid road(int x,int y,ll r)\n{\n    a[++p].m=y;\n    a[p].q=t[x];\n    t[x]=p;\n    a[p].r=r;\n}\nbool bfs()\n{\n    queue<int> Q;\n    Q.push(s1);\n    for(int i=1;i<=s2;++i) f[i]=0;\n    f[s1]=1;\n    while(!Q.empty())\n    {\n        int k=Q.front();\n        Q.pop();\n        for(int i=t[k];i!=0;i=a[i].q)\n        {\n            if(f[a[i].m]==0&&a[i].r!=0)\n            {\n                f[a[i].m]=f[k]+1;\n                Q.push(a[i].m);\n            }\n        }\n    }\n    return f[s2]!=0;\n}\nll dfs(int x,ll r)\n{\n    if(x==s2) return r;\n    ll s=0;\n    for(int i=t0[x];i!=0;i=a[i].q)\n    {\n        t0[x]=i;\n        if(f[a[i].m]==f[x]+1&&a[i].r!=0)\n        {\n            int z=dfs(a[i].m,min(r,a[i].r));\n            if(z!=0)\n            {\n                a[i].r-=z;\n                a[i^1].r+=z;\n                r-=z;\n                s+=z;\n            }\n            else f[a[i].m]=0;\n            if(r==0) return s; \n        }\n    }\n    return s;\n}\nint main()\n{\n    scanf(\"%d%d\",&m,&n);\n    s1=m*n+1;\n    s2=m*n+2;\n    for(int i=1;i<=m;++i)\n    {\n        for(int j=1;j<=n;++j)\n        {\n            int r;\n            scanf(\"%d\",&r);\n            q+=r;\n            if((i+j)&1)\n            {\n                road(s1,(i-1)*n+j,r);\n                road((i-1)*n+j,s1,0);\n                if(i!=1)\n                {\n                    road((i-1)*n+j,(i-2)*n+j,1e18);\n                    road((i-2)*n+j,(i-1)*n+j,0);\n                }\n                if(j!=1)\n                {\n                    road((i-1)*n+j,(i-1)*n+j-1,1e18);\n                    road((i-1)*n+j-1,(i-1)*n+j,0);\n                }\n                if(i!=m)\n                {\n                    road((i-1)*n+j,i*n+j,1e18);\n                    road(i*n+j,(i-1)*n+j,0);\n                }\n                if(j!=n)\n                {\n                    road((i-1)*n+j,(i-1)*n+j+1,1e18);\n                    road((i-1)*n+j+1,(i-1)*n+j,0);\n                }\n            }\n            else\n            {\n                road((i-1)*n+j,s2,r);\n                road(s2,(i-1)*n+j,0);\n            }\n        }\n    }\n    ll r=0;\n    while(bfs())\n    {\n        for(int i=1;i<=s2;++i) t0[i]=t[i];\n        r+=dfs(s1,1e18);\n    }\n    printf(\"%lld\",q-r);\n    return 0;\n}\n```","source":"_posts/P2774-solution.md","raw":"---\ntitle: 'P2774 方格取数问题'\ndate: 2022-04-17 11:25:18\ntags: [网络流,最大流]\ndescription: ' '\n---\n\n[P2774 方格取数问题](https://www.luogu.com.cn/problem/P2774)\n## 分析\n这实际上也是一道网络流的问题，但是和以前做的题都不一样，同时也很难想到怎么做。题目中要求任意两个相邻的方格不能同时取，如果我们把一个方格放在 A 组，另一个方块放在 B 组，那么所有和 A 中方格相邻的方格都要放在 B 组，和 B 中方格相邻的都要放在 A 组。我们可以发现，同一组中方格横纵坐标的和奇偶性相同，这样我们就可以直接分组了。于是我们就把这个图分成了两组，只有两组之间有关系，同一组的方格没有关系，是不是很像二分图？我们把所有相邻的方格都用一条边连上，问题转换为删去一些节点，使得两组之间连通，求出删去节点权值的最小值。\n于是我们又可以自然而然地想到最小割（最小割=最大流），但是最小割删去的是边，而不是点。我们转化一下，将源点和 A 组所有点相连，汇点和 B 组所有点相连，容量均为该点对应的数，这样删去一条边的代价刚好是对应点的数值。但是我们不能删去两组之间的边，为了不删去这些边，把这些边的容量设为正无穷，就永远不可能删去这些边了。由于最小割 $=$ 最大流，所以我们只需要跑一遍最大流即可。注意只能由 A 组连向 B 组或 B 组连向 A 组，不能同时连。\n建出来的图大概长这样：\n![1](/post-images/P2774-solution-1.png)\n## code\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<queue>\nusing namespace std;\ntypedef long long ll;\nconst int N=10001,M=1000001;\nint n,m,p=1,s1,s2,t[N],t0[N],f[N];\nll q;\nstruct str\n{\n    int m,q;\n    ll r;\n}a[M];\nvoid road(int x,int y,ll r)\n{\n    a[++p].m=y;\n    a[p].q=t[x];\n    t[x]=p;\n    a[p].r=r;\n}\nbool bfs()\n{\n    queue<int> Q;\n    Q.push(s1);\n    for(int i=1;i<=s2;++i) f[i]=0;\n    f[s1]=1;\n    while(!Q.empty())\n    {\n        int k=Q.front();\n        Q.pop();\n        for(int i=t[k];i!=0;i=a[i].q)\n        {\n            if(f[a[i].m]==0&&a[i].r!=0)\n            {\n                f[a[i].m]=f[k]+1;\n                Q.push(a[i].m);\n            }\n        }\n    }\n    return f[s2]!=0;\n}\nll dfs(int x,ll r)\n{\n    if(x==s2) return r;\n    ll s=0;\n    for(int i=t0[x];i!=0;i=a[i].q)\n    {\n        t0[x]=i;\n        if(f[a[i].m]==f[x]+1&&a[i].r!=0)\n        {\n            int z=dfs(a[i].m,min(r,a[i].r));\n            if(z!=0)\n            {\n                a[i].r-=z;\n                a[i^1].r+=z;\n                r-=z;\n                s+=z;\n            }\n            else f[a[i].m]=0;\n            if(r==0) return s; \n        }\n    }\n    return s;\n}\nint main()\n{\n    scanf(\"%d%d\",&m,&n);\n    s1=m*n+1;\n    s2=m*n+2;\n    for(int i=1;i<=m;++i)\n    {\n        for(int j=1;j<=n;++j)\n        {\n            int r;\n            scanf(\"%d\",&r);\n            q+=r;\n            if((i+j)&1)\n            {\n                road(s1,(i-1)*n+j,r);\n                road((i-1)*n+j,s1,0);\n                if(i!=1)\n                {\n                    road((i-1)*n+j,(i-2)*n+j,1e18);\n                    road((i-2)*n+j,(i-1)*n+j,0);\n                }\n                if(j!=1)\n                {\n                    road((i-1)*n+j,(i-1)*n+j-1,1e18);\n                    road((i-1)*n+j-1,(i-1)*n+j,0);\n                }\n                if(i!=m)\n                {\n                    road((i-1)*n+j,i*n+j,1e18);\n                    road(i*n+j,(i-1)*n+j,0);\n                }\n                if(j!=n)\n                {\n                    road((i-1)*n+j,(i-1)*n+j+1,1e18);\n                    road((i-1)*n+j+1,(i-1)*n+j,0);\n                }\n            }\n            else\n            {\n                road((i-1)*n+j,s2,r);\n                road(s2,(i-1)*n+j,0);\n            }\n        }\n    }\n    ll r=0;\n    while(bfs())\n    {\n        for(int i=1;i<=s2;++i) t0[i]=t[i];\n        r+=dfs(s1,1e18);\n    }\n    printf(\"%lld\",q-r);\n    return 0;\n}\n```","slug":"P2774-solution","published":1,"updated":"2022-11-28T13:55:21.977Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cleid927t000w2sjf0bip9203","content":"<p><a href=\"https://www.luogu.com.cn/problem/P2774\">P2774 方格取数问题</a></p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>这实际上也是一道网络流的问题，但是和以前做的题都不一样，同时也很难想到怎么做。题目中要求任意两个相邻的方格不能同时取，如果我们把一个方格放在 A 组，另一个方块放在 B 组，那么所有和 A 中方格相邻的方格都要放在 B 组，和 B 中方格相邻的都要放在 A 组。我们可以发现，同一组中方格横纵坐标的和奇偶性相同，这样我们就可以直接分组了。于是我们就把这个图分成了两组，只有两组之间有关系，同一组的方格没有关系，是不是很像二分图？我们把所有相邻的方格都用一条边连上，问题转换为删去一些节点，使得两组之间连通，求出删去节点权值的最小值。<br>于是我们又可以自然而然地想到最小割（最小割&#x3D;最大流），但是最小割删去的是边，而不是点。我们转化一下，将源点和 A 组所有点相连，汇点和 B 组所有点相连，容量均为该点对应的数，这样删去一条边的代价刚好是对应点的数值。但是我们不能删去两组之间的边，为了不删去这些边，把这些边的容量设为正无穷，就永远不可能删去这些边了。由于最小割 $&#x3D;$ 最大流，所以我们只需要跑一遍最大流即可。注意只能由 A 组连向 B 组或 B 组连向 A 组，不能同时连。<br>建出来的图大概长这样：<br><img src=\"/post-images/P2774-solution-1.png\" alt=\"1\"></p>\n<h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> ll;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">10001</span>,M=<span class=\"number\">1000001</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m,p=<span class=\"number\">1</span>,s1,s2,t[N],t0[N],f[N];</span><br><span class=\"line\">ll q;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">str</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> m,q;</span><br><span class=\"line\">    ll r;</span><br><span class=\"line\">&#125;a[M];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">road</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y,ll r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    a[++p].m=y;</span><br><span class=\"line\">    a[p].q=t[x];</span><br><span class=\"line\">    t[x]=p;</span><br><span class=\"line\">    a[p].r=r;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">bfs</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    queue&lt;<span class=\"type\">int</span>&gt; Q;</span><br><span class=\"line\">    Q.<span class=\"built_in\">push</span>(s1);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=s2;++i) f[i]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    f[s1]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!Q.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> k=Q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">        Q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t[k];i!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(f[a[i].m]==<span class=\"number\">0</span>&amp;&amp;a[i].r!=<span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                f[a[i].m]=f[k]+<span class=\"number\">1</span>;</span><br><span class=\"line\">                Q.<span class=\"built_in\">push</span>(a[i].m);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> f[s2]!=<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> x,ll r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x==s2) <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">    ll s=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t0[x];i!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        t0[x]=i;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(f[a[i].m]==f[x]+<span class=\"number\">1</span>&amp;&amp;a[i].r!=<span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> z=<span class=\"built_in\">dfs</span>(a[i].m,<span class=\"built_in\">min</span>(r,a[i].r));</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(z!=<span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                a[i].r-=z;</span><br><span class=\"line\">                a[i^<span class=\"number\">1</span>].r+=z;</span><br><span class=\"line\">                r-=z;</span><br><span class=\"line\">                s+=z;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> f[a[i].m]=<span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(r==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> s; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;m,&amp;n);</span><br><span class=\"line\">    s1=m*n+<span class=\"number\">1</span>;</span><br><span class=\"line\">    s2=m*n+<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=n;++j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> r;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;r);</span><br><span class=\"line\">            q+=r;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>((i+j)&amp;<span class=\"number\">1</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">road</span>(s1,(i<span class=\"number\">-1</span>)*n+j,r);</span><br><span class=\"line\">                <span class=\"built_in\">road</span>((i<span class=\"number\">-1</span>)*n+j,s1,<span class=\"number\">0</span>);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(i!=<span class=\"number\">1</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">road</span>((i<span class=\"number\">-1</span>)*n+j,(i<span class=\"number\">-2</span>)*n+j,<span class=\"number\">1e18</span>);</span><br><span class=\"line\">                    <span class=\"built_in\">road</span>((i<span class=\"number\">-2</span>)*n+j,(i<span class=\"number\">-1</span>)*n+j,<span class=\"number\">0</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(j!=<span class=\"number\">1</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">road</span>((i<span class=\"number\">-1</span>)*n+j,(i<span class=\"number\">-1</span>)*n+j<span class=\"number\">-1</span>,<span class=\"number\">1e18</span>);</span><br><span class=\"line\">                    <span class=\"built_in\">road</span>((i<span class=\"number\">-1</span>)*n+j<span class=\"number\">-1</span>,(i<span class=\"number\">-1</span>)*n+j,<span class=\"number\">0</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(i!=m)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">road</span>((i<span class=\"number\">-1</span>)*n+j,i*n+j,<span class=\"number\">1e18</span>);</span><br><span class=\"line\">                    <span class=\"built_in\">road</span>(i*n+j,(i<span class=\"number\">-1</span>)*n+j,<span class=\"number\">0</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(j!=n)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">road</span>((i<span class=\"number\">-1</span>)*n+j,(i<span class=\"number\">-1</span>)*n+j+<span class=\"number\">1</span>,<span class=\"number\">1e18</span>);</span><br><span class=\"line\">                    <span class=\"built_in\">road</span>((i<span class=\"number\">-1</span>)*n+j+<span class=\"number\">1</span>,(i<span class=\"number\">-1</span>)*n+j,<span class=\"number\">0</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">road</span>((i<span class=\"number\">-1</span>)*n+j,s2,r);</span><br><span class=\"line\">                <span class=\"built_in\">road</span>(s2,(i<span class=\"number\">-1</span>)*n+j,<span class=\"number\">0</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ll r=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">bfs</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=s2;++i) t0[i]=t[i];</span><br><span class=\"line\">        r+=<span class=\"built_in\">dfs</span>(s1,<span class=\"number\">1e18</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld&quot;</span>,q-r);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://www.luogu.com.cn/problem/P2774\">P2774 方格取数问题</a></p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>这实际上也是一道网络流的问题，但是和以前做的题都不一样，同时也很难想到怎么做。题目中要求任意两个相邻的方格不能同时取，如果我们把一个方格放在 A 组，另一个方块放在 B 组，那么所有和 A 中方格相邻的方格都要放在 B 组，和 B 中方格相邻的都要放在 A 组。我们可以发现，同一组中方格横纵坐标的和奇偶性相同，这样我们就可以直接分组了。于是我们就把这个图分成了两组，只有两组之间有关系，同一组的方格没有关系，是不是很像二分图？我们把所有相邻的方格都用一条边连上，问题转换为删去一些节点，使得两组之间连通，求出删去节点权值的最小值。<br>于是我们又可以自然而然地想到最小割（最小割&#x3D;最大流），但是最小割删去的是边，而不是点。我们转化一下，将源点和 A 组所有点相连，汇点和 B 组所有点相连，容量均为该点对应的数，这样删去一条边的代价刚好是对应点的数值。但是我们不能删去两组之间的边，为了不删去这些边，把这些边的容量设为正无穷，就永远不可能删去这些边了。由于最小割 $&#x3D;$ 最大流，所以我们只需要跑一遍最大流即可。注意只能由 A 组连向 B 组或 B 组连向 A 组，不能同时连。<br>建出来的图大概长这样：<br><img src=\"/post-images/P2774-solution-1.png\" alt=\"1\"></p>\n<h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> ll;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">10001</span>,M=<span class=\"number\">1000001</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m,p=<span class=\"number\">1</span>,s1,s2,t[N],t0[N],f[N];</span><br><span class=\"line\">ll q;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">str</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> m,q;</span><br><span class=\"line\">    ll r;</span><br><span class=\"line\">&#125;a[M];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">road</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y,ll r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    a[++p].m=y;</span><br><span class=\"line\">    a[p].q=t[x];</span><br><span class=\"line\">    t[x]=p;</span><br><span class=\"line\">    a[p].r=r;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">bfs</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    queue&lt;<span class=\"type\">int</span>&gt; Q;</span><br><span class=\"line\">    Q.<span class=\"built_in\">push</span>(s1);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=s2;++i) f[i]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    f[s1]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!Q.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> k=Q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">        Q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t[k];i!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(f[a[i].m]==<span class=\"number\">0</span>&amp;&amp;a[i].r!=<span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                f[a[i].m]=f[k]+<span class=\"number\">1</span>;</span><br><span class=\"line\">                Q.<span class=\"built_in\">push</span>(a[i].m);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> f[s2]!=<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> x,ll r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x==s2) <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">    ll s=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t0[x];i!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        t0[x]=i;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(f[a[i].m]==f[x]+<span class=\"number\">1</span>&amp;&amp;a[i].r!=<span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> z=<span class=\"built_in\">dfs</span>(a[i].m,<span class=\"built_in\">min</span>(r,a[i].r));</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(z!=<span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                a[i].r-=z;</span><br><span class=\"line\">                a[i^<span class=\"number\">1</span>].r+=z;</span><br><span class=\"line\">                r-=z;</span><br><span class=\"line\">                s+=z;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> f[a[i].m]=<span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(r==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> s; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;m,&amp;n);</span><br><span class=\"line\">    s1=m*n+<span class=\"number\">1</span>;</span><br><span class=\"line\">    s2=m*n+<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=n;++j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> r;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;r);</span><br><span class=\"line\">            q+=r;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>((i+j)&amp;<span class=\"number\">1</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">road</span>(s1,(i<span class=\"number\">-1</span>)*n+j,r);</span><br><span class=\"line\">                <span class=\"built_in\">road</span>((i<span class=\"number\">-1</span>)*n+j,s1,<span class=\"number\">0</span>);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(i!=<span class=\"number\">1</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">road</span>((i<span class=\"number\">-1</span>)*n+j,(i<span class=\"number\">-2</span>)*n+j,<span class=\"number\">1e18</span>);</span><br><span class=\"line\">                    <span class=\"built_in\">road</span>((i<span class=\"number\">-2</span>)*n+j,(i<span class=\"number\">-1</span>)*n+j,<span class=\"number\">0</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(j!=<span class=\"number\">1</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">road</span>((i<span class=\"number\">-1</span>)*n+j,(i<span class=\"number\">-1</span>)*n+j<span class=\"number\">-1</span>,<span class=\"number\">1e18</span>);</span><br><span class=\"line\">                    <span class=\"built_in\">road</span>((i<span class=\"number\">-1</span>)*n+j<span class=\"number\">-1</span>,(i<span class=\"number\">-1</span>)*n+j,<span class=\"number\">0</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(i!=m)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">road</span>((i<span class=\"number\">-1</span>)*n+j,i*n+j,<span class=\"number\">1e18</span>);</span><br><span class=\"line\">                    <span class=\"built_in\">road</span>(i*n+j,(i<span class=\"number\">-1</span>)*n+j,<span class=\"number\">0</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(j!=n)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">road</span>((i<span class=\"number\">-1</span>)*n+j,(i<span class=\"number\">-1</span>)*n+j+<span class=\"number\">1</span>,<span class=\"number\">1e18</span>);</span><br><span class=\"line\">                    <span class=\"built_in\">road</span>((i<span class=\"number\">-1</span>)*n+j+<span class=\"number\">1</span>,(i<span class=\"number\">-1</span>)*n+j,<span class=\"number\">0</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">road</span>((i<span class=\"number\">-1</span>)*n+j,s2,r);</span><br><span class=\"line\">                <span class=\"built_in\">road</span>(s2,(i<span class=\"number\">-1</span>)*n+j,<span class=\"number\">0</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ll r=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">bfs</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=s2;++i) t0[i]=t[i];</span><br><span class=\"line\">        r+=<span class=\"built_in\">dfs</span>(s1,<span class=\"number\">1e18</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld&quot;</span>,q-r);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"P2763 试题库问题","date":"2022-04-16T04:34:23.000Z","description":" ","_content":"\n[P2763 试题库问题](https://www.luogu.com.cn/problem/P2763)\n## 分析\n一道网络流问题，我们把每道题和所属类型相连，容量为 $1$，再将源点和每道题相连，容量为 $1$，汇点和每个类型相连，容量为地 $i$ 个类型的题数，如果跑出来的最大流和总题数相同，表示每个类型都有足够的题数，也就是有一个合法方案。\n在跑完网络流后，要输出结果，我们可以观察残留网络。一条边有流量流过，表示这条边起点表示的题目被作为这条边终点表示的类型选中了。对于每个类型，找到它的出边，如果有剩余容量，表示其反向边有流量流过。当然每个类型的出边还有到汇点的边，但是这条边一定没有剩余容量，不用考虑。\n## code\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<queue>\nusing namespace std;\ntypedef long long ll;\nint n,m,q=0,N,p=1,s1,s2,t[10001],t0[10001],f[10001],g[10001];\nbool u=true;\nstruct str\n{\n    int m,q;\n    ll r;\n}a[1000001];\nvoid road(int x,int y,ll r)\n{\n    a[++p].m=y;\n    a[p].q=t[x];\n    t[x]=p;\n    a[p].r=r;\n}\nvoid bfs()\n{\n    queue<int> Q;\n    Q.push(s2);\n    f[s2]=1;\n    g[1]=1;\n    while(!Q.empty())\n    {\n        int k=Q.front();\n        Q.pop();\n        for(int i=t[k];i!=0;i=a[i].q)\n        {\n            if(f[a[i].m]==0)\n            {\n                f[a[i].m]=f[k]+1;\n                ++g[f[a[i].m]];\n                Q.push(a[i].m);\n            }\n        }\n    }\n}\nll dfs(int x,ll r)\n{\n    if(x==s2) return r;\n    ll s=0;\n    for(int i=t0[x];i!=0;i=a[i].q)\n    {\n        t0[x]=i;\n        if(f[x]==f[a[i].m]+1&&a[i].r!=0)\n        {\n            int z=dfs(a[i].m,min(r,a[i].r));\n            if(z!=0)\n            {\n                a[i].r-=z;\n                a[i^1].r+=z;\n                r-=z;\n                s+=z;\n            }\n            if(r==0) return s;\n        }\n    }\n    --g[f[x]];\n    if(g[f[x]]==0) u=false;\n    ++f[x];\n    ++g[f[x]];\n    return s;\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    N=n+m+2;\n    s1=N-1;\n    s2=N;\n    for(int i=1;i<=m;++i)\n    {\n        road(s1,i,1);\n        road(i,s1,0);\n    }\n    for(int i=1;i<=n;++i)\n    {\n        ll r;\n        scanf(\"%lld\",&r);\n        q+=r;\n        road(m+i,s2,r);\n        road(s2,m+i,0);\n    }\n    for(int i=1;i<=m;++i)\n    {\n        int d;\n        scanf(\"%d\",&d);\n        for(int j=1;j<=d;++j)\n        {\n            int x;\n            scanf(\"%d\",&x);\n            road(i,m+x,1);\n            road(m+x,i,0);\n        }\n    }\n    bfs();\n    ll r=0;\n    while(u==true)\n    {\n        for(int i=1;i<=N;++i) t0[i]=t[i];\n        r+=dfs(s1,1e18);\n    }\n    if(r<q)\n    {\n        printf(\"No Solution!\");\n        return 0;\n    }\n    for(int i=1;i<=n;++i)\n    {\n        printf(\"%d:\",i);\n        for(int j=t[m+i];j!=0;j=a[j].q)\n        {\n            if(a[j].r==1)\n            {\n                printf(\" %d\",a[j].m);\n            }\n        }\n        printf(\"\\n\");\n    }\n    return 0;\n}\n```","source":"_posts/P2763-solution.md","raw":"---\ntitle: 'P2763 试题库问题'\ndate: 2022-04-16 12:34:23\ntags: [网络流,最大流]\ndescription: ' '\n---\n\n[P2763 试题库问题](https://www.luogu.com.cn/problem/P2763)\n## 分析\n一道网络流问题，我们把每道题和所属类型相连，容量为 $1$，再将源点和每道题相连，容量为 $1$，汇点和每个类型相连，容量为地 $i$ 个类型的题数，如果跑出来的最大流和总题数相同，表示每个类型都有足够的题数，也就是有一个合法方案。\n在跑完网络流后，要输出结果，我们可以观察残留网络。一条边有流量流过，表示这条边起点表示的题目被作为这条边终点表示的类型选中了。对于每个类型，找到它的出边，如果有剩余容量，表示其反向边有流量流过。当然每个类型的出边还有到汇点的边，但是这条边一定没有剩余容量，不用考虑。\n## code\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<queue>\nusing namespace std;\ntypedef long long ll;\nint n,m,q=0,N,p=1,s1,s2,t[10001],t0[10001],f[10001],g[10001];\nbool u=true;\nstruct str\n{\n    int m,q;\n    ll r;\n}a[1000001];\nvoid road(int x,int y,ll r)\n{\n    a[++p].m=y;\n    a[p].q=t[x];\n    t[x]=p;\n    a[p].r=r;\n}\nvoid bfs()\n{\n    queue<int> Q;\n    Q.push(s2);\n    f[s2]=1;\n    g[1]=1;\n    while(!Q.empty())\n    {\n        int k=Q.front();\n        Q.pop();\n        for(int i=t[k];i!=0;i=a[i].q)\n        {\n            if(f[a[i].m]==0)\n            {\n                f[a[i].m]=f[k]+1;\n                ++g[f[a[i].m]];\n                Q.push(a[i].m);\n            }\n        }\n    }\n}\nll dfs(int x,ll r)\n{\n    if(x==s2) return r;\n    ll s=0;\n    for(int i=t0[x];i!=0;i=a[i].q)\n    {\n        t0[x]=i;\n        if(f[x]==f[a[i].m]+1&&a[i].r!=0)\n        {\n            int z=dfs(a[i].m,min(r,a[i].r));\n            if(z!=0)\n            {\n                a[i].r-=z;\n                a[i^1].r+=z;\n                r-=z;\n                s+=z;\n            }\n            if(r==0) return s;\n        }\n    }\n    --g[f[x]];\n    if(g[f[x]]==0) u=false;\n    ++f[x];\n    ++g[f[x]];\n    return s;\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    N=n+m+2;\n    s1=N-1;\n    s2=N;\n    for(int i=1;i<=m;++i)\n    {\n        road(s1,i,1);\n        road(i,s1,0);\n    }\n    for(int i=1;i<=n;++i)\n    {\n        ll r;\n        scanf(\"%lld\",&r);\n        q+=r;\n        road(m+i,s2,r);\n        road(s2,m+i,0);\n    }\n    for(int i=1;i<=m;++i)\n    {\n        int d;\n        scanf(\"%d\",&d);\n        for(int j=1;j<=d;++j)\n        {\n            int x;\n            scanf(\"%d\",&x);\n            road(i,m+x,1);\n            road(m+x,i,0);\n        }\n    }\n    bfs();\n    ll r=0;\n    while(u==true)\n    {\n        for(int i=1;i<=N;++i) t0[i]=t[i];\n        r+=dfs(s1,1e18);\n    }\n    if(r<q)\n    {\n        printf(\"No Solution!\");\n        return 0;\n    }\n    for(int i=1;i<=n;++i)\n    {\n        printf(\"%d:\",i);\n        for(int j=t[m+i];j!=0;j=a[j].q)\n        {\n            if(a[j].r==1)\n            {\n                printf(\" %d\",a[j].m);\n            }\n        }\n        printf(\"\\n\");\n    }\n    return 0;\n}\n```","slug":"P2763-solution","published":1,"updated":"2022-11-28T13:47:47.411Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cleid927u000z2sjf7gf8746r","content":"<p><a href=\"https://www.luogu.com.cn/problem/P2763\">P2763 试题库问题</a></p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>一道网络流问题，我们把每道题和所属类型相连，容量为 $1$，再将源点和每道题相连，容量为 $1$，汇点和每个类型相连，容量为地 $i$ 个类型的题数，如果跑出来的最大流和总题数相同，表示每个类型都有足够的题数，也就是有一个合法方案。<br>在跑完网络流后，要输出结果，我们可以观察残留网络。一条边有流量流过，表示这条边起点表示的题目被作为这条边终点表示的类型选中了。对于每个类型，找到它的出边，如果有剩余容量，表示其反向边有流量流过。当然每个类型的出边还有到汇点的边，但是这条边一定没有剩余容量，不用考虑。</p>\n<h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> ll;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m,q=<span class=\"number\">0</span>,N,p=<span class=\"number\">1</span>,s1,s2,t[<span class=\"number\">10001</span>],t0[<span class=\"number\">10001</span>],f[<span class=\"number\">10001</span>],g[<span class=\"number\">10001</span>];</span><br><span class=\"line\"><span class=\"type\">bool</span> u=<span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">str</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> m,q;</span><br><span class=\"line\">    ll r;</span><br><span class=\"line\">&#125;a[<span class=\"number\">1000001</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">road</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y,ll r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    a[++p].m=y;</span><br><span class=\"line\">    a[p].q=t[x];</span><br><span class=\"line\">    t[x]=p;</span><br><span class=\"line\">    a[p].r=r;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">bfs</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    queue&lt;<span class=\"type\">int</span>&gt; Q;</span><br><span class=\"line\">    Q.<span class=\"built_in\">push</span>(s2);</span><br><span class=\"line\">    f[s2]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    g[<span class=\"number\">1</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!Q.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> k=Q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">        Q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t[k];i!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(f[a[i].m]==<span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                f[a[i].m]=f[k]+<span class=\"number\">1</span>;</span><br><span class=\"line\">                ++g[f[a[i].m]];</span><br><span class=\"line\">                Q.<span class=\"built_in\">push</span>(a[i].m);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> x,ll r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x==s2) <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">    ll s=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t0[x];i!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        t0[x]=i;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(f[x]==f[a[i].m]+<span class=\"number\">1</span>&amp;&amp;a[i].r!=<span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> z=<span class=\"built_in\">dfs</span>(a[i].m,<span class=\"built_in\">min</span>(r,a[i].r));</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(z!=<span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                a[i].r-=z;</span><br><span class=\"line\">                a[i^<span class=\"number\">1</span>].r+=z;</span><br><span class=\"line\">                r-=z;</span><br><span class=\"line\">                s+=z;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(r==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    --g[f[x]];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(g[f[x]]==<span class=\"number\">0</span>) u=<span class=\"literal\">false</span>;</span><br><span class=\"line\">    ++f[x];</span><br><span class=\"line\">    ++g[f[x]];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class=\"line\">    N=n+m+<span class=\"number\">2</span>;</span><br><span class=\"line\">    s1=N<span class=\"number\">-1</span>;</span><br><span class=\"line\">    s2=N;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(s1,i,<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(i,s1,<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ll r;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%lld&quot;</span>,&amp;r);</span><br><span class=\"line\">        q+=r;</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(m+i,s2,r);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(s2,m+i,<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> d;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;d);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=d;++j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> x;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;x);</span><br><span class=\"line\">            <span class=\"built_in\">road</span>(i,m+x,<span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"built_in\">road</span>(m+x,i,<span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">bfs</span>();</span><br><span class=\"line\">    ll r=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(u==<span class=\"literal\">true</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=N;++i) t0[i]=t[i];</span><br><span class=\"line\">        r+=<span class=\"built_in\">dfs</span>(s1,<span class=\"number\">1e18</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r&lt;q)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;No Solution!&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d:&quot;</span>,i);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=t[m+i];j!=<span class=\"number\">0</span>;j=a[j].q)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(a[j].r==<span class=\"number\">1</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">&quot; %d&quot;</span>,a[j].m);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://www.luogu.com.cn/problem/P2763\">P2763 试题库问题</a></p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>一道网络流问题，我们把每道题和所属类型相连，容量为 $1$，再将源点和每道题相连，容量为 $1$，汇点和每个类型相连，容量为地 $i$ 个类型的题数，如果跑出来的最大流和总题数相同，表示每个类型都有足够的题数，也就是有一个合法方案。<br>在跑完网络流后，要输出结果，我们可以观察残留网络。一条边有流量流过，表示这条边起点表示的题目被作为这条边终点表示的类型选中了。对于每个类型，找到它的出边，如果有剩余容量，表示其反向边有流量流过。当然每个类型的出边还有到汇点的边，但是这条边一定没有剩余容量，不用考虑。</p>\n<h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> ll;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m,q=<span class=\"number\">0</span>,N,p=<span class=\"number\">1</span>,s1,s2,t[<span class=\"number\">10001</span>],t0[<span class=\"number\">10001</span>],f[<span class=\"number\">10001</span>],g[<span class=\"number\">10001</span>];</span><br><span class=\"line\"><span class=\"type\">bool</span> u=<span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">str</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> m,q;</span><br><span class=\"line\">    ll r;</span><br><span class=\"line\">&#125;a[<span class=\"number\">1000001</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">road</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y,ll r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    a[++p].m=y;</span><br><span class=\"line\">    a[p].q=t[x];</span><br><span class=\"line\">    t[x]=p;</span><br><span class=\"line\">    a[p].r=r;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">bfs</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    queue&lt;<span class=\"type\">int</span>&gt; Q;</span><br><span class=\"line\">    Q.<span class=\"built_in\">push</span>(s2);</span><br><span class=\"line\">    f[s2]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    g[<span class=\"number\">1</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!Q.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> k=Q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">        Q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t[k];i!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(f[a[i].m]==<span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                f[a[i].m]=f[k]+<span class=\"number\">1</span>;</span><br><span class=\"line\">                ++g[f[a[i].m]];</span><br><span class=\"line\">                Q.<span class=\"built_in\">push</span>(a[i].m);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> x,ll r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x==s2) <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">    ll s=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t0[x];i!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        t0[x]=i;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(f[x]==f[a[i].m]+<span class=\"number\">1</span>&amp;&amp;a[i].r!=<span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> z=<span class=\"built_in\">dfs</span>(a[i].m,<span class=\"built_in\">min</span>(r,a[i].r));</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(z!=<span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                a[i].r-=z;</span><br><span class=\"line\">                a[i^<span class=\"number\">1</span>].r+=z;</span><br><span class=\"line\">                r-=z;</span><br><span class=\"line\">                s+=z;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(r==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    --g[f[x]];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(g[f[x]]==<span class=\"number\">0</span>) u=<span class=\"literal\">false</span>;</span><br><span class=\"line\">    ++f[x];</span><br><span class=\"line\">    ++g[f[x]];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class=\"line\">    N=n+m+<span class=\"number\">2</span>;</span><br><span class=\"line\">    s1=N<span class=\"number\">-1</span>;</span><br><span class=\"line\">    s2=N;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(s1,i,<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(i,s1,<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ll r;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%lld&quot;</span>,&amp;r);</span><br><span class=\"line\">        q+=r;</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(m+i,s2,r);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(s2,m+i,<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> d;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;d);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=d;++j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> x;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;x);</span><br><span class=\"line\">            <span class=\"built_in\">road</span>(i,m+x,<span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"built_in\">road</span>(m+x,i,<span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">bfs</span>();</span><br><span class=\"line\">    ll r=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(u==<span class=\"literal\">true</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=N;++i) t0[i]=t[i];</span><br><span class=\"line\">        r+=<span class=\"built_in\">dfs</span>(s1,<span class=\"number\">1e18</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r&lt;q)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;No Solution!&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d:&quot;</span>,i);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=t[m+i];j!=<span class=\"number\">0</span>;j=a[j].q)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(a[j].r==<span class=\"number\">1</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">&quot; %d&quot;</span>,a[j].m);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"P3195 [HNOI2008]玩具装箱","date":"2022-04-04T01:32:41.000Z","description":" ","_content":"\n[P3195 [HNOI2008]玩具装箱](https://www.luogu.com.cn/problem/P3195)\n## 分析\n斜率优化 dp 的裸题，用 $s$ 表示前缀和，只是转移方程比较复杂：\n$$f[i]=f[j]+(i-j-1+s[i]-s[j]-L)^2$$\n我们稍微化简一下，设 $b[i]=s[i]+i$，$c[i]=s[i]+i+L+1$，上述转移方程就可以写成：\n$$f[i]=f[j]+(b[i]-c[j])^2$$\n$$f[i]=f[j]+b[i]^2-2 \\times b[i] \\times c[j]+c[j]^2$$\n$$f[j]+c[j]^2=2 \\times b[i] \\times c[j]+f[i]-b[i]^2$$\n于是，我们可以得到 $Y=f[j]+c[j]^2$，$A=2 \\times b[i]$，$X=c[j]$，$B=f[i]-b[i]^2$\n## code\n```cpp\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\ntypedef long long ll;\nconst int N=1000001;\nint n,m,a[N],Q[N*2],T=0,R=0;\nll b[N],c[N],f[N];\nll abc(int x,int y)\n{\n    if(c[x]==c[y]) return 1e18;\n    return ((f[x]+c[x]*c[x])-(f[y]+c[y]*c[y]))/(c[x]-c[y]);\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    c[0]=m+1;\n    for(int i=1;i<=n;++i)\n    {\n        scanf(\"%d\",&a[i]);\n        b[i]=b[i-1]+a[i]+1;\n        c[i]=c[i-1]+a[i]+1;\n    }\n    for(int i=1;i<=n;++i)\n    {\n        while(T<R&&abc(Q[T],Q[T+1])<2*b[i]) ++T;\n        f[i]=f[Q[T]]+b[i]*b[i]-2*b[i]*c[Q[T]]+c[Q[T]]*c[Q[T]];\n        while(T<R&&abc(Q[R],i)<abc(Q[R-1],Q[R])) --R;\n        Q[++R]=i;\n    }\n    printf(\"%lld\",f[n]);\n    return 0;\n}\n```","source":"_posts/P3195-solution.md","raw":"---\ntitle: 'P3195 [HNOI2008]玩具装箱'\ndate: 2022-04-04 09:32:41\ntags: [动态规划,单调队列,斜率优化dp]\ndescription: ' '\n---\n\n[P3195 [HNOI2008]玩具装箱](https://www.luogu.com.cn/problem/P3195)\n## 分析\n斜率优化 dp 的裸题，用 $s$ 表示前缀和，只是转移方程比较复杂：\n$$f[i]=f[j]+(i-j-1+s[i]-s[j]-L)^2$$\n我们稍微化简一下，设 $b[i]=s[i]+i$，$c[i]=s[i]+i+L+1$，上述转移方程就可以写成：\n$$f[i]=f[j]+(b[i]-c[j])^2$$\n$$f[i]=f[j]+b[i]^2-2 \\times b[i] \\times c[j]+c[j]^2$$\n$$f[j]+c[j]^2=2 \\times b[i] \\times c[j]+f[i]-b[i]^2$$\n于是，我们可以得到 $Y=f[j]+c[j]^2$，$A=2 \\times b[i]$，$X=c[j]$，$B=f[i]-b[i]^2$\n## code\n```cpp\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\ntypedef long long ll;\nconst int N=1000001;\nint n,m,a[N],Q[N*2],T=0,R=0;\nll b[N],c[N],f[N];\nll abc(int x,int y)\n{\n    if(c[x]==c[y]) return 1e18;\n    return ((f[x]+c[x]*c[x])-(f[y]+c[y]*c[y]))/(c[x]-c[y]);\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    c[0]=m+1;\n    for(int i=1;i<=n;++i)\n    {\n        scanf(\"%d\",&a[i]);\n        b[i]=b[i-1]+a[i]+1;\n        c[i]=c[i-1]+a[i]+1;\n    }\n    for(int i=1;i<=n;++i)\n    {\n        while(T<R&&abc(Q[T],Q[T+1])<2*b[i]) ++T;\n        f[i]=f[Q[T]]+b[i]*b[i]-2*b[i]*c[Q[T]]+c[Q[T]]*c[Q[T]];\n        while(T<R&&abc(Q[R],i)<abc(Q[R-1],Q[R])) --R;\n        Q[++R]=i;\n    }\n    printf(\"%lld\",f[n]);\n    return 0;\n}\n```","slug":"P3195-solution","published":1,"updated":"2022-11-28T13:47:47.410Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cleid927v00112sjfa9a557ac","content":"<p><a href=\"https://www.luogu.com.cn/problem/P3195\">P3195 [HNOI2008]玩具装箱</a></p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>斜率优化 dp 的裸题，用 $s$ 表示前缀和，只是转移方程比较复杂：<br>$$f[i]&#x3D;f[j]+(i-j-1+s[i]-s[j]-L)^2$$<br>我们稍微化简一下，设 $b[i]&#x3D;s[i]+i$，$c[i]&#x3D;s[i]+i+L+1$，上述转移方程就可以写成：<br>$$f[i]&#x3D;f[j]+(b[i]-c[j])^2$$<br>$$f[i]&#x3D;f[j]+b[i]^2-2 \\times b[i] \\times c[j]+c[j]^2$$<br>$$f[j]+c[j]^2&#x3D;2 \\times b[i] \\times c[j]+f[i]-b[i]^2$$<br>于是，我们可以得到 $Y&#x3D;f[j]+c[j]^2$，$A&#x3D;2 \\times b[i]$，$X&#x3D;c[j]$，$B&#x3D;f[i]-b[i]^2$</p>\n<h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> ll;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1000001</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m,a[N],Q[N*<span class=\"number\">2</span>],T=<span class=\"number\">0</span>,R=<span class=\"number\">0</span>;</span><br><span class=\"line\">ll b[N],c[N],f[N];</span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">abc</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(c[x]==c[y]) <span class=\"keyword\">return</span> <span class=\"number\">1e18</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ((f[x]+c[x]*c[x])-(f[y]+c[y]*c[y]))/(c[x]-c[y]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class=\"line\">    c[<span class=\"number\">0</span>]=m+<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class=\"line\">        b[i]=b[i<span class=\"number\">-1</span>]+a[i]+<span class=\"number\">1</span>;</span><br><span class=\"line\">        c[i]=c[i<span class=\"number\">-1</span>]+a[i]+<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(T&lt;R&amp;&amp;<span class=\"built_in\">abc</span>(Q[T],Q[T+<span class=\"number\">1</span>])&lt;<span class=\"number\">2</span>*b[i]) ++T;</span><br><span class=\"line\">        f[i]=f[Q[T]]+b[i]*b[i]<span class=\"number\">-2</span>*b[i]*c[Q[T]]+c[Q[T]]*c[Q[T]];</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(T&lt;R&amp;&amp;<span class=\"built_in\">abc</span>(Q[R],i)&lt;<span class=\"built_in\">abc</span>(Q[R<span class=\"number\">-1</span>],Q[R])) --R;</span><br><span class=\"line\">        Q[++R]=i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld&quot;</span>,f[n]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://www.luogu.com.cn/problem/P3195\">P3195 [HNOI2008]玩具装箱</a></p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>斜率优化 dp 的裸题，用 $s$ 表示前缀和，只是转移方程比较复杂：<br>$$f[i]&#x3D;f[j]+(i-j-1+s[i]-s[j]-L)^2$$<br>我们稍微化简一下，设 $b[i]&#x3D;s[i]+i$，$c[i]&#x3D;s[i]+i+L+1$，上述转移方程就可以写成：<br>$$f[i]&#x3D;f[j]+(b[i]-c[j])^2$$<br>$$f[i]&#x3D;f[j]+b[i]^2-2 \\times b[i] \\times c[j]+c[j]^2$$<br>$$f[j]+c[j]^2&#x3D;2 \\times b[i] \\times c[j]+f[i]-b[i]^2$$<br>于是，我们可以得到 $Y&#x3D;f[j]+c[j]^2$，$A&#x3D;2 \\times b[i]$，$X&#x3D;c[j]$，$B&#x3D;f[i]-b[i]^2$</p>\n<h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> ll;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1000001</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m,a[N],Q[N*<span class=\"number\">2</span>],T=<span class=\"number\">0</span>,R=<span class=\"number\">0</span>;</span><br><span class=\"line\">ll b[N],c[N],f[N];</span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">abc</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(c[x]==c[y]) <span class=\"keyword\">return</span> <span class=\"number\">1e18</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ((f[x]+c[x]*c[x])-(f[y]+c[y]*c[y]))/(c[x]-c[y]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class=\"line\">    c[<span class=\"number\">0</span>]=m+<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class=\"line\">        b[i]=b[i<span class=\"number\">-1</span>]+a[i]+<span class=\"number\">1</span>;</span><br><span class=\"line\">        c[i]=c[i<span class=\"number\">-1</span>]+a[i]+<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(T&lt;R&amp;&amp;<span class=\"built_in\">abc</span>(Q[T],Q[T+<span class=\"number\">1</span>])&lt;<span class=\"number\">2</span>*b[i]) ++T;</span><br><span class=\"line\">        f[i]=f[Q[T]]+b[i]*b[i]<span class=\"number\">-2</span>*b[i]*c[Q[T]]+c[Q[T]]*c[Q[T]];</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(T&lt;R&amp;&amp;<span class=\"built_in\">abc</span>(Q[R],i)&lt;<span class=\"built_in\">abc</span>(Q[R<span class=\"number\">-1</span>],Q[R])) --R;</span><br><span class=\"line\">        Q[++R]=i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld&quot;</span>,f[n]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"P2936 [USACO09JAN]Total Flow S","date":"2022-04-13T05:47:30.000Z","description":" ","_content":"\n[P2936 [USACO09JAN]Total Flow S](https://www.luogu.com.cn/problem/P2936)\n## 分析\n最大流的模板题，注意输入。\n## code\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<queue>\nusing namespace std;\nint m,p=1,s1,s2,t[10001],f[10001];\nstruct str\n{\n    int m,q,r;\n}a[1000001];\nvoid road(int x,int y,int r)\n{\n    a[++p].m=y;\n    a[p].q=t[x];\n    t[x]=p;\n    a[p].r=r;\n}\nbool bfs()\n{\n    queue<int> Q;\n    Q.push(s1);\n    for(int i=0;i<=127;++i) f[i]=0;\n    f[s1]=1;\n    while(!Q.empty())\n    {\n        int k=Q.front();\n        Q.pop();\n        for(int i=t[k];i!=0;i=a[i].q)\n        {\n            if(f[a[i].m]==0&&a[i].r!=0)\n            {\n                f[a[i].m]=f[k]+1;\n                Q.push(a[i].m);\n            }\n        }\n    }\n    return f[s2]!=0;\n}\nint dfs(int x,int r)\n{\n    if(x==s2) return r;\n    int s=0;\n    for(int i=t[x];i!=0;i=a[i].q)\n    {\n        if(f[a[i].m]==f[x]+1&&a[i].r!=0)\n        {\n            int z=dfs(a[i].m,min(r,a[i].r));\n            if(z!=0)\n            {\n                a[i].r-=z;\n                a[i^1].r+=z;\n                r-=z;\n                s+=z;\n            }\n        }\n    }\n    return s;\n}\nint main()\n{\n    scanf(\"%d\",&m);\n    s1='A';\n    s2='Z';\n    for(int i=1;i<=m;++i)\n    {\n        char x,y;\n        x=getchar();\n        while((x<'A'||x>'Z')&&(x<'a'||x>'z')) x=getchar();\n        y=getchar();\n        while((y<'A'||y>'Z')&&(y<'a'||y>'z')) y=getchar();\n        int r;\n        scanf(\"%d\",&r);\n        road(int(x),int(y),r);\n        road(int(y),int(x),0);\n    }\n    int r=0;\n    while(bfs())\n    {\n        r+=dfs(s1,1e9);\n    }\n    printf(\"%d\",r);\n    return 0;\n}\n```","source":"_posts/P2936-solution.md","raw":"---\ntitle: 'P2936 [USACO09JAN]Total Flow S'\ndate: 2022-04-13 13:47:30\ntags: [网络流,最大流]\ndescription: ' '\n---\n\n[P2936 [USACO09JAN]Total Flow S](https://www.luogu.com.cn/problem/P2936)\n## 分析\n最大流的模板题，注意输入。\n## code\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<queue>\nusing namespace std;\nint m,p=1,s1,s2,t[10001],f[10001];\nstruct str\n{\n    int m,q,r;\n}a[1000001];\nvoid road(int x,int y,int r)\n{\n    a[++p].m=y;\n    a[p].q=t[x];\n    t[x]=p;\n    a[p].r=r;\n}\nbool bfs()\n{\n    queue<int> Q;\n    Q.push(s1);\n    for(int i=0;i<=127;++i) f[i]=0;\n    f[s1]=1;\n    while(!Q.empty())\n    {\n        int k=Q.front();\n        Q.pop();\n        for(int i=t[k];i!=0;i=a[i].q)\n        {\n            if(f[a[i].m]==0&&a[i].r!=0)\n            {\n                f[a[i].m]=f[k]+1;\n                Q.push(a[i].m);\n            }\n        }\n    }\n    return f[s2]!=0;\n}\nint dfs(int x,int r)\n{\n    if(x==s2) return r;\n    int s=0;\n    for(int i=t[x];i!=0;i=a[i].q)\n    {\n        if(f[a[i].m]==f[x]+1&&a[i].r!=0)\n        {\n            int z=dfs(a[i].m,min(r,a[i].r));\n            if(z!=0)\n            {\n                a[i].r-=z;\n                a[i^1].r+=z;\n                r-=z;\n                s+=z;\n            }\n        }\n    }\n    return s;\n}\nint main()\n{\n    scanf(\"%d\",&m);\n    s1='A';\n    s2='Z';\n    for(int i=1;i<=m;++i)\n    {\n        char x,y;\n        x=getchar();\n        while((x<'A'||x>'Z')&&(x<'a'||x>'z')) x=getchar();\n        y=getchar();\n        while((y<'A'||y>'Z')&&(y<'a'||y>'z')) y=getchar();\n        int r;\n        scanf(\"%d\",&r);\n        road(int(x),int(y),r);\n        road(int(y),int(x),0);\n    }\n    int r=0;\n    while(bfs())\n    {\n        r+=dfs(s1,1e9);\n    }\n    printf(\"%d\",r);\n    return 0;\n}\n```","slug":"P2936-solution","published":1,"updated":"2022-11-28T13:47:47.410Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cleid927w00142sjf86n1b1o7","content":"<p><a href=\"https://www.luogu.com.cn/problem/P2936\">P2936 [USACO09JAN]Total Flow S</a></p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>最大流的模板题，注意输入。</p>\n<h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">int</span> m,p=<span class=\"number\">1</span>,s1,s2,t[<span class=\"number\">10001</span>],f[<span class=\"number\">10001</span>];</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">str</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> m,q,r;</span><br><span class=\"line\">&#125;a[<span class=\"number\">1000001</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">road</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y,<span class=\"type\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    a[++p].m=y;</span><br><span class=\"line\">    a[p].q=t[x];</span><br><span class=\"line\">    t[x]=p;</span><br><span class=\"line\">    a[p].r=r;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">bfs</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    queue&lt;<span class=\"type\">int</span>&gt; Q;</span><br><span class=\"line\">    Q.<span class=\"built_in\">push</span>(s1);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;=<span class=\"number\">127</span>;++i) f[i]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    f[s1]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!Q.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> k=Q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">        Q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t[k];i!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(f[a[i].m]==<span class=\"number\">0</span>&amp;&amp;a[i].r!=<span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                f[a[i].m]=f[k]+<span class=\"number\">1</span>;</span><br><span class=\"line\">                Q.<span class=\"built_in\">push</span>(a[i].m);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> f[s2]!=<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x==s2) <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">    <span class=\"type\">int</span> s=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t[x];i!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(f[a[i].m]==f[x]+<span class=\"number\">1</span>&amp;&amp;a[i].r!=<span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> z=<span class=\"built_in\">dfs</span>(a[i].m,<span class=\"built_in\">min</span>(r,a[i].r));</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(z!=<span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                a[i].r-=z;</span><br><span class=\"line\">                a[i^<span class=\"number\">1</span>].r+=z;</span><br><span class=\"line\">                r-=z;</span><br><span class=\"line\">                s+=z;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;m);</span><br><span class=\"line\">    s1=<span class=\"string\">&#x27;A&#x27;</span>;</span><br><span class=\"line\">    s2=<span class=\"string\">&#x27;Z&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">char</span> x,y;</span><br><span class=\"line\">        x=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">        <span class=\"keyword\">while</span>((x&lt;<span class=\"string\">&#x27;A&#x27;</span>||x&gt;<span class=\"string\">&#x27;Z&#x27;</span>)&amp;&amp;(x&lt;<span class=\"string\">&#x27;a&#x27;</span>||x&gt;<span class=\"string\">&#x27;z&#x27;</span>)) x=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">        y=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">        <span class=\"keyword\">while</span>((y&lt;<span class=\"string\">&#x27;A&#x27;</span>||y&gt;<span class=\"string\">&#x27;Z&#x27;</span>)&amp;&amp;(y&lt;<span class=\"string\">&#x27;a&#x27;</span>||y&gt;<span class=\"string\">&#x27;z&#x27;</span>)) y=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">        <span class=\"type\">int</span> r;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;r);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(<span class=\"built_in\">int</span>(x),<span class=\"built_in\">int</span>(y),r);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(<span class=\"built_in\">int</span>(y),<span class=\"built_in\">int</span>(x),<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> r=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">bfs</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        r+=<span class=\"built_in\">dfs</span>(s1,<span class=\"number\">1e9</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,r);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://www.luogu.com.cn/problem/P2936\">P2936 [USACO09JAN]Total Flow S</a></p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>最大流的模板题，注意输入。</p>\n<h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">int</span> m,p=<span class=\"number\">1</span>,s1,s2,t[<span class=\"number\">10001</span>],f[<span class=\"number\">10001</span>];</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">str</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> m,q,r;</span><br><span class=\"line\">&#125;a[<span class=\"number\">1000001</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">road</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y,<span class=\"type\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    a[++p].m=y;</span><br><span class=\"line\">    a[p].q=t[x];</span><br><span class=\"line\">    t[x]=p;</span><br><span class=\"line\">    a[p].r=r;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">bfs</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    queue&lt;<span class=\"type\">int</span>&gt; Q;</span><br><span class=\"line\">    Q.<span class=\"built_in\">push</span>(s1);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;=<span class=\"number\">127</span>;++i) f[i]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    f[s1]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!Q.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> k=Q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">        Q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t[k];i!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(f[a[i].m]==<span class=\"number\">0</span>&amp;&amp;a[i].r!=<span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                f[a[i].m]=f[k]+<span class=\"number\">1</span>;</span><br><span class=\"line\">                Q.<span class=\"built_in\">push</span>(a[i].m);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> f[s2]!=<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x==s2) <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">    <span class=\"type\">int</span> s=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t[x];i!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(f[a[i].m]==f[x]+<span class=\"number\">1</span>&amp;&amp;a[i].r!=<span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> z=<span class=\"built_in\">dfs</span>(a[i].m,<span class=\"built_in\">min</span>(r,a[i].r));</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(z!=<span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                a[i].r-=z;</span><br><span class=\"line\">                a[i^<span class=\"number\">1</span>].r+=z;</span><br><span class=\"line\">                r-=z;</span><br><span class=\"line\">                s+=z;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;m);</span><br><span class=\"line\">    s1=<span class=\"string\">&#x27;A&#x27;</span>;</span><br><span class=\"line\">    s2=<span class=\"string\">&#x27;Z&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">char</span> x,y;</span><br><span class=\"line\">        x=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">        <span class=\"keyword\">while</span>((x&lt;<span class=\"string\">&#x27;A&#x27;</span>||x&gt;<span class=\"string\">&#x27;Z&#x27;</span>)&amp;&amp;(x&lt;<span class=\"string\">&#x27;a&#x27;</span>||x&gt;<span class=\"string\">&#x27;z&#x27;</span>)) x=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">        y=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">        <span class=\"keyword\">while</span>((y&lt;<span class=\"string\">&#x27;A&#x27;</span>||y&gt;<span class=\"string\">&#x27;Z&#x27;</span>)&amp;&amp;(y&lt;<span class=\"string\">&#x27;a&#x27;</span>||y&gt;<span class=\"string\">&#x27;z&#x27;</span>)) y=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">        <span class=\"type\">int</span> r;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;r);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(<span class=\"built_in\">int</span>(x),<span class=\"built_in\">int</span>(y),r);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(<span class=\"built_in\">int</span>(y),<span class=\"built_in\">int</span>(x),<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> r=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">bfs</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        r+=<span class=\"built_in\">dfs</span>(s1,<span class=\"number\">1e9</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,r);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"P3254 圆桌问题","date":"2022-04-13T05:51:56.000Z","description":" ","_content":"\n[P3254 圆桌问题](https://www.luogu.com.cn/problem/P3254)\n## 分析\n这道题也比较容易发现是一道网络流，我们来考虑如何建图。左边 $m$ 个点代表每个单位，右边 $n$ 个点代表每个圆桌，每一个单位在一个圆桌只能有 $1$ 个人，也就是从每个单位到每个圆桌的边容量为 $1$。然后将源点与每个单位相连，容量为 $r_i$，将每个圆桌与汇点相连，容量为 $c_i$。最后跑一边最大流，得到的最大流就是答案。\n由于有很多点，初始化的时候注意要初始化全部的点。\n## code\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<queue>\nusing namespace std;\nint n,m=0,m1,m2,p=1,s1,s2,t[10001],t0[10001],f[10001],g[10001];\nbool u=true;\nstruct str\n{\n    int m,q,r;\n}a[1000001];\nvoid road(int x,int y,int r)\n{\n    a[++p].m=y;\n    a[p].q=t[x];\n    t[x]=p;\n    a[p].r=r;\n}\nvoid bfs()\n{\n    queue<int> Q;\n    Q.push(s2);\n    f[s2]=1;\n    g[1]=1;\n    while(!Q.empty())\n    {\n        int k=Q.front();\n        Q.pop();\n        for(int i=t[k];i!=0;i=a[i].q)\n        {\n            if(f[a[i].m]==0&&a[i].r==0)\n            {\n                f[a[i].m]=f[k]+1;\n                ++g[f[a[i].m]];\n                Q.push(a[i].m);\n            }\n        }\n    }\n}\nint dfs(int x,int r)\n{\n    if(x==s2) return r;\n    int s=0;\n    for(int i=t0[x];i!=0;i=a[i].q)\n    {\n        t0[x]=i;\n        if(f[x]==f[a[i].m]+1&&a[i].r!=0)\n        {\n            int z=dfs(a[i].m,min(r,a[i].r));\n            if(z!=0)\n            {\n                a[i].r-=z;\n                a[i^1].r+=z;\n                r-=z;\n                s+=z;\n            }\n            if(r==0) return s;\n        }\n    }\n    --g[f[x]];\n    if(g[f[x]]==0) u=false;\n    ++f[x];\n    ++g[f[x]];\n    return s;\n}\nint main()\n{\n    scanf(\"%d%d\",&m1,&m2);\n    n=m1+m2+2;\n    s1=1;\n    s2=n;\n    for(int i=1;i<=m1;++i)\n    {\n        int r;\n        scanf(\"%d\",&r);\n        m+=r;\n        road(1,i+1,r);\n        road(i+1,1,0);\n    }\n    for(int i=1;i<=m2;++i)\n    {\n        int r;\n        scanf(\"%d\",&r);\n        road(i+m1+1,n,r);\n        road(n,i+m1+1,0);\n    }\n    for(int i=1;i<=m1;++i)\n    {\n        for(int j=1;j<=m2;++j)\n        {\n            road(i+1,j+m1+1,1);\n            road(j+m1+1,i+1,0);\n        }\n    }\n    bfs();\n    int r=0;\n    while(u==true)\n    {\n        for(int i=1;i<=n;++i) t0[i]=t[i];\n        r+=dfs(s1,1e9);\n    }\n    if(r!=m)\n    {\n        printf(\"0\");\n        return 0;\n    }\n    printf(\"1\\n\");\n    for(int i=1;i<=m1;++i)\n    {\n        for(int j=t[i+1];j!=0;j=a[j].q)\n        {\n            if(a[j].m!=1&&a[j].r==0)\n            {\n                printf(\"%d \",a[j].m-m1-1);\n            }\n        }\n        printf(\"\\n\");\n    }\n    return 0;\n}\n```","source":"_posts/P3254-solution.md","raw":"---\ntitle: 'P3254 圆桌问题'\ndate: 2022-04-13 13:51:56\ntags: [网络流,最大流]\ndescription: ' '\n---\n\n[P3254 圆桌问题](https://www.luogu.com.cn/problem/P3254)\n## 分析\n这道题也比较容易发现是一道网络流，我们来考虑如何建图。左边 $m$ 个点代表每个单位，右边 $n$ 个点代表每个圆桌，每一个单位在一个圆桌只能有 $1$ 个人，也就是从每个单位到每个圆桌的边容量为 $1$。然后将源点与每个单位相连，容量为 $r_i$，将每个圆桌与汇点相连，容量为 $c_i$。最后跑一边最大流，得到的最大流就是答案。\n由于有很多点，初始化的时候注意要初始化全部的点。\n## code\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<queue>\nusing namespace std;\nint n,m=0,m1,m2,p=1,s1,s2,t[10001],t0[10001],f[10001],g[10001];\nbool u=true;\nstruct str\n{\n    int m,q,r;\n}a[1000001];\nvoid road(int x,int y,int r)\n{\n    a[++p].m=y;\n    a[p].q=t[x];\n    t[x]=p;\n    a[p].r=r;\n}\nvoid bfs()\n{\n    queue<int> Q;\n    Q.push(s2);\n    f[s2]=1;\n    g[1]=1;\n    while(!Q.empty())\n    {\n        int k=Q.front();\n        Q.pop();\n        for(int i=t[k];i!=0;i=a[i].q)\n        {\n            if(f[a[i].m]==0&&a[i].r==0)\n            {\n                f[a[i].m]=f[k]+1;\n                ++g[f[a[i].m]];\n                Q.push(a[i].m);\n            }\n        }\n    }\n}\nint dfs(int x,int r)\n{\n    if(x==s2) return r;\n    int s=0;\n    for(int i=t0[x];i!=0;i=a[i].q)\n    {\n        t0[x]=i;\n        if(f[x]==f[a[i].m]+1&&a[i].r!=0)\n        {\n            int z=dfs(a[i].m,min(r,a[i].r));\n            if(z!=0)\n            {\n                a[i].r-=z;\n                a[i^1].r+=z;\n                r-=z;\n                s+=z;\n            }\n            if(r==0) return s;\n        }\n    }\n    --g[f[x]];\n    if(g[f[x]]==0) u=false;\n    ++f[x];\n    ++g[f[x]];\n    return s;\n}\nint main()\n{\n    scanf(\"%d%d\",&m1,&m2);\n    n=m1+m2+2;\n    s1=1;\n    s2=n;\n    for(int i=1;i<=m1;++i)\n    {\n        int r;\n        scanf(\"%d\",&r);\n        m+=r;\n        road(1,i+1,r);\n        road(i+1,1,0);\n    }\n    for(int i=1;i<=m2;++i)\n    {\n        int r;\n        scanf(\"%d\",&r);\n        road(i+m1+1,n,r);\n        road(n,i+m1+1,0);\n    }\n    for(int i=1;i<=m1;++i)\n    {\n        for(int j=1;j<=m2;++j)\n        {\n            road(i+1,j+m1+1,1);\n            road(j+m1+1,i+1,0);\n        }\n    }\n    bfs();\n    int r=0;\n    while(u==true)\n    {\n        for(int i=1;i<=n;++i) t0[i]=t[i];\n        r+=dfs(s1,1e9);\n    }\n    if(r!=m)\n    {\n        printf(\"0\");\n        return 0;\n    }\n    printf(\"1\\n\");\n    for(int i=1;i<=m1;++i)\n    {\n        for(int j=t[i+1];j!=0;j=a[j].q)\n        {\n            if(a[j].m!=1&&a[j].r==0)\n            {\n                printf(\"%d \",a[j].m-m1-1);\n            }\n        }\n        printf(\"\\n\");\n    }\n    return 0;\n}\n```","slug":"P3254-solution","published":1,"updated":"2022-11-28T13:47:47.410Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cleid927w00162sjf6scd6v0y","content":"<p><a href=\"https://www.luogu.com.cn/problem/P3254\">P3254 圆桌问题</a></p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>这道题也比较容易发现是一道网络流，我们来考虑如何建图。左边 $m$ 个点代表每个单位，右边 $n$ 个点代表每个圆桌，每一个单位在一个圆桌只能有 $1$ 个人，也就是从每个单位到每个圆桌的边容量为 $1$。然后将源点与每个单位相连，容量为 $r_i$，将每个圆桌与汇点相连，容量为 $c_i$。最后跑一边最大流，得到的最大流就是答案。<br>由于有很多点，初始化的时候注意要初始化全部的点。</p>\n<h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m=<span class=\"number\">0</span>,m1,m2,p=<span class=\"number\">1</span>,s1,s2,t[<span class=\"number\">10001</span>],t0[<span class=\"number\">10001</span>],f[<span class=\"number\">10001</span>],g[<span class=\"number\">10001</span>];</span><br><span class=\"line\"><span class=\"type\">bool</span> u=<span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">str</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> m,q,r;</span><br><span class=\"line\">&#125;a[<span class=\"number\">1000001</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">road</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y,<span class=\"type\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    a[++p].m=y;</span><br><span class=\"line\">    a[p].q=t[x];</span><br><span class=\"line\">    t[x]=p;</span><br><span class=\"line\">    a[p].r=r;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">bfs</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    queue&lt;<span class=\"type\">int</span>&gt; Q;</span><br><span class=\"line\">    Q.<span class=\"built_in\">push</span>(s2);</span><br><span class=\"line\">    f[s2]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    g[<span class=\"number\">1</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!Q.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> k=Q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">        Q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t[k];i!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(f[a[i].m]==<span class=\"number\">0</span>&amp;&amp;a[i].r==<span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                f[a[i].m]=f[k]+<span class=\"number\">1</span>;</span><br><span class=\"line\">                ++g[f[a[i].m]];</span><br><span class=\"line\">                Q.<span class=\"built_in\">push</span>(a[i].m);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x==s2) <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">    <span class=\"type\">int</span> s=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t0[x];i!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        t0[x]=i;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(f[x]==f[a[i].m]+<span class=\"number\">1</span>&amp;&amp;a[i].r!=<span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> z=<span class=\"built_in\">dfs</span>(a[i].m,<span class=\"built_in\">min</span>(r,a[i].r));</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(z!=<span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                a[i].r-=z;</span><br><span class=\"line\">                a[i^<span class=\"number\">1</span>].r+=z;</span><br><span class=\"line\">                r-=z;</span><br><span class=\"line\">                s+=z;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(r==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    --g[f[x]];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(g[f[x]]==<span class=\"number\">0</span>) u=<span class=\"literal\">false</span>;</span><br><span class=\"line\">    ++f[x];</span><br><span class=\"line\">    ++g[f[x]];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;m1,&amp;m2);</span><br><span class=\"line\">    n=m1+m2+<span class=\"number\">2</span>;</span><br><span class=\"line\">    s1=<span class=\"number\">1</span>;</span><br><span class=\"line\">    s2=n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m1;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> r;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;r);</span><br><span class=\"line\">        m+=r;</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(<span class=\"number\">1</span>,i+<span class=\"number\">1</span>,r);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(i+<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m2;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> r;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;r);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(i+m1+<span class=\"number\">1</span>,n,r);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(n,i+m1+<span class=\"number\">1</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m1;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=m2;++j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">road</span>(i+<span class=\"number\">1</span>,j+m1+<span class=\"number\">1</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"built_in\">road</span>(j+m1+<span class=\"number\">1</span>,i+<span class=\"number\">1</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">bfs</span>();</span><br><span class=\"line\">    <span class=\"type\">int</span> r=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(u==<span class=\"literal\">true</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i) t0[i]=t[i];</span><br><span class=\"line\">        r+=<span class=\"built_in\">dfs</span>(s1,<span class=\"number\">1e9</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r!=m)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;0&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;1\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m1;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=t[i+<span class=\"number\">1</span>];j!=<span class=\"number\">0</span>;j=a[j].q)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(a[j].m!=<span class=\"number\">1</span>&amp;&amp;a[j].r==<span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>,a[j].m-m1<span class=\"number\">-1</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://www.luogu.com.cn/problem/P3254\">P3254 圆桌问题</a></p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>这道题也比较容易发现是一道网络流，我们来考虑如何建图。左边 $m$ 个点代表每个单位，右边 $n$ 个点代表每个圆桌，每一个单位在一个圆桌只能有 $1$ 个人，也就是从每个单位到每个圆桌的边容量为 $1$。然后将源点与每个单位相连，容量为 $r_i$，将每个圆桌与汇点相连，容量为 $c_i$。最后跑一边最大流，得到的最大流就是答案。<br>由于有很多点，初始化的时候注意要初始化全部的点。</p>\n<h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m=<span class=\"number\">0</span>,m1,m2,p=<span class=\"number\">1</span>,s1,s2,t[<span class=\"number\">10001</span>],t0[<span class=\"number\">10001</span>],f[<span class=\"number\">10001</span>],g[<span class=\"number\">10001</span>];</span><br><span class=\"line\"><span class=\"type\">bool</span> u=<span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">str</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> m,q,r;</span><br><span class=\"line\">&#125;a[<span class=\"number\">1000001</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">road</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y,<span class=\"type\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    a[++p].m=y;</span><br><span class=\"line\">    a[p].q=t[x];</span><br><span class=\"line\">    t[x]=p;</span><br><span class=\"line\">    a[p].r=r;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">bfs</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    queue&lt;<span class=\"type\">int</span>&gt; Q;</span><br><span class=\"line\">    Q.<span class=\"built_in\">push</span>(s2);</span><br><span class=\"line\">    f[s2]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    g[<span class=\"number\">1</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!Q.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> k=Q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">        Q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t[k];i!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(f[a[i].m]==<span class=\"number\">0</span>&amp;&amp;a[i].r==<span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                f[a[i].m]=f[k]+<span class=\"number\">1</span>;</span><br><span class=\"line\">                ++g[f[a[i].m]];</span><br><span class=\"line\">                Q.<span class=\"built_in\">push</span>(a[i].m);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x==s2) <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">    <span class=\"type\">int</span> s=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t0[x];i!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        t0[x]=i;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(f[x]==f[a[i].m]+<span class=\"number\">1</span>&amp;&amp;a[i].r!=<span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> z=<span class=\"built_in\">dfs</span>(a[i].m,<span class=\"built_in\">min</span>(r,a[i].r));</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(z!=<span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                a[i].r-=z;</span><br><span class=\"line\">                a[i^<span class=\"number\">1</span>].r+=z;</span><br><span class=\"line\">                r-=z;</span><br><span class=\"line\">                s+=z;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(r==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    --g[f[x]];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(g[f[x]]==<span class=\"number\">0</span>) u=<span class=\"literal\">false</span>;</span><br><span class=\"line\">    ++f[x];</span><br><span class=\"line\">    ++g[f[x]];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;m1,&amp;m2);</span><br><span class=\"line\">    n=m1+m2+<span class=\"number\">2</span>;</span><br><span class=\"line\">    s1=<span class=\"number\">1</span>;</span><br><span class=\"line\">    s2=n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m1;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> r;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;r);</span><br><span class=\"line\">        m+=r;</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(<span class=\"number\">1</span>,i+<span class=\"number\">1</span>,r);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(i+<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m2;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> r;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;r);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(i+m1+<span class=\"number\">1</span>,n,r);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(n,i+m1+<span class=\"number\">1</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m1;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=m2;++j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">road</span>(i+<span class=\"number\">1</span>,j+m1+<span class=\"number\">1</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"built_in\">road</span>(j+m1+<span class=\"number\">1</span>,i+<span class=\"number\">1</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">bfs</span>();</span><br><span class=\"line\">    <span class=\"type\">int</span> r=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(u==<span class=\"literal\">true</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i) t0[i]=t[i];</span><br><span class=\"line\">        r+=<span class=\"built_in\">dfs</span>(s1,<span class=\"number\">1e9</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r!=m)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;0&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;1\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m1;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=t[i+<span class=\"number\">1</span>];j!=<span class=\"number\">0</span>;j=a[j].q)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(a[j].m!=<span class=\"number\">1</span>&amp;&amp;a[j].r==<span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>,a[j].m-m1<span class=\"number\">-1</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"P3355 骑士共存问题","date":"2022-04-17T03:42:36.000Z","description":" ","_content":"\n[P3355 骑士共存问题](https://www.luogu.com.cn/problem/P3355)\n## 分析\n这道题和 P2774 是一个类型的题，只是分组方式不同。我们来看两个互相攻击的点有什么特点：$(x,y) \\Leftrightarrow (x+1,y+2)$，$(x,y) \\Leftrightarrow (x-1,y+2)$，$(x,y) \\Leftrightarrow (x-2,y+1)$，$\\cdots$。不难发现，两个相互攻击的点横纵坐标之和奇偶性不同，我们就可以通过横纵坐标的奇偶性来分组。这道题还多了障碍物的限制，只要有障碍物的点不向外连边即可。\n## code\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<queue>\nusing namespace std;\ntypedef long long ll;\nconst int N=50001,M=2000001;\nint n,m,p=1,s1,s2,t[N],t0[N],f[N];\nshort dx[8]={-2,-1,1,2,2,1,-1,-2},dy[8]={-1,-2,-2,-1,1,2,2,1};\nbool b[201][201];\nstruct str\n{\n    int m,q;\n    ll r;\n}a[M];\nbool check(int x,int y)\n{\n    return x>=1&&x<=n&&y>=1&&y<=n;\n}\nint sum(int x,int y)\n{\n    return (x-1)*n+y;\n}\nvoid road(int x,int y,ll r)\n{\n    a[++p].m=y;\n    a[p].q=t[x];\n    t[x]=p;\n    a[p].r=r;\n}\nbool bfs()\n{\n    queue<int> Q;\n    Q.push(s1);\n    for(int i=1;i<=s2;++i) f[i]=0;\n    f[s1]=1;\n    while(!Q.empty())\n    {\n        int k=Q.front();\n        Q.pop();\n        for(int i=t[k];i!=0;i=a[i].q)\n        {\n            if(f[a[i].m]==0&&a[i].r!=0)\n            {\n                f[a[i].m]=f[k]+1;\n                Q.push(a[i].m);\n            }\n        }\n    }\n    return f[s2]!=0;\n}\nll dfs(int x,ll r)\n{\n    if(x==s2) return r;\n    ll s=0;\n    for(int i=t0[x];i!=0;i=a[i].q)\n    {\n        t0[x]=i;\n        if(f[a[i].m]==f[x]+1&&a[i].r!=0)\n        {\n            int z=dfs(a[i].m,min(r,a[i].r));\n            if(z!=0)\n            {\n                a[i].r-=z;\n                a[i^1].r+=z;\n                r-=z;\n                s+=z;\n            }\n            else f[a[i].m]=0;\n            if(r==0) return s; \n        }\n    }\n    return s;\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    s1=n*n+1;\n    s2=n*n+2;\n    for(int i=1;i<=m;++i)\n    {\n        int x,y;\n        scanf(\"%d%d\",&x,&y);\n        b[x][y]=true;\n    }\n    for(int i=1;i<=n;++i)\n    {\n        for(int j=1;j<=n;++j)\n        {\n            if(b[i][j]==true) continue;\n            if((i+j)&1)\n            {\n                road(s1,sum(i,j),1);\n                road(sum(i,j),s1,0);\n                for(int k=0;k<=7;++k)\n                {\n                    if(check(i+dx[k],j+dy[k]))\n                    {\n                        road(sum(i,j),sum(i+dx[k],j+dy[k]),1e18);\n                        road(sum(i+dx[k],j+dy[k]),sum(i,j),0);\n                    }\n                }\n            }\n            else\n            {\n                road(sum(i,j),s2,1);\n                road(s2,sum(i,j),0);\n            }\n        }\n    }\n    ll r=0;\n    while(bfs())\n    {\n        for(int i=1;i<=s2;++i) t0[i]=t[i];\n        r+=dfs(s1,1e18);\n    }\n    printf(\"%lld\",n*n-m-r);\n    return 0;\n}\n```","source":"_posts/P3355-solution.md","raw":"---\ntitle: 'P3355 骑士共存问题'\ndate: 2022-04-17 11:42:36\ntags: [网络流,最大流]\ndescription: ' '\n---\n\n[P3355 骑士共存问题](https://www.luogu.com.cn/problem/P3355)\n## 分析\n这道题和 P2774 是一个类型的题，只是分组方式不同。我们来看两个互相攻击的点有什么特点：$(x,y) \\Leftrightarrow (x+1,y+2)$，$(x,y) \\Leftrightarrow (x-1,y+2)$，$(x,y) \\Leftrightarrow (x-2,y+1)$，$\\cdots$。不难发现，两个相互攻击的点横纵坐标之和奇偶性不同，我们就可以通过横纵坐标的奇偶性来分组。这道题还多了障碍物的限制，只要有障碍物的点不向外连边即可。\n## code\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<queue>\nusing namespace std;\ntypedef long long ll;\nconst int N=50001,M=2000001;\nint n,m,p=1,s1,s2,t[N],t0[N],f[N];\nshort dx[8]={-2,-1,1,2,2,1,-1,-2},dy[8]={-1,-2,-2,-1,1,2,2,1};\nbool b[201][201];\nstruct str\n{\n    int m,q;\n    ll r;\n}a[M];\nbool check(int x,int y)\n{\n    return x>=1&&x<=n&&y>=1&&y<=n;\n}\nint sum(int x,int y)\n{\n    return (x-1)*n+y;\n}\nvoid road(int x,int y,ll r)\n{\n    a[++p].m=y;\n    a[p].q=t[x];\n    t[x]=p;\n    a[p].r=r;\n}\nbool bfs()\n{\n    queue<int> Q;\n    Q.push(s1);\n    for(int i=1;i<=s2;++i) f[i]=0;\n    f[s1]=1;\n    while(!Q.empty())\n    {\n        int k=Q.front();\n        Q.pop();\n        for(int i=t[k];i!=0;i=a[i].q)\n        {\n            if(f[a[i].m]==0&&a[i].r!=0)\n            {\n                f[a[i].m]=f[k]+1;\n                Q.push(a[i].m);\n            }\n        }\n    }\n    return f[s2]!=0;\n}\nll dfs(int x,ll r)\n{\n    if(x==s2) return r;\n    ll s=0;\n    for(int i=t0[x];i!=0;i=a[i].q)\n    {\n        t0[x]=i;\n        if(f[a[i].m]==f[x]+1&&a[i].r!=0)\n        {\n            int z=dfs(a[i].m,min(r,a[i].r));\n            if(z!=0)\n            {\n                a[i].r-=z;\n                a[i^1].r+=z;\n                r-=z;\n                s+=z;\n            }\n            else f[a[i].m]=0;\n            if(r==0) return s; \n        }\n    }\n    return s;\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    s1=n*n+1;\n    s2=n*n+2;\n    for(int i=1;i<=m;++i)\n    {\n        int x,y;\n        scanf(\"%d%d\",&x,&y);\n        b[x][y]=true;\n    }\n    for(int i=1;i<=n;++i)\n    {\n        for(int j=1;j<=n;++j)\n        {\n            if(b[i][j]==true) continue;\n            if((i+j)&1)\n            {\n                road(s1,sum(i,j),1);\n                road(sum(i,j),s1,0);\n                for(int k=0;k<=7;++k)\n                {\n                    if(check(i+dx[k],j+dy[k]))\n                    {\n                        road(sum(i,j),sum(i+dx[k],j+dy[k]),1e18);\n                        road(sum(i+dx[k],j+dy[k]),sum(i,j),0);\n                    }\n                }\n            }\n            else\n            {\n                road(sum(i,j),s2,1);\n                road(s2,sum(i,j),0);\n            }\n        }\n    }\n    ll r=0;\n    while(bfs())\n    {\n        for(int i=1;i<=s2;++i) t0[i]=t[i];\n        r+=dfs(s1,1e18);\n    }\n    printf(\"%lld\",n*n-m-r);\n    return 0;\n}\n```","slug":"P3355-solution","published":1,"updated":"2022-11-28T13:47:47.410Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cleid927x00182sjf8o2xg0l7","content":"<p><a href=\"https://www.luogu.com.cn/problem/P3355\">P3355 骑士共存问题</a></p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>这道题和 P2774 是一个类型的题，只是分组方式不同。我们来看两个互相攻击的点有什么特点：$(x,y) \\Leftrightarrow (x+1,y+2)$，$(x,y) \\Leftrightarrow (x-1,y+2)$，$(x,y) \\Leftrightarrow (x-2,y+1)$，$\\cdots$。不难发现，两个相互攻击的点横纵坐标之和奇偶性不同，我们就可以通过横纵坐标的奇偶性来分组。这道题还多了障碍物的限制，只要有障碍物的点不向外连边即可。</p>\n<h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> ll;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">50001</span>,M=<span class=\"number\">2000001</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m,p=<span class=\"number\">1</span>,s1,s2,t[N],t0[N],f[N];</span><br><span class=\"line\"><span class=\"type\">short</span> dx[<span class=\"number\">8</span>]=&#123;<span class=\"number\">-2</span>,<span class=\"number\">-1</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">-1</span>,<span class=\"number\">-2</span>&#125;,dy[<span class=\"number\">8</span>]=&#123;<span class=\"number\">-1</span>,<span class=\"number\">-2</span>,<span class=\"number\">-2</span>,<span class=\"number\">-1</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>&#125;;</span><br><span class=\"line\"><span class=\"type\">bool</span> b[<span class=\"number\">201</span>][<span class=\"number\">201</span>];</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">str</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> m,q;</span><br><span class=\"line\">    ll r;</span><br><span class=\"line\">&#125;a[M];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">check</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x&gt;=<span class=\"number\">1</span>&amp;&amp;x&lt;=n&amp;&amp;y&gt;=<span class=\"number\">1</span>&amp;&amp;y&lt;=n;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">sum</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (x<span class=\"number\">-1</span>)*n+y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">road</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y,ll r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    a[++p].m=y;</span><br><span class=\"line\">    a[p].q=t[x];</span><br><span class=\"line\">    t[x]=p;</span><br><span class=\"line\">    a[p].r=r;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">bfs</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    queue&lt;<span class=\"type\">int</span>&gt; Q;</span><br><span class=\"line\">    Q.<span class=\"built_in\">push</span>(s1);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=s2;++i) f[i]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    f[s1]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!Q.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> k=Q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">        Q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t[k];i!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(f[a[i].m]==<span class=\"number\">0</span>&amp;&amp;a[i].r!=<span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                f[a[i].m]=f[k]+<span class=\"number\">1</span>;</span><br><span class=\"line\">                Q.<span class=\"built_in\">push</span>(a[i].m);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> f[s2]!=<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> x,ll r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x==s2) <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">    ll s=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t0[x];i!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        t0[x]=i;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(f[a[i].m]==f[x]+<span class=\"number\">1</span>&amp;&amp;a[i].r!=<span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> z=<span class=\"built_in\">dfs</span>(a[i].m,<span class=\"built_in\">min</span>(r,a[i].r));</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(z!=<span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                a[i].r-=z;</span><br><span class=\"line\">                a[i^<span class=\"number\">1</span>].r+=z;</span><br><span class=\"line\">                r-=z;</span><br><span class=\"line\">                s+=z;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> f[a[i].m]=<span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(r==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> s; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class=\"line\">    s1=n*n+<span class=\"number\">1</span>;</span><br><span class=\"line\">    s2=n*n+<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x,y;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;x,&amp;y);</span><br><span class=\"line\">        b[x][y]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=n;++j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(b[i][j]==<span class=\"literal\">true</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>((i+j)&amp;<span class=\"number\">1</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">road</span>(s1,<span class=\"built_in\">sum</span>(i,j),<span class=\"number\">1</span>);</span><br><span class=\"line\">                <span class=\"built_in\">road</span>(<span class=\"built_in\">sum</span>(i,j),s1,<span class=\"number\">0</span>);</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"type\">int</span> k=<span class=\"number\">0</span>;k&lt;=<span class=\"number\">7</span>;++k)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(<span class=\"built_in\">check</span>(i+dx[k],j+dy[k]))</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"built_in\">road</span>(<span class=\"built_in\">sum</span>(i,j),<span class=\"built_in\">sum</span>(i+dx[k],j+dy[k]),<span class=\"number\">1e18</span>);</span><br><span class=\"line\">                        <span class=\"built_in\">road</span>(<span class=\"built_in\">sum</span>(i+dx[k],j+dy[k]),<span class=\"built_in\">sum</span>(i,j),<span class=\"number\">0</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">road</span>(<span class=\"built_in\">sum</span>(i,j),s2,<span class=\"number\">1</span>);</span><br><span class=\"line\">                <span class=\"built_in\">road</span>(s2,<span class=\"built_in\">sum</span>(i,j),<span class=\"number\">0</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ll r=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">bfs</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=s2;++i) t0[i]=t[i];</span><br><span class=\"line\">        r+=<span class=\"built_in\">dfs</span>(s1,<span class=\"number\">1e18</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld&quot;</span>,n*n-m-r);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://www.luogu.com.cn/problem/P3355\">P3355 骑士共存问题</a></p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>这道题和 P2774 是一个类型的题，只是分组方式不同。我们来看两个互相攻击的点有什么特点：$(x,y) \\Leftrightarrow (x+1,y+2)$，$(x,y) \\Leftrightarrow (x-1,y+2)$，$(x,y) \\Leftrightarrow (x-2,y+1)$，$\\cdots$。不难发现，两个相互攻击的点横纵坐标之和奇偶性不同，我们就可以通过横纵坐标的奇偶性来分组。这道题还多了障碍物的限制，只要有障碍物的点不向外连边即可。</p>\n<h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> ll;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">50001</span>,M=<span class=\"number\">2000001</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m,p=<span class=\"number\">1</span>,s1,s2,t[N],t0[N],f[N];</span><br><span class=\"line\"><span class=\"type\">short</span> dx[<span class=\"number\">8</span>]=&#123;<span class=\"number\">-2</span>,<span class=\"number\">-1</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">-1</span>,<span class=\"number\">-2</span>&#125;,dy[<span class=\"number\">8</span>]=&#123;<span class=\"number\">-1</span>,<span class=\"number\">-2</span>,<span class=\"number\">-2</span>,<span class=\"number\">-1</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>&#125;;</span><br><span class=\"line\"><span class=\"type\">bool</span> b[<span class=\"number\">201</span>][<span class=\"number\">201</span>];</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">str</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> m,q;</span><br><span class=\"line\">    ll r;</span><br><span class=\"line\">&#125;a[M];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">check</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x&gt;=<span class=\"number\">1</span>&amp;&amp;x&lt;=n&amp;&amp;y&gt;=<span class=\"number\">1</span>&amp;&amp;y&lt;=n;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">sum</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (x<span class=\"number\">-1</span>)*n+y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">road</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y,ll r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    a[++p].m=y;</span><br><span class=\"line\">    a[p].q=t[x];</span><br><span class=\"line\">    t[x]=p;</span><br><span class=\"line\">    a[p].r=r;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">bfs</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    queue&lt;<span class=\"type\">int</span>&gt; Q;</span><br><span class=\"line\">    Q.<span class=\"built_in\">push</span>(s1);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=s2;++i) f[i]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    f[s1]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!Q.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> k=Q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">        Q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t[k];i!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(f[a[i].m]==<span class=\"number\">0</span>&amp;&amp;a[i].r!=<span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                f[a[i].m]=f[k]+<span class=\"number\">1</span>;</span><br><span class=\"line\">                Q.<span class=\"built_in\">push</span>(a[i].m);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> f[s2]!=<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> x,ll r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x==s2) <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">    ll s=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t0[x];i!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        t0[x]=i;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(f[a[i].m]==f[x]+<span class=\"number\">1</span>&amp;&amp;a[i].r!=<span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> z=<span class=\"built_in\">dfs</span>(a[i].m,<span class=\"built_in\">min</span>(r,a[i].r));</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(z!=<span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                a[i].r-=z;</span><br><span class=\"line\">                a[i^<span class=\"number\">1</span>].r+=z;</span><br><span class=\"line\">                r-=z;</span><br><span class=\"line\">                s+=z;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> f[a[i].m]=<span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(r==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> s; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class=\"line\">    s1=n*n+<span class=\"number\">1</span>;</span><br><span class=\"line\">    s2=n*n+<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x,y;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;x,&amp;y);</span><br><span class=\"line\">        b[x][y]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=n;++j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(b[i][j]==<span class=\"literal\">true</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>((i+j)&amp;<span class=\"number\">1</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">road</span>(s1,<span class=\"built_in\">sum</span>(i,j),<span class=\"number\">1</span>);</span><br><span class=\"line\">                <span class=\"built_in\">road</span>(<span class=\"built_in\">sum</span>(i,j),s1,<span class=\"number\">0</span>);</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"type\">int</span> k=<span class=\"number\">0</span>;k&lt;=<span class=\"number\">7</span>;++k)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(<span class=\"built_in\">check</span>(i+dx[k],j+dy[k]))</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"built_in\">road</span>(<span class=\"built_in\">sum</span>(i,j),<span class=\"built_in\">sum</span>(i+dx[k],j+dy[k]),<span class=\"number\">1e18</span>);</span><br><span class=\"line\">                        <span class=\"built_in\">road</span>(<span class=\"built_in\">sum</span>(i+dx[k],j+dy[k]),<span class=\"built_in\">sum</span>(i,j),<span class=\"number\">0</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">road</span>(<span class=\"built_in\">sum</span>(i,j),s2,<span class=\"number\">1</span>);</span><br><span class=\"line\">                <span class=\"built_in\">road</span>(s2,<span class=\"built_in\">sum</span>(i,j),<span class=\"number\">0</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ll r=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">bfs</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=s2;++i) t0[i]=t[i];</span><br><span class=\"line\">        r+=<span class=\"built_in\">dfs</span>(s1,<span class=\"number\">1e18</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld&quot;</span>,n*n-m-r);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"P3356 火星探险问题","date":"2022-05-21T05:34:45.000Z","description":" ","_content":"\n[P3356 火星探险问题](https://www.luogu.com.cn/problem/P3356)\n## 分析\n这道题的方法同 [P4012](/post/P4012-solution/) ，但是还要求输出一种方案，我们就需要知道流量的流动情况。如果一条边有流量流过，那么这条边的反向边容量 $r$ 一定不为 $0$，而且流过的流量就是 $r$，也就是有 $r$ 个探测车经过。我们只需要从源点开始一直走反向边容量不为 $0$ 的边，且每走一次容量减一，注意要判断有没有往回走，还要注意处理拆开的两个点的关系。\n## code\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<queue>\nusing namespace std;\ntypedef long long ll;\nconst int N=100001,M=1000001;\nint n,m,p=1,s1,s2,t[N],t0[N];\nll v,f[N],q;\nbool h[N];\nstruct road\n{\n    int m,q;\n    ll r,w;\n}a[M];\nint sum(int x,int y)\n{\n    return (x-1)*n+y;\n}\nvoid road(int x,int y,ll r,ll w)\n{\n    a[++p].m=y;\n    a[p].q=t[x];\n    t[x]=p;\n    a[p].r=r;\n    a[p].w=w;\n}\nbool SPFA()\n{\n    queue<int> Q;\n    Q.push(s1);\n    for(int i=1;i<=s2;++i)\n    {\n        f[i]=-1e18;\n        h[i]=false;\n    }\n    f[s1]=0;\n    h[s1]=true;\n    while(!Q.empty())\n    {\n        int k=Q.front();\n        Q.pop();\n        if(h[k]==false) continue;\n        h[k]=false;\n        for(int i=t[k];i!=0;i=a[i].q)\n        {\n            if(a[i].r>0&&f[k]+a[i].w>f[a[i].m])\n            {\n                f[a[i].m]=f[k]+a[i].w;\n                Q.push(a[i].m);\n                h[a[i].m]=true;\n            }\n        }\n    }\n    if(f[s2]!=-1e18) return true;\n    return false;\n}\nll dfs(int x,ll r)\n{\n    if(x==s2) return r;\n    ll s=0;\n    for(int i=t0[x];i!=0;i=a[i].q)\n    {\n        t0[x]=i;\n        if(h[a[i].m]==false&&a[i].r>0&&f[a[i].m]==f[x]+a[i].w)\n        {\n            h[a[i].m]=true;\n            ll z=dfs(a[i].m,min(r,a[i].r));\n            h[a[i].m]=false;\n            if(z!=0)\n            {\n                a[i].r-=z;\n                a[i^1].r+=z;\n                r-=z;\n                s+=z;\n                v+=z*a[i].w;\n            }\n            else f[a[i].m]=0;\n            if(r==0) return s;\n        }\n    }\n    return s;\n}\nvoid dfs0(int x,int k)\n{\n    if(x==sum(m,n)) return;\n    for(int i=t[m*n+x];i!=0;i=a[i].q)\n    {\n        if(a[i].m==x||a[i^1].r==0) continue;\n        ++a[i].r;\n        --a[i^1].r;\n        if(a[i].m==x+1) printf(\"%d 1\\n\",k);\n        else printf(\"%d 0\\n\",k);\n        dfs0(a[i].m,k);\n        return;\n    }\n}\nint main()\n{\n    scanf(\"%lld%d%d\",&q,&n,&m);\n    s1=m*n*2+1,s2=m*n*2+2;\n    for(int i=1;i<=m;++i)\n    {\n        for(int j=1;j<=n;++j)\n        {\n            int x;\n            scanf(\"%d\",&x);\n            if(x==1) continue;\n            if(x==2)\n            {\n                road(sum(i,j),m*n+sum(i,j),1,1);\n                road(m*n+sum(i,j),sum(i,j),0,-1);\n            }\n            road(sum(i,j),m*n+sum(i,j),1e18,0);\n            road(m*n+sum(i,j),sum(i,j),0,0);\n            if(i<m)\n            {\n                road(m*n+sum(i,j),sum(i+1,j),1e18,0);\n                road(sum(i+1,j),m*n+sum(i,j),0,0);\n            }\n            if(j<n)\n            {\n                road(m*n+sum(i,j),sum(i,j+1),1e18,0);\n                road(sum(i,j+1),m*n+sum(i,j),0,0);\n            }\n        }\n    }\n    road(s1,sum(1,1),q,0);\n    road(sum(1,1),s1,0,0);\n    road(m*n+sum(m,n),s2,q,0);\n    road(s2,m*n+sum(m,n),0,0);\n    ll r=0;\n    while(SPFA())\n    {\n        for(int i=1;i<=s2;++i) \n        {\n            t0[i]=t[i];\n            h[i]=false;\n        }\n        r+=dfs(s1,1e18);\n    }\n    for(int i=1;i<=r;++i)\n    {\n        dfs0(sum(1,1),i);\n    }\n    return 0;\n}\n```","source":"_posts/P3356-solution.md","raw":"---\ntitle: 'P3356 火星探险问题'\ndate: 2022-05-21 13:34:45\ntags: [网络流,费用流]\ndescription: ' '\n---\n\n[P3356 火星探险问题](https://www.luogu.com.cn/problem/P3356)\n## 分析\n这道题的方法同 [P4012](/post/P4012-solution/) ，但是还要求输出一种方案，我们就需要知道流量的流动情况。如果一条边有流量流过，那么这条边的反向边容量 $r$ 一定不为 $0$，而且流过的流量就是 $r$，也就是有 $r$ 个探测车经过。我们只需要从源点开始一直走反向边容量不为 $0$ 的边，且每走一次容量减一，注意要判断有没有往回走，还要注意处理拆开的两个点的关系。\n## code\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<queue>\nusing namespace std;\ntypedef long long ll;\nconst int N=100001,M=1000001;\nint n,m,p=1,s1,s2,t[N],t0[N];\nll v,f[N],q;\nbool h[N];\nstruct road\n{\n    int m,q;\n    ll r,w;\n}a[M];\nint sum(int x,int y)\n{\n    return (x-1)*n+y;\n}\nvoid road(int x,int y,ll r,ll w)\n{\n    a[++p].m=y;\n    a[p].q=t[x];\n    t[x]=p;\n    a[p].r=r;\n    a[p].w=w;\n}\nbool SPFA()\n{\n    queue<int> Q;\n    Q.push(s1);\n    for(int i=1;i<=s2;++i)\n    {\n        f[i]=-1e18;\n        h[i]=false;\n    }\n    f[s1]=0;\n    h[s1]=true;\n    while(!Q.empty())\n    {\n        int k=Q.front();\n        Q.pop();\n        if(h[k]==false) continue;\n        h[k]=false;\n        for(int i=t[k];i!=0;i=a[i].q)\n        {\n            if(a[i].r>0&&f[k]+a[i].w>f[a[i].m])\n            {\n                f[a[i].m]=f[k]+a[i].w;\n                Q.push(a[i].m);\n                h[a[i].m]=true;\n            }\n        }\n    }\n    if(f[s2]!=-1e18) return true;\n    return false;\n}\nll dfs(int x,ll r)\n{\n    if(x==s2) return r;\n    ll s=0;\n    for(int i=t0[x];i!=0;i=a[i].q)\n    {\n        t0[x]=i;\n        if(h[a[i].m]==false&&a[i].r>0&&f[a[i].m]==f[x]+a[i].w)\n        {\n            h[a[i].m]=true;\n            ll z=dfs(a[i].m,min(r,a[i].r));\n            h[a[i].m]=false;\n            if(z!=0)\n            {\n                a[i].r-=z;\n                a[i^1].r+=z;\n                r-=z;\n                s+=z;\n                v+=z*a[i].w;\n            }\n            else f[a[i].m]=0;\n            if(r==0) return s;\n        }\n    }\n    return s;\n}\nvoid dfs0(int x,int k)\n{\n    if(x==sum(m,n)) return;\n    for(int i=t[m*n+x];i!=0;i=a[i].q)\n    {\n        if(a[i].m==x||a[i^1].r==0) continue;\n        ++a[i].r;\n        --a[i^1].r;\n        if(a[i].m==x+1) printf(\"%d 1\\n\",k);\n        else printf(\"%d 0\\n\",k);\n        dfs0(a[i].m,k);\n        return;\n    }\n}\nint main()\n{\n    scanf(\"%lld%d%d\",&q,&n,&m);\n    s1=m*n*2+1,s2=m*n*2+2;\n    for(int i=1;i<=m;++i)\n    {\n        for(int j=1;j<=n;++j)\n        {\n            int x;\n            scanf(\"%d\",&x);\n            if(x==1) continue;\n            if(x==2)\n            {\n                road(sum(i,j),m*n+sum(i,j),1,1);\n                road(m*n+sum(i,j),sum(i,j),0,-1);\n            }\n            road(sum(i,j),m*n+sum(i,j),1e18,0);\n            road(m*n+sum(i,j),sum(i,j),0,0);\n            if(i<m)\n            {\n                road(m*n+sum(i,j),sum(i+1,j),1e18,0);\n                road(sum(i+1,j),m*n+sum(i,j),0,0);\n            }\n            if(j<n)\n            {\n                road(m*n+sum(i,j),sum(i,j+1),1e18,0);\n                road(sum(i,j+1),m*n+sum(i,j),0,0);\n            }\n        }\n    }\n    road(s1,sum(1,1),q,0);\n    road(sum(1,1),s1,0,0);\n    road(m*n+sum(m,n),s2,q,0);\n    road(s2,m*n+sum(m,n),0,0);\n    ll r=0;\n    while(SPFA())\n    {\n        for(int i=1;i<=s2;++i) \n        {\n            t0[i]=t[i];\n            h[i]=false;\n        }\n        r+=dfs(s1,1e18);\n    }\n    for(int i=1;i<=r;++i)\n    {\n        dfs0(sum(1,1),i);\n    }\n    return 0;\n}\n```","slug":"P3356-solution","published":1,"updated":"2023-02-24T10:05:12.001Z","_id":"cleid927x001a2sjfcen754ae","comments":1,"layout":"post","photos":[],"link":"","content":"<p><a href=\"https://www.luogu.com.cn/problem/P3356\">P3356 火星探险问题</a></p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>这道题的方法同 <a href=\"/post/P4012-solution/\">P4012</a> ，但是还要求输出一种方案，我们就需要知道流量的流动情况。如果一条边有流量流过，那么这条边的反向边容量 $r$ 一定不为 $0$，而且流过的流量就是 $r$，也就是有 $r$ 个探测车经过。我们只需要从源点开始一直走反向边容量不为 $0$ 的边，且每走一次容量减一，注意要判断有没有往回走，还要注意处理拆开的两个点的关系。</p>\n<h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> ll;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">100001</span>,M=<span class=\"number\">1000001</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m,p=<span class=\"number\">1</span>,s1,s2,t[N],t0[N];</span><br><span class=\"line\">ll v,f[N],q;</span><br><span class=\"line\"><span class=\"type\">bool</span> h[N];</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">road</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> m,q;</span><br><span class=\"line\">    ll r,w;</span><br><span class=\"line\">&#125;a[M];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">sum</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (x<span class=\"number\">-1</span>)*n+y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">road</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y,ll r,ll w)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    a[++p].m=y;</span><br><span class=\"line\">    a[p].q=t[x];</span><br><span class=\"line\">    t[x]=p;</span><br><span class=\"line\">    a[p].r=r;</span><br><span class=\"line\">    a[p].w=w;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">SPFA</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    queue&lt;<span class=\"type\">int</span>&gt; Q;</span><br><span class=\"line\">    Q.<span class=\"built_in\">push</span>(s1);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=s2;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        f[i]=<span class=\"number\">-1e18</span>;</span><br><span class=\"line\">        h[i]=<span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    f[s1]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    h[s1]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!Q.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> k=Q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">        Q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(h[k]==<span class=\"literal\">false</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        h[k]=<span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t[k];i!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(a[i].r&gt;<span class=\"number\">0</span>&amp;&amp;f[k]+a[i].w&gt;f[a[i].m])</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                f[a[i].m]=f[k]+a[i].w;</span><br><span class=\"line\">                Q.<span class=\"built_in\">push</span>(a[i].m);</span><br><span class=\"line\">                h[a[i].m]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(f[s2]!=<span class=\"number\">-1e18</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> x,ll r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x==s2) <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">    ll s=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t0[x];i!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        t0[x]=i;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(h[a[i].m]==<span class=\"literal\">false</span>&amp;&amp;a[i].r&gt;<span class=\"number\">0</span>&amp;&amp;f[a[i].m]==f[x]+a[i].w)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            h[a[i].m]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">            ll z=<span class=\"built_in\">dfs</span>(a[i].m,<span class=\"built_in\">min</span>(r,a[i].r));</span><br><span class=\"line\">            h[a[i].m]=<span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(z!=<span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                a[i].r-=z;</span><br><span class=\"line\">                a[i^<span class=\"number\">1</span>].r+=z;</span><br><span class=\"line\">                r-=z;</span><br><span class=\"line\">                s+=z;</span><br><span class=\"line\">                v+=z*a[i].w;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> f[a[i].m]=<span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(r==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs0</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> k)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x==<span class=\"built_in\">sum</span>(m,n)) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t[m*n+x];i!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a[i].m==x||a[i^<span class=\"number\">1</span>].r==<span class=\"number\">0</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        ++a[i].r;</span><br><span class=\"line\">        --a[i^<span class=\"number\">1</span>].r;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a[i].m==x+<span class=\"number\">1</span>) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d 1\\n&quot;</span>,k);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d 0\\n&quot;</span>,k);</span><br><span class=\"line\">        <span class=\"built_in\">dfs0</span>(a[i].m,k);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%lld%d%d&quot;</span>,&amp;q,&amp;n,&amp;m);</span><br><span class=\"line\">    s1=m*n*<span class=\"number\">2</span>+<span class=\"number\">1</span>,s2=m*n*<span class=\"number\">2</span>+<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=n;++j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> x;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;x);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(x==<span class=\"number\">1</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(x==<span class=\"number\">2</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">road</span>(<span class=\"built_in\">sum</span>(i,j),m*n+<span class=\"built_in\">sum</span>(i,j),<span class=\"number\">1</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">                <span class=\"built_in\">road</span>(m*n+<span class=\"built_in\">sum</span>(i,j),<span class=\"built_in\">sum</span>(i,j),<span class=\"number\">0</span>,<span class=\"number\">-1</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">road</span>(<span class=\"built_in\">sum</span>(i,j),m*n+<span class=\"built_in\">sum</span>(i,j),<span class=\"number\">1e18</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">            <span class=\"built_in\">road</span>(m*n+<span class=\"built_in\">sum</span>(i,j),<span class=\"built_in\">sum</span>(i,j),<span class=\"number\">0</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i&lt;m)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">road</span>(m*n+<span class=\"built_in\">sum</span>(i,j),<span class=\"built_in\">sum</span>(i+<span class=\"number\">1</span>,j),<span class=\"number\">1e18</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">                <span class=\"built_in\">road</span>(<span class=\"built_in\">sum</span>(i+<span class=\"number\">1</span>,j),m*n+<span class=\"built_in\">sum</span>(i,j),<span class=\"number\">0</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(j&lt;n)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">road</span>(m*n+<span class=\"built_in\">sum</span>(i,j),<span class=\"built_in\">sum</span>(i,j+<span class=\"number\">1</span>),<span class=\"number\">1e18</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">                <span class=\"built_in\">road</span>(<span class=\"built_in\">sum</span>(i,j+<span class=\"number\">1</span>),m*n+<span class=\"built_in\">sum</span>(i,j),<span class=\"number\">0</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">road</span>(s1,<span class=\"built_in\">sum</span>(<span class=\"number\">1</span>,<span class=\"number\">1</span>),q,<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">road</span>(<span class=\"built_in\">sum</span>(<span class=\"number\">1</span>,<span class=\"number\">1</span>),s1,<span class=\"number\">0</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">road</span>(m*n+<span class=\"built_in\">sum</span>(m,n),s2,q,<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">road</span>(s2,m*n+<span class=\"built_in\">sum</span>(m,n),<span class=\"number\">0</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">    ll r=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">SPFA</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=s2;++i) </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            t0[i]=t[i];</span><br><span class=\"line\">            h[i]=<span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        r+=<span class=\"built_in\">dfs</span>(s1,<span class=\"number\">1e18</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=r;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">dfs0</span>(<span class=\"built_in\">sum</span>(<span class=\"number\">1</span>,<span class=\"number\">1</span>),i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://www.luogu.com.cn/problem/P3356\">P3356 火星探险问题</a></p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>这道题的方法同 <a href=\"/post/P4012-solution/\">P4012</a> ，但是还要求输出一种方案，我们就需要知道流量的流动情况。如果一条边有流量流过，那么这条边的反向边容量 $r$ 一定不为 $0$，而且流过的流量就是 $r$，也就是有 $r$ 个探测车经过。我们只需要从源点开始一直走反向边容量不为 $0$ 的边，且每走一次容量减一，注意要判断有没有往回走，还要注意处理拆开的两个点的关系。</p>\n<h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> ll;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">100001</span>,M=<span class=\"number\">1000001</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m,p=<span class=\"number\">1</span>,s1,s2,t[N],t0[N];</span><br><span class=\"line\">ll v,f[N],q;</span><br><span class=\"line\"><span class=\"type\">bool</span> h[N];</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">road</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> m,q;</span><br><span class=\"line\">    ll r,w;</span><br><span class=\"line\">&#125;a[M];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">sum</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (x<span class=\"number\">-1</span>)*n+y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">road</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y,ll r,ll w)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    a[++p].m=y;</span><br><span class=\"line\">    a[p].q=t[x];</span><br><span class=\"line\">    t[x]=p;</span><br><span class=\"line\">    a[p].r=r;</span><br><span class=\"line\">    a[p].w=w;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">SPFA</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    queue&lt;<span class=\"type\">int</span>&gt; Q;</span><br><span class=\"line\">    Q.<span class=\"built_in\">push</span>(s1);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=s2;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        f[i]=<span class=\"number\">-1e18</span>;</span><br><span class=\"line\">        h[i]=<span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    f[s1]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    h[s1]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!Q.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> k=Q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">        Q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(h[k]==<span class=\"literal\">false</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        h[k]=<span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t[k];i!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(a[i].r&gt;<span class=\"number\">0</span>&amp;&amp;f[k]+a[i].w&gt;f[a[i].m])</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                f[a[i].m]=f[k]+a[i].w;</span><br><span class=\"line\">                Q.<span class=\"built_in\">push</span>(a[i].m);</span><br><span class=\"line\">                h[a[i].m]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(f[s2]!=<span class=\"number\">-1e18</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> x,ll r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x==s2) <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">    ll s=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t0[x];i!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        t0[x]=i;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(h[a[i].m]==<span class=\"literal\">false</span>&amp;&amp;a[i].r&gt;<span class=\"number\">0</span>&amp;&amp;f[a[i].m]==f[x]+a[i].w)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            h[a[i].m]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">            ll z=<span class=\"built_in\">dfs</span>(a[i].m,<span class=\"built_in\">min</span>(r,a[i].r));</span><br><span class=\"line\">            h[a[i].m]=<span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(z!=<span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                a[i].r-=z;</span><br><span class=\"line\">                a[i^<span class=\"number\">1</span>].r+=z;</span><br><span class=\"line\">                r-=z;</span><br><span class=\"line\">                s+=z;</span><br><span class=\"line\">                v+=z*a[i].w;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> f[a[i].m]=<span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(r==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs0</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> k)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x==<span class=\"built_in\">sum</span>(m,n)) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t[m*n+x];i!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a[i].m==x||a[i^<span class=\"number\">1</span>].r==<span class=\"number\">0</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        ++a[i].r;</span><br><span class=\"line\">        --a[i^<span class=\"number\">1</span>].r;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a[i].m==x+<span class=\"number\">1</span>) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d 1\\n&quot;</span>,k);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d 0\\n&quot;</span>,k);</span><br><span class=\"line\">        <span class=\"built_in\">dfs0</span>(a[i].m,k);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%lld%d%d&quot;</span>,&amp;q,&amp;n,&amp;m);</span><br><span class=\"line\">    s1=m*n*<span class=\"number\">2</span>+<span class=\"number\">1</span>,s2=m*n*<span class=\"number\">2</span>+<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=n;++j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> x;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;x);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(x==<span class=\"number\">1</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(x==<span class=\"number\">2</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">road</span>(<span class=\"built_in\">sum</span>(i,j),m*n+<span class=\"built_in\">sum</span>(i,j),<span class=\"number\">1</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">                <span class=\"built_in\">road</span>(m*n+<span class=\"built_in\">sum</span>(i,j),<span class=\"built_in\">sum</span>(i,j),<span class=\"number\">0</span>,<span class=\"number\">-1</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">road</span>(<span class=\"built_in\">sum</span>(i,j),m*n+<span class=\"built_in\">sum</span>(i,j),<span class=\"number\">1e18</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">            <span class=\"built_in\">road</span>(m*n+<span class=\"built_in\">sum</span>(i,j),<span class=\"built_in\">sum</span>(i,j),<span class=\"number\">0</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i&lt;m)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">road</span>(m*n+<span class=\"built_in\">sum</span>(i,j),<span class=\"built_in\">sum</span>(i+<span class=\"number\">1</span>,j),<span class=\"number\">1e18</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">                <span class=\"built_in\">road</span>(<span class=\"built_in\">sum</span>(i+<span class=\"number\">1</span>,j),m*n+<span class=\"built_in\">sum</span>(i,j),<span class=\"number\">0</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(j&lt;n)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">road</span>(m*n+<span class=\"built_in\">sum</span>(i,j),<span class=\"built_in\">sum</span>(i,j+<span class=\"number\">1</span>),<span class=\"number\">1e18</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">                <span class=\"built_in\">road</span>(<span class=\"built_in\">sum</span>(i,j+<span class=\"number\">1</span>),m*n+<span class=\"built_in\">sum</span>(i,j),<span class=\"number\">0</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">road</span>(s1,<span class=\"built_in\">sum</span>(<span class=\"number\">1</span>,<span class=\"number\">1</span>),q,<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">road</span>(<span class=\"built_in\">sum</span>(<span class=\"number\">1</span>,<span class=\"number\">1</span>),s1,<span class=\"number\">0</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">road</span>(m*n+<span class=\"built_in\">sum</span>(m,n),s2,q,<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">road</span>(s2,m*n+<span class=\"built_in\">sum</span>(m,n),<span class=\"number\">0</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">    ll r=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">SPFA</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=s2;++i) </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            t0[i]=t[i];</span><br><span class=\"line\">            h[i]=<span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        r+=<span class=\"built_in\">dfs</span>(s1,<span class=\"number\">1e18</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=r;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">dfs0</span>(<span class=\"built_in\">sum</span>(<span class=\"number\">1</span>,<span class=\"number\">1</span>),i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"P3628 [APIO2010]特别行动队","date":"2022-04-04T01:32:51.000Z","description":" ","_content":"\n[P3628 [APIO2010]特别行动队](https://www.luogu.com.cn/problem/P3628)\n## 分析\n这时一道斜率优化 dp 的裸题，简单地推一下转移方程，$s$ 为战斗力前缀和：\n$$f[i]=f[j]+a \\times (s[i]-s[j])^2+b \\times (s[i]-s[j])+c$$\n$$f[i]=f[j]+a \\times s[i]^2-2 \\times a \\times s[i] \\times s[j]+a \\times s[j]^2+b \\times s[i]-b \\times s[j]+c$$\n$$f[j]-a \\times s[j]^2+b \\times b[j]=2 \\times a \\times s[i] \\times s[j]+f[i]-a \\times s[i]^2-b \\times s[i]-c$$\n可以得到 $Y=f[j]-a \\times s[j]^2+b \\times b[j]$，$A=2 \\times a \\times s[i]$，$X=s[j]$，$B=f[i]-a \\times s[i]^2-b \\times s[i]-c$\n## code\n```cpp\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\ntypedef long long ll;\nconst int N=3000001;\nint n,a,b,c,Q[N*2],T=0,R=0;\nll d[N],f[N];\nll abc(int x,int y)\n{\n    if(d[x]==d[y]) return 1e18;\n    return ((f[x]+a*d[x]*d[x]-b*d[x])-(f[y]+a*d[y]*d[y]-b*d[y]))/(d[x]-d[y]);\n}\nint main()\n{\n    scanf(\"%d%d%d%d\",&n,&a,&b,&c);\n    for(int i=1;i<=n;++i)\n    {\n        int x;\n        scanf(\"%d\",&x);\n        d[i]=d[i-1]+x;\n    }\n    for(int i=1;i<=n;++i)\n    {\n        while(T<R&&abc(Q[T],Q[T+1])>2*a*d[i]) ++T;\n        f[i]=f[Q[T]]+a*(d[i]-d[Q[T]])*(d[i]-d[Q[T]])+b*(d[i]-d[Q[T]])+c;\n        while(T<R&&abc(Q[R-1],Q[R])<abc(Q[R],i)) --R;\n        Q[++R]=i;\n    }\n    printf(\"%lld\",f[n]);\n    return 0;\n}\n```","source":"_posts/P3628-solution.md","raw":"---\ntitle: 'P3628 [APIO2010]特别行动队'\ndate: 2022-04-04 09:32:51\ntags: [动态规划,单调队列,斜率优化dp]\ndescription: ' '\n---\n\n[P3628 [APIO2010]特别行动队](https://www.luogu.com.cn/problem/P3628)\n## 分析\n这时一道斜率优化 dp 的裸题，简单地推一下转移方程，$s$ 为战斗力前缀和：\n$$f[i]=f[j]+a \\times (s[i]-s[j])^2+b \\times (s[i]-s[j])+c$$\n$$f[i]=f[j]+a \\times s[i]^2-2 \\times a \\times s[i] \\times s[j]+a \\times s[j]^2+b \\times s[i]-b \\times s[j]+c$$\n$$f[j]-a \\times s[j]^2+b \\times b[j]=2 \\times a \\times s[i] \\times s[j]+f[i]-a \\times s[i]^2-b \\times s[i]-c$$\n可以得到 $Y=f[j]-a \\times s[j]^2+b \\times b[j]$，$A=2 \\times a \\times s[i]$，$X=s[j]$，$B=f[i]-a \\times s[i]^2-b \\times s[i]-c$\n## code\n```cpp\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\ntypedef long long ll;\nconst int N=3000001;\nint n,a,b,c,Q[N*2],T=0,R=0;\nll d[N],f[N];\nll abc(int x,int y)\n{\n    if(d[x]==d[y]) return 1e18;\n    return ((f[x]+a*d[x]*d[x]-b*d[x])-(f[y]+a*d[y]*d[y]-b*d[y]))/(d[x]-d[y]);\n}\nint main()\n{\n    scanf(\"%d%d%d%d\",&n,&a,&b,&c);\n    for(int i=1;i<=n;++i)\n    {\n        int x;\n        scanf(\"%d\",&x);\n        d[i]=d[i-1]+x;\n    }\n    for(int i=1;i<=n;++i)\n    {\n        while(T<R&&abc(Q[T],Q[T+1])>2*a*d[i]) ++T;\n        f[i]=f[Q[T]]+a*(d[i]-d[Q[T]])*(d[i]-d[Q[T]])+b*(d[i]-d[Q[T]])+c;\n        while(T<R&&abc(Q[R-1],Q[R])<abc(Q[R],i)) --R;\n        Q[++R]=i;\n    }\n    printf(\"%lld\",f[n]);\n    return 0;\n}\n```","slug":"P3628-solution","published":1,"updated":"2022-11-28T13:47:47.411Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cleid927y001c2sjfbrxt1bub","content":"<p><a href=\"https://www.luogu.com.cn/problem/P3628\">P3628 [APIO2010]特别行动队</a></p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>这时一道斜率优化 dp 的裸题，简单地推一下转移方程，$s$ 为战斗力前缀和：<br>$$f[i]&#x3D;f[j]+a \\times (s[i]-s[j])^2+b \\times (s[i]-s[j])+c$$<br>$$f[i]&#x3D;f[j]+a \\times s[i]^2-2 \\times a \\times s[i] \\times s[j]+a \\times s[j]^2+b \\times s[i]-b \\times s[j]+c$$<br>$$f[j]-a \\times s[j]^2+b \\times b[j]&#x3D;2 \\times a \\times s[i] \\times s[j]+f[i]-a \\times s[i]^2-b \\times s[i]-c$$<br>可以得到 $Y&#x3D;f[j]-a \\times s[j]^2+b \\times b[j]$，$A&#x3D;2 \\times a \\times s[i]$，$X&#x3D;s[j]$，$B&#x3D;f[i]-a \\times s[i]^2-b \\times s[i]-c$</p>\n<h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> ll;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">3000001</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> n,a,b,c,Q[N*<span class=\"number\">2</span>],T=<span class=\"number\">0</span>,R=<span class=\"number\">0</span>;</span><br><span class=\"line\">ll d[N],f[N];</span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">abc</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(d[x]==d[y]) <span class=\"keyword\">return</span> <span class=\"number\">1e18</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ((f[x]+a*d[x]*d[x]-b*d[x])-(f[y]+a*d[y]*d[y]-b*d[y]))/(d[x]-d[y]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d%d&quot;</span>,&amp;n,&amp;a,&amp;b,&amp;c);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;x);</span><br><span class=\"line\">        d[i]=d[i<span class=\"number\">-1</span>]+x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(T&lt;R&amp;&amp;<span class=\"built_in\">abc</span>(Q[T],Q[T+<span class=\"number\">1</span>])&gt;<span class=\"number\">2</span>*a*d[i]) ++T;</span><br><span class=\"line\">        f[i]=f[Q[T]]+a*(d[i]-d[Q[T]])*(d[i]-d[Q[T]])+b*(d[i]-d[Q[T]])+c;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(T&lt;R&amp;&amp;<span class=\"built_in\">abc</span>(Q[R<span class=\"number\">-1</span>],Q[R])&lt;<span class=\"built_in\">abc</span>(Q[R],i)) --R;</span><br><span class=\"line\">        Q[++R]=i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld&quot;</span>,f[n]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://www.luogu.com.cn/problem/P3628\">P3628 [APIO2010]特别行动队</a></p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>这时一道斜率优化 dp 的裸题，简单地推一下转移方程，$s$ 为战斗力前缀和：<br>$$f[i]&#x3D;f[j]+a \\times (s[i]-s[j])^2+b \\times (s[i]-s[j])+c$$<br>$$f[i]&#x3D;f[j]+a \\times s[i]^2-2 \\times a \\times s[i] \\times s[j]+a \\times s[j]^2+b \\times s[i]-b \\times s[j]+c$$<br>$$f[j]-a \\times s[j]^2+b \\times b[j]&#x3D;2 \\times a \\times s[i] \\times s[j]+f[i]-a \\times s[i]^2-b \\times s[i]-c$$<br>可以得到 $Y&#x3D;f[j]-a \\times s[j]^2+b \\times b[j]$，$A&#x3D;2 \\times a \\times s[i]$，$X&#x3D;s[j]$，$B&#x3D;f[i]-a \\times s[i]^2-b \\times s[i]-c$</p>\n<h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> ll;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">3000001</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> n,a,b,c,Q[N*<span class=\"number\">2</span>],T=<span class=\"number\">0</span>,R=<span class=\"number\">0</span>;</span><br><span class=\"line\">ll d[N],f[N];</span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">abc</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(d[x]==d[y]) <span class=\"keyword\">return</span> <span class=\"number\">1e18</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ((f[x]+a*d[x]*d[x]-b*d[x])-(f[y]+a*d[y]*d[y]-b*d[y]))/(d[x]-d[y]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d%d&quot;</span>,&amp;n,&amp;a,&amp;b,&amp;c);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;x);</span><br><span class=\"line\">        d[i]=d[i<span class=\"number\">-1</span>]+x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(T&lt;R&amp;&amp;<span class=\"built_in\">abc</span>(Q[T],Q[T+<span class=\"number\">1</span>])&gt;<span class=\"number\">2</span>*a*d[i]) ++T;</span><br><span class=\"line\">        f[i]=f[Q[T]]+a*(d[i]-d[Q[T]])*(d[i]-d[Q[T]])+b*(d[i]-d[Q[T]])+c;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(T&lt;R&amp;&amp;<span class=\"built_in\">abc</span>(Q[R<span class=\"number\">-1</span>],Q[R])&lt;<span class=\"built_in\">abc</span>(Q[R],i)) --R;</span><br><span class=\"line\">        Q[++R]=i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld&quot;</span>,f[n]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"P3648 [APIO2014]序列分割","date":"2022-04-04T01:33:01.000Z","description":" ","_content":"\n[P3648 [APIO2014]序列分割](https://www.luogu.com.cn/problem/P3648)\n## 分析\n这道题也是一个分层斜率优化 dp，但是一眼看上去毫无头绪，我们会发现每一次操作的位置可以在上一次操作之前。但是我们来推一下：有三个数 $a,b,c$，如果我们先分开 $a,b$，再分开 $b.c$，得到的结果为 $a \\times b+(a+b) \\times c=a\\times b+b\\times c+c\\times a$；如果我们先分开 $b,c$，再分开 $a,b$，得到的结果为 $b \\times c+(b+c) \\times a=a\\times b+b\\times c+c\\times a$。这两种情况的结果是一样的，说明最终结果与切的顺序无关，只与切的位置有关。我们就假设切的位置递增，就可以用斜率优化 dp 了，$f[i]$ 表示最后一次切的位置是 $i-1$ 与 $i$ 即可。\n另外，这道题要求求出最优情况的方案，我们只需要用一个 $h$ 数组来记录，$h[i][j]$ 表示切了 $i$ 次，最后一次切的位置是$j-1$ 与 $j$ 的情况中上一个切的位置。由于这里不管顺序，最后直接倒序输出也可以。\n## code\n```cpp\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\ntypedef long long ll;\nconst int N=100001,M=201;\nint n,m,Q[N*2],h[M][N],T=0,R=0;\nll a[N],f[N],g[N];\nll abc(int x,int y)\n{\n    if(a[x]==a[y]) return 1e18;\n    return ((g[x]-a[x]*a[x])-(g[y]-a[y]*a[y]))/(a[x]-a[y]);\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n;++i)\n    {\n        int x;\n        scanf(\"%d\",&x);\n        a[i]=a[i-1]+x;\n    }\n    for(int i=1;i<=m;++i)\n    {\n        T=0,R=0;\n        Q[0]=0;\n        for(int j=1;j<=n;++j)\n        {\n            while(T<R&&abc(Q[T],Q[T+1])>-a[j]) ++T;\n            f[j]=g[Q[T]]+a[Q[T]]*(a[j]-a[Q[T]]);\n            h[i][j]=Q[T];\n            while(T<R&&abc(Q[R],j)>abc(Q[R-1],Q[R])) --R;\n            Q[++R]=j;\n        }\n        for(int j=1;j<=n;++j) g[j]=f[j];\n    }\n    printf(\"%lld\\n\",f[n]);\n    for(int i=m,j=h[m][n];i>=1;j=h[--i][j]) printf(\"%d \",j);\n    return 0;\n}\n```","source":"_posts/P3648-solution.md","raw":"---\ntitle: 'P3648 [APIO2014]序列分割'\ndate: 2022-04-04 09:33:01\ntags: [动态规划,单调队列,斜率优化dp]\ndescription: ' '\n---\n\n[P3648 [APIO2014]序列分割](https://www.luogu.com.cn/problem/P3648)\n## 分析\n这道题也是一个分层斜率优化 dp，但是一眼看上去毫无头绪，我们会发现每一次操作的位置可以在上一次操作之前。但是我们来推一下：有三个数 $a,b,c$，如果我们先分开 $a,b$，再分开 $b.c$，得到的结果为 $a \\times b+(a+b) \\times c=a\\times b+b\\times c+c\\times a$；如果我们先分开 $b,c$，再分开 $a,b$，得到的结果为 $b \\times c+(b+c) \\times a=a\\times b+b\\times c+c\\times a$。这两种情况的结果是一样的，说明最终结果与切的顺序无关，只与切的位置有关。我们就假设切的位置递增，就可以用斜率优化 dp 了，$f[i]$ 表示最后一次切的位置是 $i-1$ 与 $i$ 即可。\n另外，这道题要求求出最优情况的方案，我们只需要用一个 $h$ 数组来记录，$h[i][j]$ 表示切了 $i$ 次，最后一次切的位置是$j-1$ 与 $j$ 的情况中上一个切的位置。由于这里不管顺序，最后直接倒序输出也可以。\n## code\n```cpp\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\ntypedef long long ll;\nconst int N=100001,M=201;\nint n,m,Q[N*2],h[M][N],T=0,R=0;\nll a[N],f[N],g[N];\nll abc(int x,int y)\n{\n    if(a[x]==a[y]) return 1e18;\n    return ((g[x]-a[x]*a[x])-(g[y]-a[y]*a[y]))/(a[x]-a[y]);\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n;++i)\n    {\n        int x;\n        scanf(\"%d\",&x);\n        a[i]=a[i-1]+x;\n    }\n    for(int i=1;i<=m;++i)\n    {\n        T=0,R=0;\n        Q[0]=0;\n        for(int j=1;j<=n;++j)\n        {\n            while(T<R&&abc(Q[T],Q[T+1])>-a[j]) ++T;\n            f[j]=g[Q[T]]+a[Q[T]]*(a[j]-a[Q[T]]);\n            h[i][j]=Q[T];\n            while(T<R&&abc(Q[R],j)>abc(Q[R-1],Q[R])) --R;\n            Q[++R]=j;\n        }\n        for(int j=1;j<=n;++j) g[j]=f[j];\n    }\n    printf(\"%lld\\n\",f[n]);\n    for(int i=m,j=h[m][n];i>=1;j=h[--i][j]) printf(\"%d \",j);\n    return 0;\n}\n```","slug":"P3648-solution","published":1,"updated":"2022-11-28T13:47:47.411Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cleid927y001d2sjfczbfa57f","content":"<p><a href=\"https://www.luogu.com.cn/problem/P3648\">P3648 [APIO2014]序列分割</a></p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>这道题也是一个分层斜率优化 dp，但是一眼看上去毫无头绪，我们会发现每一次操作的位置可以在上一次操作之前。但是我们来推一下：有三个数 $a,b,c$，如果我们先分开 $a,b$，再分开 $b.c$，得到的结果为 $a \\times b+(a+b) \\times c&#x3D;a\\times b+b\\times c+c\\times a$；如果我们先分开 $b,c$，再分开 $a,b$，得到的结果为 $b \\times c+(b+c) \\times a&#x3D;a\\times b+b\\times c+c\\times a$。这两种情况的结果是一样的，说明最终结果与切的顺序无关，只与切的位置有关。我们就假设切的位置递增，就可以用斜率优化 dp 了，$f[i]$ 表示最后一次切的位置是 $i-1$ 与 $i$ 即可。<br>另外，这道题要求求出最优情况的方案，我们只需要用一个 $h$ 数组来记录，$h[i][j]$ 表示切了 $i$ 次，最后一次切的位置是$j-1$ 与 $j$ 的情况中上一个切的位置。由于这里不管顺序，最后直接倒序输出也可以。</p>\n<h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> ll;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">100001</span>,M=<span class=\"number\">201</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m,Q[N*<span class=\"number\">2</span>],h[M][N],T=<span class=\"number\">0</span>,R=<span class=\"number\">0</span>;</span><br><span class=\"line\">ll a[N],f[N],g[N];</span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">abc</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a[x]==a[y]) <span class=\"keyword\">return</span> <span class=\"number\">1e18</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ((g[x]-a[x]*a[x])-(g[y]-a[y]*a[y]))/(a[x]-a[y]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;x);</span><br><span class=\"line\">        a[i]=a[i<span class=\"number\">-1</span>]+x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        T=<span class=\"number\">0</span>,R=<span class=\"number\">0</span>;</span><br><span class=\"line\">        Q[<span class=\"number\">0</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=n;++j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(T&lt;R&amp;&amp;<span class=\"built_in\">abc</span>(Q[T],Q[T+<span class=\"number\">1</span>])&gt;-a[j]) ++T;</span><br><span class=\"line\">            f[j]=g[Q[T]]+a[Q[T]]*(a[j]-a[Q[T]]);</span><br><span class=\"line\">            h[i][j]=Q[T];</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(T&lt;R&amp;&amp;<span class=\"built_in\">abc</span>(Q[R],j)&gt;<span class=\"built_in\">abc</span>(Q[R<span class=\"number\">-1</span>],Q[R])) --R;</span><br><span class=\"line\">            Q[++R]=j;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=n;++j) g[j]=f[j];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>,f[n]);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=m,j=h[m][n];i&gt;=<span class=\"number\">1</span>;j=h[--i][j]) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>,j);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://www.luogu.com.cn/problem/P3648\">P3648 [APIO2014]序列分割</a></p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>这道题也是一个分层斜率优化 dp，但是一眼看上去毫无头绪，我们会发现每一次操作的位置可以在上一次操作之前。但是我们来推一下：有三个数 $a,b,c$，如果我们先分开 $a,b$，再分开 $b.c$，得到的结果为 $a \\times b+(a+b) \\times c&#x3D;a\\times b+b\\times c+c\\times a$；如果我们先分开 $b,c$，再分开 $a,b$，得到的结果为 $b \\times c+(b+c) \\times a&#x3D;a\\times b+b\\times c+c\\times a$。这两种情况的结果是一样的，说明最终结果与切的顺序无关，只与切的位置有关。我们就假设切的位置递增，就可以用斜率优化 dp 了，$f[i]$ 表示最后一次切的位置是 $i-1$ 与 $i$ 即可。<br>另外，这道题要求求出最优情况的方案，我们只需要用一个 $h$ 数组来记录，$h[i][j]$ 表示切了 $i$ 次，最后一次切的位置是$j-1$ 与 $j$ 的情况中上一个切的位置。由于这里不管顺序，最后直接倒序输出也可以。</p>\n<h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> ll;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">100001</span>,M=<span class=\"number\">201</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m,Q[N*<span class=\"number\">2</span>],h[M][N],T=<span class=\"number\">0</span>,R=<span class=\"number\">0</span>;</span><br><span class=\"line\">ll a[N],f[N],g[N];</span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">abc</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a[x]==a[y]) <span class=\"keyword\">return</span> <span class=\"number\">1e18</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ((g[x]-a[x]*a[x])-(g[y]-a[y]*a[y]))/(a[x]-a[y]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;x);</span><br><span class=\"line\">        a[i]=a[i<span class=\"number\">-1</span>]+x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        T=<span class=\"number\">0</span>,R=<span class=\"number\">0</span>;</span><br><span class=\"line\">        Q[<span class=\"number\">0</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=n;++j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(T&lt;R&amp;&amp;<span class=\"built_in\">abc</span>(Q[T],Q[T+<span class=\"number\">1</span>])&gt;-a[j]) ++T;</span><br><span class=\"line\">            f[j]=g[Q[T]]+a[Q[T]]*(a[j]-a[Q[T]]);</span><br><span class=\"line\">            h[i][j]=Q[T];</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(T&lt;R&amp;&amp;<span class=\"built_in\">abc</span>(Q[R],j)&gt;<span class=\"built_in\">abc</span>(Q[R<span class=\"number\">-1</span>],Q[R])) --R;</span><br><span class=\"line\">            Q[++R]=j;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=n;++j) g[j]=f[j];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>,f[n]);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=m,j=h[m][n];i&gt;=<span class=\"number\">1</span>;j=h[--i][j]) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>,j);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"P4012 深海机器人问题","date":"2022-05-10T05:38:13.000Z","description":" ","_content":"\n[P4012 深海机器人问题](https://www.luogu.com.cn/problem/P4012)\n## 分析\n这道题是网格类的费用流，将深海机器人看做流量，每个生物标本看做 $1$ 点费用即可。但要注意每个生物标本只能采集一次，也就意味着流量为 $1$ 时费用为 $1$，多余 $1$ 的流量费用为 $0$。所以我们又要用到同 [P2604](/post/P2604-solution/) 的拆边思想，然后按题意连边跑最大费用最大流即可。\n注意，这道题的坐标十分诡异，有的储存方法必须要反过来，有的就不能反，在写的时候仔细想一下。\n## code\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<queue>\nusing namespace std;\ntypedef long long ll;\nconst int N=100001,M=1000001;\nint n,m,p=1,t1,t2,s1,s2,t[N],t0[N];\nll v,f[N];\nbool h[N];\nstruct road\n{\n    int m,q;\n    ll r,w;\n}a[M];\nint sum(int x,int y)\n{\n    return (x-1)*n+y;\n}\nvoid road(int x,int y,ll r,ll w)\n{\n    a[++p].m=y;\n    a[p].q=t[x];\n    t[x]=p;\n    a[p].r=r;\n    a[p].w=w;\n}\nbool SPFA()\n{\n    queue<int> Q;\n    Q.push(s1);\n    for(int i=1;i<=s2;++i)\n    {\n        f[i]=-1e18;\n        h[i]=false;\n    }\n    f[s1]=0;\n    h[s1]=true;\n    while(!Q.empty())\n    {\n        int k=Q.front();\n        Q.pop();\n        if(h[k]==false) continue;\n        h[k]=false;\n        for(int i=t[k];i!=0;i=a[i].q)\n        {\n            if(a[i].r>0&&f[k]+a[i].w>f[a[i].m])\n            {\n                f[a[i].m]=f[k]+a[i].w;\n                Q.push(a[i].m);\n                h[a[i].m]=true;\n            }\n        }\n    }\n    if(f[s2]!=-1e18) return true;\n    return false;\n}\nll dfs(int x,ll r)\n{\n    if(x==s2) return r;\n    ll s=0;\n    for(int i=t0[x];i!=0;i=a[i].q)\n    {\n        t0[x]=i;\n        if(h[a[i].m]==false&&a[i].r>0&&f[a[i].m]==f[x]+a[i].w)\n        {\n            h[a[i].m]=true;\n            ll z=dfs(a[i].m,min(r,a[i].r));\n            h[a[i].m]=false;\n            if(z!=0)\n            {\n                a[i].r-=z;\n                a[i^1].r+=z;\n                r-=z;\n                s+=z;\n                v+=z*a[i].w;\n            }\n            else f[a[i].m]=0;\n            if(r==0) return s;\n        }\n    }\n    return s;\n}\nint main()\n{\n    scanf(\"%d%d%d%d\",&t1,&t2,&m,&n);\n    ++m,++n;\n    s1=m*n+1,s2=m*n+2;\n    for(int i=1;i<=m;++i)\n    {\n        for(int j=1;j<=n-1;++j)\n        {\n            ll w;\n            scanf(\"%lld\",&w);\n            road(sum(i,j),sum(i,j+1),1,w);\n            road(sum(i,j+1),sum(i,j),0,-w);\n            road(sum(i,j),sum(i,j+1),1e18,0);\n            road(sum(i,j+1),sum(i,j),0,0);\n        }\n    }\n    for(int i=1;i<=n;++i)\n    {\n        for(int j=1;j<=m-1;++j)\n        {\n            ll w;\n            scanf(\"%lld\",&w);\n            road(sum(j,i),sum(j+1,i),1,w);\n            road(sum(j+1,i),sum(j,i),0,-w);\n            road(sum(j,i),sum(j+1,i),1e18,0);\n            road(sum(j+1,i),sum(j,i),0,0);\n        }\n    }\n    for(int i=1;i<=t1;++i)\n    {\n        int x,y;\n        ll r;\n        scanf(\"%lld%d%d\",&r,&x,&y);\n        road(s1,sum(x+1,y+1),r,0);\n        road(sum(x+1,y+1),s1,0,0);\n    }\n    for(int i=1;i<=t2;++i)\n    {\n        int x,y;\n        ll r;\n        scanf(\"%lld%d%d\",&r,&x,&y);\n        road(sum(x+1,y+1),s2,r,0);\n        road(s2,sum(x+1,y+1),0,0);\n    }\n    while(SPFA())\n    {\n        for(int i=1;i<=s2;++i) \n        {\n            t0[i]=t[i];\n            h[i]=false;\n        }\n        dfs(s1,1e18);\n    }\n    printf(\"%lld\",v);\n    return 0;\n}\n```","source":"_posts/P4012-solution.md","raw":"---\ntitle: 'P4012 深海机器人问题'\ndate: 2022-05-10 13:38:13\ntags: [网络流,费用流]\ndescription: ' '\n---\n\n[P4012 深海机器人问题](https://www.luogu.com.cn/problem/P4012)\n## 分析\n这道题是网格类的费用流，将深海机器人看做流量，每个生物标本看做 $1$ 点费用即可。但要注意每个生物标本只能采集一次，也就意味着流量为 $1$ 时费用为 $1$，多余 $1$ 的流量费用为 $0$。所以我们又要用到同 [P2604](/post/P2604-solution/) 的拆边思想，然后按题意连边跑最大费用最大流即可。\n注意，这道题的坐标十分诡异，有的储存方法必须要反过来，有的就不能反，在写的时候仔细想一下。\n## code\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<queue>\nusing namespace std;\ntypedef long long ll;\nconst int N=100001,M=1000001;\nint n,m,p=1,t1,t2,s1,s2,t[N],t0[N];\nll v,f[N];\nbool h[N];\nstruct road\n{\n    int m,q;\n    ll r,w;\n}a[M];\nint sum(int x,int y)\n{\n    return (x-1)*n+y;\n}\nvoid road(int x,int y,ll r,ll w)\n{\n    a[++p].m=y;\n    a[p].q=t[x];\n    t[x]=p;\n    a[p].r=r;\n    a[p].w=w;\n}\nbool SPFA()\n{\n    queue<int> Q;\n    Q.push(s1);\n    for(int i=1;i<=s2;++i)\n    {\n        f[i]=-1e18;\n        h[i]=false;\n    }\n    f[s1]=0;\n    h[s1]=true;\n    while(!Q.empty())\n    {\n        int k=Q.front();\n        Q.pop();\n        if(h[k]==false) continue;\n        h[k]=false;\n        for(int i=t[k];i!=0;i=a[i].q)\n        {\n            if(a[i].r>0&&f[k]+a[i].w>f[a[i].m])\n            {\n                f[a[i].m]=f[k]+a[i].w;\n                Q.push(a[i].m);\n                h[a[i].m]=true;\n            }\n        }\n    }\n    if(f[s2]!=-1e18) return true;\n    return false;\n}\nll dfs(int x,ll r)\n{\n    if(x==s2) return r;\n    ll s=0;\n    for(int i=t0[x];i!=0;i=a[i].q)\n    {\n        t0[x]=i;\n        if(h[a[i].m]==false&&a[i].r>0&&f[a[i].m]==f[x]+a[i].w)\n        {\n            h[a[i].m]=true;\n            ll z=dfs(a[i].m,min(r,a[i].r));\n            h[a[i].m]=false;\n            if(z!=0)\n            {\n                a[i].r-=z;\n                a[i^1].r+=z;\n                r-=z;\n                s+=z;\n                v+=z*a[i].w;\n            }\n            else f[a[i].m]=0;\n            if(r==0) return s;\n        }\n    }\n    return s;\n}\nint main()\n{\n    scanf(\"%d%d%d%d\",&t1,&t2,&m,&n);\n    ++m,++n;\n    s1=m*n+1,s2=m*n+2;\n    for(int i=1;i<=m;++i)\n    {\n        for(int j=1;j<=n-1;++j)\n        {\n            ll w;\n            scanf(\"%lld\",&w);\n            road(sum(i,j),sum(i,j+1),1,w);\n            road(sum(i,j+1),sum(i,j),0,-w);\n            road(sum(i,j),sum(i,j+1),1e18,0);\n            road(sum(i,j+1),sum(i,j),0,0);\n        }\n    }\n    for(int i=1;i<=n;++i)\n    {\n        for(int j=1;j<=m-1;++j)\n        {\n            ll w;\n            scanf(\"%lld\",&w);\n            road(sum(j,i),sum(j+1,i),1,w);\n            road(sum(j+1,i),sum(j,i),0,-w);\n            road(sum(j,i),sum(j+1,i),1e18,0);\n            road(sum(j+1,i),sum(j,i),0,0);\n        }\n    }\n    for(int i=1;i<=t1;++i)\n    {\n        int x,y;\n        ll r;\n        scanf(\"%lld%d%d\",&r,&x,&y);\n        road(s1,sum(x+1,y+1),r,0);\n        road(sum(x+1,y+1),s1,0,0);\n    }\n    for(int i=1;i<=t2;++i)\n    {\n        int x,y;\n        ll r;\n        scanf(\"%lld%d%d\",&r,&x,&y);\n        road(sum(x+1,y+1),s2,r,0);\n        road(s2,sum(x+1,y+1),0,0);\n    }\n    while(SPFA())\n    {\n        for(int i=1;i<=s2;++i) \n        {\n            t0[i]=t[i];\n            h[i]=false;\n        }\n        dfs(s1,1e18);\n    }\n    printf(\"%lld\",v);\n    return 0;\n}\n```","slug":"P4012-solution","published":1,"updated":"2023-02-24T10:05:12.001Z","_id":"cleid927z001e2sjferfb6zyb","comments":1,"layout":"post","photos":[],"link":"","content":"<p><a href=\"https://www.luogu.com.cn/problem/P4012\">P4012 深海机器人问题</a></p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>这道题是网格类的费用流，将深海机器人看做流量，每个生物标本看做 $1$ 点费用即可。但要注意每个生物标本只能采集一次，也就意味着流量为 $1$ 时费用为 $1$，多余 $1$ 的流量费用为 $0$。所以我们又要用到同 <a href=\"/post/P2604-solution/\">P2604</a> 的拆边思想，然后按题意连边跑最大费用最大流即可。<br>注意，这道题的坐标十分诡异，有的储存方法必须要反过来，有的就不能反，在写的时候仔细想一下。</p>\n<h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> ll;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">100001</span>,M=<span class=\"number\">1000001</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m,p=<span class=\"number\">1</span>,t1,t2,s1,s2,t[N],t0[N];</span><br><span class=\"line\">ll v,f[N];</span><br><span class=\"line\"><span class=\"type\">bool</span> h[N];</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">road</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> m,q;</span><br><span class=\"line\">    ll r,w;</span><br><span class=\"line\">&#125;a[M];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">sum</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (x<span class=\"number\">-1</span>)*n+y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">road</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y,ll r,ll w)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    a[++p].m=y;</span><br><span class=\"line\">    a[p].q=t[x];</span><br><span class=\"line\">    t[x]=p;</span><br><span class=\"line\">    a[p].r=r;</span><br><span class=\"line\">    a[p].w=w;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">SPFA</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    queue&lt;<span class=\"type\">int</span>&gt; Q;</span><br><span class=\"line\">    Q.<span class=\"built_in\">push</span>(s1);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=s2;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        f[i]=<span class=\"number\">-1e18</span>;</span><br><span class=\"line\">        h[i]=<span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    f[s1]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    h[s1]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!Q.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> k=Q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">        Q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(h[k]==<span class=\"literal\">false</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        h[k]=<span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t[k];i!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(a[i].r&gt;<span class=\"number\">0</span>&amp;&amp;f[k]+a[i].w&gt;f[a[i].m])</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                f[a[i].m]=f[k]+a[i].w;</span><br><span class=\"line\">                Q.<span class=\"built_in\">push</span>(a[i].m);</span><br><span class=\"line\">                h[a[i].m]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(f[s2]!=<span class=\"number\">-1e18</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> x,ll r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x==s2) <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">    ll s=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t0[x];i!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        t0[x]=i;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(h[a[i].m]==<span class=\"literal\">false</span>&amp;&amp;a[i].r&gt;<span class=\"number\">0</span>&amp;&amp;f[a[i].m]==f[x]+a[i].w)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            h[a[i].m]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">            ll z=<span class=\"built_in\">dfs</span>(a[i].m,<span class=\"built_in\">min</span>(r,a[i].r));</span><br><span class=\"line\">            h[a[i].m]=<span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(z!=<span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                a[i].r-=z;</span><br><span class=\"line\">                a[i^<span class=\"number\">1</span>].r+=z;</span><br><span class=\"line\">                r-=z;</span><br><span class=\"line\">                s+=z;</span><br><span class=\"line\">                v+=z*a[i].w;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> f[a[i].m]=<span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(r==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d%d&quot;</span>,&amp;t1,&amp;t2,&amp;m,&amp;n);</span><br><span class=\"line\">    ++m,++n;</span><br><span class=\"line\">    s1=m*n+<span class=\"number\">1</span>,s2=m*n+<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=n<span class=\"number\">-1</span>;++j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ll w;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%lld&quot;</span>,&amp;w);</span><br><span class=\"line\">            <span class=\"built_in\">road</span>(<span class=\"built_in\">sum</span>(i,j),<span class=\"built_in\">sum</span>(i,j+<span class=\"number\">1</span>),<span class=\"number\">1</span>,w);</span><br><span class=\"line\">            <span class=\"built_in\">road</span>(<span class=\"built_in\">sum</span>(i,j+<span class=\"number\">1</span>),<span class=\"built_in\">sum</span>(i,j),<span class=\"number\">0</span>,-w);</span><br><span class=\"line\">            <span class=\"built_in\">road</span>(<span class=\"built_in\">sum</span>(i,j),<span class=\"built_in\">sum</span>(i,j+<span class=\"number\">1</span>),<span class=\"number\">1e18</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">            <span class=\"built_in\">road</span>(<span class=\"built_in\">sum</span>(i,j+<span class=\"number\">1</span>),<span class=\"built_in\">sum</span>(i,j),<span class=\"number\">0</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=m<span class=\"number\">-1</span>;++j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ll w;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%lld&quot;</span>,&amp;w);</span><br><span class=\"line\">            <span class=\"built_in\">road</span>(<span class=\"built_in\">sum</span>(j,i),<span class=\"built_in\">sum</span>(j+<span class=\"number\">1</span>,i),<span class=\"number\">1</span>,w);</span><br><span class=\"line\">            <span class=\"built_in\">road</span>(<span class=\"built_in\">sum</span>(j+<span class=\"number\">1</span>,i),<span class=\"built_in\">sum</span>(j,i),<span class=\"number\">0</span>,-w);</span><br><span class=\"line\">            <span class=\"built_in\">road</span>(<span class=\"built_in\">sum</span>(j,i),<span class=\"built_in\">sum</span>(j+<span class=\"number\">1</span>,i),<span class=\"number\">1e18</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">            <span class=\"built_in\">road</span>(<span class=\"built_in\">sum</span>(j+<span class=\"number\">1</span>,i),<span class=\"built_in\">sum</span>(j,i),<span class=\"number\">0</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=t1;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x,y;</span><br><span class=\"line\">        ll r;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%lld%d%d&quot;</span>,&amp;r,&amp;x,&amp;y);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(s1,<span class=\"built_in\">sum</span>(x+<span class=\"number\">1</span>,y+<span class=\"number\">1</span>),r,<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(<span class=\"built_in\">sum</span>(x+<span class=\"number\">1</span>,y+<span class=\"number\">1</span>),s1,<span class=\"number\">0</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=t2;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x,y;</span><br><span class=\"line\">        ll r;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%lld%d%d&quot;</span>,&amp;r,&amp;x,&amp;y);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(<span class=\"built_in\">sum</span>(x+<span class=\"number\">1</span>,y+<span class=\"number\">1</span>),s2,r,<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(s2,<span class=\"built_in\">sum</span>(x+<span class=\"number\">1</span>,y+<span class=\"number\">1</span>),<span class=\"number\">0</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">SPFA</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=s2;++i) </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            t0[i]=t[i];</span><br><span class=\"line\">            h[i]=<span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">dfs</span>(s1,<span class=\"number\">1e18</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld&quot;</span>,v);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://www.luogu.com.cn/problem/P4012\">P4012 深海机器人问题</a></p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>这道题是网格类的费用流，将深海机器人看做流量，每个生物标本看做 $1$ 点费用即可。但要注意每个生物标本只能采集一次，也就意味着流量为 $1$ 时费用为 $1$，多余 $1$ 的流量费用为 $0$。所以我们又要用到同 <a href=\"/post/P2604-solution/\">P2604</a> 的拆边思想，然后按题意连边跑最大费用最大流即可。<br>注意，这道题的坐标十分诡异，有的储存方法必须要反过来，有的就不能反，在写的时候仔细想一下。</p>\n<h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> ll;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">100001</span>,M=<span class=\"number\">1000001</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m,p=<span class=\"number\">1</span>,t1,t2,s1,s2,t[N],t0[N];</span><br><span class=\"line\">ll v,f[N];</span><br><span class=\"line\"><span class=\"type\">bool</span> h[N];</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">road</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> m,q;</span><br><span class=\"line\">    ll r,w;</span><br><span class=\"line\">&#125;a[M];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">sum</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (x<span class=\"number\">-1</span>)*n+y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">road</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y,ll r,ll w)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    a[++p].m=y;</span><br><span class=\"line\">    a[p].q=t[x];</span><br><span class=\"line\">    t[x]=p;</span><br><span class=\"line\">    a[p].r=r;</span><br><span class=\"line\">    a[p].w=w;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">SPFA</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    queue&lt;<span class=\"type\">int</span>&gt; Q;</span><br><span class=\"line\">    Q.<span class=\"built_in\">push</span>(s1);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=s2;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        f[i]=<span class=\"number\">-1e18</span>;</span><br><span class=\"line\">        h[i]=<span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    f[s1]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    h[s1]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!Q.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> k=Q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">        Q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(h[k]==<span class=\"literal\">false</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        h[k]=<span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t[k];i!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(a[i].r&gt;<span class=\"number\">0</span>&amp;&amp;f[k]+a[i].w&gt;f[a[i].m])</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                f[a[i].m]=f[k]+a[i].w;</span><br><span class=\"line\">                Q.<span class=\"built_in\">push</span>(a[i].m);</span><br><span class=\"line\">                h[a[i].m]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(f[s2]!=<span class=\"number\">-1e18</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> x,ll r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x==s2) <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">    ll s=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t0[x];i!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        t0[x]=i;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(h[a[i].m]==<span class=\"literal\">false</span>&amp;&amp;a[i].r&gt;<span class=\"number\">0</span>&amp;&amp;f[a[i].m]==f[x]+a[i].w)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            h[a[i].m]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">            ll z=<span class=\"built_in\">dfs</span>(a[i].m,<span class=\"built_in\">min</span>(r,a[i].r));</span><br><span class=\"line\">            h[a[i].m]=<span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(z!=<span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                a[i].r-=z;</span><br><span class=\"line\">                a[i^<span class=\"number\">1</span>].r+=z;</span><br><span class=\"line\">                r-=z;</span><br><span class=\"line\">                s+=z;</span><br><span class=\"line\">                v+=z*a[i].w;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> f[a[i].m]=<span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(r==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d%d&quot;</span>,&amp;t1,&amp;t2,&amp;m,&amp;n);</span><br><span class=\"line\">    ++m,++n;</span><br><span class=\"line\">    s1=m*n+<span class=\"number\">1</span>,s2=m*n+<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=n<span class=\"number\">-1</span>;++j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ll w;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%lld&quot;</span>,&amp;w);</span><br><span class=\"line\">            <span class=\"built_in\">road</span>(<span class=\"built_in\">sum</span>(i,j),<span class=\"built_in\">sum</span>(i,j+<span class=\"number\">1</span>),<span class=\"number\">1</span>,w);</span><br><span class=\"line\">            <span class=\"built_in\">road</span>(<span class=\"built_in\">sum</span>(i,j+<span class=\"number\">1</span>),<span class=\"built_in\">sum</span>(i,j),<span class=\"number\">0</span>,-w);</span><br><span class=\"line\">            <span class=\"built_in\">road</span>(<span class=\"built_in\">sum</span>(i,j),<span class=\"built_in\">sum</span>(i,j+<span class=\"number\">1</span>),<span class=\"number\">1e18</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">            <span class=\"built_in\">road</span>(<span class=\"built_in\">sum</span>(i,j+<span class=\"number\">1</span>),<span class=\"built_in\">sum</span>(i,j),<span class=\"number\">0</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=m<span class=\"number\">-1</span>;++j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ll w;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%lld&quot;</span>,&amp;w);</span><br><span class=\"line\">            <span class=\"built_in\">road</span>(<span class=\"built_in\">sum</span>(j,i),<span class=\"built_in\">sum</span>(j+<span class=\"number\">1</span>,i),<span class=\"number\">1</span>,w);</span><br><span class=\"line\">            <span class=\"built_in\">road</span>(<span class=\"built_in\">sum</span>(j+<span class=\"number\">1</span>,i),<span class=\"built_in\">sum</span>(j,i),<span class=\"number\">0</span>,-w);</span><br><span class=\"line\">            <span class=\"built_in\">road</span>(<span class=\"built_in\">sum</span>(j,i),<span class=\"built_in\">sum</span>(j+<span class=\"number\">1</span>,i),<span class=\"number\">1e18</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">            <span class=\"built_in\">road</span>(<span class=\"built_in\">sum</span>(j+<span class=\"number\">1</span>,i),<span class=\"built_in\">sum</span>(j,i),<span class=\"number\">0</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=t1;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x,y;</span><br><span class=\"line\">        ll r;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%lld%d%d&quot;</span>,&amp;r,&amp;x,&amp;y);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(s1,<span class=\"built_in\">sum</span>(x+<span class=\"number\">1</span>,y+<span class=\"number\">1</span>),r,<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(<span class=\"built_in\">sum</span>(x+<span class=\"number\">1</span>,y+<span class=\"number\">1</span>),s1,<span class=\"number\">0</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=t2;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x,y;</span><br><span class=\"line\">        ll r;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%lld%d%d&quot;</span>,&amp;r,&amp;x,&amp;y);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(<span class=\"built_in\">sum</span>(x+<span class=\"number\">1</span>,y+<span class=\"number\">1</span>),s2,r,<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(s2,<span class=\"built_in\">sum</span>(x+<span class=\"number\">1</span>,y+<span class=\"number\">1</span>),<span class=\"number\">0</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">SPFA</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=s2;++i) </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            t0[i]=t[i];</span><br><span class=\"line\">            h[i]=<span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">dfs</span>(s1,<span class=\"number\">1e18</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld&quot;</span>,v);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"P4014 分配问题","date":"2022-05-10T05:19:27.000Z","description":" ","_content":"\n[P4014 分配问题](https://www.luogu.com.cn/problem/P4014)\n## 分析\n这道题其实是 [P4015](/post/P4015-solution/) 的简化版，P4015 是仓库中可以有多个货物，商店也可能需要多个货物，而这道题中工件最多 $1$ 个，工人也只能做 $1$ 个工件。所以只需要把上一题所有的边流量变为 $1$，然后跑最大费用最大流即可。\n## code\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<queue>\nusing namespace std;\nint n,s1,s2,p=1,t[10001],f[10001],g[10001],r[10001];\nbool h[10001];\nstruct str\n{\n    int x,m,q,r1,r2,w;\n}a[100001];\nvoid road(int x,int y,int r,int w)\n{\n    a[++p].x=x;\n    a[p].m=y;\n    a[p].q=t[x];\n    t[x]=p;\n    a[p].r1=r;\n    a[p].r2=r;\n    a[p].w=w;\n}\nbool SPFA()\n{\n    queue<int> q;\n    q.push(s1);\n    for(int i=1;i<=n*2+2;++i)\n    {\n        f[i]=1e9;\n        g[i]=1e9;\n        h[i]=false;\n        r[i]=0;\n    }\n    g[s1]=0;\n    h[s1]=true;\n    while(!q.empty())\n    {\n        int k=q.front();\n        q.pop();\n        if(h[k]==false) continue;\n        h[k]=false;\n        for(int i=t[k];i!=0;i=a[i].q)\n        {\n            if(a[i].r1>0&&g[k]+a[i].w<g[a[i].m])\n            {\n                f[a[i].m]=min(f[k],a[i].r1);\n                g[a[i].m]=g[k]+a[i].w;\n                r[a[i].m]=i;\n                q.push(a[i].m);\n                h[a[i].m]=true;\n            }\n        }\n    }\n    if(f[s2]!=1e9) return true;\n    return false;\n}\nbool SPFA2()\n{\n    queue<int> q;\n    q.push(s1);\n    for(int i=1;i<=n*2+2;++i)\n    {\n        f[i]=1e9;\n        g[i]=-1e9;\n        h[i]=false;\n        r[i]=0;\n    }\n    g[s1]=0;\n    h[s1]=true;\n    while(!q.empty())\n    {\n        int k=q.front();\n        q.pop();\n        if(h[k]==false) continue;\n        h[k]=false;\n        for(int i=t[k];i!=0;i=a[i].q)\n        {\n            if(a[i].r2>0&&g[k]+a[i].w>g[a[i].m])\n            {\n                f[a[i].m]=min(f[k],a[i].r2);\n                g[a[i].m]=g[k]+a[i].w;\n                r[a[i].m]=i;\n                q.push(a[i].m);\n                h[a[i].m]=true;\n            }\n        }\n    }\n    if(f[s2]!=1e9) return true;\n    return false;\n}\nint main()\n{\n    scanf(\"%d\",&n);\n    s1=1;\n    s2=n*2+2;\n    for(int i=1;i<=n;++i)\n    {\n        road(1,i+1,1,0);\n        road(i+1,1,0,0);\n    }\n    for(int i=1;i<=n;++i)\n    {\n        road(i+n+1,n*2+2,1,0);\n        road(n*2+2,i+n+1,0,0);\n    }\n    for(int i=1;i<=n;++i)\n    {\n        for(int j=1;j<=n;++j)\n        {\n            int w;\n            scanf(\"%d\",&w);\n            road(i+1,j+n+1,1,w);\n            road(j+n+1,i+1,0,-w);\n        }\n    }\n    int w1=0,w2=0;\n    while(SPFA())\n    {\n        w1+=f[s2]*g[s2];\n        int x=s2;\n        while(x!=s1)\n        {\n            a[r[x]].r1-=f[s2];\n            a[r[x]^1].r1+=f[s2];\n            x=a[r[x]].x;\n        }\n    }\n    while(SPFA2())\n    {\n        w2+=f[s2]*g[s2];\n        int x=s2;\n        while(x!=s1)\n        {\n            a[r[x]].r2-=f[s2];\n            a[r[x]^1].r2+=f[s2];\n            x=a[r[x]].x;\n        }\n    }\n    printf(\"%d\\n%d\",w1,w2);\n    return 0;\n}\n```","source":"_posts/P4014-solution.md","raw":"---\ntitle: 'P4014 分配问题'\ndate: 2022-05-10 13:19:27\ntags: [网络流,费用流]\ndescription: ' '\n---\n\n[P4014 分配问题](https://www.luogu.com.cn/problem/P4014)\n## 分析\n这道题其实是 [P4015](/post/P4015-solution/) 的简化版，P4015 是仓库中可以有多个货物，商店也可能需要多个货物，而这道题中工件最多 $1$ 个，工人也只能做 $1$ 个工件。所以只需要把上一题所有的边流量变为 $1$，然后跑最大费用最大流即可。\n## code\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<queue>\nusing namespace std;\nint n,s1,s2,p=1,t[10001],f[10001],g[10001],r[10001];\nbool h[10001];\nstruct str\n{\n    int x,m,q,r1,r2,w;\n}a[100001];\nvoid road(int x,int y,int r,int w)\n{\n    a[++p].x=x;\n    a[p].m=y;\n    a[p].q=t[x];\n    t[x]=p;\n    a[p].r1=r;\n    a[p].r2=r;\n    a[p].w=w;\n}\nbool SPFA()\n{\n    queue<int> q;\n    q.push(s1);\n    for(int i=1;i<=n*2+2;++i)\n    {\n        f[i]=1e9;\n        g[i]=1e9;\n        h[i]=false;\n        r[i]=0;\n    }\n    g[s1]=0;\n    h[s1]=true;\n    while(!q.empty())\n    {\n        int k=q.front();\n        q.pop();\n        if(h[k]==false) continue;\n        h[k]=false;\n        for(int i=t[k];i!=0;i=a[i].q)\n        {\n            if(a[i].r1>0&&g[k]+a[i].w<g[a[i].m])\n            {\n                f[a[i].m]=min(f[k],a[i].r1);\n                g[a[i].m]=g[k]+a[i].w;\n                r[a[i].m]=i;\n                q.push(a[i].m);\n                h[a[i].m]=true;\n            }\n        }\n    }\n    if(f[s2]!=1e9) return true;\n    return false;\n}\nbool SPFA2()\n{\n    queue<int> q;\n    q.push(s1);\n    for(int i=1;i<=n*2+2;++i)\n    {\n        f[i]=1e9;\n        g[i]=-1e9;\n        h[i]=false;\n        r[i]=0;\n    }\n    g[s1]=0;\n    h[s1]=true;\n    while(!q.empty())\n    {\n        int k=q.front();\n        q.pop();\n        if(h[k]==false) continue;\n        h[k]=false;\n        for(int i=t[k];i!=0;i=a[i].q)\n        {\n            if(a[i].r2>0&&g[k]+a[i].w>g[a[i].m])\n            {\n                f[a[i].m]=min(f[k],a[i].r2);\n                g[a[i].m]=g[k]+a[i].w;\n                r[a[i].m]=i;\n                q.push(a[i].m);\n                h[a[i].m]=true;\n            }\n        }\n    }\n    if(f[s2]!=1e9) return true;\n    return false;\n}\nint main()\n{\n    scanf(\"%d\",&n);\n    s1=1;\n    s2=n*2+2;\n    for(int i=1;i<=n;++i)\n    {\n        road(1,i+1,1,0);\n        road(i+1,1,0,0);\n    }\n    for(int i=1;i<=n;++i)\n    {\n        road(i+n+1,n*2+2,1,0);\n        road(n*2+2,i+n+1,0,0);\n    }\n    for(int i=1;i<=n;++i)\n    {\n        for(int j=1;j<=n;++j)\n        {\n            int w;\n            scanf(\"%d\",&w);\n            road(i+1,j+n+1,1,w);\n            road(j+n+1,i+1,0,-w);\n        }\n    }\n    int w1=0,w2=0;\n    while(SPFA())\n    {\n        w1+=f[s2]*g[s2];\n        int x=s2;\n        while(x!=s1)\n        {\n            a[r[x]].r1-=f[s2];\n            a[r[x]^1].r1+=f[s2];\n            x=a[r[x]].x;\n        }\n    }\n    while(SPFA2())\n    {\n        w2+=f[s2]*g[s2];\n        int x=s2;\n        while(x!=s1)\n        {\n            a[r[x]].r2-=f[s2];\n            a[r[x]^1].r2+=f[s2];\n            x=a[r[x]].x;\n        }\n    }\n    printf(\"%d\\n%d\",w1,w2);\n    return 0;\n}\n```","slug":"P4014-solution","published":1,"updated":"2023-02-24T10:05:12.001Z","_id":"cleid927z001g2sjfasu12dn1","comments":1,"layout":"post","photos":[],"link":"","content":"<p><a href=\"https://www.luogu.com.cn/problem/P4014\">P4014 分配问题</a></p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>这道题其实是 <a href=\"/post/P4015-solution/\">P4015</a> 的简化版，P4015 是仓库中可以有多个货物，商店也可能需要多个货物，而这道题中工件最多 $1$ 个，工人也只能做 $1$ 个工件。所以只需要把上一题所有的边流量变为 $1$，然后跑最大费用最大流即可。</p>\n<h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">int</span> n,s1,s2,p=<span class=\"number\">1</span>,t[<span class=\"number\">10001</span>],f[<span class=\"number\">10001</span>],g[<span class=\"number\">10001</span>],r[<span class=\"number\">10001</span>];</span><br><span class=\"line\"><span class=\"type\">bool</span> h[<span class=\"number\">10001</span>];</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">str</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> x,m,q,r1,r2,w;</span><br><span class=\"line\">&#125;a[<span class=\"number\">100001</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">road</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y,<span class=\"type\">int</span> r,<span class=\"type\">int</span> w)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    a[++p].x=x;</span><br><span class=\"line\">    a[p].m=y;</span><br><span class=\"line\">    a[p].q=t[x];</span><br><span class=\"line\">    t[x]=p;</span><br><span class=\"line\">    a[p].r1=r;</span><br><span class=\"line\">    a[p].r2=r;</span><br><span class=\"line\">    a[p].w=w;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">SPFA</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    queue&lt;<span class=\"type\">int</span>&gt; q;</span><br><span class=\"line\">    q.<span class=\"built_in\">push</span>(s1);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n*<span class=\"number\">2</span>+<span class=\"number\">2</span>;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        f[i]=<span class=\"number\">1e9</span>;</span><br><span class=\"line\">        g[i]=<span class=\"number\">1e9</span>;</span><br><span class=\"line\">        h[i]=<span class=\"literal\">false</span>;</span><br><span class=\"line\">        r[i]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    g[s1]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    h[s1]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!q.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> k=q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">        q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(h[k]==<span class=\"literal\">false</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        h[k]=<span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t[k];i!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(a[i].r1&gt;<span class=\"number\">0</span>&amp;&amp;g[k]+a[i].w&lt;g[a[i].m])</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                f[a[i].m]=<span class=\"built_in\">min</span>(f[k],a[i].r1);</span><br><span class=\"line\">                g[a[i].m]=g[k]+a[i].w;</span><br><span class=\"line\">                r[a[i].m]=i;</span><br><span class=\"line\">                q.<span class=\"built_in\">push</span>(a[i].m);</span><br><span class=\"line\">                h[a[i].m]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(f[s2]!=<span class=\"number\">1e9</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">SPFA2</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    queue&lt;<span class=\"type\">int</span>&gt; q;</span><br><span class=\"line\">    q.<span class=\"built_in\">push</span>(s1);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n*<span class=\"number\">2</span>+<span class=\"number\">2</span>;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        f[i]=<span class=\"number\">1e9</span>;</span><br><span class=\"line\">        g[i]=<span class=\"number\">-1e9</span>;</span><br><span class=\"line\">        h[i]=<span class=\"literal\">false</span>;</span><br><span class=\"line\">        r[i]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    g[s1]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    h[s1]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!q.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> k=q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">        q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(h[k]==<span class=\"literal\">false</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        h[k]=<span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t[k];i!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(a[i].r2&gt;<span class=\"number\">0</span>&amp;&amp;g[k]+a[i].w&gt;g[a[i].m])</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                f[a[i].m]=<span class=\"built_in\">min</span>(f[k],a[i].r2);</span><br><span class=\"line\">                g[a[i].m]=g[k]+a[i].w;</span><br><span class=\"line\">                r[a[i].m]=i;</span><br><span class=\"line\">                q.<span class=\"built_in\">push</span>(a[i].m);</span><br><span class=\"line\">                h[a[i].m]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(f[s2]!=<span class=\"number\">1e9</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">    s1=<span class=\"number\">1</span>;</span><br><span class=\"line\">    s2=n*<span class=\"number\">2</span>+<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(<span class=\"number\">1</span>,i+<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(i+<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(i+n+<span class=\"number\">1</span>,n*<span class=\"number\">2</span>+<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(n*<span class=\"number\">2</span>+<span class=\"number\">2</span>,i+n+<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=n;++j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> w;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;w);</span><br><span class=\"line\">            <span class=\"built_in\">road</span>(i+<span class=\"number\">1</span>,j+n+<span class=\"number\">1</span>,<span class=\"number\">1</span>,w);</span><br><span class=\"line\">            <span class=\"built_in\">road</span>(j+n+<span class=\"number\">1</span>,i+<span class=\"number\">1</span>,<span class=\"number\">0</span>,-w);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> w1=<span class=\"number\">0</span>,w2=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">SPFA</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        w1+=f[s2]*g[s2];</span><br><span class=\"line\">        <span class=\"type\">int</span> x=s2;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(x!=s1)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            a[r[x]].r1-=f[s2];</span><br><span class=\"line\">            a[r[x]^<span class=\"number\">1</span>].r1+=f[s2];</span><br><span class=\"line\">            x=a[r[x]].x;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">SPFA2</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        w2+=f[s2]*g[s2];</span><br><span class=\"line\">        <span class=\"type\">int</span> x=s2;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(x!=s1)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            a[r[x]].r2-=f[s2];</span><br><span class=\"line\">            a[r[x]^<span class=\"number\">1</span>].r2+=f[s2];</span><br><span class=\"line\">            x=a[r[x]].x;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n%d&quot;</span>,w1,w2);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://www.luogu.com.cn/problem/P4014\">P4014 分配问题</a></p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>这道题其实是 <a href=\"/post/P4015-solution/\">P4015</a> 的简化版，P4015 是仓库中可以有多个货物，商店也可能需要多个货物，而这道题中工件最多 $1$ 个，工人也只能做 $1$ 个工件。所以只需要把上一题所有的边流量变为 $1$，然后跑最大费用最大流即可。</p>\n<h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">int</span> n,s1,s2,p=<span class=\"number\">1</span>,t[<span class=\"number\">10001</span>],f[<span class=\"number\">10001</span>],g[<span class=\"number\">10001</span>],r[<span class=\"number\">10001</span>];</span><br><span class=\"line\"><span class=\"type\">bool</span> h[<span class=\"number\">10001</span>];</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">str</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> x,m,q,r1,r2,w;</span><br><span class=\"line\">&#125;a[<span class=\"number\">100001</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">road</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y,<span class=\"type\">int</span> r,<span class=\"type\">int</span> w)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    a[++p].x=x;</span><br><span class=\"line\">    a[p].m=y;</span><br><span class=\"line\">    a[p].q=t[x];</span><br><span class=\"line\">    t[x]=p;</span><br><span class=\"line\">    a[p].r1=r;</span><br><span class=\"line\">    a[p].r2=r;</span><br><span class=\"line\">    a[p].w=w;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">SPFA</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    queue&lt;<span class=\"type\">int</span>&gt; q;</span><br><span class=\"line\">    q.<span class=\"built_in\">push</span>(s1);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n*<span class=\"number\">2</span>+<span class=\"number\">2</span>;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        f[i]=<span class=\"number\">1e9</span>;</span><br><span class=\"line\">        g[i]=<span class=\"number\">1e9</span>;</span><br><span class=\"line\">        h[i]=<span class=\"literal\">false</span>;</span><br><span class=\"line\">        r[i]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    g[s1]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    h[s1]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!q.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> k=q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">        q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(h[k]==<span class=\"literal\">false</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        h[k]=<span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t[k];i!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(a[i].r1&gt;<span class=\"number\">0</span>&amp;&amp;g[k]+a[i].w&lt;g[a[i].m])</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                f[a[i].m]=<span class=\"built_in\">min</span>(f[k],a[i].r1);</span><br><span class=\"line\">                g[a[i].m]=g[k]+a[i].w;</span><br><span class=\"line\">                r[a[i].m]=i;</span><br><span class=\"line\">                q.<span class=\"built_in\">push</span>(a[i].m);</span><br><span class=\"line\">                h[a[i].m]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(f[s2]!=<span class=\"number\">1e9</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">SPFA2</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    queue&lt;<span class=\"type\">int</span>&gt; q;</span><br><span class=\"line\">    q.<span class=\"built_in\">push</span>(s1);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n*<span class=\"number\">2</span>+<span class=\"number\">2</span>;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        f[i]=<span class=\"number\">1e9</span>;</span><br><span class=\"line\">        g[i]=<span class=\"number\">-1e9</span>;</span><br><span class=\"line\">        h[i]=<span class=\"literal\">false</span>;</span><br><span class=\"line\">        r[i]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    g[s1]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    h[s1]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!q.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> k=q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">        q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(h[k]==<span class=\"literal\">false</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        h[k]=<span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t[k];i!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(a[i].r2&gt;<span class=\"number\">0</span>&amp;&amp;g[k]+a[i].w&gt;g[a[i].m])</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                f[a[i].m]=<span class=\"built_in\">min</span>(f[k],a[i].r2);</span><br><span class=\"line\">                g[a[i].m]=g[k]+a[i].w;</span><br><span class=\"line\">                r[a[i].m]=i;</span><br><span class=\"line\">                q.<span class=\"built_in\">push</span>(a[i].m);</span><br><span class=\"line\">                h[a[i].m]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(f[s2]!=<span class=\"number\">1e9</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">    s1=<span class=\"number\">1</span>;</span><br><span class=\"line\">    s2=n*<span class=\"number\">2</span>+<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(<span class=\"number\">1</span>,i+<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(i+<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(i+n+<span class=\"number\">1</span>,n*<span class=\"number\">2</span>+<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(n*<span class=\"number\">2</span>+<span class=\"number\">2</span>,i+n+<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=n;++j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> w;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;w);</span><br><span class=\"line\">            <span class=\"built_in\">road</span>(i+<span class=\"number\">1</span>,j+n+<span class=\"number\">1</span>,<span class=\"number\">1</span>,w);</span><br><span class=\"line\">            <span class=\"built_in\">road</span>(j+n+<span class=\"number\">1</span>,i+<span class=\"number\">1</span>,<span class=\"number\">0</span>,-w);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> w1=<span class=\"number\">0</span>,w2=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">SPFA</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        w1+=f[s2]*g[s2];</span><br><span class=\"line\">        <span class=\"type\">int</span> x=s2;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(x!=s1)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            a[r[x]].r1-=f[s2];</span><br><span class=\"line\">            a[r[x]^<span class=\"number\">1</span>].r1+=f[s2];</span><br><span class=\"line\">            x=a[r[x]].x;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">SPFA2</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        w2+=f[s2]*g[s2];</span><br><span class=\"line\">        <span class=\"type\">int</span> x=s2;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(x!=s1)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            a[r[x]].r2-=f[s2];</span><br><span class=\"line\">            a[r[x]^<span class=\"number\">1</span>].r2+=f[s2];</span><br><span class=\"line\">            x=a[r[x]].x;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n%d&quot;</span>,w1,w2);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"P4015 运输问题","date":"2022-05-10T05:11:03.000Z","description":" ","_content":"\n[P4015 运输问题]{https://www.luogu.com.cn/problem/P4015)\n## 分析\n这道题其实不难看出可以把货物看做流量来跑费用流。我们建两组点，分别代表仓库和商店，然后和源汇点连边，跑费用流即可。如果还不清楚可以看下面，我们要建这几种边：\n1. 源点向仓库 $i$ 连边，容量为 $a_i$，费用为 $0$。 \n2. 仓库 $i$ 向商店 $j$ 连边，容量为 $inf$，费用为 $c_{ij}$。 \n3. 商店 $i$ 向汇点连边，容量为 $b_i$，费用为 $0$。 \n## code\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<queue>\nusing namespace std;\nint n,n1,n2,s1,s2,p=1,t[10001],f[10001],g[10001],r[10001];\nbool h[10001];\nstruct str\n{\n    int x,m,q,r1,r2,w;\n}a[100001];\nvoid road(int x,int y,int r,int w)\n{\n    a[++p].x=x;\n    a[p].m=y;\n    a[p].q=t[x];\n    t[x]=p;\n    a[p].r1=r;\n    a[p].r2=r;\n    a[p].w=w;\n}\nbool SPFA()\n{\n    queue<int> q;\n    q.push(s1);\n    for(int i=1;i<=n;++i)\n    {\n        f[i]=1e9;\n        g[i]=1e9;\n        h[i]=false;\n        r[i]=0;\n    }\n    g[s1]=0;\n    h[s1]=true;\n    while(!q.empty())\n    {\n        int k=q.front();\n        q.pop();\n        if(h[k]==false) continue;\n        h[k]=false;\n        for(int i=t[k];i!=0;i=a[i].q)\n        {\n            if(a[i].r1>0&&g[k]+a[i].w<g[a[i].m])\n            {\n                f[a[i].m]=min(f[k],a[i].r1);\n                g[a[i].m]=g[k]+a[i].w;\n                r[a[i].m]=i;\n                q.push(a[i].m);\n                h[a[i].m]=true;\n            }\n        }\n    }\n    if(f[s2]!=1e9) return true;\n    return false;\n}\nbool SPFA2()\n{\n    queue<int> q;\n    q.push(s1);\n    for(int i=1;i<=n;++i)\n    {\n        f[i]=1e9;\n        g[i]=-1e9;\n        h[i]=false;\n        r[i]=0;\n    }\n    g[s1]=0;\n    h[s1]=true;\n    while(!q.empty())\n    {\n        int k=q.front();\n        q.pop();\n        if(h[k]==false) continue;\n        h[k]=false;\n        for(int i=t[k];i!=0;i=a[i].q)\n        {\n            if(a[i].r2>0&&g[k]+a[i].w>g[a[i].m])\n            {\n                f[a[i].m]=min(f[k],a[i].r2);\n                g[a[i].m]=g[k]+a[i].w;\n                r[a[i].m]=i;\n                q.push(a[i].m);\n                h[a[i].m]=true;\n            }\n        }\n    }\n    if(f[s2]!=1e9) return true;\n    return false;\n}\nint main()\n{\n    scanf(\"%d%d\",&n1,&n2);\n    n=n1+n2+2;\n    s1=1;\n    s2=n;\n    for(int i=1;i<=n1;++i)\n    {\n        int r;\n        scanf(\"%d\",&r);\n        road(1,i+1,r,0);\n        road(i+1,1,0,0);\n    }\n    for(int i=1;i<=n2;++i)\n    {\n        int r;\n        scanf(\"%d\",&r);\n        road(i+n1+1,n,r,0);\n        road(n,i+n1+1,0,0);\n    }\n    for(int i=1;i<=n1;++i)\n    {\n        for(int j=1;j<=n2;++j)\n        {\n            int w;\n            scanf(\"%d\",&w);\n            road(i+1,j+n1+1,1e9,w);\n            road(j+n1+1,i+1,0,-w);\n        }\n    }\n    int w1=0,w2=0;\n    while(SPFA())\n    {\n        w1+=f[s2]*g[s2];\n        int x=s2;\n        while(x!=s1)\n        {\n            a[r[x]].r1-=f[s2];\n            a[r[x]^1].r1+=f[s2];\n            x=a[r[x]].x;\n        }\n    }\n    while(SPFA2())\n    {\n        w2+=f[s2]*g[s2];\n        int x=s2;\n        while(x!=s1)\n        {\n            a[r[x]].r2-=f[s2];\n            a[r[x]^1].r2+=f[s2];\n            x=a[r[x]].x;\n        }\n    }\n    printf(\"%d\\n%d\",w1,w2);\n    return 0;\n}\n```","source":"_posts/P4015-solution.md","raw":"---\ntitle: 'P4015 运输问题'\ndate: 2022-05-10 13:11:03\ntags: [最大流,费用流]\ndescription: ' '\n---\n\n[P4015 运输问题]{https://www.luogu.com.cn/problem/P4015)\n## 分析\n这道题其实不难看出可以把货物看做流量来跑费用流。我们建两组点，分别代表仓库和商店，然后和源汇点连边，跑费用流即可。如果还不清楚可以看下面，我们要建这几种边：\n1. 源点向仓库 $i$ 连边，容量为 $a_i$，费用为 $0$。 \n2. 仓库 $i$ 向商店 $j$ 连边，容量为 $inf$，费用为 $c_{ij}$。 \n3. 商店 $i$ 向汇点连边，容量为 $b_i$，费用为 $0$。 \n## code\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<queue>\nusing namespace std;\nint n,n1,n2,s1,s2,p=1,t[10001],f[10001],g[10001],r[10001];\nbool h[10001];\nstruct str\n{\n    int x,m,q,r1,r2,w;\n}a[100001];\nvoid road(int x,int y,int r,int w)\n{\n    a[++p].x=x;\n    a[p].m=y;\n    a[p].q=t[x];\n    t[x]=p;\n    a[p].r1=r;\n    a[p].r2=r;\n    a[p].w=w;\n}\nbool SPFA()\n{\n    queue<int> q;\n    q.push(s1);\n    for(int i=1;i<=n;++i)\n    {\n        f[i]=1e9;\n        g[i]=1e9;\n        h[i]=false;\n        r[i]=0;\n    }\n    g[s1]=0;\n    h[s1]=true;\n    while(!q.empty())\n    {\n        int k=q.front();\n        q.pop();\n        if(h[k]==false) continue;\n        h[k]=false;\n        for(int i=t[k];i!=0;i=a[i].q)\n        {\n            if(a[i].r1>0&&g[k]+a[i].w<g[a[i].m])\n            {\n                f[a[i].m]=min(f[k],a[i].r1);\n                g[a[i].m]=g[k]+a[i].w;\n                r[a[i].m]=i;\n                q.push(a[i].m);\n                h[a[i].m]=true;\n            }\n        }\n    }\n    if(f[s2]!=1e9) return true;\n    return false;\n}\nbool SPFA2()\n{\n    queue<int> q;\n    q.push(s1);\n    for(int i=1;i<=n;++i)\n    {\n        f[i]=1e9;\n        g[i]=-1e9;\n        h[i]=false;\n        r[i]=0;\n    }\n    g[s1]=0;\n    h[s1]=true;\n    while(!q.empty())\n    {\n        int k=q.front();\n        q.pop();\n        if(h[k]==false) continue;\n        h[k]=false;\n        for(int i=t[k];i!=0;i=a[i].q)\n        {\n            if(a[i].r2>0&&g[k]+a[i].w>g[a[i].m])\n            {\n                f[a[i].m]=min(f[k],a[i].r2);\n                g[a[i].m]=g[k]+a[i].w;\n                r[a[i].m]=i;\n                q.push(a[i].m);\n                h[a[i].m]=true;\n            }\n        }\n    }\n    if(f[s2]!=1e9) return true;\n    return false;\n}\nint main()\n{\n    scanf(\"%d%d\",&n1,&n2);\n    n=n1+n2+2;\n    s1=1;\n    s2=n;\n    for(int i=1;i<=n1;++i)\n    {\n        int r;\n        scanf(\"%d\",&r);\n        road(1,i+1,r,0);\n        road(i+1,1,0,0);\n    }\n    for(int i=1;i<=n2;++i)\n    {\n        int r;\n        scanf(\"%d\",&r);\n        road(i+n1+1,n,r,0);\n        road(n,i+n1+1,0,0);\n    }\n    for(int i=1;i<=n1;++i)\n    {\n        for(int j=1;j<=n2;++j)\n        {\n            int w;\n            scanf(\"%d\",&w);\n            road(i+1,j+n1+1,1e9,w);\n            road(j+n1+1,i+1,0,-w);\n        }\n    }\n    int w1=0,w2=0;\n    while(SPFA())\n    {\n        w1+=f[s2]*g[s2];\n        int x=s2;\n        while(x!=s1)\n        {\n            a[r[x]].r1-=f[s2];\n            a[r[x]^1].r1+=f[s2];\n            x=a[r[x]].x;\n        }\n    }\n    while(SPFA2())\n    {\n        w2+=f[s2]*g[s2];\n        int x=s2;\n        while(x!=s1)\n        {\n            a[r[x]].r2-=f[s2];\n            a[r[x]^1].r2+=f[s2];\n            x=a[r[x]].x;\n        }\n    }\n    printf(\"%d\\n%d\",w1,w2);\n    return 0;\n}\n```","slug":"P4015-solution","published":1,"updated":"2022-11-28T13:47:47.412Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cleid9280001h2sjf5q1ugnil","content":"<p>[P4015 运输问题]{<a href=\"https://www.luogu.com.cn/problem/P4015\">https://www.luogu.com.cn/problem/P4015</a>)</p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>这道题其实不难看出可以把货物看做流量来跑费用流。我们建两组点，分别代表仓库和商店，然后和源汇点连边，跑费用流即可。如果还不清楚可以看下面，我们要建这几种边：</p>\n<ol>\n<li>源点向仓库 $i$ 连边，容量为 $a_i$，费用为 $0$。 </li>\n<li>仓库 $i$ 向商店 $j$ 连边，容量为 $inf$，费用为 $c_{ij}$。 </li>\n<li>商店 $i$ 向汇点连边，容量为 $b_i$，费用为 $0$。</li>\n</ol>\n<h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">int</span> n,n1,n2,s1,s2,p=<span class=\"number\">1</span>,t[<span class=\"number\">10001</span>],f[<span class=\"number\">10001</span>],g[<span class=\"number\">10001</span>],r[<span class=\"number\">10001</span>];</span><br><span class=\"line\"><span class=\"type\">bool</span> h[<span class=\"number\">10001</span>];</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">str</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> x,m,q,r1,r2,w;</span><br><span class=\"line\">&#125;a[<span class=\"number\">100001</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">road</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y,<span class=\"type\">int</span> r,<span class=\"type\">int</span> w)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    a[++p].x=x;</span><br><span class=\"line\">    a[p].m=y;</span><br><span class=\"line\">    a[p].q=t[x];</span><br><span class=\"line\">    t[x]=p;</span><br><span class=\"line\">    a[p].r1=r;</span><br><span class=\"line\">    a[p].r2=r;</span><br><span class=\"line\">    a[p].w=w;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">SPFA</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    queue&lt;<span class=\"type\">int</span>&gt; q;</span><br><span class=\"line\">    q.<span class=\"built_in\">push</span>(s1);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        f[i]=<span class=\"number\">1e9</span>;</span><br><span class=\"line\">        g[i]=<span class=\"number\">1e9</span>;</span><br><span class=\"line\">        h[i]=<span class=\"literal\">false</span>;</span><br><span class=\"line\">        r[i]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    g[s1]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    h[s1]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!q.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> k=q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">        q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(h[k]==<span class=\"literal\">false</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        h[k]=<span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t[k];i!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(a[i].r1&gt;<span class=\"number\">0</span>&amp;&amp;g[k]+a[i].w&lt;g[a[i].m])</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                f[a[i].m]=<span class=\"built_in\">min</span>(f[k],a[i].r1);</span><br><span class=\"line\">                g[a[i].m]=g[k]+a[i].w;</span><br><span class=\"line\">                r[a[i].m]=i;</span><br><span class=\"line\">                q.<span class=\"built_in\">push</span>(a[i].m);</span><br><span class=\"line\">                h[a[i].m]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(f[s2]!=<span class=\"number\">1e9</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">SPFA2</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    queue&lt;<span class=\"type\">int</span>&gt; q;</span><br><span class=\"line\">    q.<span class=\"built_in\">push</span>(s1);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        f[i]=<span class=\"number\">1e9</span>;</span><br><span class=\"line\">        g[i]=<span class=\"number\">-1e9</span>;</span><br><span class=\"line\">        h[i]=<span class=\"literal\">false</span>;</span><br><span class=\"line\">        r[i]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    g[s1]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    h[s1]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!q.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> k=q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">        q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(h[k]==<span class=\"literal\">false</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        h[k]=<span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t[k];i!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(a[i].r2&gt;<span class=\"number\">0</span>&amp;&amp;g[k]+a[i].w&gt;g[a[i].m])</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                f[a[i].m]=<span class=\"built_in\">min</span>(f[k],a[i].r2);</span><br><span class=\"line\">                g[a[i].m]=g[k]+a[i].w;</span><br><span class=\"line\">                r[a[i].m]=i;</span><br><span class=\"line\">                q.<span class=\"built_in\">push</span>(a[i].m);</span><br><span class=\"line\">                h[a[i].m]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(f[s2]!=<span class=\"number\">1e9</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;n1,&amp;n2);</span><br><span class=\"line\">    n=n1+n2+<span class=\"number\">2</span>;</span><br><span class=\"line\">    s1=<span class=\"number\">1</span>;</span><br><span class=\"line\">    s2=n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n1;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> r;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;r);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(<span class=\"number\">1</span>,i+<span class=\"number\">1</span>,r,<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(i+<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n2;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> r;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;r);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(i+n1+<span class=\"number\">1</span>,n,r,<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(n,i+n1+<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n1;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=n2;++j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> w;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;w);</span><br><span class=\"line\">            <span class=\"built_in\">road</span>(i+<span class=\"number\">1</span>,j+n1+<span class=\"number\">1</span>,<span class=\"number\">1e9</span>,w);</span><br><span class=\"line\">            <span class=\"built_in\">road</span>(j+n1+<span class=\"number\">1</span>,i+<span class=\"number\">1</span>,<span class=\"number\">0</span>,-w);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> w1=<span class=\"number\">0</span>,w2=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">SPFA</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        w1+=f[s2]*g[s2];</span><br><span class=\"line\">        <span class=\"type\">int</span> x=s2;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(x!=s1)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            a[r[x]].r1-=f[s2];</span><br><span class=\"line\">            a[r[x]^<span class=\"number\">1</span>].r1+=f[s2];</span><br><span class=\"line\">            x=a[r[x]].x;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">SPFA2</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        w2+=f[s2]*g[s2];</span><br><span class=\"line\">        <span class=\"type\">int</span> x=s2;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(x!=s1)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            a[r[x]].r2-=f[s2];</span><br><span class=\"line\">            a[r[x]^<span class=\"number\">1</span>].r2+=f[s2];</span><br><span class=\"line\">            x=a[r[x]].x;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n%d&quot;</span>,w1,w2);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>[P4015 运输问题]{<a href=\"https://www.luogu.com.cn/problem/P4015\">https://www.luogu.com.cn/problem/P4015</a>)</p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>这道题其实不难看出可以把货物看做流量来跑费用流。我们建两组点，分别代表仓库和商店，然后和源汇点连边，跑费用流即可。如果还不清楚可以看下面，我们要建这几种边：</p>\n<ol>\n<li>源点向仓库 $i$ 连边，容量为 $a_i$，费用为 $0$。 </li>\n<li>仓库 $i$ 向商店 $j$ 连边，容量为 $inf$，费用为 $c_{ij}$。 </li>\n<li>商店 $i$ 向汇点连边，容量为 $b_i$，费用为 $0$。</li>\n</ol>\n<h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">int</span> n,n1,n2,s1,s2,p=<span class=\"number\">1</span>,t[<span class=\"number\">10001</span>],f[<span class=\"number\">10001</span>],g[<span class=\"number\">10001</span>],r[<span class=\"number\">10001</span>];</span><br><span class=\"line\"><span class=\"type\">bool</span> h[<span class=\"number\">10001</span>];</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">str</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> x,m,q,r1,r2,w;</span><br><span class=\"line\">&#125;a[<span class=\"number\">100001</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">road</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y,<span class=\"type\">int</span> r,<span class=\"type\">int</span> w)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    a[++p].x=x;</span><br><span class=\"line\">    a[p].m=y;</span><br><span class=\"line\">    a[p].q=t[x];</span><br><span class=\"line\">    t[x]=p;</span><br><span class=\"line\">    a[p].r1=r;</span><br><span class=\"line\">    a[p].r2=r;</span><br><span class=\"line\">    a[p].w=w;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">SPFA</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    queue&lt;<span class=\"type\">int</span>&gt; q;</span><br><span class=\"line\">    q.<span class=\"built_in\">push</span>(s1);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        f[i]=<span class=\"number\">1e9</span>;</span><br><span class=\"line\">        g[i]=<span class=\"number\">1e9</span>;</span><br><span class=\"line\">        h[i]=<span class=\"literal\">false</span>;</span><br><span class=\"line\">        r[i]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    g[s1]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    h[s1]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!q.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> k=q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">        q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(h[k]==<span class=\"literal\">false</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        h[k]=<span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t[k];i!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(a[i].r1&gt;<span class=\"number\">0</span>&amp;&amp;g[k]+a[i].w&lt;g[a[i].m])</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                f[a[i].m]=<span class=\"built_in\">min</span>(f[k],a[i].r1);</span><br><span class=\"line\">                g[a[i].m]=g[k]+a[i].w;</span><br><span class=\"line\">                r[a[i].m]=i;</span><br><span class=\"line\">                q.<span class=\"built_in\">push</span>(a[i].m);</span><br><span class=\"line\">                h[a[i].m]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(f[s2]!=<span class=\"number\">1e9</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">SPFA2</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    queue&lt;<span class=\"type\">int</span>&gt; q;</span><br><span class=\"line\">    q.<span class=\"built_in\">push</span>(s1);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        f[i]=<span class=\"number\">1e9</span>;</span><br><span class=\"line\">        g[i]=<span class=\"number\">-1e9</span>;</span><br><span class=\"line\">        h[i]=<span class=\"literal\">false</span>;</span><br><span class=\"line\">        r[i]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    g[s1]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    h[s1]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!q.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> k=q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">        q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(h[k]==<span class=\"literal\">false</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        h[k]=<span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t[k];i!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(a[i].r2&gt;<span class=\"number\">0</span>&amp;&amp;g[k]+a[i].w&gt;g[a[i].m])</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                f[a[i].m]=<span class=\"built_in\">min</span>(f[k],a[i].r2);</span><br><span class=\"line\">                g[a[i].m]=g[k]+a[i].w;</span><br><span class=\"line\">                r[a[i].m]=i;</span><br><span class=\"line\">                q.<span class=\"built_in\">push</span>(a[i].m);</span><br><span class=\"line\">                h[a[i].m]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(f[s2]!=<span class=\"number\">1e9</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;n1,&amp;n2);</span><br><span class=\"line\">    n=n1+n2+<span class=\"number\">2</span>;</span><br><span class=\"line\">    s1=<span class=\"number\">1</span>;</span><br><span class=\"line\">    s2=n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n1;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> r;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;r);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(<span class=\"number\">1</span>,i+<span class=\"number\">1</span>,r,<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(i+<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n2;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> r;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;r);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(i+n1+<span class=\"number\">1</span>,n,r,<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(n,i+n1+<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n1;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=n2;++j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> w;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;w);</span><br><span class=\"line\">            <span class=\"built_in\">road</span>(i+<span class=\"number\">1</span>,j+n1+<span class=\"number\">1</span>,<span class=\"number\">1e9</span>,w);</span><br><span class=\"line\">            <span class=\"built_in\">road</span>(j+n1+<span class=\"number\">1</span>,i+<span class=\"number\">1</span>,<span class=\"number\">0</span>,-w);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> w1=<span class=\"number\">0</span>,w2=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">SPFA</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        w1+=f[s2]*g[s2];</span><br><span class=\"line\">        <span class=\"type\">int</span> x=s2;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(x!=s1)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            a[r[x]].r1-=f[s2];</span><br><span class=\"line\">            a[r[x]^<span class=\"number\">1</span>].r1+=f[s2];</span><br><span class=\"line\">            x=a[r[x]].x;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">SPFA2</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        w2+=f[s2]*g[s2];</span><br><span class=\"line\">        <span class=\"type\">int</span> x=s2;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(x!=s1)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            a[r[x]].r2-=f[s2];</span><br><span class=\"line\">            a[r[x]^<span class=\"number\">1</span>].r2+=f[s2];</span><br><span class=\"line\">            x=a[r[x]].x;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n%d&quot;</span>,w1,w2);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"P4072 [SDOI2016]征途","date":"2022-04-04T00:13:41.000Z","description":" ","_content":"\n[P4072 [SDOI2016]征途](https://www.luogu.com.cn/problem/P4072)\n## 分析\n这道题是分了层的斜率优化 dp，它与普通的斜率优化的不同之处就是它限制了只能分成 $m$ 段，所以我们需要先枚举走多少段。对于每一段，重新开一个单调队列存储点，但是这个单调队列维护的每一个点上一次的信息。假设当前走了 $i$ 段，那么单调队列维护的就是 $i-1$ 段的信息。我们不需要在算出 $i$ 天的情况时就建立单调队列，我们只需要在更新 $i+1$ 段的时候依次将第 $i$ 天的信息入队即可。\n为了节约空间和方便建立单调队列，这里使用滚动数组存储信息。\n## code\n```cpp\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\nconst int M=10001,N=10001;\nint n,m,a[N],Q[N*2],T=0,R=0,f[N],g[N];\nint abc(int x,int y)\n{\n    if(a[x]==a[y]) return 1e9;\n    return ((g[x]+a[x]*a[x])-(g[y]+a[y]*a[y]))/(a[x]-a[y]);\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n;++i)\n    {\n        int x;\n        scanf(\"%d\",&x);\n        a[i]=a[i-1]+x;\n        g[i]=1e9;\n    }\n    g[0]=0;\n    for(int i=1;i<=m;++i)\n    {\n        T=0,R=0;\n        for(int j=1;j<=n;++j)\n        {\n            while(T<R&&abc(Q[T],Q[T+1])<2*a[j]) ++T;\n            f[j]=g[Q[T]]+(a[j]-a[Q[T]])*(a[j]-a[Q[T]]);\n            while(T<R&&abc(Q[R],j)<abc(Q[R-1],Q[R])) --R;\n            Q[++R]=j;\n        }\n        for(int j=1;j<=n;++j) g[j]=f[j];\n    }\n    printf(\"%d\",f[n]*m-a[n]*a[n]);\n    return 0;\n}\n```","source":"_posts/P4072-solution.md","raw":"---\ntitle: 'P4072 [SDOI2016]征途'\ndate: 2022-04-04 08:13:41\ntags: [动态规划,单调队列,斜率优化dp]\ndescription: ' '\n---\n\n[P4072 [SDOI2016]征途](https://www.luogu.com.cn/problem/P4072)\n## 分析\n这道题是分了层的斜率优化 dp，它与普通的斜率优化的不同之处就是它限制了只能分成 $m$ 段，所以我们需要先枚举走多少段。对于每一段，重新开一个单调队列存储点，但是这个单调队列维护的每一个点上一次的信息。假设当前走了 $i$ 段，那么单调队列维护的就是 $i-1$ 段的信息。我们不需要在算出 $i$ 天的情况时就建立单调队列，我们只需要在更新 $i+1$ 段的时候依次将第 $i$ 天的信息入队即可。\n为了节约空间和方便建立单调队列，这里使用滚动数组存储信息。\n## code\n```cpp\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\nconst int M=10001,N=10001;\nint n,m,a[N],Q[N*2],T=0,R=0,f[N],g[N];\nint abc(int x,int y)\n{\n    if(a[x]==a[y]) return 1e9;\n    return ((g[x]+a[x]*a[x])-(g[y]+a[y]*a[y]))/(a[x]-a[y]);\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n;++i)\n    {\n        int x;\n        scanf(\"%d\",&x);\n        a[i]=a[i-1]+x;\n        g[i]=1e9;\n    }\n    g[0]=0;\n    for(int i=1;i<=m;++i)\n    {\n        T=0,R=0;\n        for(int j=1;j<=n;++j)\n        {\n            while(T<R&&abc(Q[T],Q[T+1])<2*a[j]) ++T;\n            f[j]=g[Q[T]]+(a[j]-a[Q[T]])*(a[j]-a[Q[T]]);\n            while(T<R&&abc(Q[R],j)<abc(Q[R-1],Q[R])) --R;\n            Q[++R]=j;\n        }\n        for(int j=1;j<=n;++j) g[j]=f[j];\n    }\n    printf(\"%d\",f[n]*m-a[n]*a[n]);\n    return 0;\n}\n```","slug":"P4072-solution","published":1,"updated":"2022-11-28T13:47:47.412Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cleid9280001j2sjfe746ek2n","content":"<p><a href=\"https://www.luogu.com.cn/problem/P4072\">P4072 [SDOI2016]征途</a></p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>这道题是分了层的斜率优化 dp，它与普通的斜率优化的不同之处就是它限制了只能分成 $m$ 段，所以我们需要先枚举走多少段。对于每一段，重新开一个单调队列存储点，但是这个单调队列维护的每一个点上一次的信息。假设当前走了 $i$ 段，那么单调队列维护的就是 $i-1$ 段的信息。我们不需要在算出 $i$ 天的情况时就建立单调队列，我们只需要在更新 $i+1$ 段的时候依次将第 $i$ 天的信息入队即可。<br>为了节约空间和方便建立单调队列，这里使用滚动数组存储信息。</p>\n<h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> M=<span class=\"number\">10001</span>,N=<span class=\"number\">10001</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m,a[N],Q[N*<span class=\"number\">2</span>],T=<span class=\"number\">0</span>,R=<span class=\"number\">0</span>,f[N],g[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">abc</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a[x]==a[y]) <span class=\"keyword\">return</span> <span class=\"number\">1e9</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ((g[x]+a[x]*a[x])-(g[y]+a[y]*a[y]))/(a[x]-a[y]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;x);</span><br><span class=\"line\">        a[i]=a[i<span class=\"number\">-1</span>]+x;</span><br><span class=\"line\">        g[i]=<span class=\"number\">1e9</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    g[<span class=\"number\">0</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        T=<span class=\"number\">0</span>,R=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=n;++j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(T&lt;R&amp;&amp;<span class=\"built_in\">abc</span>(Q[T],Q[T+<span class=\"number\">1</span>])&lt;<span class=\"number\">2</span>*a[j]) ++T;</span><br><span class=\"line\">            f[j]=g[Q[T]]+(a[j]-a[Q[T]])*(a[j]-a[Q[T]]);</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(T&lt;R&amp;&amp;<span class=\"built_in\">abc</span>(Q[R],j)&lt;<span class=\"built_in\">abc</span>(Q[R<span class=\"number\">-1</span>],Q[R])) --R;</span><br><span class=\"line\">            Q[++R]=j;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=n;++j) g[j]=f[j];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,f[n]*m-a[n]*a[n]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://www.luogu.com.cn/problem/P4072\">P4072 [SDOI2016]征途</a></p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>这道题是分了层的斜率优化 dp，它与普通的斜率优化的不同之处就是它限制了只能分成 $m$ 段，所以我们需要先枚举走多少段。对于每一段，重新开一个单调队列存储点，但是这个单调队列维护的每一个点上一次的信息。假设当前走了 $i$ 段，那么单调队列维护的就是 $i-1$ 段的信息。我们不需要在算出 $i$ 天的情况时就建立单调队列，我们只需要在更新 $i+1$ 段的时候依次将第 $i$ 天的信息入队即可。<br>为了节约空间和方便建立单调队列，这里使用滚动数组存储信息。</p>\n<h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> M=<span class=\"number\">10001</span>,N=<span class=\"number\">10001</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m,a[N],Q[N*<span class=\"number\">2</span>],T=<span class=\"number\">0</span>,R=<span class=\"number\">0</span>,f[N],g[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">abc</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a[x]==a[y]) <span class=\"keyword\">return</span> <span class=\"number\">1e9</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ((g[x]+a[x]*a[x])-(g[y]+a[y]*a[y]))/(a[x]-a[y]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;x);</span><br><span class=\"line\">        a[i]=a[i<span class=\"number\">-1</span>]+x;</span><br><span class=\"line\">        g[i]=<span class=\"number\">1e9</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    g[<span class=\"number\">0</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        T=<span class=\"number\">0</span>,R=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=n;++j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(T&lt;R&amp;&amp;<span class=\"built_in\">abc</span>(Q[T],Q[T+<span class=\"number\">1</span>])&lt;<span class=\"number\">2</span>*a[j]) ++T;</span><br><span class=\"line\">            f[j]=g[Q[T]]+(a[j]-a[Q[T]])*(a[j]-a[Q[T]]);</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(T&lt;R&amp;&amp;<span class=\"built_in\">abc</span>(Q[R],j)&lt;<span class=\"built_in\">abc</span>(Q[R<span class=\"number\">-1</span>],Q[R])) --R;</span><br><span class=\"line\">            Q[++R]=j;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=n;++j) g[j]=f[j];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,f[n]*m-a[n]*a[n]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"P4304 [TJOI2013]攻击装置","date":"2022-04-17T03:50:07.000Z","description":" ","_content":"\n[P4304 [TJOI2013]攻击装置](https://www.luogu.com.cn/problem/P4304)\n## 分析\n同 P3355，双倍经验。\n## code\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<queue>\nusing namespace std;\ntypedef long long ll;\nconst int N=50001,M=2000001;\nint n,m,p=1,s1,s2,t[N],t0[N],f[N];\nshort dx[8]={-2,-1,1,2,2,1,-1,-2},dy[8]={-1,-2,-2,-1,1,2,2,1};\nstruct str\n{\n    int m,q;\n    ll r;\n}a[M];\nbool check(int x,int y)\n{\n    return x>=1&&x<=n&&y>=1&&y<=n;\n}\nint sum(int x,int y)\n{\n    return (x-1)*n+y;\n}\nvoid road(int x,int y,ll r)\n{\n    a[++p].m=y;\n    a[p].q=t[x];\n    t[x]=p;\n    a[p].r=r;\n}\nbool bfs()\n{\n    queue<int> Q;\n    Q.push(s1);\n    for(int i=1;i<=s2;++i) f[i]=0;\n    f[s1]=1;\n    while(!Q.empty())\n    {\n        int k=Q.front();\n        Q.pop();\n        for(int i=t[k];i!=0;i=a[i].q)\n        {\n            if(f[a[i].m]==0&&a[i].r!=0)\n            {\n                f[a[i].m]=f[k]+1;\n                Q.push(a[i].m);\n            }\n        }\n    }\n    return f[s2]!=0;\n}\nll dfs(int x,ll r)\n{\n    if(x==s2) return r;\n    ll s=0;\n    for(int i=t0[x];i!=0;i=a[i].q)\n    {\n        t0[x]=i;\n        if(f[a[i].m]==f[x]+1&&a[i].r!=0)\n        {\n            int z=dfs(a[i].m,min(r,a[i].r));\n            if(z!=0)\n            {\n                a[i].r-=z;\n                a[i^1].r+=z;\n                r-=z;\n                s+=z;\n            }\n            else f[a[i].m]=0;\n            if(r==0) return s; \n        }\n    }\n    return s;\n}\nint main()\n{\n    scanf(\"%d\",&n);\n    s1=n*n+1;\n    s2=n*n+2;\n    for(int i=1;i<=n;++i)\n    {\n        scanf(\"\\n\");\n        for(int j=1;j<=n;++j)\n        {\n            char c=getchar();\n            if(c=='1') continue;\n            ++m;\n            if((i+j)&1)\n            {\n                road(s1,sum(i,j),1);\n                road(sum(i,j),s1,0);\n                for(int k=0;k<=7;++k)\n                {\n                    if(check(i+dx[k],j+dy[k]))\n                    {\n                        road(sum(i,j),sum(i+dx[k],j+dy[k]),1e18);\n                        road(sum(i+dx[k],j+dy[k]),sum(i,j),0);\n                    }\n                }\n            }\n            else\n            {\n                road(sum(i,j),s2,1);\n                road(s2,sum(i,j),0);\n            }\n        }\n    }\n    ll r=0;\n    while(bfs())\n    {\n        for(int i=1;i<=s2;++i) t0[i]=t[i];\n        r+=dfs(s1,1e18);\n    }\n    printf(\"%lld\",m-r);\n    return 0;\n}\n```","source":"_posts/P4304-solution.md","raw":"---\ntitle: 'P4304 [TJOI2013]攻击装置'\ndate: 2022-04-17 11:50:07\ntags: [网络流,最大流]\ndescription: ' '\n---\n\n[P4304 [TJOI2013]攻击装置](https://www.luogu.com.cn/problem/P4304)\n## 分析\n同 P3355，双倍经验。\n## code\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<queue>\nusing namespace std;\ntypedef long long ll;\nconst int N=50001,M=2000001;\nint n,m,p=1,s1,s2,t[N],t0[N],f[N];\nshort dx[8]={-2,-1,1,2,2,1,-1,-2},dy[8]={-1,-2,-2,-1,1,2,2,1};\nstruct str\n{\n    int m,q;\n    ll r;\n}a[M];\nbool check(int x,int y)\n{\n    return x>=1&&x<=n&&y>=1&&y<=n;\n}\nint sum(int x,int y)\n{\n    return (x-1)*n+y;\n}\nvoid road(int x,int y,ll r)\n{\n    a[++p].m=y;\n    a[p].q=t[x];\n    t[x]=p;\n    a[p].r=r;\n}\nbool bfs()\n{\n    queue<int> Q;\n    Q.push(s1);\n    for(int i=1;i<=s2;++i) f[i]=0;\n    f[s1]=1;\n    while(!Q.empty())\n    {\n        int k=Q.front();\n        Q.pop();\n        for(int i=t[k];i!=0;i=a[i].q)\n        {\n            if(f[a[i].m]==0&&a[i].r!=0)\n            {\n                f[a[i].m]=f[k]+1;\n                Q.push(a[i].m);\n            }\n        }\n    }\n    return f[s2]!=0;\n}\nll dfs(int x,ll r)\n{\n    if(x==s2) return r;\n    ll s=0;\n    for(int i=t0[x];i!=0;i=a[i].q)\n    {\n        t0[x]=i;\n        if(f[a[i].m]==f[x]+1&&a[i].r!=0)\n        {\n            int z=dfs(a[i].m,min(r,a[i].r));\n            if(z!=0)\n            {\n                a[i].r-=z;\n                a[i^1].r+=z;\n                r-=z;\n                s+=z;\n            }\n            else f[a[i].m]=0;\n            if(r==0) return s; \n        }\n    }\n    return s;\n}\nint main()\n{\n    scanf(\"%d\",&n);\n    s1=n*n+1;\n    s2=n*n+2;\n    for(int i=1;i<=n;++i)\n    {\n        scanf(\"\\n\");\n        for(int j=1;j<=n;++j)\n        {\n            char c=getchar();\n            if(c=='1') continue;\n            ++m;\n            if((i+j)&1)\n            {\n                road(s1,sum(i,j),1);\n                road(sum(i,j),s1,0);\n                for(int k=0;k<=7;++k)\n                {\n                    if(check(i+dx[k],j+dy[k]))\n                    {\n                        road(sum(i,j),sum(i+dx[k],j+dy[k]),1e18);\n                        road(sum(i+dx[k],j+dy[k]),sum(i,j),0);\n                    }\n                }\n            }\n            else\n            {\n                road(sum(i,j),s2,1);\n                road(s2,sum(i,j),0);\n            }\n        }\n    }\n    ll r=0;\n    while(bfs())\n    {\n        for(int i=1;i<=s2;++i) t0[i]=t[i];\n        r+=dfs(s1,1e18);\n    }\n    printf(\"%lld\",m-r);\n    return 0;\n}\n```","slug":"P4304-solution","published":1,"updated":"2022-11-28T13:47:47.412Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cleid9281001k2sjf8bzq90od","content":"<p><a href=\"https://www.luogu.com.cn/problem/P4304\">P4304 [TJOI2013]攻击装置</a></p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>同 P3355，双倍经验。</p>\n<h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> ll;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">50001</span>,M=<span class=\"number\">2000001</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m,p=<span class=\"number\">1</span>,s1,s2,t[N],t0[N],f[N];</span><br><span class=\"line\"><span class=\"type\">short</span> dx[<span class=\"number\">8</span>]=&#123;<span class=\"number\">-2</span>,<span class=\"number\">-1</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">-1</span>,<span class=\"number\">-2</span>&#125;,dy[<span class=\"number\">8</span>]=&#123;<span class=\"number\">-1</span>,<span class=\"number\">-2</span>,<span class=\"number\">-2</span>,<span class=\"number\">-1</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">str</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> m,q;</span><br><span class=\"line\">    ll r;</span><br><span class=\"line\">&#125;a[M];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">check</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x&gt;=<span class=\"number\">1</span>&amp;&amp;x&lt;=n&amp;&amp;y&gt;=<span class=\"number\">1</span>&amp;&amp;y&lt;=n;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">sum</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (x<span class=\"number\">-1</span>)*n+y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">road</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y,ll r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    a[++p].m=y;</span><br><span class=\"line\">    a[p].q=t[x];</span><br><span class=\"line\">    t[x]=p;</span><br><span class=\"line\">    a[p].r=r;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">bfs</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    queue&lt;<span class=\"type\">int</span>&gt; Q;</span><br><span class=\"line\">    Q.<span class=\"built_in\">push</span>(s1);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=s2;++i) f[i]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    f[s1]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!Q.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> k=Q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">        Q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t[k];i!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(f[a[i].m]==<span class=\"number\">0</span>&amp;&amp;a[i].r!=<span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                f[a[i].m]=f[k]+<span class=\"number\">1</span>;</span><br><span class=\"line\">                Q.<span class=\"built_in\">push</span>(a[i].m);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> f[s2]!=<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> x,ll r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x==s2) <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">    ll s=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t0[x];i!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        t0[x]=i;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(f[a[i].m]==f[x]+<span class=\"number\">1</span>&amp;&amp;a[i].r!=<span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> z=<span class=\"built_in\">dfs</span>(a[i].m,<span class=\"built_in\">min</span>(r,a[i].r));</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(z!=<span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                a[i].r-=z;</span><br><span class=\"line\">                a[i^<span class=\"number\">1</span>].r+=z;</span><br><span class=\"line\">                r-=z;</span><br><span class=\"line\">                s+=z;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> f[a[i].m]=<span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(r==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> s; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">    s1=n*n+<span class=\"number\">1</span>;</span><br><span class=\"line\">    s2=n*n+<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=n;++j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">char</span> c=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(c==<span class=\"string\">&#x27;1&#x27;</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            ++m;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>((i+j)&amp;<span class=\"number\">1</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">road</span>(s1,<span class=\"built_in\">sum</span>(i,j),<span class=\"number\">1</span>);</span><br><span class=\"line\">                <span class=\"built_in\">road</span>(<span class=\"built_in\">sum</span>(i,j),s1,<span class=\"number\">0</span>);</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"type\">int</span> k=<span class=\"number\">0</span>;k&lt;=<span class=\"number\">7</span>;++k)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(<span class=\"built_in\">check</span>(i+dx[k],j+dy[k]))</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"built_in\">road</span>(<span class=\"built_in\">sum</span>(i,j),<span class=\"built_in\">sum</span>(i+dx[k],j+dy[k]),<span class=\"number\">1e18</span>);</span><br><span class=\"line\">                        <span class=\"built_in\">road</span>(<span class=\"built_in\">sum</span>(i+dx[k],j+dy[k]),<span class=\"built_in\">sum</span>(i,j),<span class=\"number\">0</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">road</span>(<span class=\"built_in\">sum</span>(i,j),s2,<span class=\"number\">1</span>);</span><br><span class=\"line\">                <span class=\"built_in\">road</span>(s2,<span class=\"built_in\">sum</span>(i,j),<span class=\"number\">0</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ll r=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">bfs</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=s2;++i) t0[i]=t[i];</span><br><span class=\"line\">        r+=<span class=\"built_in\">dfs</span>(s1,<span class=\"number\">1e18</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld&quot;</span>,m-r);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://www.luogu.com.cn/problem/P4304\">P4304 [TJOI2013]攻击装置</a></p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>同 P3355，双倍经验。</p>\n<h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> ll;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">50001</span>,M=<span class=\"number\">2000001</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m,p=<span class=\"number\">1</span>,s1,s2,t[N],t0[N],f[N];</span><br><span class=\"line\"><span class=\"type\">short</span> dx[<span class=\"number\">8</span>]=&#123;<span class=\"number\">-2</span>,<span class=\"number\">-1</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">-1</span>,<span class=\"number\">-2</span>&#125;,dy[<span class=\"number\">8</span>]=&#123;<span class=\"number\">-1</span>,<span class=\"number\">-2</span>,<span class=\"number\">-2</span>,<span class=\"number\">-1</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">str</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> m,q;</span><br><span class=\"line\">    ll r;</span><br><span class=\"line\">&#125;a[M];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">check</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x&gt;=<span class=\"number\">1</span>&amp;&amp;x&lt;=n&amp;&amp;y&gt;=<span class=\"number\">1</span>&amp;&amp;y&lt;=n;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">sum</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (x<span class=\"number\">-1</span>)*n+y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">road</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y,ll r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    a[++p].m=y;</span><br><span class=\"line\">    a[p].q=t[x];</span><br><span class=\"line\">    t[x]=p;</span><br><span class=\"line\">    a[p].r=r;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">bfs</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    queue&lt;<span class=\"type\">int</span>&gt; Q;</span><br><span class=\"line\">    Q.<span class=\"built_in\">push</span>(s1);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=s2;++i) f[i]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    f[s1]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!Q.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> k=Q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">        Q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t[k];i!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(f[a[i].m]==<span class=\"number\">0</span>&amp;&amp;a[i].r!=<span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                f[a[i].m]=f[k]+<span class=\"number\">1</span>;</span><br><span class=\"line\">                Q.<span class=\"built_in\">push</span>(a[i].m);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> f[s2]!=<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> x,ll r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x==s2) <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">    ll s=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t0[x];i!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        t0[x]=i;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(f[a[i].m]==f[x]+<span class=\"number\">1</span>&amp;&amp;a[i].r!=<span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> z=<span class=\"built_in\">dfs</span>(a[i].m,<span class=\"built_in\">min</span>(r,a[i].r));</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(z!=<span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                a[i].r-=z;</span><br><span class=\"line\">                a[i^<span class=\"number\">1</span>].r+=z;</span><br><span class=\"line\">                r-=z;</span><br><span class=\"line\">                s+=z;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> f[a[i].m]=<span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(r==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> s; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">    s1=n*n+<span class=\"number\">1</span>;</span><br><span class=\"line\">    s2=n*n+<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=n;++j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">char</span> c=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(c==<span class=\"string\">&#x27;1&#x27;</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            ++m;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>((i+j)&amp;<span class=\"number\">1</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">road</span>(s1,<span class=\"built_in\">sum</span>(i,j),<span class=\"number\">1</span>);</span><br><span class=\"line\">                <span class=\"built_in\">road</span>(<span class=\"built_in\">sum</span>(i,j),s1,<span class=\"number\">0</span>);</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"type\">int</span> k=<span class=\"number\">0</span>;k&lt;=<span class=\"number\">7</span>;++k)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(<span class=\"built_in\">check</span>(i+dx[k],j+dy[k]))</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"built_in\">road</span>(<span class=\"built_in\">sum</span>(i,j),<span class=\"built_in\">sum</span>(i+dx[k],j+dy[k]),<span class=\"number\">1e18</span>);</span><br><span class=\"line\">                        <span class=\"built_in\">road</span>(<span class=\"built_in\">sum</span>(i+dx[k],j+dy[k]),<span class=\"built_in\">sum</span>(i,j),<span class=\"number\">0</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">road</span>(<span class=\"built_in\">sum</span>(i,j),s2,<span class=\"number\">1</span>);</span><br><span class=\"line\">                <span class=\"built_in\">road</span>(s2,<span class=\"built_in\">sum</span>(i,j),<span class=\"number\">0</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ll r=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">bfs</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=s2;++i) t0[i]=t[i];</span><br><span class=\"line\">        r+=<span class=\"built_in\">dfs</span>(s1,<span class=\"number\">1e18</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld&quot;</span>,m-r);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"P4360 [CEOI2004]锯木厂选址","date":"2022-04-05T01:39:38.000Z","description":" ","_content":"\n[P4360 [CEOI2004]锯木厂选址](https://www.luogu.com.cn/problem/P4360)\n## 分析\n这道题与仓库建设十分相似，只是不需要一定在 $n$ 处建立锯木厂。由于只有 $2$ 个锯木厂，我们只需要先预处理好第一个锯木厂的情况，再斜率优化求出第二个锯木厂。把前两个锯木厂放好后，枚举第二个锯木厂的位置再加上剩下的木材运到山脚下的费用取最小值即可。\n## code\n```cpp\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\ntypedef long long ll;\nconst int N=1000001;\nint n,Q[N*2],T=0,R=0;\nll a[N],b[N],c[N],f[N],g[N];\nll abc(int x,int y)\n{\n    if(a[x]==a[y]) return 1e18;\n    return ((g[x]+c[x])-(g[y]+c[y]))/(a[x]-a[y]);\n}\nint main()\n{\n    scanf(\"%d\",&n);\n    for(int i=1;i<=n;++i)\n    {\n        int x,y;\n        scanf(\"%d%d\",&x,&y);\n        a[i]=a[i-1]+x;\n        b[i+1]=b[i]+y;\n        c[i]=c[i-1]+x*b[i];\n        g[i]=b[i]*a[i]-c[i];\n    }\n    for(int i=1;i<=n;++i)\n    {\n        while(T<R&&abc(Q[T],Q[T+1])<b[i]) ++T;\n        f[i]=g[Q[T]]+b[i]*(a[i]-a[Q[T]])-(c[i]-c[Q[T]]);\n        while(T<R&&abc(Q[R],i)<abc(Q[R-1],Q[R])) --R;\n        Q[++R]=i;\n    }\n    ll s=1e18;\n    for(int i=1;i<=n;++i)\n    {\n        s=min(s,f[i]+b[n+1]*(a[n]-a[i])-(c[n]-c[i]));\n    }\n    printf(\"%lld\",s);\n    return 0;\n}\n```","source":"_posts/P4360-solution.md","raw":"---\ntitle: 'P4360 [CEOI2004]锯木厂选址'\ndate: 2022-04-05 09:39:38\ntags: [动态规划,单调队列,斜率优化dp]\ndescription: ' '\n---\n\n[P4360 [CEOI2004]锯木厂选址](https://www.luogu.com.cn/problem/P4360)\n## 分析\n这道题与仓库建设十分相似，只是不需要一定在 $n$ 处建立锯木厂。由于只有 $2$ 个锯木厂，我们只需要先预处理好第一个锯木厂的情况，再斜率优化求出第二个锯木厂。把前两个锯木厂放好后，枚举第二个锯木厂的位置再加上剩下的木材运到山脚下的费用取最小值即可。\n## code\n```cpp\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\ntypedef long long ll;\nconst int N=1000001;\nint n,Q[N*2],T=0,R=0;\nll a[N],b[N],c[N],f[N],g[N];\nll abc(int x,int y)\n{\n    if(a[x]==a[y]) return 1e18;\n    return ((g[x]+c[x])-(g[y]+c[y]))/(a[x]-a[y]);\n}\nint main()\n{\n    scanf(\"%d\",&n);\n    for(int i=1;i<=n;++i)\n    {\n        int x,y;\n        scanf(\"%d%d\",&x,&y);\n        a[i]=a[i-1]+x;\n        b[i+1]=b[i]+y;\n        c[i]=c[i-1]+x*b[i];\n        g[i]=b[i]*a[i]-c[i];\n    }\n    for(int i=1;i<=n;++i)\n    {\n        while(T<R&&abc(Q[T],Q[T+1])<b[i]) ++T;\n        f[i]=g[Q[T]]+b[i]*(a[i]-a[Q[T]])-(c[i]-c[Q[T]]);\n        while(T<R&&abc(Q[R],i)<abc(Q[R-1],Q[R])) --R;\n        Q[++R]=i;\n    }\n    ll s=1e18;\n    for(int i=1;i<=n;++i)\n    {\n        s=min(s,f[i]+b[n+1]*(a[n]-a[i])-(c[n]-c[i]));\n    }\n    printf(\"%lld\",s);\n    return 0;\n}\n```","slug":"P4360-solution","published":1,"updated":"2022-11-28T13:47:47.412Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cleid9281001n2sjf0p1ndnfg","content":"<p><a href=\"https://www.luogu.com.cn/problem/P4360\">P4360 [CEOI2004]锯木厂选址</a></p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>这道题与仓库建设十分相似，只是不需要一定在 $n$ 处建立锯木厂。由于只有 $2$ 个锯木厂，我们只需要先预处理好第一个锯木厂的情况，再斜率优化求出第二个锯木厂。把前两个锯木厂放好后，枚举第二个锯木厂的位置再加上剩下的木材运到山脚下的费用取最小值即可。</p>\n<h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> ll;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1000001</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> n,Q[N*<span class=\"number\">2</span>],T=<span class=\"number\">0</span>,R=<span class=\"number\">0</span>;</span><br><span class=\"line\">ll a[N],b[N],c[N],f[N],g[N];</span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">abc</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a[x]==a[y]) <span class=\"keyword\">return</span> <span class=\"number\">1e18</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ((g[x]+c[x])-(g[y]+c[y]))/(a[x]-a[y]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x,y;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;x,&amp;y);</span><br><span class=\"line\">        a[i]=a[i<span class=\"number\">-1</span>]+x;</span><br><span class=\"line\">        b[i+<span class=\"number\">1</span>]=b[i]+y;</span><br><span class=\"line\">        c[i]=c[i<span class=\"number\">-1</span>]+x*b[i];</span><br><span class=\"line\">        g[i]=b[i]*a[i]-c[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(T&lt;R&amp;&amp;<span class=\"built_in\">abc</span>(Q[T],Q[T+<span class=\"number\">1</span>])&lt;b[i]) ++T;</span><br><span class=\"line\">        f[i]=g[Q[T]]+b[i]*(a[i]-a[Q[T]])-(c[i]-c[Q[T]]);</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(T&lt;R&amp;&amp;<span class=\"built_in\">abc</span>(Q[R],i)&lt;<span class=\"built_in\">abc</span>(Q[R<span class=\"number\">-1</span>],Q[R])) --R;</span><br><span class=\"line\">        Q[++R]=i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ll s=<span class=\"number\">1e18</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        s=<span class=\"built_in\">min</span>(s,f[i]+b[n+<span class=\"number\">1</span>]*(a[n]-a[i])-(c[n]-c[i]));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld&quot;</span>,s);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://www.luogu.com.cn/problem/P4360\">P4360 [CEOI2004]锯木厂选址</a></p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>这道题与仓库建设十分相似，只是不需要一定在 $n$ 处建立锯木厂。由于只有 $2$ 个锯木厂，我们只需要先预处理好第一个锯木厂的情况，再斜率优化求出第二个锯木厂。把前两个锯木厂放好后，枚举第二个锯木厂的位置再加上剩下的木材运到山脚下的费用取最小值即可。</p>\n<h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> ll;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1000001</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> n,Q[N*<span class=\"number\">2</span>],T=<span class=\"number\">0</span>,R=<span class=\"number\">0</span>;</span><br><span class=\"line\">ll a[N],b[N],c[N],f[N],g[N];</span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">abc</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a[x]==a[y]) <span class=\"keyword\">return</span> <span class=\"number\">1e18</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ((g[x]+c[x])-(g[y]+c[y]))/(a[x]-a[y]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x,y;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;x,&amp;y);</span><br><span class=\"line\">        a[i]=a[i<span class=\"number\">-1</span>]+x;</span><br><span class=\"line\">        b[i+<span class=\"number\">1</span>]=b[i]+y;</span><br><span class=\"line\">        c[i]=c[i<span class=\"number\">-1</span>]+x*b[i];</span><br><span class=\"line\">        g[i]=b[i]*a[i]-c[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(T&lt;R&amp;&amp;<span class=\"built_in\">abc</span>(Q[T],Q[T+<span class=\"number\">1</span>])&lt;b[i]) ++T;</span><br><span class=\"line\">        f[i]=g[Q[T]]+b[i]*(a[i]-a[Q[T]])-(c[i]-c[Q[T]]);</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(T&lt;R&amp;&amp;<span class=\"built_in\">abc</span>(Q[R],i)&lt;<span class=\"built_in\">abc</span>(Q[R<span class=\"number\">-1</span>],Q[R])) --R;</span><br><span class=\"line\">        Q[++R]=i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ll s=<span class=\"number\">1e18</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        s=<span class=\"built_in\">min</span>(s,f[i]+b[n+<span class=\"number\">1</span>]*(a[n]-a[i])-(c[n]-c[i]));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld&quot;</span>,s);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"P5030 长脖子鹿放置","date":"2022-04-17T03:52:22.000Z","description":" ","_content":"\n[P5030 长脖子鹿放置](https://www.luogu.com.cn/problem/P5030)\n## 分析\n这道题和 P3355 很像，但是分组方法不一样。我们来看两个互相攻击的点有什么特点：$(x,y) \\Leftrightarrow (x+1,y+3)$，$(x,y) \\Leftrightarrow (x-1,y+3)$，$(x,y) \\Leftrightarrow (x-3,y+1)$，$\\cdots$。显然，任意两个相互攻击的点横纵坐标的奇偶性都不相同。这样我们只需要按横坐标的奇偶性分组即可，虽然可以分成 $4$ 组，但是没有必要，只要保证同一组内不相互攻击即可。\n## code\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<queue>\nusing namespace std;\ntypedef long long ll;\nconst int N=50001,M=2000001;\nint n,m,q,p=1,s1,s2,t[N],t0[N],f[N];\nshort dx[8]={-3,-1,1,3,3,1,-1,-3},dy[8]={-1,-3,-3,-1,1,3,3,1};\nbool b[N];\nstruct str\n{\n    int m,q;\n    ll r;\n}a[M];\nbool check(int x,int y)\n{\n    return x>=1&&x<=m&&y>=1&&y<=n;\n}\nint sum(int x,int y)\n{\n    return (x-1)*n+y;\n}\nvoid road(int x,int y,ll r)\n{\n    a[++p].m=y;\n    a[p].q=t[x];\n    t[x]=p;\n    a[p].r=r;\n}\nbool bfs()\n{\n    queue<int> Q;\n    Q.push(s1);\n    for(int i=1;i<=s2;++i) f[i]=0;\n    f[s1]=1;\n    while(!Q.empty())\n    {\n        int k=Q.front();\n        Q.pop();\n        for(int i=t[k];i!=0;i=a[i].q)\n        {\n            if(f[a[i].m]==0&&a[i].r!=0)\n            {\n                f[a[i].m]=f[k]+1;\n                Q.push(a[i].m);\n            }\n        }\n    }\n    return f[s2]!=0;\n}\nll dfs(int x,ll r)\n{\n    if(x==s2) return r;\n    ll s=0;\n    for(int i=t0[x];i!=0;i=a[i].q)\n    {\n        t0[x]=i;\n        if(f[a[i].m]==f[x]+1&&a[i].r!=0)\n        {\n            int z=dfs(a[i].m,min(r,a[i].r));\n            if(z!=0)\n            {\n                a[i].r-=z;\n                a[i^1].r+=z;\n                r-=z;\n                s+=z;\n            }\n            else f[a[i].m]=0;\n            if(r==0) return s; \n        }\n    }\n    return s;\n}\nint main()\n{\n    scanf(\"%d%d%d\",&m,&n,&q);\n    s1=m*n+1;\n    s2=m*n+2;\n    for(int i=1;i<=q;++i)\n    {\n        int x,y;\n        scanf(\"%d%d\",&x,&y);\n        if(b[sum(x,y)]==true) --i,--q;\n        b[sum(x,y)]=true;\n    }\n    for(int i=1;i<=m;++i)\n    {\n        for(int j=1;j<=n;++j)\n        {\n            if(b[sum(i,j)]==true) continue;\n            if(i&1)\n            {\n                road(s1,sum(i,j),1);\n                road(sum(i,j),s1,0);\n                for(int k=0;k<=7;++k)\n                {\n                    if(check(i+dx[k],j+dy[k]))\n                    {\n                        road(sum(i,j),sum(i+dx[k],j+dy[k]),1e18);\n                        road(sum(i+dx[k],j+dy[k]),sum(i,j),0);\n                    }\n                }\n            }\n            else\n            {\n                road(sum(i,j),s2,1);\n                road(s2,sum(i,j),0);\n            }\n        }\n    }\n    ll r=0;\n    while(bfs())\n    {\n        for(int i=1;i<=s2;++i) t0[i]=t[i];\n        r+=dfs(s1,1e18);\n    }\n    printf(\"%lld\",m*n-q-r);\n    return 0;\n}\n```","source":"_posts/P5030-solution.md","raw":"---\ntitle: 'P5030 长脖子鹿放置'\ndate: 2022-04-17 11:52:22\ntags: [网络流,最大流]\ndescription: ' '\n---\n\n[P5030 长脖子鹿放置](https://www.luogu.com.cn/problem/P5030)\n## 分析\n这道题和 P3355 很像，但是分组方法不一样。我们来看两个互相攻击的点有什么特点：$(x,y) \\Leftrightarrow (x+1,y+3)$，$(x,y) \\Leftrightarrow (x-1,y+3)$，$(x,y) \\Leftrightarrow (x-3,y+1)$，$\\cdots$。显然，任意两个相互攻击的点横纵坐标的奇偶性都不相同。这样我们只需要按横坐标的奇偶性分组即可，虽然可以分成 $4$ 组，但是没有必要，只要保证同一组内不相互攻击即可。\n## code\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<queue>\nusing namespace std;\ntypedef long long ll;\nconst int N=50001,M=2000001;\nint n,m,q,p=1,s1,s2,t[N],t0[N],f[N];\nshort dx[8]={-3,-1,1,3,3,1,-1,-3},dy[8]={-1,-3,-3,-1,1,3,3,1};\nbool b[N];\nstruct str\n{\n    int m,q;\n    ll r;\n}a[M];\nbool check(int x,int y)\n{\n    return x>=1&&x<=m&&y>=1&&y<=n;\n}\nint sum(int x,int y)\n{\n    return (x-1)*n+y;\n}\nvoid road(int x,int y,ll r)\n{\n    a[++p].m=y;\n    a[p].q=t[x];\n    t[x]=p;\n    a[p].r=r;\n}\nbool bfs()\n{\n    queue<int> Q;\n    Q.push(s1);\n    for(int i=1;i<=s2;++i) f[i]=0;\n    f[s1]=1;\n    while(!Q.empty())\n    {\n        int k=Q.front();\n        Q.pop();\n        for(int i=t[k];i!=0;i=a[i].q)\n        {\n            if(f[a[i].m]==0&&a[i].r!=0)\n            {\n                f[a[i].m]=f[k]+1;\n                Q.push(a[i].m);\n            }\n        }\n    }\n    return f[s2]!=0;\n}\nll dfs(int x,ll r)\n{\n    if(x==s2) return r;\n    ll s=0;\n    for(int i=t0[x];i!=0;i=a[i].q)\n    {\n        t0[x]=i;\n        if(f[a[i].m]==f[x]+1&&a[i].r!=0)\n        {\n            int z=dfs(a[i].m,min(r,a[i].r));\n            if(z!=0)\n            {\n                a[i].r-=z;\n                a[i^1].r+=z;\n                r-=z;\n                s+=z;\n            }\n            else f[a[i].m]=0;\n            if(r==0) return s; \n        }\n    }\n    return s;\n}\nint main()\n{\n    scanf(\"%d%d%d\",&m,&n,&q);\n    s1=m*n+1;\n    s2=m*n+2;\n    for(int i=1;i<=q;++i)\n    {\n        int x,y;\n        scanf(\"%d%d\",&x,&y);\n        if(b[sum(x,y)]==true) --i,--q;\n        b[sum(x,y)]=true;\n    }\n    for(int i=1;i<=m;++i)\n    {\n        for(int j=1;j<=n;++j)\n        {\n            if(b[sum(i,j)]==true) continue;\n            if(i&1)\n            {\n                road(s1,sum(i,j),1);\n                road(sum(i,j),s1,0);\n                for(int k=0;k<=7;++k)\n                {\n                    if(check(i+dx[k],j+dy[k]))\n                    {\n                        road(sum(i,j),sum(i+dx[k],j+dy[k]),1e18);\n                        road(sum(i+dx[k],j+dy[k]),sum(i,j),0);\n                    }\n                }\n            }\n            else\n            {\n                road(sum(i,j),s2,1);\n                road(s2,sum(i,j),0);\n            }\n        }\n    }\n    ll r=0;\n    while(bfs())\n    {\n        for(int i=1;i<=s2;++i) t0[i]=t[i];\n        r+=dfs(s1,1e18);\n    }\n    printf(\"%lld\",m*n-q-r);\n    return 0;\n}\n```","slug":"P5030-solution","published":1,"updated":"2022-11-28T13:47:47.412Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cleid9282001p2sjf6ym1fji2","content":"<p><a href=\"https://www.luogu.com.cn/problem/P5030\">P5030 长脖子鹿放置</a></p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>这道题和 P3355 很像，但是分组方法不一样。我们来看两个互相攻击的点有什么特点：$(x,y) \\Leftrightarrow (x+1,y+3)$，$(x,y) \\Leftrightarrow (x-1,y+3)$，$(x,y) \\Leftrightarrow (x-3,y+1)$，$\\cdots$。显然，任意两个相互攻击的点横纵坐标的奇偶性都不相同。这样我们只需要按横坐标的奇偶性分组即可，虽然可以分成 $4$ 组，但是没有必要，只要保证同一组内不相互攻击即可。</p>\n<h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> ll;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">50001</span>,M=<span class=\"number\">2000001</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m,q,p=<span class=\"number\">1</span>,s1,s2,t[N],t0[N],f[N];</span><br><span class=\"line\"><span class=\"type\">short</span> dx[<span class=\"number\">8</span>]=&#123;<span class=\"number\">-3</span>,<span class=\"number\">-1</span>,<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">-1</span>,<span class=\"number\">-3</span>&#125;,dy[<span class=\"number\">8</span>]=&#123;<span class=\"number\">-1</span>,<span class=\"number\">-3</span>,<span class=\"number\">-3</span>,<span class=\"number\">-1</span>,<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">3</span>,<span class=\"number\">1</span>&#125;;</span><br><span class=\"line\"><span class=\"type\">bool</span> b[N];</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">str</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> m,q;</span><br><span class=\"line\">    ll r;</span><br><span class=\"line\">&#125;a[M];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">check</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x&gt;=<span class=\"number\">1</span>&amp;&amp;x&lt;=m&amp;&amp;y&gt;=<span class=\"number\">1</span>&amp;&amp;y&lt;=n;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">sum</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (x<span class=\"number\">-1</span>)*n+y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">road</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y,ll r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    a[++p].m=y;</span><br><span class=\"line\">    a[p].q=t[x];</span><br><span class=\"line\">    t[x]=p;</span><br><span class=\"line\">    a[p].r=r;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">bfs</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    queue&lt;<span class=\"type\">int</span>&gt; Q;</span><br><span class=\"line\">    Q.<span class=\"built_in\">push</span>(s1);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=s2;++i) f[i]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    f[s1]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!Q.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> k=Q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">        Q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t[k];i!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(f[a[i].m]==<span class=\"number\">0</span>&amp;&amp;a[i].r!=<span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                f[a[i].m]=f[k]+<span class=\"number\">1</span>;</span><br><span class=\"line\">                Q.<span class=\"built_in\">push</span>(a[i].m);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> f[s2]!=<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> x,ll r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x==s2) <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">    ll s=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t0[x];i!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        t0[x]=i;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(f[a[i].m]==f[x]+<span class=\"number\">1</span>&amp;&amp;a[i].r!=<span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> z=<span class=\"built_in\">dfs</span>(a[i].m,<span class=\"built_in\">min</span>(r,a[i].r));</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(z!=<span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                a[i].r-=z;</span><br><span class=\"line\">                a[i^<span class=\"number\">1</span>].r+=z;</span><br><span class=\"line\">                r-=z;</span><br><span class=\"line\">                s+=z;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> f[a[i].m]=<span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(r==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> s; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>,&amp;m,&amp;n,&amp;q);</span><br><span class=\"line\">    s1=m*n+<span class=\"number\">1</span>;</span><br><span class=\"line\">    s2=m*n+<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=q;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x,y;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;x,&amp;y);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(b[<span class=\"built_in\">sum</span>(x,y)]==<span class=\"literal\">true</span>) --i,--q;</span><br><span class=\"line\">        b[<span class=\"built_in\">sum</span>(x,y)]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=n;++j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(b[<span class=\"built_in\">sum</span>(i,j)]==<span class=\"literal\">true</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i&amp;<span class=\"number\">1</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">road</span>(s1,<span class=\"built_in\">sum</span>(i,j),<span class=\"number\">1</span>);</span><br><span class=\"line\">                <span class=\"built_in\">road</span>(<span class=\"built_in\">sum</span>(i,j),s1,<span class=\"number\">0</span>);</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"type\">int</span> k=<span class=\"number\">0</span>;k&lt;=<span class=\"number\">7</span>;++k)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(<span class=\"built_in\">check</span>(i+dx[k],j+dy[k]))</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"built_in\">road</span>(<span class=\"built_in\">sum</span>(i,j),<span class=\"built_in\">sum</span>(i+dx[k],j+dy[k]),<span class=\"number\">1e18</span>);</span><br><span class=\"line\">                        <span class=\"built_in\">road</span>(<span class=\"built_in\">sum</span>(i+dx[k],j+dy[k]),<span class=\"built_in\">sum</span>(i,j),<span class=\"number\">0</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">road</span>(<span class=\"built_in\">sum</span>(i,j),s2,<span class=\"number\">1</span>);</span><br><span class=\"line\">                <span class=\"built_in\">road</span>(s2,<span class=\"built_in\">sum</span>(i,j),<span class=\"number\">0</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ll r=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">bfs</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=s2;++i) t0[i]=t[i];</span><br><span class=\"line\">        r+=<span class=\"built_in\">dfs</span>(s1,<span class=\"number\">1e18</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld&quot;</span>,m*n-q-r);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://www.luogu.com.cn/problem/P5030\">P5030 长脖子鹿放置</a></p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>这道题和 P3355 很像，但是分组方法不一样。我们来看两个互相攻击的点有什么特点：$(x,y) \\Leftrightarrow (x+1,y+3)$，$(x,y) \\Leftrightarrow (x-1,y+3)$，$(x,y) \\Leftrightarrow (x-3,y+1)$，$\\cdots$。显然，任意两个相互攻击的点横纵坐标的奇偶性都不相同。这样我们只需要按横坐标的奇偶性分组即可，虽然可以分成 $4$ 组，但是没有必要，只要保证同一组内不相互攻击即可。</p>\n<h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> ll;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">50001</span>,M=<span class=\"number\">2000001</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m,q,p=<span class=\"number\">1</span>,s1,s2,t[N],t0[N],f[N];</span><br><span class=\"line\"><span class=\"type\">short</span> dx[<span class=\"number\">8</span>]=&#123;<span class=\"number\">-3</span>,<span class=\"number\">-1</span>,<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">-1</span>,<span class=\"number\">-3</span>&#125;,dy[<span class=\"number\">8</span>]=&#123;<span class=\"number\">-1</span>,<span class=\"number\">-3</span>,<span class=\"number\">-3</span>,<span class=\"number\">-1</span>,<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">3</span>,<span class=\"number\">1</span>&#125;;</span><br><span class=\"line\"><span class=\"type\">bool</span> b[N];</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">str</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> m,q;</span><br><span class=\"line\">    ll r;</span><br><span class=\"line\">&#125;a[M];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">check</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x&gt;=<span class=\"number\">1</span>&amp;&amp;x&lt;=m&amp;&amp;y&gt;=<span class=\"number\">1</span>&amp;&amp;y&lt;=n;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">sum</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (x<span class=\"number\">-1</span>)*n+y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">road</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y,ll r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    a[++p].m=y;</span><br><span class=\"line\">    a[p].q=t[x];</span><br><span class=\"line\">    t[x]=p;</span><br><span class=\"line\">    a[p].r=r;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">bfs</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    queue&lt;<span class=\"type\">int</span>&gt; Q;</span><br><span class=\"line\">    Q.<span class=\"built_in\">push</span>(s1);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=s2;++i) f[i]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    f[s1]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!Q.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> k=Q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">        Q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t[k];i!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(f[a[i].m]==<span class=\"number\">0</span>&amp;&amp;a[i].r!=<span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                f[a[i].m]=f[k]+<span class=\"number\">1</span>;</span><br><span class=\"line\">                Q.<span class=\"built_in\">push</span>(a[i].m);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> f[s2]!=<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> x,ll r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x==s2) <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">    ll s=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t0[x];i!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        t0[x]=i;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(f[a[i].m]==f[x]+<span class=\"number\">1</span>&amp;&amp;a[i].r!=<span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> z=<span class=\"built_in\">dfs</span>(a[i].m,<span class=\"built_in\">min</span>(r,a[i].r));</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(z!=<span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                a[i].r-=z;</span><br><span class=\"line\">                a[i^<span class=\"number\">1</span>].r+=z;</span><br><span class=\"line\">                r-=z;</span><br><span class=\"line\">                s+=z;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> f[a[i].m]=<span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(r==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> s; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>,&amp;m,&amp;n,&amp;q);</span><br><span class=\"line\">    s1=m*n+<span class=\"number\">1</span>;</span><br><span class=\"line\">    s2=m*n+<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=q;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x,y;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;x,&amp;y);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(b[<span class=\"built_in\">sum</span>(x,y)]==<span class=\"literal\">true</span>) --i,--q;</span><br><span class=\"line\">        b[<span class=\"built_in\">sum</span>(x,y)]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=n;++j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(b[<span class=\"built_in\">sum</span>(i,j)]==<span class=\"literal\">true</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i&amp;<span class=\"number\">1</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">road</span>(s1,<span class=\"built_in\">sum</span>(i,j),<span class=\"number\">1</span>);</span><br><span class=\"line\">                <span class=\"built_in\">road</span>(<span class=\"built_in\">sum</span>(i,j),s1,<span class=\"number\">0</span>);</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"type\">int</span> k=<span class=\"number\">0</span>;k&lt;=<span class=\"number\">7</span>;++k)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(<span class=\"built_in\">check</span>(i+dx[k],j+dy[k]))</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"built_in\">road</span>(<span class=\"built_in\">sum</span>(i,j),<span class=\"built_in\">sum</span>(i+dx[k],j+dy[k]),<span class=\"number\">1e18</span>);</span><br><span class=\"line\">                        <span class=\"built_in\">road</span>(<span class=\"built_in\">sum</span>(i+dx[k],j+dy[k]),<span class=\"built_in\">sum</span>(i,j),<span class=\"number\">0</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">road</span>(<span class=\"built_in\">sum</span>(i,j),s2,<span class=\"number\">1</span>);</span><br><span class=\"line\">                <span class=\"built_in\">road</span>(s2,<span class=\"built_in\">sum</span>(i,j),<span class=\"number\">0</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ll r=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">bfs</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=s2;++i) t0[i]=t[i];</span><br><span class=\"line\">        r+=<span class=\"built_in\">dfs</span>(s1,<span class=\"number\">1e18</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld&quot;</span>,m*n-q-r);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"P5785 [SDOI2012]任务安排","date":"2022-04-05T01:15:30.000Z","description":" ","_content":"\n[P5785 [SDOI2012]任务安排](https://www.luogu.com.cn/problem/P5785)\n## 分析\n这道题和往常的斜率优化 dp 不太一样。我们设计的状态要做到一维，就只能储存当前处理到了哪个任务，已经分了多少批就无法储存，但是处理的批数不同会导致启动时间不同，会对后面的 dp 产生影响。这里有一个非常巧妙的方法，我们知道后面所有任务的费用系数，就可以把启动时间对后面所有任务的影响提前计算，也就是在费用中加上 $s \\times (b[n]-b[j])$，其中 $a$ 是完成所需时间的前缀和，$b$ 是费用系数的前缀和。于是我们可以得到转移方程：\n$$f[i]=f[j]+a[i] \\times (b[i]-b[j])+s \\times (b[n]-b[j])$$\n$$f[j]-s \\times b[j]=a[i] \\times b[j]+f[i]-a[i] \\times b[i]-s \\times b[n]$$\n但是还有一个问题，数据范围中写道 $|T_i| \\leqslant 2^8$，什么意思，说明 $T_i$ 可能是负的，也就是 $a$ 不单调。所以我们就不能用单调队列了，需要每一次在队列中二分查找，直到前一条线段斜率比它小，后一条线段斜率大于等于它。我们还是需要维护整个队列的“下凸性”，如果队尾存在“上凸”，还是要将队尾出队。\n## code\n```cpp\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\ntypedef long long ll;\nconst int N=300001;\nint n,m,Q[N*2],T=0,R=0;\nll a[N],b[N],f[N];\nll abc(int x,int y)\n{\n    if(b[x]==b[y]) return 1e18;\n    return ((f[x]-m*b[x])-(f[y]-m*b[y]))/(b[x]-b[y]);\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n;++i)\n    {\n        int x,y;\n        scanf(\"%d%d\",&x,&y);\n        a[i]=a[i-1]+x;\n        b[i]=b[i-1]+y;\n    }\n    Q[++R]=0;\n    for(int i=1;i<=n;++i)\n    {\n        int l=T,r=R;\n        while(l<r)\n        {\n            int z=l+r>>1;\n            if(abc(Q[z],Q[z+1])<a[i]) l=z+1;\n            else if(abc(Q[z],Q[z+1])>a[i]) r=z;\n            else\n            {\n                l=z;\n                break;\n            }\n        }\n        f[i]=f[Q[l]]+a[i]*(b[i]-b[Q[l]])+m*(b[n]-b[Q[l]]);\n        while(T<R&&abc(Q[R],i)<abc(Q[R-1],Q[R])) --R;\n        Q[++R]=i;\n    }\n    printf(\"%lld\",f[n]);\n    return 0;\n}\n```","source":"_posts/P5785-solution.md","raw":"---\ntitle: 'P5785 [SDOI2012]任务安排'\ndate: 2022-04-05 09:15:30\ntags: [动态规划,斜率优化dp]\ndescription: ' '\n---\n\n[P5785 [SDOI2012]任务安排](https://www.luogu.com.cn/problem/P5785)\n## 分析\n这道题和往常的斜率优化 dp 不太一样。我们设计的状态要做到一维，就只能储存当前处理到了哪个任务，已经分了多少批就无法储存，但是处理的批数不同会导致启动时间不同，会对后面的 dp 产生影响。这里有一个非常巧妙的方法，我们知道后面所有任务的费用系数，就可以把启动时间对后面所有任务的影响提前计算，也就是在费用中加上 $s \\times (b[n]-b[j])$，其中 $a$ 是完成所需时间的前缀和，$b$ 是费用系数的前缀和。于是我们可以得到转移方程：\n$$f[i]=f[j]+a[i] \\times (b[i]-b[j])+s \\times (b[n]-b[j])$$\n$$f[j]-s \\times b[j]=a[i] \\times b[j]+f[i]-a[i] \\times b[i]-s \\times b[n]$$\n但是还有一个问题，数据范围中写道 $|T_i| \\leqslant 2^8$，什么意思，说明 $T_i$ 可能是负的，也就是 $a$ 不单调。所以我们就不能用单调队列了，需要每一次在队列中二分查找，直到前一条线段斜率比它小，后一条线段斜率大于等于它。我们还是需要维护整个队列的“下凸性”，如果队尾存在“上凸”，还是要将队尾出队。\n## code\n```cpp\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\ntypedef long long ll;\nconst int N=300001;\nint n,m,Q[N*2],T=0,R=0;\nll a[N],b[N],f[N];\nll abc(int x,int y)\n{\n    if(b[x]==b[y]) return 1e18;\n    return ((f[x]-m*b[x])-(f[y]-m*b[y]))/(b[x]-b[y]);\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n;++i)\n    {\n        int x,y;\n        scanf(\"%d%d\",&x,&y);\n        a[i]=a[i-1]+x;\n        b[i]=b[i-1]+y;\n    }\n    Q[++R]=0;\n    for(int i=1;i<=n;++i)\n    {\n        int l=T,r=R;\n        while(l<r)\n        {\n            int z=l+r>>1;\n            if(abc(Q[z],Q[z+1])<a[i]) l=z+1;\n            else if(abc(Q[z],Q[z+1])>a[i]) r=z;\n            else\n            {\n                l=z;\n                break;\n            }\n        }\n        f[i]=f[Q[l]]+a[i]*(b[i]-b[Q[l]])+m*(b[n]-b[Q[l]]);\n        while(T<R&&abc(Q[R],i)<abc(Q[R-1],Q[R])) --R;\n        Q[++R]=i;\n    }\n    printf(\"%lld\",f[n]);\n    return 0;\n}\n```","slug":"P5785-solution","published":1,"updated":"2022-11-28T13:47:47.412Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cleid9282001s2sjfhn2n4dvm","content":"<p><a href=\"https://www.luogu.com.cn/problem/P5785\">P5785 [SDOI2012]任务安排</a></p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>这道题和往常的斜率优化 dp 不太一样。我们设计的状态要做到一维，就只能储存当前处理到了哪个任务，已经分了多少批就无法储存，但是处理的批数不同会导致启动时间不同，会对后面的 dp 产生影响。这里有一个非常巧妙的方法，我们知道后面所有任务的费用系数，就可以把启动时间对后面所有任务的影响提前计算，也就是在费用中加上 $s \\times (b[n]-b[j])$，其中 $a$ 是完成所需时间的前缀和，$b$ 是费用系数的前缀和。于是我们可以得到转移方程：<br>$$f[i]&#x3D;f[j]+a[i] \\times (b[i]-b[j])+s \\times (b[n]-b[j])$$<br>$$f[j]-s \\times b[j]&#x3D;a[i] \\times b[j]+f[i]-a[i] \\times b[i]-s \\times b[n]$$<br>但是还有一个问题，数据范围中写道 $|T_i| \\leqslant 2^8$，什么意思，说明 $T_i$ 可能是负的，也就是 $a$ 不单调。所以我们就不能用单调队列了，需要每一次在队列中二分查找，直到前一条线段斜率比它小，后一条线段斜率大于等于它。我们还是需要维护整个队列的“下凸性”，如果队尾存在“上凸”，还是要将队尾出队。</p>\n<h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> ll;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">300001</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m,Q[N*<span class=\"number\">2</span>],T=<span class=\"number\">0</span>,R=<span class=\"number\">0</span>;</span><br><span class=\"line\">ll a[N],b[N],f[N];</span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">abc</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(b[x]==b[y]) <span class=\"keyword\">return</span> <span class=\"number\">1e18</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ((f[x]-m*b[x])-(f[y]-m*b[y]))/(b[x]-b[y]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x,y;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;x,&amp;y);</span><br><span class=\"line\">        a[i]=a[i<span class=\"number\">-1</span>]+x;</span><br><span class=\"line\">        b[i]=b[i<span class=\"number\">-1</span>]+y;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Q[++R]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> l=T,r=R;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(l&lt;r)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> z=l+r&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"built_in\">abc</span>(Q[z],Q[z+<span class=\"number\">1</span>])&lt;a[i]) l=z+<span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"built_in\">abc</span>(Q[z],Q[z+<span class=\"number\">1</span>])&gt;a[i]) r=z;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                l=z;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        f[i]=f[Q[l]]+a[i]*(b[i]-b[Q[l]])+m*(b[n]-b[Q[l]]);</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(T&lt;R&amp;&amp;<span class=\"built_in\">abc</span>(Q[R],i)&lt;<span class=\"built_in\">abc</span>(Q[R<span class=\"number\">-1</span>],Q[R])) --R;</span><br><span class=\"line\">        Q[++R]=i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld&quot;</span>,f[n]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://www.luogu.com.cn/problem/P5785\">P5785 [SDOI2012]任务安排</a></p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>这道题和往常的斜率优化 dp 不太一样。我们设计的状态要做到一维，就只能储存当前处理到了哪个任务，已经分了多少批就无法储存，但是处理的批数不同会导致启动时间不同，会对后面的 dp 产生影响。这里有一个非常巧妙的方法，我们知道后面所有任务的费用系数，就可以把启动时间对后面所有任务的影响提前计算，也就是在费用中加上 $s \\times (b[n]-b[j])$，其中 $a$ 是完成所需时间的前缀和，$b$ 是费用系数的前缀和。于是我们可以得到转移方程：<br>$$f[i]&#x3D;f[j]+a[i] \\times (b[i]-b[j])+s \\times (b[n]-b[j])$$<br>$$f[j]-s \\times b[j]&#x3D;a[i] \\times b[j]+f[i]-a[i] \\times b[i]-s \\times b[n]$$<br>但是还有一个问题，数据范围中写道 $|T_i| \\leqslant 2^8$，什么意思，说明 $T_i$ 可能是负的，也就是 $a$ 不单调。所以我们就不能用单调队列了，需要每一次在队列中二分查找，直到前一条线段斜率比它小，后一条线段斜率大于等于它。我们还是需要维护整个队列的“下凸性”，如果队尾存在“上凸”，还是要将队尾出队。</p>\n<h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> ll;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">300001</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m,Q[N*<span class=\"number\">2</span>],T=<span class=\"number\">0</span>,R=<span class=\"number\">0</span>;</span><br><span class=\"line\">ll a[N],b[N],f[N];</span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">abc</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(b[x]==b[y]) <span class=\"keyword\">return</span> <span class=\"number\">1e18</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ((f[x]-m*b[x])-(f[y]-m*b[y]))/(b[x]-b[y]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x,y;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;x,&amp;y);</span><br><span class=\"line\">        a[i]=a[i<span class=\"number\">-1</span>]+x;</span><br><span class=\"line\">        b[i]=b[i<span class=\"number\">-1</span>]+y;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Q[++R]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> l=T,r=R;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(l&lt;r)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> z=l+r&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"built_in\">abc</span>(Q[z],Q[z+<span class=\"number\">1</span>])&lt;a[i]) l=z+<span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"built_in\">abc</span>(Q[z],Q[z+<span class=\"number\">1</span>])&gt;a[i]) r=z;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                l=z;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        f[i]=f[Q[l]]+a[i]*(b[i]-b[Q[l]])+m*(b[n]-b[Q[l]]);</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(T&lt;R&amp;&amp;<span class=\"built_in\">abc</span>(Q[R],i)&lt;<span class=\"built_in\">abc</span>(Q[R<span class=\"number\">-1</span>],Q[R])) --R;</span><br><span class=\"line\">        Q[++R]=i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld&quot;</span>,f[n]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"[NOI Online 2022 提高组] 丹钓战","date":"2022-03-26T05:15:28.000Z","description":" ","_content":"\n[P8251 [NOI Online 2022 提高组] 丹钓战](https://www.luogu.com.cn/problem/P8251)\n这道题我的方法是**主席树**，请不了解主席树的同学移步这道题： [P3834 【模板】可持久化线段树 2](https://www.luogu.com.cn/problem/P3834)\n## 分析\n### 模拟入栈\n首先我们可以发现，这个栈的元素 $b_i$ 一定是单调下降的，如果要模拟入栈的操作，我们可以通过二分查找第一个比 $b_i$ 大的元素来模拟，可以在 $n\\log n$ 的复杂度内完成一次模拟。但是同时还要满足任意两个相邻元素的 $a$ 不同，我们只需要在找到第一个比 $b_i$ 大的元素后，弹出栈顶直到栈顶元素的 $a$ 与 $a_i$ 不相等。注意要首先把 $inf$ 入栈，防止越界。\n$b$ 代表 $b$ 序列，$c$ 代表栈。\n```cpp\nint l=0,r=t,z;\nwhile(l<r)\n {\n    z=(l+r+1)>>1;\n    if(b[i]<b[c[z]]) l=z;\n    else r=z-1;\n}\nwhile(a[c[l]]==a[i]) --l;\n```\n### 查询\n如果我们先把所有元素按顺序入栈，由于任意的 $[l,r]$ 都应该是 $[1,n]$ 的一部分，并且栈中的元素编号一定递减，所以 $\\forall [l,r]$，最终形成的栈一定是 $[1,r]$ 形成的栈的一部分，具体来说就是 $[1,r]$ 形成的栈去掉所有编号比 $l$ 小的元素。如果 $r$ 号元素想要在 $[l,r]$ 形成的栈中成为第一个，那么 $[1,r]$ 所形成的的栈中在 $r$ 之前的元素的编号必然都比 $l$ 小，只有这样前面所有元素才会被删去。所以用 $d$ 来储存每个数入栈后前一个元素的编号，那么 $[l,r]$ 中成功二元组的个数就是 $k \\in [l,r],d_k < l$ 成立的 $k$ 的个数。\n### 优化\n但是上面这种方法的复杂度为 $O(n\\times q)$ ，显然过不了。通过上面的分析，我们发现查询的实质是求 $d$ 中 $[l,r]$ 中小于 $l$ 的数的个数。有什么数据结构能实现？主席树！于是这道题就变成了主席树的板子题。然后，就没有然后了。\n## code\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<algorithm>\nusing namespace std;\nint read()\n{\n    char c=getchar();int x=0;bool f=0;\n    for(;!isdigit(c);c=getchar())f^=!(c^45);\n    for(;isdigit(c);c=getchar())x=(x<<1)+(x<<3)+(c^48);\n    if(f)x=-x;return x;\n}\nint n,m,p,t,a[500001],b[500001],c[500001],rt[500001];\nstruct tree\n{\n    int l,r,s;\n}T[30000001];\nvoid pushup(int x)\n{\n    T[x].s=T[T[x].l].s+T[T[x].r].s;\n}\nvoid build(int &x,int l,int r)\n{\n    x=++p;\n    if(l==r) return;\n    int z=l+r>>1;\n    build(T[x].l,l,z);\n    build(T[x].r,z+1,r);\n}\nvoid modify(int &x,int l,int r,int q)\n{\n    T[++p]=T[x];\n    ++T[p].s;\n    x=p;\n    if(l==r) return;\n    int z=l+r>>1;\n    if(q<=z) modify(T[x].l,l,z,q);\n    else modify(T[x].r,z+1,r,q);\n}\nint num(int x,int l,int r,int k)\n{\n    if(l==r) return 0;\n    int z=l+r>>1;\n    if(k==z) return T[T[x].l].s;\n    if(k<z) return num(T[x].l,l,z,k);\n    return T[T[x].l].s+num(T[x].r,z+1,r,k);\n}\nint main()\n{\n    freopen(\"stack.in\",\"r\",stdin);\n    freopen(\"stack.out\",\"w\",stdout);\n    n=read(),m=read();\n    for(int i=1;i<=n;++i) a[i]=read();\n    for(int i=1;i<=n;++i) b[i]=read();\n    a[0]=0;\n    b[0]=1e9;\n    c[0]=0;\n    build(rt[0],0,n);\n    for(int i=1;i<=n;++i)\n    {\n        int l=0,r=t,z;\n        while(l<r)\n        {\n            z=(l+r+1)>>1;\n            if(b[i]<b[c[z]]) l=z;\n            else r=z-1;\n        }\n        while(a[c[l]]==a[i]) --l;\n        t=l+1;\n        c[t]=i;\n        rt[i]=rt[i-1];\n        modify(rt[i],0,n,c[l]);\n    }\n    for(int i=1;i<=m;++i)\n    {\n        int l=read(),r=read();\n        printf(\"%d\\n\",num(rt[r],0,n,l-1)-num(rt[l-1],0,n,l-1));\n    }\n    return 0;\n}\n```","source":"_posts/P8251-solution.md","raw":"---\ntitle: '[NOI Online 2022 提高组] 丹钓战'\ndate: 2022-03-26 13:15:28\ntags: [可持续化线段树,主席树,NOIP]\ndescription: ' '\n---\n\n[P8251 [NOI Online 2022 提高组] 丹钓战](https://www.luogu.com.cn/problem/P8251)\n这道题我的方法是**主席树**，请不了解主席树的同学移步这道题： [P3834 【模板】可持久化线段树 2](https://www.luogu.com.cn/problem/P3834)\n## 分析\n### 模拟入栈\n首先我们可以发现，这个栈的元素 $b_i$ 一定是单调下降的，如果要模拟入栈的操作，我们可以通过二分查找第一个比 $b_i$ 大的元素来模拟，可以在 $n\\log n$ 的复杂度内完成一次模拟。但是同时还要满足任意两个相邻元素的 $a$ 不同，我们只需要在找到第一个比 $b_i$ 大的元素后，弹出栈顶直到栈顶元素的 $a$ 与 $a_i$ 不相等。注意要首先把 $inf$ 入栈，防止越界。\n$b$ 代表 $b$ 序列，$c$ 代表栈。\n```cpp\nint l=0,r=t,z;\nwhile(l<r)\n {\n    z=(l+r+1)>>1;\n    if(b[i]<b[c[z]]) l=z;\n    else r=z-1;\n}\nwhile(a[c[l]]==a[i]) --l;\n```\n### 查询\n如果我们先把所有元素按顺序入栈，由于任意的 $[l,r]$ 都应该是 $[1,n]$ 的一部分，并且栈中的元素编号一定递减，所以 $\\forall [l,r]$，最终形成的栈一定是 $[1,r]$ 形成的栈的一部分，具体来说就是 $[1,r]$ 形成的栈去掉所有编号比 $l$ 小的元素。如果 $r$ 号元素想要在 $[l,r]$ 形成的栈中成为第一个，那么 $[1,r]$ 所形成的的栈中在 $r$ 之前的元素的编号必然都比 $l$ 小，只有这样前面所有元素才会被删去。所以用 $d$ 来储存每个数入栈后前一个元素的编号，那么 $[l,r]$ 中成功二元组的个数就是 $k \\in [l,r],d_k < l$ 成立的 $k$ 的个数。\n### 优化\n但是上面这种方法的复杂度为 $O(n\\times q)$ ，显然过不了。通过上面的分析，我们发现查询的实质是求 $d$ 中 $[l,r]$ 中小于 $l$ 的数的个数。有什么数据结构能实现？主席树！于是这道题就变成了主席树的板子题。然后，就没有然后了。\n## code\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<algorithm>\nusing namespace std;\nint read()\n{\n    char c=getchar();int x=0;bool f=0;\n    for(;!isdigit(c);c=getchar())f^=!(c^45);\n    for(;isdigit(c);c=getchar())x=(x<<1)+(x<<3)+(c^48);\n    if(f)x=-x;return x;\n}\nint n,m,p,t,a[500001],b[500001],c[500001],rt[500001];\nstruct tree\n{\n    int l,r,s;\n}T[30000001];\nvoid pushup(int x)\n{\n    T[x].s=T[T[x].l].s+T[T[x].r].s;\n}\nvoid build(int &x,int l,int r)\n{\n    x=++p;\n    if(l==r) return;\n    int z=l+r>>1;\n    build(T[x].l,l,z);\n    build(T[x].r,z+1,r);\n}\nvoid modify(int &x,int l,int r,int q)\n{\n    T[++p]=T[x];\n    ++T[p].s;\n    x=p;\n    if(l==r) return;\n    int z=l+r>>1;\n    if(q<=z) modify(T[x].l,l,z,q);\n    else modify(T[x].r,z+1,r,q);\n}\nint num(int x,int l,int r,int k)\n{\n    if(l==r) return 0;\n    int z=l+r>>1;\n    if(k==z) return T[T[x].l].s;\n    if(k<z) return num(T[x].l,l,z,k);\n    return T[T[x].l].s+num(T[x].r,z+1,r,k);\n}\nint main()\n{\n    freopen(\"stack.in\",\"r\",stdin);\n    freopen(\"stack.out\",\"w\",stdout);\n    n=read(),m=read();\n    for(int i=1;i<=n;++i) a[i]=read();\n    for(int i=1;i<=n;++i) b[i]=read();\n    a[0]=0;\n    b[0]=1e9;\n    c[0]=0;\n    build(rt[0],0,n);\n    for(int i=1;i<=n;++i)\n    {\n        int l=0,r=t,z;\n        while(l<r)\n        {\n            z=(l+r+1)>>1;\n            if(b[i]<b[c[z]]) l=z;\n            else r=z-1;\n        }\n        while(a[c[l]]==a[i]) --l;\n        t=l+1;\n        c[t]=i;\n        rt[i]=rt[i-1];\n        modify(rt[i],0,n,c[l]);\n    }\n    for(int i=1;i<=m;++i)\n    {\n        int l=read(),r=read();\n        printf(\"%d\\n\",num(rt[r],0,n,l-1)-num(rt[l-1],0,n,l-1));\n    }\n    return 0;\n}\n```","slug":"P8251-solution","published":1,"updated":"2022-11-28T13:47:47.412Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cleid9283001u2sjf5me8ff6x","content":"<p><a href=\"https://www.luogu.com.cn/problem/P8251\">P8251 [NOI Online 2022 提高组] 丹钓战</a><br>这道题我的方法是<strong>主席树</strong>，请不了解主席树的同学移步这道题： <a href=\"https://www.luogu.com.cn/problem/P3834\">P3834 【模板】可持久化线段树 2</a></p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><h3 id=\"模拟入栈\"><a href=\"#模拟入栈\" class=\"headerlink\" title=\"模拟入栈\"></a>模拟入栈</h3><p>首先我们可以发现，这个栈的元素 $b_i$ 一定是单调下降的，如果要模拟入栈的操作，我们可以通过二分查找第一个比 $b_i$ 大的元素来模拟，可以在 $n\\log n$ 的复杂度内完成一次模拟。但是同时还要满足任意两个相邻元素的 $a$ 不同，我们只需要在找到第一个比 $b_i$ 大的元素后，弹出栈顶直到栈顶元素的 $a$ 与 $a_i$ 不相等。注意要首先把 $inf$ 入栈，防止越界。<br>$b$ 代表 $b$ 序列，$c$ 代表栈。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> l=<span class=\"number\">0</span>,r=t,z;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(l&lt;r)</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">    z=(l+r+<span class=\"number\">1</span>)&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(b[i]&lt;b[c[z]]) l=z;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> r=z<span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(a[c[l]]==a[i]) --l;</span><br></pre></td></tr></table></figure>\n<h3 id=\"查询\"><a href=\"#查询\" class=\"headerlink\" title=\"查询\"></a>查询</h3><p>如果我们先把所有元素按顺序入栈，由于任意的 $[l,r]$ 都应该是 $[1,n]$ 的一部分，并且栈中的元素编号一定递减，所以 $\\forall [l,r]$，最终形成的栈一定是 $[1,r]$ 形成的栈的一部分，具体来说就是 $[1,r]$ 形成的栈去掉所有编号比 $l$ 小的元素。如果 $r$ 号元素想要在 $[l,r]$ 形成的栈中成为第一个，那么 $[1,r]$ 所形成的的栈中在 $r$ 之前的元素的编号必然都比 $l$ 小，只有这样前面所有元素才会被删去。所以用 $d$ 来储存每个数入栈后前一个元素的编号，那么 $[l,r]$ 中成功二元组的个数就是 $k \\in [l,r],d_k &lt; l$ 成立的 $k$ 的个数。</p>\n<h3 id=\"优化\"><a href=\"#优化\" class=\"headerlink\" title=\"优化\"></a>优化</h3><p>但是上面这种方法的复杂度为 $O(n\\times q)$ ，显然过不了。通过上面的分析，我们发现查询的实质是求 $d$ 中 $[l,r]$ 中小于 $l$ 的数的个数。有什么数据结构能实现？主席树！于是这道题就变成了主席树的板子题。然后，就没有然后了。</p>\n<h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> c=<span class=\"built_in\">getchar</span>();<span class=\"type\">int</span> x=<span class=\"number\">0</span>;<span class=\"type\">bool</span> f=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;!<span class=\"built_in\">isdigit</span>(c);c=<span class=\"built_in\">getchar</span>())f^=!(c^<span class=\"number\">45</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;<span class=\"built_in\">isdigit</span>(c);c=<span class=\"built_in\">getchar</span>())x=(x&lt;&lt;<span class=\"number\">1</span>)+(x&lt;&lt;<span class=\"number\">3</span>)+(c^<span class=\"number\">48</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(f)x=-x;<span class=\"keyword\">return</span> x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m,p,t,a[<span class=\"number\">500001</span>],b[<span class=\"number\">500001</span>],c[<span class=\"number\">500001</span>],rt[<span class=\"number\">500001</span>];</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">tree</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> l,r,s;</span><br><span class=\"line\">&#125;T[<span class=\"number\">30000001</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pushup</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    T[x].s=T[T[x].l].s+T[T[x].r].s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"type\">int</span> &amp;x,<span class=\"type\">int</span> l,<span class=\"type\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    x=++p;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l==r) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> z=l+r&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(T[x].l,l,z);</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(T[x].r,z+<span class=\"number\">1</span>,r);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">modify</span><span class=\"params\">(<span class=\"type\">int</span> &amp;x,<span class=\"type\">int</span> l,<span class=\"type\">int</span> r,<span class=\"type\">int</span> q)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    T[++p]=T[x];</span><br><span class=\"line\">    ++T[p].s;</span><br><span class=\"line\">    x=p;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l==r) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> z=l+r&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(q&lt;=z) <span class=\"built_in\">modify</span>(T[x].l,l,z,q);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"built_in\">modify</span>(T[x].r,z+<span class=\"number\">1</span>,r,q);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">num</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> l,<span class=\"type\">int</span> r,<span class=\"type\">int</span> k)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l==r) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> z=l+r&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(k==z) <span class=\"keyword\">return</span> T[T[x].l].s;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(k&lt;z) <span class=\"keyword\">return</span> <span class=\"built_in\">num</span>(T[x].l,l,z,k);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> T[T[x].l].s+<span class=\"built_in\">num</span>(T[x].r,z+<span class=\"number\">1</span>,r,k);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;stack.in&quot;</span>,<span class=\"string\">&quot;r&quot;</span>,stdin);</span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;stack.out&quot;</span>,<span class=\"string\">&quot;w&quot;</span>,stdout);</span><br><span class=\"line\">    n=<span class=\"built_in\">read</span>(),m=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i) a[i]=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i) b[i]=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">    a[<span class=\"number\">0</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    b[<span class=\"number\">0</span>]=<span class=\"number\">1e9</span>;</span><br><span class=\"line\">    c[<span class=\"number\">0</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(rt[<span class=\"number\">0</span>],<span class=\"number\">0</span>,n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> l=<span class=\"number\">0</span>,r=t,z;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(l&lt;r)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            z=(l+r+<span class=\"number\">1</span>)&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(b[i]&lt;b[c[z]]) l=z;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> r=z<span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(a[c[l]]==a[i]) --l;</span><br><span class=\"line\">        t=l+<span class=\"number\">1</span>;</span><br><span class=\"line\">        c[t]=i;</span><br><span class=\"line\">        rt[i]=rt[i<span class=\"number\">-1</span>];</span><br><span class=\"line\">        <span class=\"built_in\">modify</span>(rt[i],<span class=\"number\">0</span>,n,c[l]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> l=<span class=\"built_in\">read</span>(),r=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,<span class=\"built_in\">num</span>(rt[r],<span class=\"number\">0</span>,n,l<span class=\"number\">-1</span>)-<span class=\"built_in\">num</span>(rt[l<span class=\"number\">-1</span>],<span class=\"number\">0</span>,n,l<span class=\"number\">-1</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://www.luogu.com.cn/problem/P8251\">P8251 [NOI Online 2022 提高组] 丹钓战</a><br>这道题我的方法是<strong>主席树</strong>，请不了解主席树的同学移步这道题： <a href=\"https://www.luogu.com.cn/problem/P3834\">P3834 【模板】可持久化线段树 2</a></p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><h3 id=\"模拟入栈\"><a href=\"#模拟入栈\" class=\"headerlink\" title=\"模拟入栈\"></a>模拟入栈</h3><p>首先我们可以发现，这个栈的元素 $b_i$ 一定是单调下降的，如果要模拟入栈的操作，我们可以通过二分查找第一个比 $b_i$ 大的元素来模拟，可以在 $n\\log n$ 的复杂度内完成一次模拟。但是同时还要满足任意两个相邻元素的 $a$ 不同，我们只需要在找到第一个比 $b_i$ 大的元素后，弹出栈顶直到栈顶元素的 $a$ 与 $a_i$ 不相等。注意要首先把 $inf$ 入栈，防止越界。<br>$b$ 代表 $b$ 序列，$c$ 代表栈。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> l=<span class=\"number\">0</span>,r=t,z;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(l&lt;r)</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">    z=(l+r+<span class=\"number\">1</span>)&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(b[i]&lt;b[c[z]]) l=z;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> r=z<span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(a[c[l]]==a[i]) --l;</span><br></pre></td></tr></table></figure>\n<h3 id=\"查询\"><a href=\"#查询\" class=\"headerlink\" title=\"查询\"></a>查询</h3><p>如果我们先把所有元素按顺序入栈，由于任意的 $[l,r]$ 都应该是 $[1,n]$ 的一部分，并且栈中的元素编号一定递减，所以 $\\forall [l,r]$，最终形成的栈一定是 $[1,r]$ 形成的栈的一部分，具体来说就是 $[1,r]$ 形成的栈去掉所有编号比 $l$ 小的元素。如果 $r$ 号元素想要在 $[l,r]$ 形成的栈中成为第一个，那么 $[1,r]$ 所形成的的栈中在 $r$ 之前的元素的编号必然都比 $l$ 小，只有这样前面所有元素才会被删去。所以用 $d$ 来储存每个数入栈后前一个元素的编号，那么 $[l,r]$ 中成功二元组的个数就是 $k \\in [l,r],d_k &lt; l$ 成立的 $k$ 的个数。</p>\n<h3 id=\"优化\"><a href=\"#优化\" class=\"headerlink\" title=\"优化\"></a>优化</h3><p>但是上面这种方法的复杂度为 $O(n\\times q)$ ，显然过不了。通过上面的分析，我们发现查询的实质是求 $d$ 中 $[l,r]$ 中小于 $l$ 的数的个数。有什么数据结构能实现？主席树！于是这道题就变成了主席树的板子题。然后，就没有然后了。</p>\n<h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> c=<span class=\"built_in\">getchar</span>();<span class=\"type\">int</span> x=<span class=\"number\">0</span>;<span class=\"type\">bool</span> f=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;!<span class=\"built_in\">isdigit</span>(c);c=<span class=\"built_in\">getchar</span>())f^=!(c^<span class=\"number\">45</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;<span class=\"built_in\">isdigit</span>(c);c=<span class=\"built_in\">getchar</span>())x=(x&lt;&lt;<span class=\"number\">1</span>)+(x&lt;&lt;<span class=\"number\">3</span>)+(c^<span class=\"number\">48</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(f)x=-x;<span class=\"keyword\">return</span> x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m,p,t,a[<span class=\"number\">500001</span>],b[<span class=\"number\">500001</span>],c[<span class=\"number\">500001</span>],rt[<span class=\"number\">500001</span>];</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">tree</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> l,r,s;</span><br><span class=\"line\">&#125;T[<span class=\"number\">30000001</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pushup</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    T[x].s=T[T[x].l].s+T[T[x].r].s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"type\">int</span> &amp;x,<span class=\"type\">int</span> l,<span class=\"type\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    x=++p;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l==r) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> z=l+r&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(T[x].l,l,z);</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(T[x].r,z+<span class=\"number\">1</span>,r);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">modify</span><span class=\"params\">(<span class=\"type\">int</span> &amp;x,<span class=\"type\">int</span> l,<span class=\"type\">int</span> r,<span class=\"type\">int</span> q)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    T[++p]=T[x];</span><br><span class=\"line\">    ++T[p].s;</span><br><span class=\"line\">    x=p;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l==r) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> z=l+r&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(q&lt;=z) <span class=\"built_in\">modify</span>(T[x].l,l,z,q);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"built_in\">modify</span>(T[x].r,z+<span class=\"number\">1</span>,r,q);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">num</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> l,<span class=\"type\">int</span> r,<span class=\"type\">int</span> k)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l==r) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> z=l+r&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(k==z) <span class=\"keyword\">return</span> T[T[x].l].s;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(k&lt;z) <span class=\"keyword\">return</span> <span class=\"built_in\">num</span>(T[x].l,l,z,k);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> T[T[x].l].s+<span class=\"built_in\">num</span>(T[x].r,z+<span class=\"number\">1</span>,r,k);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;stack.in&quot;</span>,<span class=\"string\">&quot;r&quot;</span>,stdin);</span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;stack.out&quot;</span>,<span class=\"string\">&quot;w&quot;</span>,stdout);</span><br><span class=\"line\">    n=<span class=\"built_in\">read</span>(),m=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i) a[i]=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i) b[i]=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">    a[<span class=\"number\">0</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    b[<span class=\"number\">0</span>]=<span class=\"number\">1e9</span>;</span><br><span class=\"line\">    c[<span class=\"number\">0</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(rt[<span class=\"number\">0</span>],<span class=\"number\">0</span>,n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> l=<span class=\"number\">0</span>,r=t,z;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(l&lt;r)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            z=(l+r+<span class=\"number\">1</span>)&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(b[i]&lt;b[c[z]]) l=z;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> r=z<span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(a[c[l]]==a[i]) --l;</span><br><span class=\"line\">        t=l+<span class=\"number\">1</span>;</span><br><span class=\"line\">        c[t]=i;</span><br><span class=\"line\">        rt[i]=rt[i<span class=\"number\">-1</span>];</span><br><span class=\"line\">        <span class=\"built_in\">modify</span>(rt[i],<span class=\"number\">0</span>,n,c[l]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> l=<span class=\"built_in\">read</span>(),r=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,<span class=\"built_in\">num</span>(rt[r],<span class=\"number\">0</span>,n,l<span class=\"number\">-1</span>)-<span class=\"built_in\">num</span>(rt[l<span class=\"number\">-1</span>],<span class=\"number\">0</span>,n,l<span class=\"number\">-1</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"P4638 [SHOI2011]银行家","date":"2022-03-08T05:27:00.000Z","description":" ","_content":"\n[P4638 [SHOI2011]银行家](https://www.luogu.com.cn/problem/P4638)\n## 分析\n这道题题目十分的冗杂，我们先来整理一下题意：一些客户要来银行取金币，如果 $i$ 个客户需要 $c_i$ 个金币，能打开的所有保险箱中金币总数多于 $c_i$ 就会取走对应的金币数，否则会全部取走，而且一个客户来取金币后就可以交换他打开的保险箱的金币，请问所有客户最多可以取走多少金币。\n这道题初看就可以发现是一道网络流的题，金币即为流。在每一个客户打开了几个保险箱之后就把这些保险箱合并成一个保险箱即可。但是对于特定的客户（也就是第一个打开这些保险箱的客户之后的客户）才可以合并保险箱，而其他的客户就不行。如果我们把这些保险箱简单地连在一起，就可以给所有客户交换金币。\n由于在第一个打开这个保险箱之后的客户才能合并保险箱，我们可以把合并起来的保险箱指向后面的所有客户，而不指向之前的客户就可以了。但是处理合并保险箱也比较麻烦，比如第一个人打开了保险箱 $1,2$，第二个人打开了 $2,3$，此时 $2,3$ 保险箱都可以取到保险箱 $1$ 的金币了，所以我们需要将每一个保险箱对应的合并保险箱再合并起来才对，而不是单独的原始保险箱。而且注意，此时对于保险箱 $2,3$ 来说 $1,2,3$ 是一个保险箱，但是对于保险箱 $1$ 来说只有 $1,2$ 是一个保险箱。\n由于一个客户打开的所有保险箱都要合并，我们就可以把这个合并保险箱与这个客户捆绑。如果一个保险箱已经与一个客户捆绑了，那么当前客户就可以把这个保险箱里的金币从上一个人接手全部或部分过来。如果这个保险箱还没有人开过就直接把原始保险箱中的金币放在自己对应的保险箱中。\n我们来看一眼样例：\n```\n3 3\n3 1 10\n2 1 2 2\n2 1 3 3\n1 2 6\n```\n样例建出来的图如下（每一条边的容量都是正无穷），再加上源汇点即可。\n![1](/post-images/p4638-solution-1.png?400x)\n## code\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<queue>\nusing namespace std;\ntypedef long long ll;\nint N,n,m,p=1,s1,s2,t[10001],t0[10001],f[10001],g[10001],v[10001];\nbool u=true;\nstruct str\n{\n    int m,q;\n    ll r;\n}a[1000001];\nvoid road(int x,int y,ll r)\n{\n    a[++p].m=y;\n    a[p].q=t[x];\n    t[x]=p;\n    a[p].r=r;\n}\nvoid bfs()\n{\n    queue<int> Q;\n    Q.push(s2);\n    f[s2]=1;\n    g[1]=1;\n    while(!Q.empty())\n    {\n        int k=Q.front();\n        Q.pop();\n        for(int i=t[k];i!=0;i=a[i].q)\n        {\n            if(f[a[i].m]==0)\n            {\n                f[a[i].m]=f[k]+1;\n                ++g[f[a[i].m]];\n                Q.push(a[i].m);\n            }\n        }\n    }\n}\nll dfs(int x,ll r)\n{\n    if(x==s2) return r;\n    ll s=0;\n    for(int i=t0[x];i!=0;i=a[i].q)\n    {\n        t0[x]=i;\n        if(f[x]==f[a[i].m]+1&&a[i].r!=0)\n        {\n            int z=dfs(a[i].m,min(r,a[i].r));\n            if(z!=0)\n            {\n                a[i].r-=z;\n                a[i^1].r+=z;\n                r-=z;\n                s+=z;\n            }\n            if(r==0) return s;\n        }\n    }\n    --g[f[x]];\n    if(g[f[x]]==0) u=false;\n    ++f[x];\n    ++g[f[x]];\n    return s;\n}\nint main()\n{\n    scanf(\"%d%d\",&m,&n);\n    N=n+m+2;\n    s1=N-1;\n    s2=N;\n    for(int i=1;i<=m;++i)\n    {\n        ll r;\n        scanf(\"%lld\",&r);\n        road(s1,i,r);\n        road(i,s1,0);\n    }\n    for(int i=1;i<=n;++i)\n    {\n        int d;\n        scanf(\"%d\",&d);\n        for(int j=1;j<=d;++j)\n        {\n            int x;\n            scanf(\"%d\",&x);\n            if(v[x]==0)\n            {\n                road(x,m+i,1e18);\n                road(m+i,x,0);\n            }\n            else\n            {\n                road(m+v[x],m+i,1e18);\n                road(m+i,m+v[x],0);\n            }\n            v[x]=i;\n        }\n        ll r;\n        scanf(\"%lld\",&r);\n        road(m+i,s2,r);\n        road(s2,m+i,0);\n    }\n    bfs();\n    ll r=0;\n    while(u==true)\n    {\n        for(int i=1;i<=N;++i) t0[i]=t[i];\n        r+=dfs(s1,1e18);\n    }\n    printf(\"%lld\",r);\n    return 0;\n}\n```","source":"_posts/P4638-solution.md","raw":"---\ntitle: 'P4638 [SHOI2011]银行家'\ndate: 2022-03-08 13:27:00\ntags: [网络流,最大流]\ndescription: ' '\n---\n\n[P4638 [SHOI2011]银行家](https://www.luogu.com.cn/problem/P4638)\n## 分析\n这道题题目十分的冗杂，我们先来整理一下题意：一些客户要来银行取金币，如果 $i$ 个客户需要 $c_i$ 个金币，能打开的所有保险箱中金币总数多于 $c_i$ 就会取走对应的金币数，否则会全部取走，而且一个客户来取金币后就可以交换他打开的保险箱的金币，请问所有客户最多可以取走多少金币。\n这道题初看就可以发现是一道网络流的题，金币即为流。在每一个客户打开了几个保险箱之后就把这些保险箱合并成一个保险箱即可。但是对于特定的客户（也就是第一个打开这些保险箱的客户之后的客户）才可以合并保险箱，而其他的客户就不行。如果我们把这些保险箱简单地连在一起，就可以给所有客户交换金币。\n由于在第一个打开这个保险箱之后的客户才能合并保险箱，我们可以把合并起来的保险箱指向后面的所有客户，而不指向之前的客户就可以了。但是处理合并保险箱也比较麻烦，比如第一个人打开了保险箱 $1,2$，第二个人打开了 $2,3$，此时 $2,3$ 保险箱都可以取到保险箱 $1$ 的金币了，所以我们需要将每一个保险箱对应的合并保险箱再合并起来才对，而不是单独的原始保险箱。而且注意，此时对于保险箱 $2,3$ 来说 $1,2,3$ 是一个保险箱，但是对于保险箱 $1$ 来说只有 $1,2$ 是一个保险箱。\n由于一个客户打开的所有保险箱都要合并，我们就可以把这个合并保险箱与这个客户捆绑。如果一个保险箱已经与一个客户捆绑了，那么当前客户就可以把这个保险箱里的金币从上一个人接手全部或部分过来。如果这个保险箱还没有人开过就直接把原始保险箱中的金币放在自己对应的保险箱中。\n我们来看一眼样例：\n```\n3 3\n3 1 10\n2 1 2 2\n2 1 3 3\n1 2 6\n```\n样例建出来的图如下（每一条边的容量都是正无穷），再加上源汇点即可。\n![1](/post-images/p4638-solution-1.png?400x)\n## code\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<queue>\nusing namespace std;\ntypedef long long ll;\nint N,n,m,p=1,s1,s2,t[10001],t0[10001],f[10001],g[10001],v[10001];\nbool u=true;\nstruct str\n{\n    int m,q;\n    ll r;\n}a[1000001];\nvoid road(int x,int y,ll r)\n{\n    a[++p].m=y;\n    a[p].q=t[x];\n    t[x]=p;\n    a[p].r=r;\n}\nvoid bfs()\n{\n    queue<int> Q;\n    Q.push(s2);\n    f[s2]=1;\n    g[1]=1;\n    while(!Q.empty())\n    {\n        int k=Q.front();\n        Q.pop();\n        for(int i=t[k];i!=0;i=a[i].q)\n        {\n            if(f[a[i].m]==0)\n            {\n                f[a[i].m]=f[k]+1;\n                ++g[f[a[i].m]];\n                Q.push(a[i].m);\n            }\n        }\n    }\n}\nll dfs(int x,ll r)\n{\n    if(x==s2) return r;\n    ll s=0;\n    for(int i=t0[x];i!=0;i=a[i].q)\n    {\n        t0[x]=i;\n        if(f[x]==f[a[i].m]+1&&a[i].r!=0)\n        {\n            int z=dfs(a[i].m,min(r,a[i].r));\n            if(z!=0)\n            {\n                a[i].r-=z;\n                a[i^1].r+=z;\n                r-=z;\n                s+=z;\n            }\n            if(r==0) return s;\n        }\n    }\n    --g[f[x]];\n    if(g[f[x]]==0) u=false;\n    ++f[x];\n    ++g[f[x]];\n    return s;\n}\nint main()\n{\n    scanf(\"%d%d\",&m,&n);\n    N=n+m+2;\n    s1=N-1;\n    s2=N;\n    for(int i=1;i<=m;++i)\n    {\n        ll r;\n        scanf(\"%lld\",&r);\n        road(s1,i,r);\n        road(i,s1,0);\n    }\n    for(int i=1;i<=n;++i)\n    {\n        int d;\n        scanf(\"%d\",&d);\n        for(int j=1;j<=d;++j)\n        {\n            int x;\n            scanf(\"%d\",&x);\n            if(v[x]==0)\n            {\n                road(x,m+i,1e18);\n                road(m+i,x,0);\n            }\n            else\n            {\n                road(m+v[x],m+i,1e18);\n                road(m+i,m+v[x],0);\n            }\n            v[x]=i;\n        }\n        ll r;\n        scanf(\"%lld\",&r);\n        road(m+i,s2,r);\n        road(s2,m+i,0);\n    }\n    bfs();\n    ll r=0;\n    while(u==true)\n    {\n        for(int i=1;i<=N;++i) t0[i]=t[i];\n        r+=dfs(s1,1e18);\n    }\n    printf(\"%lld\",r);\n    return 0;\n}\n```","slug":"P4638-solution","published":1,"updated":"2023-03-15T01:57:00.442Z","_id":"cleid9283001w2sjf0gw9h8rf","comments":1,"layout":"post","photos":[],"link":"","content":"<p><a href=\"https://www.luogu.com.cn/problem/P4638\">P4638 [SHOI2011]银行家</a></p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>这道题题目十分的冗杂，我们先来整理一下题意：一些客户要来银行取金币，如果 $i$ 个客户需要 $c_i$ 个金币，能打开的所有保险箱中金币总数多于 $c_i$ 就会取走对应的金币数，否则会全部取走，而且一个客户来取金币后就可以交换他打开的保险箱的金币，请问所有客户最多可以取走多少金币。<br>这道题初看就可以发现是一道网络流的题，金币即为流。在每一个客户打开了几个保险箱之后就把这些保险箱合并成一个保险箱即可。但是对于特定的客户（也就是第一个打开这些保险箱的客户之后的客户）才可以合并保险箱，而其他的客户就不行。如果我们把这些保险箱简单地连在一起，就可以给所有客户交换金币。<br>由于在第一个打开这个保险箱之后的客户才能合并保险箱，我们可以把合并起来的保险箱指向后面的所有客户，而不指向之前的客户就可以了。但是处理合并保险箱也比较麻烦，比如第一个人打开了保险箱 $1,2$，第二个人打开了 $2,3$，此时 $2,3$ 保险箱都可以取到保险箱 $1$ 的金币了，所以我们需要将每一个保险箱对应的合并保险箱再合并起来才对，而不是单独的原始保险箱。而且注意，此时对于保险箱 $2,3$ 来说 $1,2,3$ 是一个保险箱，但是对于保险箱 $1$ 来说只有 $1,2$ 是一个保险箱。<br>由于一个客户打开的所有保险箱都要合并，我们就可以把这个合并保险箱与这个客户捆绑。如果一个保险箱已经与一个客户捆绑了，那么当前客户就可以把这个保险箱里的金币从上一个人接手全部或部分过来。如果这个保险箱还没有人开过就直接把原始保险箱中的金币放在自己对应的保险箱中。<br>我们来看一眼样例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3 3</span><br><span class=\"line\">3 1 10</span><br><span class=\"line\">2 1 2 2</span><br><span class=\"line\">2 1 3 3</span><br><span class=\"line\">1 2 6</span><br></pre></td></tr></table></figure>\n<p>样例建出来的图如下（每一条边的容量都是正无穷），再加上源汇点即可。<br><img src=\"/post-images/p4638-solution-1.png?400x\" alt=\"1\"></p>\n<h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> ll;</span><br><span class=\"line\"><span class=\"type\">int</span> N,n,m,p=<span class=\"number\">1</span>,s1,s2,t[<span class=\"number\">10001</span>],t0[<span class=\"number\">10001</span>],f[<span class=\"number\">10001</span>],g[<span class=\"number\">10001</span>],v[<span class=\"number\">10001</span>];</span><br><span class=\"line\"><span class=\"type\">bool</span> u=<span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">str</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> m,q;</span><br><span class=\"line\">    ll r;</span><br><span class=\"line\">&#125;a[<span class=\"number\">1000001</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">road</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y,ll r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    a[++p].m=y;</span><br><span class=\"line\">    a[p].q=t[x];</span><br><span class=\"line\">    t[x]=p;</span><br><span class=\"line\">    a[p].r=r;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">bfs</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    queue&lt;<span class=\"type\">int</span>&gt; Q;</span><br><span class=\"line\">    Q.<span class=\"built_in\">push</span>(s2);</span><br><span class=\"line\">    f[s2]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    g[<span class=\"number\">1</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!Q.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> k=Q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">        Q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t[k];i!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(f[a[i].m]==<span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                f[a[i].m]=f[k]+<span class=\"number\">1</span>;</span><br><span class=\"line\">                ++g[f[a[i].m]];</span><br><span class=\"line\">                Q.<span class=\"built_in\">push</span>(a[i].m);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> x,ll r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x==s2) <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">    ll s=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t0[x];i!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        t0[x]=i;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(f[x]==f[a[i].m]+<span class=\"number\">1</span>&amp;&amp;a[i].r!=<span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> z=<span class=\"built_in\">dfs</span>(a[i].m,<span class=\"built_in\">min</span>(r,a[i].r));</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(z!=<span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                a[i].r-=z;</span><br><span class=\"line\">                a[i^<span class=\"number\">1</span>].r+=z;</span><br><span class=\"line\">                r-=z;</span><br><span class=\"line\">                s+=z;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(r==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    --g[f[x]];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(g[f[x]]==<span class=\"number\">0</span>) u=<span class=\"literal\">false</span>;</span><br><span class=\"line\">    ++f[x];</span><br><span class=\"line\">    ++g[f[x]];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;m,&amp;n);</span><br><span class=\"line\">    N=n+m+<span class=\"number\">2</span>;</span><br><span class=\"line\">    s1=N<span class=\"number\">-1</span>;</span><br><span class=\"line\">    s2=N;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ll r;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%lld&quot;</span>,&amp;r);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(s1,i,r);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(i,s1,<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> d;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;d);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=d;++j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> x;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;x);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(v[x]==<span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">road</span>(x,m+i,<span class=\"number\">1e18</span>);</span><br><span class=\"line\">                <span class=\"built_in\">road</span>(m+i,x,<span class=\"number\">0</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">road</span>(m+v[x],m+i,<span class=\"number\">1e18</span>);</span><br><span class=\"line\">                <span class=\"built_in\">road</span>(m+i,m+v[x],<span class=\"number\">0</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            v[x]=i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ll r;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%lld&quot;</span>,&amp;r);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(m+i,s2,r);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(s2,m+i,<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">bfs</span>();</span><br><span class=\"line\">    ll r=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(u==<span class=\"literal\">true</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=N;++i) t0[i]=t[i];</span><br><span class=\"line\">        r+=<span class=\"built_in\">dfs</span>(s1,<span class=\"number\">1e18</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld&quot;</span>,r);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://www.luogu.com.cn/problem/P4638\">P4638 [SHOI2011]银行家</a></p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>这道题题目十分的冗杂，我们先来整理一下题意：一些客户要来银行取金币，如果 $i$ 个客户需要 $c_i$ 个金币，能打开的所有保险箱中金币总数多于 $c_i$ 就会取走对应的金币数，否则会全部取走，而且一个客户来取金币后就可以交换他打开的保险箱的金币，请问所有客户最多可以取走多少金币。<br>这道题初看就可以发现是一道网络流的题，金币即为流。在每一个客户打开了几个保险箱之后就把这些保险箱合并成一个保险箱即可。但是对于特定的客户（也就是第一个打开这些保险箱的客户之后的客户）才可以合并保险箱，而其他的客户就不行。如果我们把这些保险箱简单地连在一起，就可以给所有客户交换金币。<br>由于在第一个打开这个保险箱之后的客户才能合并保险箱，我们可以把合并起来的保险箱指向后面的所有客户，而不指向之前的客户就可以了。但是处理合并保险箱也比较麻烦，比如第一个人打开了保险箱 $1,2$，第二个人打开了 $2,3$，此时 $2,3$ 保险箱都可以取到保险箱 $1$ 的金币了，所以我们需要将每一个保险箱对应的合并保险箱再合并起来才对，而不是单独的原始保险箱。而且注意，此时对于保险箱 $2,3$ 来说 $1,2,3$ 是一个保险箱，但是对于保险箱 $1$ 来说只有 $1,2$ 是一个保险箱。<br>由于一个客户打开的所有保险箱都要合并，我们就可以把这个合并保险箱与这个客户捆绑。如果一个保险箱已经与一个客户捆绑了，那么当前客户就可以把这个保险箱里的金币从上一个人接手全部或部分过来。如果这个保险箱还没有人开过就直接把原始保险箱中的金币放在自己对应的保险箱中。<br>我们来看一眼样例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3 3</span><br><span class=\"line\">3 1 10</span><br><span class=\"line\">2 1 2 2</span><br><span class=\"line\">2 1 3 3</span><br><span class=\"line\">1 2 6</span><br></pre></td></tr></table></figure>\n<p>样例建出来的图如下（每一条边的容量都是正无穷），再加上源汇点即可。<br><img src=\"/post-images/p4638-solution-1.png?400x\" alt=\"1\"></p>\n<h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> ll;</span><br><span class=\"line\"><span class=\"type\">int</span> N,n,m,p=<span class=\"number\">1</span>,s1,s2,t[<span class=\"number\">10001</span>],t0[<span class=\"number\">10001</span>],f[<span class=\"number\">10001</span>],g[<span class=\"number\">10001</span>],v[<span class=\"number\">10001</span>];</span><br><span class=\"line\"><span class=\"type\">bool</span> u=<span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">str</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> m,q;</span><br><span class=\"line\">    ll r;</span><br><span class=\"line\">&#125;a[<span class=\"number\">1000001</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">road</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y,ll r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    a[++p].m=y;</span><br><span class=\"line\">    a[p].q=t[x];</span><br><span class=\"line\">    t[x]=p;</span><br><span class=\"line\">    a[p].r=r;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">bfs</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    queue&lt;<span class=\"type\">int</span>&gt; Q;</span><br><span class=\"line\">    Q.<span class=\"built_in\">push</span>(s2);</span><br><span class=\"line\">    f[s2]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    g[<span class=\"number\">1</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!Q.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> k=Q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">        Q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t[k];i!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(f[a[i].m]==<span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                f[a[i].m]=f[k]+<span class=\"number\">1</span>;</span><br><span class=\"line\">                ++g[f[a[i].m]];</span><br><span class=\"line\">                Q.<span class=\"built_in\">push</span>(a[i].m);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> x,ll r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x==s2) <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">    ll s=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t0[x];i!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        t0[x]=i;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(f[x]==f[a[i].m]+<span class=\"number\">1</span>&amp;&amp;a[i].r!=<span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> z=<span class=\"built_in\">dfs</span>(a[i].m,<span class=\"built_in\">min</span>(r,a[i].r));</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(z!=<span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                a[i].r-=z;</span><br><span class=\"line\">                a[i^<span class=\"number\">1</span>].r+=z;</span><br><span class=\"line\">                r-=z;</span><br><span class=\"line\">                s+=z;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(r==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    --g[f[x]];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(g[f[x]]==<span class=\"number\">0</span>) u=<span class=\"literal\">false</span>;</span><br><span class=\"line\">    ++f[x];</span><br><span class=\"line\">    ++g[f[x]];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;m,&amp;n);</span><br><span class=\"line\">    N=n+m+<span class=\"number\">2</span>;</span><br><span class=\"line\">    s1=N<span class=\"number\">-1</span>;</span><br><span class=\"line\">    s2=N;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ll r;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%lld&quot;</span>,&amp;r);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(s1,i,r);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(i,s1,<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> d;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;d);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=d;++j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> x;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;x);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(v[x]==<span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">road</span>(x,m+i,<span class=\"number\">1e18</span>);</span><br><span class=\"line\">                <span class=\"built_in\">road</span>(m+i,x,<span class=\"number\">0</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">road</span>(m+v[x],m+i,<span class=\"number\">1e18</span>);</span><br><span class=\"line\">                <span class=\"built_in\">road</span>(m+i,m+v[x],<span class=\"number\">0</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            v[x]=i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ll r;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%lld&quot;</span>,&amp;r);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(m+i,s2,r);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(s2,m+i,<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">bfs</span>();</span><br><span class=\"line\">    ll r=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(u==<span class=\"literal\">true</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=N;++i) t0[i]=t[i];</span><br><span class=\"line\">        r+=<span class=\"built_in\">dfs</span>(s1,<span class=\"number\">1e18</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld&quot;</span>,r);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"四边形不等式优化线性dp","date":"2022-05-21T05:38:07.000Z","description":" ","_content":"\n## 前言\n\n经典题：[P1912 [NOI2009] 诗人小G](https://www.luogu.com.cn/problem/P1912)\n有一些奇怪的 dp 题目，它的转移方程有很多高次项，没办法单调队列优化或斜率优化， 但是我们仍然可以找到一些规律，比如说决策单调性。\n我们举一个非常形象的例子，一个数列，$f[i]$ 表示前 ii 个数中的最大值，$g[i]$ 表示前 $i$ 个数中第一个出现的最大数的下标，那么很显然，$g$ 是单调不下降的，因为任意 $i,j(i<j)$ 都必然有 $f[i] \\leqslant f[j]$，又有 $\\forall k \\in [1,j),a[k] < f[j] = a[g[j]]$，所以如果 $g[j]<g[i]$，必然有 $f[j] = a[g[j] < a[g[i]] = f[i]$，矛盾，故 $g[j] \\leqslant g[i]$。如果我们非常傻地用 $f[i]=\\max\\limits_{1 \\leqslant j \\leqslant i}(a[i])$ 来转移，我们就可以将其优化为 $f[i]=\\max\\limits_{g[i-1] \\leqslant j \\leqslant i}(a[i])$。这就叫做决策单调性，其中 $g[i]$ 叫做 $i$ 位置的最优决策。\n\n## 基本思路\n\n如果一个转移方程存在决策单调性，我们就可以像上面那样优化了。但是显然还不够，我们可以换一种思路，原来我们是知道 $i$ 寻找 $g[i]$，现在我们在知道 $g[i]$ 的情况下去找 $i$，就相当于是在转移时知道 $j$ 去枚举 $i$。虽然看起来没有什么变化，但是别忘了还有决策单调性。假如我们现在知道了 $[1,n]$ 每个位置的最优决策（决策在 $[1,j]$ 范围内），由于决策单调性，如果位置 $i$ 的最优决策是 $j$，那么 $\\forall i \\in[j,n],g[i] \\geqslant j$，由于是在 $[1,j]$ 中的最优决策，所以 $\\forall i \\in[j,n],g[i] = j$。所以我们一定能找到一个 $j$，使得 $\\forall i \\in[j,n],g[i] = j$ 且 $\\forall i \\in[1,j-1],g[i] < j$，我们只需要在序列中二分即可。\n\n## 实现方法\n\n但是二分之后我们还需要修改整个区间 $[j,n]$，很自然能想到线段树，但其实还有更好的做法：使用三元组。一个三元组 $(l,r,k)$ 表示在区间 $[l,r]$ 中所有位置的最优决策都是 $k$，然后用一个队列来存储所有三元组。首先插入三元组 $(1,n,0)$，之后的操作就很像单调队列了。\n首先要找到 $i$ 的最优决策，只需要将队首右端点都比 $i$ 小的三元组出队，当前的队首三元组的最优决策 $k$ 就是 $i$ 的最优决策。然后我们要将 $i$ 作为一个决策插入序列，如果 $i$ 用来转移 $n$ 位置都没有当前最优决策 $g[n]$ 好，说明整个序列的最优决策都比 $i$ 小，跳过。否则，不断比较队尾元素 $(l,r,k)$ 与 $i$，如果用 $i$ 来转移 $l$ 比用 $k$ 来转移 $l$ 要好，就说明 $[l,r]$ 的最优决策都是 $i$，删除队尾。但是如果 $i$ 并不是整个 $[l,r]$ 的最优决策，就需要在 $[l,r+1]$ 中二分查找分界线 $t$（$t$ 的最优决策也为 $i$），把右端点改为$ t-1$，然后插入三元组 $(t,n,i)$。这里还要注意特判，如果队列中已经没有三元组了，直接插入 $(i+1,n,i)$。\n\n## 证明\n\n知道了如何解决满足决策单调性的问题。我们还要知道如何证明决策单调性。这就要引入四边形不等式：\n\n$$\\forall a \\leqslant b \\leqslant c \\leqslant d,w(a,d)+w(b,c) \\geqslant w(a,b)+w(c,d)$$\n\n四边形不等式还有另一个表述方法：\n\n$$\\forall a<b,w(a,b+1)+w(a+1,b) \\geqslant w(a,b)+w(a+1,b+1)$$\n\n证明：\n\n设 $a<c$，则有 $w(a,c+1)+w(a+1,c) \\geqslant w(a,c)+w(a+1,c+1)$。\n\n若 $a+1<c$，则有 $w(a+1,c+1)+w(a+2,c) \\geqslant w(a+1,c)+w(a+2,c+1)$。\n\n两式相加，消去相同项可得 $w(a,c+1)+w(a+2,c) \\geqslant w(a,c)+w(a+2,c+1)$。\n\n类似的，只要 $a+k<c$ 就可以得到 $w(a,c+1)+w(a+k,c) \\geqslant w(a,c)+w(a+k,c+1)$。\n\n所以对于 $a \\leqslant b \\leqslant c$，就有 $w(a,c+1)+w(b,c) \\geqslant w(a,c)+w(b,c+1)$。\n\n同理可证对于 $a \\leqslant b \\leqslant c \\leqslant d$，有 $w(a,d)+w(b,c) \\geqslant w(a,c)+w(b,d)$。\n\n而对于证明决策单调性，有如下定理：\n\n> 在状态转移方程 $f[i]=\\min\\limits_{0\\leqslant j <i}\\{f[j]+w(j,i)\\}$ 中，若函数 $w$ 满足四边形不等式，则 $f$ 具有决策单调性。\n证明：\n\n$\\forall i \\in [1,n]$，$\\forall j \\in [0,g[i]−1]$，由 $g[i]$ 的最优性可得：\n\n$$f[g[i]]+w(g[i],i)\\leqslant f[j]+w(j,i)\\tag1$$\n\n设有 $i' \\in [i+1,n]$，因为 $w$ 满足四边形不等式，所以\n\n$$w(j,i')+w(g[i],i)\\geqslant w(j,i)+w(g[i],i')$$\n\n$$w(g[i],i')-w(g[i],i)\\leqslant w(j,i')-w(j,i)\\tag2$$\n\n$(1)(2)$ 两式相加，可得：\n\n$$f[g[i]]+w(g[i],i') \\leqslant f[j]+w(j,i')$$\n\n所以，对于 $i$ 以后的任意一个 $i′$，$g[i]$ 都是比任意 $j<g[i]$ 更优的决策，故 $f$ 具有决策单调性。\n\n## code\n\n下面是经典题 P1912 的代码。\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\nusing namespace std;\ntypedef long long ll;\ntypedef long double ld;\nconst int N=100001;\nint n,k,T,R,g[N];\nll m,a[N];\nld f[N];\nchar c[N][101];\nbool h[N];\nstruct str\n{\n    int l,r,k;\n}Q[N];\nld pow(ll x,int p)\n{\n    ld s=1;\n    for(int i=1;i<=p;++i) s*=x;\n    return s;\n}\nld abc(int x,int y)\n{\n    return f[y]+pow(abs(a[x]-a[y]+x-y-1-m),k);\n}\nvoid dp()\n{\n    scanf(\"%d%lld%d\",&n,&m,&k);\n    for(int i=1;i<=n;++i)\n    {\n        scanf(\"%s\",c[i]);\n        a[i]=a[i-1]+strlen(c[i]);\n    }\n    T=0,R=-1;\n    Q[++R]=(str){1,n,0};\n    f[0]=0;\n    for(int i=1;i<=n;++i)\n    {\n        while(T<=R&&Q[T].r<i) ++T;\n        Q[T].l=i;\n        f[i]=abc(i,Q[T].k);\n        g[i]=Q[T].k;\n        if(f[i]>1e18) continue;\n        if(T<=R&&abc(n,i)>abc(n,Q[R].k)) continue;\n        while(T<=R&&abc(Q[R].l,i)<=abc(Q[R].l,Q[R].k)) --R;\n        if(T<=R)\n        {\n            int l=Q[R].l,r=Q[R].r+1;\n            while(l<r)\n            {\n                int z=l+r>>1;\n                if(abc(z,i)<=abc(z,Q[R].k)) r=z;\n                else l=z+1;\n            }\n            Q[R].r=l-1;\n            Q[++R]=(str){l,n,i};\n        }\n        else Q[++R]=(str){i+1,n,i};\n    }\n    if(f[n]>1e18)\n    {\n        printf(\"Too hard to arrange\\n\");\n        return;\n    }\n    printf(\"%lld\\n\",(ll)f[n]);\n    for(int i=1;i<=n;++i) h[i]=false;\n    int x=n;\n    while(x>=1)\n    {\n        h[x]=true;\n        x=g[x];\n    }\n    for(int i=1;i<=n;++i)\n    {\n        printf(\"%s\",c[i]);\n        if(h[i]==true) printf(\"\\n\");\n        else printf(\" \");\n    }\n}\nint main()\n{\n    int T;\n    scanf(\"%d\",&T);\n    while(T--)\n    {\n        dp();\n        printf(\"--------------------\\n\");\n    }\n    return 0;\n}\n```","source":"_posts/Quadrilateral-inequality-optimization-linear-DP.md","raw":"---\ntitle: '四边形不等式优化线性dp'\ndate: 2022-05-21 13:38:07\ntags: [动态规划,四边形不等式优化dp]\ndescription: ' '\n---\n\n## 前言\n\n经典题：[P1912 [NOI2009] 诗人小G](https://www.luogu.com.cn/problem/P1912)\n有一些奇怪的 dp 题目，它的转移方程有很多高次项，没办法单调队列优化或斜率优化， 但是我们仍然可以找到一些规律，比如说决策单调性。\n我们举一个非常形象的例子，一个数列，$f[i]$ 表示前 ii 个数中的最大值，$g[i]$ 表示前 $i$ 个数中第一个出现的最大数的下标，那么很显然，$g$ 是单调不下降的，因为任意 $i,j(i<j)$ 都必然有 $f[i] \\leqslant f[j]$，又有 $\\forall k \\in [1,j),a[k] < f[j] = a[g[j]]$，所以如果 $g[j]<g[i]$，必然有 $f[j] = a[g[j] < a[g[i]] = f[i]$，矛盾，故 $g[j] \\leqslant g[i]$。如果我们非常傻地用 $f[i]=\\max\\limits_{1 \\leqslant j \\leqslant i}(a[i])$ 来转移，我们就可以将其优化为 $f[i]=\\max\\limits_{g[i-1] \\leqslant j \\leqslant i}(a[i])$。这就叫做决策单调性，其中 $g[i]$ 叫做 $i$ 位置的最优决策。\n\n## 基本思路\n\n如果一个转移方程存在决策单调性，我们就可以像上面那样优化了。但是显然还不够，我们可以换一种思路，原来我们是知道 $i$ 寻找 $g[i]$，现在我们在知道 $g[i]$ 的情况下去找 $i$，就相当于是在转移时知道 $j$ 去枚举 $i$。虽然看起来没有什么变化，但是别忘了还有决策单调性。假如我们现在知道了 $[1,n]$ 每个位置的最优决策（决策在 $[1,j]$ 范围内），由于决策单调性，如果位置 $i$ 的最优决策是 $j$，那么 $\\forall i \\in[j,n],g[i] \\geqslant j$，由于是在 $[1,j]$ 中的最优决策，所以 $\\forall i \\in[j,n],g[i] = j$。所以我们一定能找到一个 $j$，使得 $\\forall i \\in[j,n],g[i] = j$ 且 $\\forall i \\in[1,j-1],g[i] < j$，我们只需要在序列中二分即可。\n\n## 实现方法\n\n但是二分之后我们还需要修改整个区间 $[j,n]$，很自然能想到线段树，但其实还有更好的做法：使用三元组。一个三元组 $(l,r,k)$ 表示在区间 $[l,r]$ 中所有位置的最优决策都是 $k$，然后用一个队列来存储所有三元组。首先插入三元组 $(1,n,0)$，之后的操作就很像单调队列了。\n首先要找到 $i$ 的最优决策，只需要将队首右端点都比 $i$ 小的三元组出队，当前的队首三元组的最优决策 $k$ 就是 $i$ 的最优决策。然后我们要将 $i$ 作为一个决策插入序列，如果 $i$ 用来转移 $n$ 位置都没有当前最优决策 $g[n]$ 好，说明整个序列的最优决策都比 $i$ 小，跳过。否则，不断比较队尾元素 $(l,r,k)$ 与 $i$，如果用 $i$ 来转移 $l$ 比用 $k$ 来转移 $l$ 要好，就说明 $[l,r]$ 的最优决策都是 $i$，删除队尾。但是如果 $i$ 并不是整个 $[l,r]$ 的最优决策，就需要在 $[l,r+1]$ 中二分查找分界线 $t$（$t$ 的最优决策也为 $i$），把右端点改为$ t-1$，然后插入三元组 $(t,n,i)$。这里还要注意特判，如果队列中已经没有三元组了，直接插入 $(i+1,n,i)$。\n\n## 证明\n\n知道了如何解决满足决策单调性的问题。我们还要知道如何证明决策单调性。这就要引入四边形不等式：\n\n$$\\forall a \\leqslant b \\leqslant c \\leqslant d,w(a,d)+w(b,c) \\geqslant w(a,b)+w(c,d)$$\n\n四边形不等式还有另一个表述方法：\n\n$$\\forall a<b,w(a,b+1)+w(a+1,b) \\geqslant w(a,b)+w(a+1,b+1)$$\n\n证明：\n\n设 $a<c$，则有 $w(a,c+1)+w(a+1,c) \\geqslant w(a,c)+w(a+1,c+1)$。\n\n若 $a+1<c$，则有 $w(a+1,c+1)+w(a+2,c) \\geqslant w(a+1,c)+w(a+2,c+1)$。\n\n两式相加，消去相同项可得 $w(a,c+1)+w(a+2,c) \\geqslant w(a,c)+w(a+2,c+1)$。\n\n类似的，只要 $a+k<c$ 就可以得到 $w(a,c+1)+w(a+k,c) \\geqslant w(a,c)+w(a+k,c+1)$。\n\n所以对于 $a \\leqslant b \\leqslant c$，就有 $w(a,c+1)+w(b,c) \\geqslant w(a,c)+w(b,c+1)$。\n\n同理可证对于 $a \\leqslant b \\leqslant c \\leqslant d$，有 $w(a,d)+w(b,c) \\geqslant w(a,c)+w(b,d)$。\n\n而对于证明决策单调性，有如下定理：\n\n> 在状态转移方程 $f[i]=\\min\\limits_{0\\leqslant j <i}\\{f[j]+w(j,i)\\}$ 中，若函数 $w$ 满足四边形不等式，则 $f$ 具有决策单调性。\n证明：\n\n$\\forall i \\in [1,n]$，$\\forall j \\in [0,g[i]−1]$，由 $g[i]$ 的最优性可得：\n\n$$f[g[i]]+w(g[i],i)\\leqslant f[j]+w(j,i)\\tag1$$\n\n设有 $i' \\in [i+1,n]$，因为 $w$ 满足四边形不等式，所以\n\n$$w(j,i')+w(g[i],i)\\geqslant w(j,i)+w(g[i],i')$$\n\n$$w(g[i],i')-w(g[i],i)\\leqslant w(j,i')-w(j,i)\\tag2$$\n\n$(1)(2)$ 两式相加，可得：\n\n$$f[g[i]]+w(g[i],i') \\leqslant f[j]+w(j,i')$$\n\n所以，对于 $i$ 以后的任意一个 $i′$，$g[i]$ 都是比任意 $j<g[i]$ 更优的决策，故 $f$ 具有决策单调性。\n\n## code\n\n下面是经典题 P1912 的代码。\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\nusing namespace std;\ntypedef long long ll;\ntypedef long double ld;\nconst int N=100001;\nint n,k,T,R,g[N];\nll m,a[N];\nld f[N];\nchar c[N][101];\nbool h[N];\nstruct str\n{\n    int l,r,k;\n}Q[N];\nld pow(ll x,int p)\n{\n    ld s=1;\n    for(int i=1;i<=p;++i) s*=x;\n    return s;\n}\nld abc(int x,int y)\n{\n    return f[y]+pow(abs(a[x]-a[y]+x-y-1-m),k);\n}\nvoid dp()\n{\n    scanf(\"%d%lld%d\",&n,&m,&k);\n    for(int i=1;i<=n;++i)\n    {\n        scanf(\"%s\",c[i]);\n        a[i]=a[i-1]+strlen(c[i]);\n    }\n    T=0,R=-1;\n    Q[++R]=(str){1,n,0};\n    f[0]=0;\n    for(int i=1;i<=n;++i)\n    {\n        while(T<=R&&Q[T].r<i) ++T;\n        Q[T].l=i;\n        f[i]=abc(i,Q[T].k);\n        g[i]=Q[T].k;\n        if(f[i]>1e18) continue;\n        if(T<=R&&abc(n,i)>abc(n,Q[R].k)) continue;\n        while(T<=R&&abc(Q[R].l,i)<=abc(Q[R].l,Q[R].k)) --R;\n        if(T<=R)\n        {\n            int l=Q[R].l,r=Q[R].r+1;\n            while(l<r)\n            {\n                int z=l+r>>1;\n                if(abc(z,i)<=abc(z,Q[R].k)) r=z;\n                else l=z+1;\n            }\n            Q[R].r=l-1;\n            Q[++R]=(str){l,n,i};\n        }\n        else Q[++R]=(str){i+1,n,i};\n    }\n    if(f[n]>1e18)\n    {\n        printf(\"Too hard to arrange\\n\");\n        return;\n    }\n    printf(\"%lld\\n\",(ll)f[n]);\n    for(int i=1;i<=n;++i) h[i]=false;\n    int x=n;\n    while(x>=1)\n    {\n        h[x]=true;\n        x=g[x];\n    }\n    for(int i=1;i<=n;++i)\n    {\n        printf(\"%s\",c[i]);\n        if(h[i]==true) printf(\"\\n\");\n        else printf(\" \");\n    }\n}\nint main()\n{\n    int T;\n    scanf(\"%d\",&T);\n    while(T--)\n    {\n        dp();\n        printf(\"--------------------\\n\");\n    }\n    return 0;\n}\n```","slug":"Quadrilateral-inequality-optimization-linear-DP","published":1,"updated":"2022-11-28T13:47:47.402Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cleid9284001y2sjf8gt6gos4","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>经典题：<a href=\"https://www.luogu.com.cn/problem/P1912\">P1912 [NOI2009] 诗人小G</a><br>有一些奇怪的 dp 题目，它的转移方程有很多高次项，没办法单调队列优化或斜率优化， 但是我们仍然可以找到一些规律，比如说决策单调性。<br>我们举一个非常形象的例子，一个数列，$f[i]$ 表示前 ii 个数中的最大值，$g[i]$ 表示前 $i$ 个数中第一个出现的最大数的下标，那么很显然，$g$ 是单调不下降的，因为任意 $i,j(i&lt;j)$ 都必然有 $f[i] \\leqslant f[j]$，又有 $\\forall k \\in [1,j),a[k] &lt; f[j] &#x3D; a[g[j]]$，所以如果 $g[j]&lt;g[i]$，必然有 $f[j] &#x3D; a[g[j] &lt; a[g[i]] &#x3D; f[i]$，矛盾，故 $g[j] \\leqslant g[i]$。如果我们非常傻地用 $f[i]&#x3D;\\max\\limits_{1 \\leqslant j \\leqslant i}(a[i])$ 来转移，我们就可以将其优化为 $f[i]&#x3D;\\max\\limits_{g[i-1] \\leqslant j \\leqslant i}(a[i])$。这就叫做决策单调性，其中 $g[i]$ 叫做 $i$ 位置的最优决策。</p>\n<h2 id=\"基本思路\"><a href=\"#基本思路\" class=\"headerlink\" title=\"基本思路\"></a>基本思路</h2><p>如果一个转移方程存在决策单调性，我们就可以像上面那样优化了。但是显然还不够，我们可以换一种思路，原来我们是知道 $i$ 寻找 $g[i]$，现在我们在知道 $g[i]$ 的情况下去找 $i$，就相当于是在转移时知道 $j$ 去枚举 $i$。虽然看起来没有什么变化，但是别忘了还有决策单调性。假如我们现在知道了 $[1,n]$ 每个位置的最优决策（决策在 $[1,j]$ 范围内），由于决策单调性，如果位置 $i$ 的最优决策是 $j$，那么 $\\forall i \\in[j,n],g[i] \\geqslant j$，由于是在 $[1,j]$ 中的最优决策，所以 $\\forall i \\in[j,n],g[i] &#x3D; j$。所以我们一定能找到一个 $j$，使得 $\\forall i \\in[j,n],g[i] &#x3D; j$ 且 $\\forall i \\in[1,j-1],g[i] &lt; j$，我们只需要在序列中二分即可。</p>\n<h2 id=\"实现方法\"><a href=\"#实现方法\" class=\"headerlink\" title=\"实现方法\"></a>实现方法</h2><p>但是二分之后我们还需要修改整个区间 $[j,n]$，很自然能想到线段树，但其实还有更好的做法：使用三元组。一个三元组 $(l,r,k)$ 表示在区间 $[l,r]$ 中所有位置的最优决策都是 $k$，然后用一个队列来存储所有三元组。首先插入三元组 $(1,n,0)$，之后的操作就很像单调队列了。<br>首先要找到 $i$ 的最优决策，只需要将队首右端点都比 $i$ 小的三元组出队，当前的队首三元组的最优决策 $k$ 就是 $i$ 的最优决策。然后我们要将 $i$ 作为一个决策插入序列，如果 $i$ 用来转移 $n$ 位置都没有当前最优决策 $g[n]$ 好，说明整个序列的最优决策都比 $i$ 小，跳过。否则，不断比较队尾元素 $(l,r,k)$ 与 $i$，如果用 $i$ 来转移 $l$ 比用 $k$ 来转移 $l$ 要好，就说明 $[l,r]$ 的最优决策都是 $i$，删除队尾。但是如果 $i$ 并不是整个 $[l,r]$ 的最优决策，就需要在 $[l,r+1]$ 中二分查找分界线 $t$（$t$ 的最优决策也为 $i$），把右端点改为$ t-1$，然后插入三元组 $(t,n,i)$。这里还要注意特判，如果队列中已经没有三元组了，直接插入 $(i+1,n,i)$。</p>\n<h2 id=\"证明\"><a href=\"#证明\" class=\"headerlink\" title=\"证明\"></a>证明</h2><p>知道了如何解决满足决策单调性的问题。我们还要知道如何证明决策单调性。这就要引入四边形不等式：</p>\n<p>$$\\forall a \\leqslant b \\leqslant c \\leqslant d,w(a,d)+w(b,c) \\geqslant w(a,b)+w(c,d)$$</p>\n<p>四边形不等式还有另一个表述方法：</p>\n<p>$$\\forall a&lt;b,w(a,b+1)+w(a+1,b) \\geqslant w(a,b)+w(a+1,b+1)$$</p>\n<p>证明：</p>\n<p>设 $a&lt;c$，则有 $w(a,c+1)+w(a+1,c) \\geqslant w(a,c)+w(a+1,c+1)$。</p>\n<p>若 $a+1&lt;c$，则有 $w(a+1,c+1)+w(a+2,c) \\geqslant w(a+1,c)+w(a+2,c+1)$。</p>\n<p>两式相加，消去相同项可得 $w(a,c+1)+w(a+2,c) \\geqslant w(a,c)+w(a+2,c+1)$。</p>\n<p>类似的，只要 $a+k&lt;c$ 就可以得到 $w(a,c+1)+w(a+k,c) \\geqslant w(a,c)+w(a+k,c+1)$。</p>\n<p>所以对于 $a \\leqslant b \\leqslant c$，就有 $w(a,c+1)+w(b,c) \\geqslant w(a,c)+w(b,c+1)$。</p>\n<p>同理可证对于 $a \\leqslant b \\leqslant c \\leqslant d$，有 $w(a,d)+w(b,c) \\geqslant w(a,c)+w(b,d)$。</p>\n<p>而对于证明决策单调性，有如下定理：</p>\n<blockquote>\n<p>在状态转移方程 $f[i]&#x3D;\\min\\limits_{0\\leqslant j &lt;i}{f[j]+w(j,i)}$ 中，若函数 $w$ 满足四边形不等式，则 $f$ 具有决策单调性。<br>证明：</p>\n</blockquote>\n<p>$\\forall i \\in [1,n]$，$\\forall j \\in [0,g[i]−1]$，由 $g[i]$ 的最优性可得：</p>\n<p>$$f[g[i]]+w(g[i],i)\\leqslant f[j]+w(j,i)\\tag1$$</p>\n<p>设有 $i’ \\in [i+1,n]$，因为 $w$ 满足四边形不等式，所以</p>\n<p>$$w(j,i’)+w(g[i],i)\\geqslant w(j,i)+w(g[i],i’)$$</p>\n<p>$$w(g[i],i’)-w(g[i],i)\\leqslant w(j,i’)-w(j,i)\\tag2$$</p>\n<p>$(1)(2)$ 两式相加，可得：</p>\n<p>$$f[g[i]]+w(g[i],i’) \\leqslant f[j]+w(j,i’)$$</p>\n<p>所以，对于 $i$ 以后的任意一个 $i′$，$g[i]$ 都是比任意 $j&lt;g[i]$ 更优的决策，故 $f$ 具有决策单调性。</p>\n<h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><p>下面是经典题 P1912 的代码。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">double</span> ld;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">100001</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> n,k,T,R,g[N];</span><br><span class=\"line\">ll m,a[N];</span><br><span class=\"line\">ld f[N];</span><br><span class=\"line\"><span class=\"type\">char</span> c[N][<span class=\"number\">101</span>];</span><br><span class=\"line\"><span class=\"type\">bool</span> h[N];</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">str</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> l,r,k;</span><br><span class=\"line\">&#125;Q[N];</span><br><span class=\"line\"><span class=\"function\">ld <span class=\"title\">pow</span><span class=\"params\">(ll x,<span class=\"type\">int</span> p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ld s=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=p;++i) s*=x;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">ld <span class=\"title\">abc</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> f[y]+<span class=\"built_in\">pow</span>(<span class=\"built_in\">abs</span>(a[x]-a[y]+x-y<span class=\"number\">-1</span>-m),k);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dp</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%lld%d&quot;</span>,&amp;n,&amp;m,&amp;k);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s&quot;</span>,c[i]);</span><br><span class=\"line\">        a[i]=a[i<span class=\"number\">-1</span>]+<span class=\"built_in\">strlen</span>(c[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    T=<span class=\"number\">0</span>,R=<span class=\"number\">-1</span>;</span><br><span class=\"line\">    Q[++R]=(str)&#123;<span class=\"number\">1</span>,n,<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    f[<span class=\"number\">0</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(T&lt;=R&amp;&amp;Q[T].r&lt;i) ++T;</span><br><span class=\"line\">        Q[T].l=i;</span><br><span class=\"line\">        f[i]=<span class=\"built_in\">abc</span>(i,Q[T].k);</span><br><span class=\"line\">        g[i]=Q[T].k;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(f[i]&gt;<span class=\"number\">1e18</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(T&lt;=R&amp;&amp;<span class=\"built_in\">abc</span>(n,i)&gt;<span class=\"built_in\">abc</span>(n,Q[R].k)) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(T&lt;=R&amp;&amp;<span class=\"built_in\">abc</span>(Q[R].l,i)&lt;=<span class=\"built_in\">abc</span>(Q[R].l,Q[R].k)) --R;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(T&lt;=R)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> l=Q[R].l,r=Q[R].r+<span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(l&lt;r)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> z=l+r&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(<span class=\"built_in\">abc</span>(z,i)&lt;=<span class=\"built_in\">abc</span>(z,Q[R].k)) r=z;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> l=z+<span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            Q[R].r=l<span class=\"number\">-1</span>;</span><br><span class=\"line\">            Q[++R]=(str)&#123;l,n,i&#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> Q[++R]=(str)&#123;i+<span class=\"number\">1</span>,n,i&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(f[n]&gt;<span class=\"number\">1e18</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Too hard to arrange\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>,(ll)f[n]);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i) h[i]=<span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> x=n;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(x&gt;=<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        h[x]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">        x=g[x];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s&quot;</span>,c[i]);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(h[i]==<span class=\"literal\">true</span>) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"built_in\">printf</span>(<span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> T;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;T);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(T--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">dp</span>();</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;--------------------\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>经典题：<a href=\"https://www.luogu.com.cn/problem/P1912\">P1912 [NOI2009] 诗人小G</a><br>有一些奇怪的 dp 题目，它的转移方程有很多高次项，没办法单调队列优化或斜率优化， 但是我们仍然可以找到一些规律，比如说决策单调性。<br>我们举一个非常形象的例子，一个数列，$f[i]$ 表示前 ii 个数中的最大值，$g[i]$ 表示前 $i$ 个数中第一个出现的最大数的下标，那么很显然，$g$ 是单调不下降的，因为任意 $i,j(i&lt;j)$ 都必然有 $f[i] \\leqslant f[j]$，又有 $\\forall k \\in [1,j),a[k] &lt; f[j] &#x3D; a[g[j]]$，所以如果 $g[j]&lt;g[i]$，必然有 $f[j] &#x3D; a[g[j] &lt; a[g[i]] &#x3D; f[i]$，矛盾，故 $g[j] \\leqslant g[i]$。如果我们非常傻地用 $f[i]&#x3D;\\max\\limits_{1 \\leqslant j \\leqslant i}(a[i])$ 来转移，我们就可以将其优化为 $f[i]&#x3D;\\max\\limits_{g[i-1] \\leqslant j \\leqslant i}(a[i])$。这就叫做决策单调性，其中 $g[i]$ 叫做 $i$ 位置的最优决策。</p>\n<h2 id=\"基本思路\"><a href=\"#基本思路\" class=\"headerlink\" title=\"基本思路\"></a>基本思路</h2><p>如果一个转移方程存在决策单调性，我们就可以像上面那样优化了。但是显然还不够，我们可以换一种思路，原来我们是知道 $i$ 寻找 $g[i]$，现在我们在知道 $g[i]$ 的情况下去找 $i$，就相当于是在转移时知道 $j$ 去枚举 $i$。虽然看起来没有什么变化，但是别忘了还有决策单调性。假如我们现在知道了 $[1,n]$ 每个位置的最优决策（决策在 $[1,j]$ 范围内），由于决策单调性，如果位置 $i$ 的最优决策是 $j$，那么 $\\forall i \\in[j,n],g[i] \\geqslant j$，由于是在 $[1,j]$ 中的最优决策，所以 $\\forall i \\in[j,n],g[i] &#x3D; j$。所以我们一定能找到一个 $j$，使得 $\\forall i \\in[j,n],g[i] &#x3D; j$ 且 $\\forall i \\in[1,j-1],g[i] &lt; j$，我们只需要在序列中二分即可。</p>\n<h2 id=\"实现方法\"><a href=\"#实现方法\" class=\"headerlink\" title=\"实现方法\"></a>实现方法</h2><p>但是二分之后我们还需要修改整个区间 $[j,n]$，很自然能想到线段树，但其实还有更好的做法：使用三元组。一个三元组 $(l,r,k)$ 表示在区间 $[l,r]$ 中所有位置的最优决策都是 $k$，然后用一个队列来存储所有三元组。首先插入三元组 $(1,n,0)$，之后的操作就很像单调队列了。<br>首先要找到 $i$ 的最优决策，只需要将队首右端点都比 $i$ 小的三元组出队，当前的队首三元组的最优决策 $k$ 就是 $i$ 的最优决策。然后我们要将 $i$ 作为一个决策插入序列，如果 $i$ 用来转移 $n$ 位置都没有当前最优决策 $g[n]$ 好，说明整个序列的最优决策都比 $i$ 小，跳过。否则，不断比较队尾元素 $(l,r,k)$ 与 $i$，如果用 $i$ 来转移 $l$ 比用 $k$ 来转移 $l$ 要好，就说明 $[l,r]$ 的最优决策都是 $i$，删除队尾。但是如果 $i$ 并不是整个 $[l,r]$ 的最优决策，就需要在 $[l,r+1]$ 中二分查找分界线 $t$（$t$ 的最优决策也为 $i$），把右端点改为$ t-1$，然后插入三元组 $(t,n,i)$。这里还要注意特判，如果队列中已经没有三元组了，直接插入 $(i+1,n,i)$。</p>\n<h2 id=\"证明\"><a href=\"#证明\" class=\"headerlink\" title=\"证明\"></a>证明</h2><p>知道了如何解决满足决策单调性的问题。我们还要知道如何证明决策单调性。这就要引入四边形不等式：</p>\n<p>$$\\forall a \\leqslant b \\leqslant c \\leqslant d,w(a,d)+w(b,c) \\geqslant w(a,b)+w(c,d)$$</p>\n<p>四边形不等式还有另一个表述方法：</p>\n<p>$$\\forall a&lt;b,w(a,b+1)+w(a+1,b) \\geqslant w(a,b)+w(a+1,b+1)$$</p>\n<p>证明：</p>\n<p>设 $a&lt;c$，则有 $w(a,c+1)+w(a+1,c) \\geqslant w(a,c)+w(a+1,c+1)$。</p>\n<p>若 $a+1&lt;c$，则有 $w(a+1,c+1)+w(a+2,c) \\geqslant w(a+1,c)+w(a+2,c+1)$。</p>\n<p>两式相加，消去相同项可得 $w(a,c+1)+w(a+2,c) \\geqslant w(a,c)+w(a+2,c+1)$。</p>\n<p>类似的，只要 $a+k&lt;c$ 就可以得到 $w(a,c+1)+w(a+k,c) \\geqslant w(a,c)+w(a+k,c+1)$。</p>\n<p>所以对于 $a \\leqslant b \\leqslant c$，就有 $w(a,c+1)+w(b,c) \\geqslant w(a,c)+w(b,c+1)$。</p>\n<p>同理可证对于 $a \\leqslant b \\leqslant c \\leqslant d$，有 $w(a,d)+w(b,c) \\geqslant w(a,c)+w(b,d)$。</p>\n<p>而对于证明决策单调性，有如下定理：</p>\n<blockquote>\n<p>在状态转移方程 $f[i]&#x3D;\\min\\limits_{0\\leqslant j &lt;i}{f[j]+w(j,i)}$ 中，若函数 $w$ 满足四边形不等式，则 $f$ 具有决策单调性。<br>证明：</p>\n</blockquote>\n<p>$\\forall i \\in [1,n]$，$\\forall j \\in [0,g[i]−1]$，由 $g[i]$ 的最优性可得：</p>\n<p>$$f[g[i]]+w(g[i],i)\\leqslant f[j]+w(j,i)\\tag1$$</p>\n<p>设有 $i’ \\in [i+1,n]$，因为 $w$ 满足四边形不等式，所以</p>\n<p>$$w(j,i’)+w(g[i],i)\\geqslant w(j,i)+w(g[i],i’)$$</p>\n<p>$$w(g[i],i’)-w(g[i],i)\\leqslant w(j,i’)-w(j,i)\\tag2$$</p>\n<p>$(1)(2)$ 两式相加，可得：</p>\n<p>$$f[g[i]]+w(g[i],i’) \\leqslant f[j]+w(j,i’)$$</p>\n<p>所以，对于 $i$ 以后的任意一个 $i′$，$g[i]$ 都是比任意 $j&lt;g[i]$ 更优的决策，故 $f$ 具有决策单调性。</p>\n<h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><p>下面是经典题 P1912 的代码。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">double</span> ld;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">100001</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> n,k,T,R,g[N];</span><br><span class=\"line\">ll m,a[N];</span><br><span class=\"line\">ld f[N];</span><br><span class=\"line\"><span class=\"type\">char</span> c[N][<span class=\"number\">101</span>];</span><br><span class=\"line\"><span class=\"type\">bool</span> h[N];</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">str</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> l,r,k;</span><br><span class=\"line\">&#125;Q[N];</span><br><span class=\"line\"><span class=\"function\">ld <span class=\"title\">pow</span><span class=\"params\">(ll x,<span class=\"type\">int</span> p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ld s=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=p;++i) s*=x;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">ld <span class=\"title\">abc</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> f[y]+<span class=\"built_in\">pow</span>(<span class=\"built_in\">abs</span>(a[x]-a[y]+x-y<span class=\"number\">-1</span>-m),k);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dp</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%lld%d&quot;</span>,&amp;n,&amp;m,&amp;k);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s&quot;</span>,c[i]);</span><br><span class=\"line\">        a[i]=a[i<span class=\"number\">-1</span>]+<span class=\"built_in\">strlen</span>(c[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    T=<span class=\"number\">0</span>,R=<span class=\"number\">-1</span>;</span><br><span class=\"line\">    Q[++R]=(str)&#123;<span class=\"number\">1</span>,n,<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    f[<span class=\"number\">0</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(T&lt;=R&amp;&amp;Q[T].r&lt;i) ++T;</span><br><span class=\"line\">        Q[T].l=i;</span><br><span class=\"line\">        f[i]=<span class=\"built_in\">abc</span>(i,Q[T].k);</span><br><span class=\"line\">        g[i]=Q[T].k;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(f[i]&gt;<span class=\"number\">1e18</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(T&lt;=R&amp;&amp;<span class=\"built_in\">abc</span>(n,i)&gt;<span class=\"built_in\">abc</span>(n,Q[R].k)) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(T&lt;=R&amp;&amp;<span class=\"built_in\">abc</span>(Q[R].l,i)&lt;=<span class=\"built_in\">abc</span>(Q[R].l,Q[R].k)) --R;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(T&lt;=R)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> l=Q[R].l,r=Q[R].r+<span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(l&lt;r)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> z=l+r&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(<span class=\"built_in\">abc</span>(z,i)&lt;=<span class=\"built_in\">abc</span>(z,Q[R].k)) r=z;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> l=z+<span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            Q[R].r=l<span class=\"number\">-1</span>;</span><br><span class=\"line\">            Q[++R]=(str)&#123;l,n,i&#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> Q[++R]=(str)&#123;i+<span class=\"number\">1</span>,n,i&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(f[n]&gt;<span class=\"number\">1e18</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Too hard to arrange\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>,(ll)f[n]);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i) h[i]=<span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> x=n;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(x&gt;=<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        h[x]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">        x=g[x];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s&quot;</span>,c[i]);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(h[i]==<span class=\"literal\">true</span>) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"built_in\">printf</span>(<span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> T;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;T);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(T--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">dp</span>();</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;--------------------\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"面积并扫描线","date":"2022-02-20T05:13:41.000Z","description":" ","_content":"\n## 前言\n模板题：[P5490 【模板】扫描线](https://www.luogu.com.cn/problem/P5490)\n这是一道经典的题目，需要求出 $n$ 个矩形的面积并，直接开数组显然会炸，数学方法也很难，这时候就需要使用神奇的扫描线算法来解决了。\n扫描线算法的基本思想就是用一条线从下往上扫过图形，计算出相邻两条横边之间的面积，然后求和即可。扫描线的过程中需要知道相邻两个横边之间的距离，以及这当前位置图形的宽度。我们只需要将横边排序就可以知道相邻两个横边之间的距离，而当前位置图形的宽度可以用线段树来维护。\n## 线段树\n线段树需要求出当前位置图形的宽度，我们要如何修改当前位置图形的宽度呢？我们看下图：\n![1](https://img.ffis.me/images/2019/08/10/image.png)\n![2](https://img.ffis.me/images/2019/08/10/image1cba39d5beb42edc.png)\n（图片来自网络）\n我们可以发现，扫过一个矩形的下边就会增加图形的宽度，而遇到一个图形的上边就会减少图形的宽度。我们可以拿括号序列来举例：如果一个位置前面的左括号个数等于右括号个数，那么这个位置就不在任何括号中。同理：如果一个位置扫过的矩形下边个数等于矩形上边个数，那么这个位置当前没有被图形覆盖，反之则被图形覆盖。我们只需要记录一个位置当前已扫过的矩形下边个数减去已扫过的矩形上边个数，我们就可以通过这个数是否为 $0$ 来判断这个位置是否被图形覆盖。\n现在我们要记录一条横线上的每个位置的值，并且我们每次需要求出有多少个值不为 $0$ 的位置，我们就可以用线段树来实现，线段树维护当前区间值不为 $0$ 的位置个数：\n![3](https://img.ffis.me/images/2019/08/10/image0a03aa15aca4877e.png)\n不过我们需要维护的是两个相邻 $x$ 之间扫过的个数，而不是端点，是两个端点之间的线段，所以总共 $n$ 个点，只有 $n-1$ 个线段，线段树只需要维护 $n-1$ 个值。由于这些点之间可能间隔很大，所以还需要进行离散化，用 $b$ 数组记录离散化后的点原来的值，那么一个区间 $[l.r]$ 的长度就是 $b[T[x].r+1]-b[T[x].l]$。我们用一个变量 $t$ 来记录此区间被扫过的次数，如果不为 $0$ 那么此区间已经整体被覆盖。\n这样我们就可以写出线段树了。\n```cpp\nvoid pushup(int x)\n{\n    if(T[x].t) T[x].s=b[T[x].r+1]-b[T[x].l];\n    else T[x].s=T[x<<1].s+T[x<<1|1].s;\n}\nvoid build(int x,int l,int r)\n{\n    T[x].l=l;\n    T[x].r=r;\n    T[x].t=T[x].s=0;\n    if(l==r) return;\n    int z=l+r>>1;\n    build(x<<1,l,z);\n    build(x<<1|1,z+1,r);\n}\nvoid add(int x,ll l,ll r,int k)\n{\n    if(b[T[x].l]>=r||b[T[x].r+1]<=l) return;\n    if(b[T[x].l]>=l&&b[T[x].r+1]<=r)\n    {\n        T[x].t+=k;\n        pushup(x);\n        return;\n    }\n    add(x<<1,l,r,k);\n    add(x<<1|1,l,r,k);\n    pushup(x);\n}\n```\n## 排序\n在扫描线算法中，我们总共需要两次排序：将端点的横坐标排序和横线的纵坐标排序。在进行排序之后，我们还需要将端点横坐标离散化和去重，用 STL 的 unique 函数就可以了。\n```cpp\nstruct str\n{\n    ll l,r,h;\n    int k;\n}a[10000001];\nstruct tree\n{\n    int l,r,t;\n    ll s;\n}T[10000001];\nbool cmp(str a,str b)\n{\n    return a.h<b.h;\n}\nint main()\n{\n    scanf(\"%d\",&n);\n    for(int i=1;i<=n;++i)\n    {\n        ll x1,y1,x2,y2;\n        scanf(\"%lld%lld%lld%lld\",&x1,&y1,&x2,&y2);\n        a[i*2-1]=(str){x1,x2,y1,1};\n        a[i*2]=(str){x1,x2,y2,-1};\n        b[i*2-1]=x1;\n        b[i*2]=x2;\n    }\n    n<<=1;\n    sort(a+1,a+n+1,cmp);\n    sort(b+1,b+n+1);\n    m=unique(b+1,b+n+1)-(b+1);\n}\n```\n## 扫描线\n有了上面的所有准备，我们就可以写出扫描线了。我们只需要从第 $1$ 个横边扫到第 $n*2-1$  个横边即可，每一个区间的面积就是当前图形的宽度乘上这个横线到下一根横线的距离。用一个变量统计这些面积的和，最终的答案就是这个变量。\n```cpp\nbuild(1,1,m-1);\nll s=0;\nfor(int i=1;i<n;++i)\n{   \n    add(1,a[i].l,a[i].r,a[i].k);\n    s+=T[1].s*(a[i+1].h-a[i].h);\n}\nprintf(\"%lld\",s);\n```\n## code\n```cpp\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\ntypedef long long ll;\nint n,m;\nll b[10000001];\nstruct str\n{\n    ll l,r,h;\n    int k;\n}a[10000001];\nstruct tree\n{\n    int l,r,t;\n    ll s;\n}T[10000001];\nbool cmp(str a,str b)\n{\n    return a.h<b.h;\n}\nvoid pushup(int x)\n{\n    if(T[x].t) T[x].s=b[T[x].r+1]-b[T[x].l];\n    else T[x].s=T[x<<1].s+T[x<<1|1].s;\n}\nvoid build(int x,int l,int r)\n{\n    T[x].l=l;\n    T[x].r=r;\n    T[x].t=T[x].s=0;\n    if(l==r) return;\n    int z=l+r>>1;\n    build(x<<1,l,z);\n    build(x<<1|1,z+1,r);\n}\nvoid add(int x,ll l,ll r,int k)\n{\n    if(b[T[x].l]>=r||b[T[x].r+1]<=l) return;\n    if(b[T[x].l]>=l&&b[T[x].r+1]<=r)\n    {\n        T[x].t+=k;\n        pushup(x);\n        return;\n    }\n    add(x<<1,l,r,k);\n    add(x<<1|1,l,r,k);\n    pushup(x);\n}\nint main()\n{\n    scanf(\"%d\",&n);\n    for(int i=1;i<=n;++i)\n    {\n        ll x1,y1,x2,y2;\n        scanf(\"%lld%lld%lld%lld\",&x1,&y1,&x2,&y2);\n        a[i*2-1]=(str){x1,x2,y1,1};\n        a[i*2]=(str){x1,x2,y2,-1};\n        b[i*2-1]=x1;\n        b[i*2]=x2;\n    }\n    n<<=1;\n    sort(a+1,a+n+1,cmp);\n    sort(b+1,b+n+1);\n    m=unique(b+1,b+n+1)-(b+1);\n    build(1,1,m-1);\n    ll s=0;\n    for(int i=1;i<n;++i)\n    {   \n        add(1,a[i].l,a[i].r,a[i].k);\n        s+=T[1].s*(a[i+1].h-a[i].h);\n    }\n    printf(\"%lld\",s);\n    return 0;\n}\n```","source":"_posts/Scan-line.md","raw":"---\ntitle: '面积并扫描线'\ndate: 2022-02-20 13:13:41\ntags: [扫描线,线段树]\ndescription: ' '\n---\n\n## 前言\n模板题：[P5490 【模板】扫描线](https://www.luogu.com.cn/problem/P5490)\n这是一道经典的题目，需要求出 $n$ 个矩形的面积并，直接开数组显然会炸，数学方法也很难，这时候就需要使用神奇的扫描线算法来解决了。\n扫描线算法的基本思想就是用一条线从下往上扫过图形，计算出相邻两条横边之间的面积，然后求和即可。扫描线的过程中需要知道相邻两个横边之间的距离，以及这当前位置图形的宽度。我们只需要将横边排序就可以知道相邻两个横边之间的距离，而当前位置图形的宽度可以用线段树来维护。\n## 线段树\n线段树需要求出当前位置图形的宽度，我们要如何修改当前位置图形的宽度呢？我们看下图：\n![1](https://img.ffis.me/images/2019/08/10/image.png)\n![2](https://img.ffis.me/images/2019/08/10/image1cba39d5beb42edc.png)\n（图片来自网络）\n我们可以发现，扫过一个矩形的下边就会增加图形的宽度，而遇到一个图形的上边就会减少图形的宽度。我们可以拿括号序列来举例：如果一个位置前面的左括号个数等于右括号个数，那么这个位置就不在任何括号中。同理：如果一个位置扫过的矩形下边个数等于矩形上边个数，那么这个位置当前没有被图形覆盖，反之则被图形覆盖。我们只需要记录一个位置当前已扫过的矩形下边个数减去已扫过的矩形上边个数，我们就可以通过这个数是否为 $0$ 来判断这个位置是否被图形覆盖。\n现在我们要记录一条横线上的每个位置的值，并且我们每次需要求出有多少个值不为 $0$ 的位置，我们就可以用线段树来实现，线段树维护当前区间值不为 $0$ 的位置个数：\n![3](https://img.ffis.me/images/2019/08/10/image0a03aa15aca4877e.png)\n不过我们需要维护的是两个相邻 $x$ 之间扫过的个数，而不是端点，是两个端点之间的线段，所以总共 $n$ 个点，只有 $n-1$ 个线段，线段树只需要维护 $n-1$ 个值。由于这些点之间可能间隔很大，所以还需要进行离散化，用 $b$ 数组记录离散化后的点原来的值，那么一个区间 $[l.r]$ 的长度就是 $b[T[x].r+1]-b[T[x].l]$。我们用一个变量 $t$ 来记录此区间被扫过的次数，如果不为 $0$ 那么此区间已经整体被覆盖。\n这样我们就可以写出线段树了。\n```cpp\nvoid pushup(int x)\n{\n    if(T[x].t) T[x].s=b[T[x].r+1]-b[T[x].l];\n    else T[x].s=T[x<<1].s+T[x<<1|1].s;\n}\nvoid build(int x,int l,int r)\n{\n    T[x].l=l;\n    T[x].r=r;\n    T[x].t=T[x].s=0;\n    if(l==r) return;\n    int z=l+r>>1;\n    build(x<<1,l,z);\n    build(x<<1|1,z+1,r);\n}\nvoid add(int x,ll l,ll r,int k)\n{\n    if(b[T[x].l]>=r||b[T[x].r+1]<=l) return;\n    if(b[T[x].l]>=l&&b[T[x].r+1]<=r)\n    {\n        T[x].t+=k;\n        pushup(x);\n        return;\n    }\n    add(x<<1,l,r,k);\n    add(x<<1|1,l,r,k);\n    pushup(x);\n}\n```\n## 排序\n在扫描线算法中，我们总共需要两次排序：将端点的横坐标排序和横线的纵坐标排序。在进行排序之后，我们还需要将端点横坐标离散化和去重，用 STL 的 unique 函数就可以了。\n```cpp\nstruct str\n{\n    ll l,r,h;\n    int k;\n}a[10000001];\nstruct tree\n{\n    int l,r,t;\n    ll s;\n}T[10000001];\nbool cmp(str a,str b)\n{\n    return a.h<b.h;\n}\nint main()\n{\n    scanf(\"%d\",&n);\n    for(int i=1;i<=n;++i)\n    {\n        ll x1,y1,x2,y2;\n        scanf(\"%lld%lld%lld%lld\",&x1,&y1,&x2,&y2);\n        a[i*2-1]=(str){x1,x2,y1,1};\n        a[i*2]=(str){x1,x2,y2,-1};\n        b[i*2-1]=x1;\n        b[i*2]=x2;\n    }\n    n<<=1;\n    sort(a+1,a+n+1,cmp);\n    sort(b+1,b+n+1);\n    m=unique(b+1,b+n+1)-(b+1);\n}\n```\n## 扫描线\n有了上面的所有准备，我们就可以写出扫描线了。我们只需要从第 $1$ 个横边扫到第 $n*2-1$  个横边即可，每一个区间的面积就是当前图形的宽度乘上这个横线到下一根横线的距离。用一个变量统计这些面积的和，最终的答案就是这个变量。\n```cpp\nbuild(1,1,m-1);\nll s=0;\nfor(int i=1;i<n;++i)\n{   \n    add(1,a[i].l,a[i].r,a[i].k);\n    s+=T[1].s*(a[i+1].h-a[i].h);\n}\nprintf(\"%lld\",s);\n```\n## code\n```cpp\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\ntypedef long long ll;\nint n,m;\nll b[10000001];\nstruct str\n{\n    ll l,r,h;\n    int k;\n}a[10000001];\nstruct tree\n{\n    int l,r,t;\n    ll s;\n}T[10000001];\nbool cmp(str a,str b)\n{\n    return a.h<b.h;\n}\nvoid pushup(int x)\n{\n    if(T[x].t) T[x].s=b[T[x].r+1]-b[T[x].l];\n    else T[x].s=T[x<<1].s+T[x<<1|1].s;\n}\nvoid build(int x,int l,int r)\n{\n    T[x].l=l;\n    T[x].r=r;\n    T[x].t=T[x].s=0;\n    if(l==r) return;\n    int z=l+r>>1;\n    build(x<<1,l,z);\n    build(x<<1|1,z+1,r);\n}\nvoid add(int x,ll l,ll r,int k)\n{\n    if(b[T[x].l]>=r||b[T[x].r+1]<=l) return;\n    if(b[T[x].l]>=l&&b[T[x].r+1]<=r)\n    {\n        T[x].t+=k;\n        pushup(x);\n        return;\n    }\n    add(x<<1,l,r,k);\n    add(x<<1|1,l,r,k);\n    pushup(x);\n}\nint main()\n{\n    scanf(\"%d\",&n);\n    for(int i=1;i<=n;++i)\n    {\n        ll x1,y1,x2,y2;\n        scanf(\"%lld%lld%lld%lld\",&x1,&y1,&x2,&y2);\n        a[i*2-1]=(str){x1,x2,y1,1};\n        a[i*2]=(str){x1,x2,y2,-1};\n        b[i*2-1]=x1;\n        b[i*2]=x2;\n    }\n    n<<=1;\n    sort(a+1,a+n+1,cmp);\n    sort(b+1,b+n+1);\n    m=unique(b+1,b+n+1)-(b+1);\n    build(1,1,m-1);\n    ll s=0;\n    for(int i=1;i<n;++i)\n    {   \n        add(1,a[i].l,a[i].r,a[i].k);\n        s+=T[1].s*(a[i+1].h-a[i].h);\n    }\n    printf(\"%lld\",s);\n    return 0;\n}\n```","slug":"Scan-line","published":1,"updated":"2022-11-28T13:47:47.412Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cleid928400212sjf5ro89s0l","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>模板题：<a href=\"https://www.luogu.com.cn/problem/P5490\">P5490 【模板】扫描线</a><br>这是一道经典的题目，需要求出 $n$ 个矩形的面积并，直接开数组显然会炸，数学方法也很难，这时候就需要使用神奇的扫描线算法来解决了。<br>扫描线算法的基本思想就是用一条线从下往上扫过图形，计算出相邻两条横边之间的面积，然后求和即可。扫描线的过程中需要知道相邻两个横边之间的距离，以及这当前位置图形的宽度。我们只需要将横边排序就可以知道相邻两个横边之间的距离，而当前位置图形的宽度可以用线段树来维护。</p>\n<h2 id=\"线段树\"><a href=\"#线段树\" class=\"headerlink\" title=\"线段树\"></a>线段树</h2><p>线段树需要求出当前位置图形的宽度，我们要如何修改当前位置图形的宽度呢？我们看下图：<br><img src=\"https://img.ffis.me/images/2019/08/10/image.png\" alt=\"1\"><br><img src=\"https://img.ffis.me/images/2019/08/10/image1cba39d5beb42edc.png\" alt=\"2\"><br>（图片来自网络）<br>我们可以发现，扫过一个矩形的下边就会增加图形的宽度，而遇到一个图形的上边就会减少图形的宽度。我们可以拿括号序列来举例：如果一个位置前面的左括号个数等于右括号个数，那么这个位置就不在任何括号中。同理：如果一个位置扫过的矩形下边个数等于矩形上边个数，那么这个位置当前没有被图形覆盖，反之则被图形覆盖。我们只需要记录一个位置当前已扫过的矩形下边个数减去已扫过的矩形上边个数，我们就可以通过这个数是否为 $0$ 来判断这个位置是否被图形覆盖。<br>现在我们要记录一条横线上的每个位置的值，并且我们每次需要求出有多少个值不为 $0$ 的位置，我们就可以用线段树来实现，线段树维护当前区间值不为 $0$ 的位置个数：<br><img src=\"https://img.ffis.me/images/2019/08/10/image0a03aa15aca4877e.png\" alt=\"3\"><br>不过我们需要维护的是两个相邻 $x$ 之间扫过的个数，而不是端点，是两个端点之间的线段，所以总共 $n$ 个点，只有 $n-1$ 个线段，线段树只需要维护 $n-1$ 个值。由于这些点之间可能间隔很大，所以还需要进行离散化，用 $b$ 数组记录离散化后的点原来的值，那么一个区间 $[l.r]$ 的长度就是 $b[T[x].r+1]-b[T[x].l]$。我们用一个变量 $t$ 来记录此区间被扫过的次数，如果不为 $0$ 那么此区间已经整体被覆盖。<br>这样我们就可以写出线段树了。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pushup</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(T[x].t) T[x].s=b[T[x].r+<span class=\"number\">1</span>]-b[T[x].l];</span><br><span class=\"line\">    <span class=\"keyword\">else</span> T[x].s=T[x&lt;&lt;<span class=\"number\">1</span>].s+T[x&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> l,<span class=\"type\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    T[x].l=l;</span><br><span class=\"line\">    T[x].r=r;</span><br><span class=\"line\">    T[x].t=T[x].s=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l==r) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> z=l+r&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(x&lt;&lt;<span class=\"number\">1</span>,l,z);</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(x&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>,z+<span class=\"number\">1</span>,r);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> x,ll l,ll r,<span class=\"type\">int</span> k)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(b[T[x].l]&gt;=r||b[T[x].r+<span class=\"number\">1</span>]&lt;=l) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(b[T[x].l]&gt;=l&amp;&amp;b[T[x].r+<span class=\"number\">1</span>]&lt;=r)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        T[x].t+=k;</span><br><span class=\"line\">        <span class=\"built_in\">pushup</span>(x);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">add</span>(x&lt;&lt;<span class=\"number\">1</span>,l,r,k);</span><br><span class=\"line\">    <span class=\"built_in\">add</span>(x&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>,l,r,k);</span><br><span class=\"line\">    <span class=\"built_in\">pushup</span>(x);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h2><p>在扫描线算法中，我们总共需要两次排序：将端点的横坐标排序和横线的纵坐标排序。在进行排序之后，我们还需要将端点横坐标离散化和去重，用 STL 的 unique 函数就可以了。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">str</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ll l,r,h;</span><br><span class=\"line\">    <span class=\"type\">int</span> k;</span><br><span class=\"line\">&#125;a[<span class=\"number\">10000001</span>];</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">tree</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> l,r,t;</span><br><span class=\"line\">    ll s;</span><br><span class=\"line\">&#125;T[<span class=\"number\">10000001</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(str a,str b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.h&lt;b.h;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ll x1,y1,x2,y2;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%lld%lld%lld%lld&quot;</span>,&amp;x1,&amp;y1,&amp;x2,&amp;y2);</span><br><span class=\"line\">        a[i*<span class=\"number\">2</span><span class=\"number\">-1</span>]=(str)&#123;x1,x2,y1,<span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">        a[i*<span class=\"number\">2</span>]=(str)&#123;x1,x2,y2,<span class=\"number\">-1</span>&#125;;</span><br><span class=\"line\">        b[i*<span class=\"number\">2</span><span class=\"number\">-1</span>]=x1;</span><br><span class=\"line\">        b[i*<span class=\"number\">2</span>]=x2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    n&lt;&lt;=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(a+<span class=\"number\">1</span>,a+n+<span class=\"number\">1</span>,cmp);</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(b+<span class=\"number\">1</span>,b+n+<span class=\"number\">1</span>);</span><br><span class=\"line\">    m=<span class=\"built_in\">unique</span>(b+<span class=\"number\">1</span>,b+n+<span class=\"number\">1</span>)-(b+<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"扫描线\"><a href=\"#扫描线\" class=\"headerlink\" title=\"扫描线\"></a>扫描线</h2><p>有了上面的所有准备，我们就可以写出扫描线了。我们只需要从第 $1$ 个横边扫到第 $n*2-1$  个横边即可，每一个区间的面积就是当前图形的宽度乘上这个横线到下一根横线的距离。用一个变量统计这些面积的和，最终的答案就是这个变量。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">build</span>(<span class=\"number\">1</span>,<span class=\"number\">1</span>,m<span class=\"number\">-1</span>);</span><br><span class=\"line\">ll s=<span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;n;++i)</span><br><span class=\"line\">&#123;   </span><br><span class=\"line\">    <span class=\"built_in\">add</span>(<span class=\"number\">1</span>,a[i].l,a[i].r,a[i].k);</span><br><span class=\"line\">    s+=T[<span class=\"number\">1</span>].s*(a[i+<span class=\"number\">1</span>].h-a[i].h);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld&quot;</span>,s);</span><br></pre></td></tr></table></figure>\n<h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> ll;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m;</span><br><span class=\"line\">ll b[<span class=\"number\">10000001</span>];</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">str</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ll l,r,h;</span><br><span class=\"line\">    <span class=\"type\">int</span> k;</span><br><span class=\"line\">&#125;a[<span class=\"number\">10000001</span>];</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">tree</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> l,r,t;</span><br><span class=\"line\">    ll s;</span><br><span class=\"line\">&#125;T[<span class=\"number\">10000001</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(str a,str b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.h&lt;b.h;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pushup</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(T[x].t) T[x].s=b[T[x].r+<span class=\"number\">1</span>]-b[T[x].l];</span><br><span class=\"line\">    <span class=\"keyword\">else</span> T[x].s=T[x&lt;&lt;<span class=\"number\">1</span>].s+T[x&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> l,<span class=\"type\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    T[x].l=l;</span><br><span class=\"line\">    T[x].r=r;</span><br><span class=\"line\">    T[x].t=T[x].s=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l==r) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> z=l+r&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(x&lt;&lt;<span class=\"number\">1</span>,l,z);</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(x&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>,z+<span class=\"number\">1</span>,r);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> x,ll l,ll r,<span class=\"type\">int</span> k)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(b[T[x].l]&gt;=r||b[T[x].r+<span class=\"number\">1</span>]&lt;=l) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(b[T[x].l]&gt;=l&amp;&amp;b[T[x].r+<span class=\"number\">1</span>]&lt;=r)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        T[x].t+=k;</span><br><span class=\"line\">        <span class=\"built_in\">pushup</span>(x);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">add</span>(x&lt;&lt;<span class=\"number\">1</span>,l,r,k);</span><br><span class=\"line\">    <span class=\"built_in\">add</span>(x&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>,l,r,k);</span><br><span class=\"line\">    <span class=\"built_in\">pushup</span>(x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ll x1,y1,x2,y2;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%lld%lld%lld%lld&quot;</span>,&amp;x1,&amp;y1,&amp;x2,&amp;y2);</span><br><span class=\"line\">        a[i*<span class=\"number\">2</span><span class=\"number\">-1</span>]=(str)&#123;x1,x2,y1,<span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">        a[i*<span class=\"number\">2</span>]=(str)&#123;x1,x2,y2,<span class=\"number\">-1</span>&#125;;</span><br><span class=\"line\">        b[i*<span class=\"number\">2</span><span class=\"number\">-1</span>]=x1;</span><br><span class=\"line\">        b[i*<span class=\"number\">2</span>]=x2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    n&lt;&lt;=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(a+<span class=\"number\">1</span>,a+n+<span class=\"number\">1</span>,cmp);</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(b+<span class=\"number\">1</span>,b+n+<span class=\"number\">1</span>);</span><br><span class=\"line\">    m=<span class=\"built_in\">unique</span>(b+<span class=\"number\">1</span>,b+n+<span class=\"number\">1</span>)-(b+<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(<span class=\"number\">1</span>,<span class=\"number\">1</span>,m<span class=\"number\">-1</span>);</span><br><span class=\"line\">    ll s=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;n;++i)</span><br><span class=\"line\">    &#123;   </span><br><span class=\"line\">        <span class=\"built_in\">add</span>(<span class=\"number\">1</span>,a[i].l,a[i].r,a[i].k);</span><br><span class=\"line\">        s+=T[<span class=\"number\">1</span>].s*(a[i+<span class=\"number\">1</span>].h-a[i].h);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld&quot;</span>,s);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>模板题：<a href=\"https://www.luogu.com.cn/problem/P5490\">P5490 【模板】扫描线</a><br>这是一道经典的题目，需要求出 $n$ 个矩形的面积并，直接开数组显然会炸，数学方法也很难，这时候就需要使用神奇的扫描线算法来解决了。<br>扫描线算法的基本思想就是用一条线从下往上扫过图形，计算出相邻两条横边之间的面积，然后求和即可。扫描线的过程中需要知道相邻两个横边之间的距离，以及这当前位置图形的宽度。我们只需要将横边排序就可以知道相邻两个横边之间的距离，而当前位置图形的宽度可以用线段树来维护。</p>\n<h2 id=\"线段树\"><a href=\"#线段树\" class=\"headerlink\" title=\"线段树\"></a>线段树</h2><p>线段树需要求出当前位置图形的宽度，我们要如何修改当前位置图形的宽度呢？我们看下图：<br><img src=\"https://img.ffis.me/images/2019/08/10/image.png\" alt=\"1\"><br><img src=\"https://img.ffis.me/images/2019/08/10/image1cba39d5beb42edc.png\" alt=\"2\"><br>（图片来自网络）<br>我们可以发现，扫过一个矩形的下边就会增加图形的宽度，而遇到一个图形的上边就会减少图形的宽度。我们可以拿括号序列来举例：如果一个位置前面的左括号个数等于右括号个数，那么这个位置就不在任何括号中。同理：如果一个位置扫过的矩形下边个数等于矩形上边个数，那么这个位置当前没有被图形覆盖，反之则被图形覆盖。我们只需要记录一个位置当前已扫过的矩形下边个数减去已扫过的矩形上边个数，我们就可以通过这个数是否为 $0$ 来判断这个位置是否被图形覆盖。<br>现在我们要记录一条横线上的每个位置的值，并且我们每次需要求出有多少个值不为 $0$ 的位置，我们就可以用线段树来实现，线段树维护当前区间值不为 $0$ 的位置个数：<br><img src=\"https://img.ffis.me/images/2019/08/10/image0a03aa15aca4877e.png\" alt=\"3\"><br>不过我们需要维护的是两个相邻 $x$ 之间扫过的个数，而不是端点，是两个端点之间的线段，所以总共 $n$ 个点，只有 $n-1$ 个线段，线段树只需要维护 $n-1$ 个值。由于这些点之间可能间隔很大，所以还需要进行离散化，用 $b$ 数组记录离散化后的点原来的值，那么一个区间 $[l.r]$ 的长度就是 $b[T[x].r+1]-b[T[x].l]$。我们用一个变量 $t$ 来记录此区间被扫过的次数，如果不为 $0$ 那么此区间已经整体被覆盖。<br>这样我们就可以写出线段树了。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pushup</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(T[x].t) T[x].s=b[T[x].r+<span class=\"number\">1</span>]-b[T[x].l];</span><br><span class=\"line\">    <span class=\"keyword\">else</span> T[x].s=T[x&lt;&lt;<span class=\"number\">1</span>].s+T[x&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> l,<span class=\"type\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    T[x].l=l;</span><br><span class=\"line\">    T[x].r=r;</span><br><span class=\"line\">    T[x].t=T[x].s=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l==r) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> z=l+r&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(x&lt;&lt;<span class=\"number\">1</span>,l,z);</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(x&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>,z+<span class=\"number\">1</span>,r);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> x,ll l,ll r,<span class=\"type\">int</span> k)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(b[T[x].l]&gt;=r||b[T[x].r+<span class=\"number\">1</span>]&lt;=l) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(b[T[x].l]&gt;=l&amp;&amp;b[T[x].r+<span class=\"number\">1</span>]&lt;=r)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        T[x].t+=k;</span><br><span class=\"line\">        <span class=\"built_in\">pushup</span>(x);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">add</span>(x&lt;&lt;<span class=\"number\">1</span>,l,r,k);</span><br><span class=\"line\">    <span class=\"built_in\">add</span>(x&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>,l,r,k);</span><br><span class=\"line\">    <span class=\"built_in\">pushup</span>(x);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h2><p>在扫描线算法中，我们总共需要两次排序：将端点的横坐标排序和横线的纵坐标排序。在进行排序之后，我们还需要将端点横坐标离散化和去重，用 STL 的 unique 函数就可以了。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">str</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ll l,r,h;</span><br><span class=\"line\">    <span class=\"type\">int</span> k;</span><br><span class=\"line\">&#125;a[<span class=\"number\">10000001</span>];</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">tree</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> l,r,t;</span><br><span class=\"line\">    ll s;</span><br><span class=\"line\">&#125;T[<span class=\"number\">10000001</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(str a,str b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.h&lt;b.h;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ll x1,y1,x2,y2;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%lld%lld%lld%lld&quot;</span>,&amp;x1,&amp;y1,&amp;x2,&amp;y2);</span><br><span class=\"line\">        a[i*<span class=\"number\">2</span><span class=\"number\">-1</span>]=(str)&#123;x1,x2,y1,<span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">        a[i*<span class=\"number\">2</span>]=(str)&#123;x1,x2,y2,<span class=\"number\">-1</span>&#125;;</span><br><span class=\"line\">        b[i*<span class=\"number\">2</span><span class=\"number\">-1</span>]=x1;</span><br><span class=\"line\">        b[i*<span class=\"number\">2</span>]=x2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    n&lt;&lt;=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(a+<span class=\"number\">1</span>,a+n+<span class=\"number\">1</span>,cmp);</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(b+<span class=\"number\">1</span>,b+n+<span class=\"number\">1</span>);</span><br><span class=\"line\">    m=<span class=\"built_in\">unique</span>(b+<span class=\"number\">1</span>,b+n+<span class=\"number\">1</span>)-(b+<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"扫描线\"><a href=\"#扫描线\" class=\"headerlink\" title=\"扫描线\"></a>扫描线</h2><p>有了上面的所有准备，我们就可以写出扫描线了。我们只需要从第 $1$ 个横边扫到第 $n*2-1$  个横边即可，每一个区间的面积就是当前图形的宽度乘上这个横线到下一根横线的距离。用一个变量统计这些面积的和，最终的答案就是这个变量。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">build</span>(<span class=\"number\">1</span>,<span class=\"number\">1</span>,m<span class=\"number\">-1</span>);</span><br><span class=\"line\">ll s=<span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;n;++i)</span><br><span class=\"line\">&#123;   </span><br><span class=\"line\">    <span class=\"built_in\">add</span>(<span class=\"number\">1</span>,a[i].l,a[i].r,a[i].k);</span><br><span class=\"line\">    s+=T[<span class=\"number\">1</span>].s*(a[i+<span class=\"number\">1</span>].h-a[i].h);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld&quot;</span>,s);</span><br></pre></td></tr></table></figure>\n<h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> ll;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m;</span><br><span class=\"line\">ll b[<span class=\"number\">10000001</span>];</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">str</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ll l,r,h;</span><br><span class=\"line\">    <span class=\"type\">int</span> k;</span><br><span class=\"line\">&#125;a[<span class=\"number\">10000001</span>];</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">tree</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> l,r,t;</span><br><span class=\"line\">    ll s;</span><br><span class=\"line\">&#125;T[<span class=\"number\">10000001</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(str a,str b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.h&lt;b.h;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pushup</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(T[x].t) T[x].s=b[T[x].r+<span class=\"number\">1</span>]-b[T[x].l];</span><br><span class=\"line\">    <span class=\"keyword\">else</span> T[x].s=T[x&lt;&lt;<span class=\"number\">1</span>].s+T[x&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> l,<span class=\"type\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    T[x].l=l;</span><br><span class=\"line\">    T[x].r=r;</span><br><span class=\"line\">    T[x].t=T[x].s=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l==r) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> z=l+r&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(x&lt;&lt;<span class=\"number\">1</span>,l,z);</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(x&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>,z+<span class=\"number\">1</span>,r);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> x,ll l,ll r,<span class=\"type\">int</span> k)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(b[T[x].l]&gt;=r||b[T[x].r+<span class=\"number\">1</span>]&lt;=l) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(b[T[x].l]&gt;=l&amp;&amp;b[T[x].r+<span class=\"number\">1</span>]&lt;=r)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        T[x].t+=k;</span><br><span class=\"line\">        <span class=\"built_in\">pushup</span>(x);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">add</span>(x&lt;&lt;<span class=\"number\">1</span>,l,r,k);</span><br><span class=\"line\">    <span class=\"built_in\">add</span>(x&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>,l,r,k);</span><br><span class=\"line\">    <span class=\"built_in\">pushup</span>(x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ll x1,y1,x2,y2;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%lld%lld%lld%lld&quot;</span>,&amp;x1,&amp;y1,&amp;x2,&amp;y2);</span><br><span class=\"line\">        a[i*<span class=\"number\">2</span><span class=\"number\">-1</span>]=(str)&#123;x1,x2,y1,<span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">        a[i*<span class=\"number\">2</span>]=(str)&#123;x1,x2,y2,<span class=\"number\">-1</span>&#125;;</span><br><span class=\"line\">        b[i*<span class=\"number\">2</span><span class=\"number\">-1</span>]=x1;</span><br><span class=\"line\">        b[i*<span class=\"number\">2</span>]=x2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    n&lt;&lt;=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(a+<span class=\"number\">1</span>,a+n+<span class=\"number\">1</span>,cmp);</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(b+<span class=\"number\">1</span>,b+n+<span class=\"number\">1</span>);</span><br><span class=\"line\">    m=<span class=\"built_in\">unique</span>(b+<span class=\"number\">1</span>,b+n+<span class=\"number\">1</span>)-(b+<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(<span class=\"number\">1</span>,<span class=\"number\">1</span>,m<span class=\"number\">-1</span>);</span><br><span class=\"line\">    ll s=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;n;++i)</span><br><span class=\"line\">    &#123;   </span><br><span class=\"line\">        <span class=\"built_in\">add</span>(<span class=\"number\">1</span>,a[i].l,a[i].r,a[i].k);</span><br><span class=\"line\">        s+=T[<span class=\"number\">1</span>].s*(a[i+<span class=\"number\">1</span>].h-a[i].h);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld&quot;</span>,s);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"斜率优化dp题单","date":"2022-04-04T01:33:14.000Z","description":" ","_content":"\n这是 [斜率优化dp](/post/Slope-optimization-DP) 的几道经典题目，建议按照顺序来做。\n\n[P3195 [HNOI2008]玩具装箱](/post/P3195-solution)\n\n[P3628 [APIO2010]特别行动队](/post/P3628-solution)\n\n[P2120 [ZJOI2007]仓库建设](/post/P2120-solution)\n\n[P4072 [SDOI2016]征途](/post/P4072-solution)\n\n[P3648 [APIO2014]序列分割](/post/P3648-solution)\n\n[P4360 [CEOI2004]锯木厂选址](/post/P4360-solution)\n\n[P5785 [SDOI2012]任务安排](/post/P5785-solution)","source":"_posts/Slope-optimization-DP-problemlist.md","raw":"---\ntitle: '斜率优化dp题单'\ndate: 2022-04-04 09:33:14\ntags: [动态规划,单调队列,斜率优化dp]\ndescription: ' '\n---\n\n这是 [斜率优化dp](/post/Slope-optimization-DP) 的几道经典题目，建议按照顺序来做。\n\n[P3195 [HNOI2008]玩具装箱](/post/P3195-solution)\n\n[P3628 [APIO2010]特别行动队](/post/P3628-solution)\n\n[P2120 [ZJOI2007]仓库建设](/post/P2120-solution)\n\n[P4072 [SDOI2016]征途](/post/P4072-solution)\n\n[P3648 [APIO2014]序列分割](/post/P3648-solution)\n\n[P4360 [CEOI2004]锯木厂选址](/post/P4360-solution)\n\n[P5785 [SDOI2012]任务安排](/post/P5785-solution)","slug":"Slope-optimization-DP-problemlist","published":1,"updated":"2023-02-24T10:05:12.024Z","_id":"cleid928500232sjfax8t22u3","comments":1,"layout":"post","photos":[],"link":"","content":"<p>这是 <a href=\"/post/Slope-optimization-DP\">斜率优化dp</a> 的几道经典题目，建议按照顺序来做。</p>\n<p><a href=\"/post/P3195-solution\">P3195 [HNOI2008]玩具装箱</a></p>\n<p><a href=\"/post/P3628-solution\">P3628 [APIO2010]特别行动队</a></p>\n<p><a href=\"/post/P2120-solution\">P2120 [ZJOI2007]仓库建设</a></p>\n<p><a href=\"/post/P4072-solution\">P4072 [SDOI2016]征途</a></p>\n<p><a href=\"/post/P3648-solution\">P3648 [APIO2014]序列分割</a></p>\n<p><a href=\"/post/P4360-solution\">P4360 [CEOI2004]锯木厂选址</a></p>\n<p><a href=\"/post/P5785-solution\">P5785 [SDOI2012]任务安排</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>这是 <a href=\"/post/Slope-optimization-DP\">斜率优化dp</a> 的几道经典题目，建议按照顺序来做。</p>\n<p><a href=\"/post/P3195-solution\">P3195 [HNOI2008]玩具装箱</a></p>\n<p><a href=\"/post/P3628-solution\">P3628 [APIO2010]特别行动队</a></p>\n<p><a href=\"/post/P2120-solution\">P2120 [ZJOI2007]仓库建设</a></p>\n<p><a href=\"/post/P4072-solution\">P4072 [SDOI2016]征途</a></p>\n<p><a href=\"/post/P3648-solution\">P3648 [APIO2014]序列分割</a></p>\n<p><a href=\"/post/P4360-solution\">P4360 [CEOI2004]锯木厂选址</a></p>\n<p><a href=\"/post/P5785-solution\">P5785 [SDOI2012]任务安排</a></p>\n"},{"title":"斜率优化dp","date":"2022-04-03T13:51:09.000Z","description":" ","_content":"\n## 前言\n经典题：[P3195 [HNOI2008]玩具装箱](https://www.luogu.com.cn/problem/P3195)\n[斜率优化题单](/post/Slope-optimization-DP-problemlist/)\n之前我们学习了单调队列优化 dp，它可以用来解决转移方程中有 $i,j$ 相关项的和。但是如果转移方程中有 $i,j$ 的乘积项 $f[i]=\\min(f[j]+x \\times a[i]+y \\times a[j]+z \\times a[i] \\times a[j])(1\\leqslant j < i)$，单调队列就无法解决这种问题了，因为对于不同的 $i$，$j$ 相关项的最小值并不相同。所以我们需要用新的方法来解决。\n## 基本思路\n我们再来改写一下转移方程，就变成：$f[j]+y \\times a[j]=-z \\times a[i] \\times a[j]+f[i]-x \\times a[i](1\\leqslant j < i)$，当 $i$ 不变时，以 $j$ 为自变量，于是这个转移方程就变成了一个一次函数 $Y=A \\times X+B$，其中 $Y=f[j]+y \\times a[j]$，$A=-z \\times a[i]$，$X=a[j]$，$B=f[i]-x \\times a[i]$。如果我们要求 $f[i]$ 最小值，我们就是要求 $B$ 的最大值。我们先把已经求出的所有点 $P(X,Y)$ 画出来：\n![1](/post-images/Slope-optimization-DP-1.png)\n我们再画一条直线，直线的斜率就是 $A$，如果这条直线过点 $P(X_j,Y_j)$ ，那么对于这条直线这条直线就可以列出 $Y_j=A \\times X_j+B$，而 $B$ 就是我们要求的值。我们就要让 $B$ 尽量地小，也就是直线要尽量靠下。\n![2](/post-images/Slope-optimization-DP-2.png)\n![3](/post-images/Slope-optimization-DP-3.png)\n## 实现方法\n就像这样我们就找到了 $B$ 的最小值，那么我们要如何实现呢？我们可以发现，如果一个点与他左右的两个点形成了“上凸”的形状，如上图的 $P_4$，可以肯定，这个点不可能成为一个最优解，也就是任意斜率的直线在 $B$ 最小的时候都不会经过这个点，那么我们就可以删去这个点。于是图就变成了这样：\n![4](/post-images/Slope-optimization-DP-4.png)\n下图是三根不同斜率的直线在 $B$ 取得最小值的情况，可以发现，每一条线过的第一个点，左边的线段的斜率小于这条直线的斜率，右边的线段大于等于这条直线时，$B$ 取得最小值。\n![5](/post-images/Slope-optimization-DP-5.png)\n于是我们自然而然地想到二分查找，可以在 $O(n\\log n)$ 的时间内完成。但是一般情况下，$a$ 是递增的，也就是说直线的斜率也是递增的。在这种情况下，我们又可以用单调队列了，只需要维护所有比当前直线斜率大的线段即可。枚举 $i$，对于每个 $i$：首先弹出队首，知道队首点和它的下一个点的线段斜率比直线 $i$ 的斜率小，就一直弹出队首。然后用队首点计算 $f[i]$。然后弹出队尾，如果队尾点与它的上一个点的线段斜率比点 $i(X_i,Y_i)$ 与队尾点的线段斜率大，也就是出现“上凸”，就一直弹出队尾。最后将点 $i$ 入队。\n于是我们用 $O(n)$ 的时间完成了这个 dp，这就是著名的斜率优化。\n## 总结\n我们来总结一下斜率优化的普遍规律。对于一个转移方程，$Y$ 就是只与 $j$ 有关的项，$A$ 就是 $i,j$ 的乘积项中与 $i$ 有关的因式，$X$ 就是 $i,j$ 乘积项中与 $j$ 有关的因式，$B$ 就是只与 $i$ 有关的项。知道了这些，就可以轻松解决许多斜率优化 dp 的题目了。\n## 注意事项\n实现斜率优化时需要注意几点：注意最小值与最大值的区别，最大值的判断方法与最小值相反，也就是整个图形是上凸的，每一个直线 $B$ 最大的时候前一个线段斜率比它大，后一个线段斜率比它小。注意计算斜率时判断两个点横坐标是否相同，如果忽略则会导致出现 $\\div 0$ 的情况出现，直接 $\\color{purple}{\\text{RE}}$。\n但是有的时候数组 $a$ 并不单调，意味着直线的斜率也不是单调的，这是我们就需要保存所有的节点，每一次二分查找，时间 $O(n\\log n)$。\n## code\n此代码为经典题 [P3195](https://www.luogu.com.cn/problem/P3195) 的代码。\n```cpp\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\ntypedef long long ll;\nconst int N=1000001;\nint n,m,a[N],Q[N*2],T=0,R=0;\nll b[N],c[N],f[N];\nll abc(int x,int y)\n{\n    if(c[x]==c[y]) return 1e18;\n    return ((f[x]+c[x]*c[x])-(f[y]+c[y]*c[y]))/(c[x]-c[y]);\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    c[0]=m+1;\n    for(int i=1;i<=n;++i)\n    {\n        scanf(\"%d\",&a[i]);\n        b[i]=b[i-1]+a[i]+1;\n        c[i]=c[i-1]+a[i]+1;\n    }\n    for(int i=1;i<=n;++i)\n    {\n        while(T<R&&abc(Q[T],Q[T+1])<2*b[i]) ++T;\n        f[i]=f[Q[T]]+b[i]*b[i]-2*b[i]*c[Q[T]]+c[Q[T]]*c[Q[T]];\n        while(T<R&&abc(Q[R],i)<abc(Q[R-1],Q[R])) --R;\n        Q[++R]=i;\n    }\n    printf(\"%lld\",f[n]);\n    return 0;\n}\n```","source":"_posts/Slope-optimization-DP.md","raw":"---\ntitle: '斜率优化dp'\ndate: 2022-04-03 21:51:09\ntags: [动态规划,单调队列,斜率优化dp]\ndescription: ' '\n---\n\n## 前言\n经典题：[P3195 [HNOI2008]玩具装箱](https://www.luogu.com.cn/problem/P3195)\n[斜率优化题单](/post/Slope-optimization-DP-problemlist/)\n之前我们学习了单调队列优化 dp，它可以用来解决转移方程中有 $i,j$ 相关项的和。但是如果转移方程中有 $i,j$ 的乘积项 $f[i]=\\min(f[j]+x \\times a[i]+y \\times a[j]+z \\times a[i] \\times a[j])(1\\leqslant j < i)$，单调队列就无法解决这种问题了，因为对于不同的 $i$，$j$ 相关项的最小值并不相同。所以我们需要用新的方法来解决。\n## 基本思路\n我们再来改写一下转移方程，就变成：$f[j]+y \\times a[j]=-z \\times a[i] \\times a[j]+f[i]-x \\times a[i](1\\leqslant j < i)$，当 $i$ 不变时，以 $j$ 为自变量，于是这个转移方程就变成了一个一次函数 $Y=A \\times X+B$，其中 $Y=f[j]+y \\times a[j]$，$A=-z \\times a[i]$，$X=a[j]$，$B=f[i]-x \\times a[i]$。如果我们要求 $f[i]$ 最小值，我们就是要求 $B$ 的最大值。我们先把已经求出的所有点 $P(X,Y)$ 画出来：\n![1](/post-images/Slope-optimization-DP-1.png)\n我们再画一条直线，直线的斜率就是 $A$，如果这条直线过点 $P(X_j,Y_j)$ ，那么对于这条直线这条直线就可以列出 $Y_j=A \\times X_j+B$，而 $B$ 就是我们要求的值。我们就要让 $B$ 尽量地小，也就是直线要尽量靠下。\n![2](/post-images/Slope-optimization-DP-2.png)\n![3](/post-images/Slope-optimization-DP-3.png)\n## 实现方法\n就像这样我们就找到了 $B$ 的最小值，那么我们要如何实现呢？我们可以发现，如果一个点与他左右的两个点形成了“上凸”的形状，如上图的 $P_4$，可以肯定，这个点不可能成为一个最优解，也就是任意斜率的直线在 $B$ 最小的时候都不会经过这个点，那么我们就可以删去这个点。于是图就变成了这样：\n![4](/post-images/Slope-optimization-DP-4.png)\n下图是三根不同斜率的直线在 $B$ 取得最小值的情况，可以发现，每一条线过的第一个点，左边的线段的斜率小于这条直线的斜率，右边的线段大于等于这条直线时，$B$ 取得最小值。\n![5](/post-images/Slope-optimization-DP-5.png)\n于是我们自然而然地想到二分查找，可以在 $O(n\\log n)$ 的时间内完成。但是一般情况下，$a$ 是递增的，也就是说直线的斜率也是递增的。在这种情况下，我们又可以用单调队列了，只需要维护所有比当前直线斜率大的线段即可。枚举 $i$，对于每个 $i$：首先弹出队首，知道队首点和它的下一个点的线段斜率比直线 $i$ 的斜率小，就一直弹出队首。然后用队首点计算 $f[i]$。然后弹出队尾，如果队尾点与它的上一个点的线段斜率比点 $i(X_i,Y_i)$ 与队尾点的线段斜率大，也就是出现“上凸”，就一直弹出队尾。最后将点 $i$ 入队。\n于是我们用 $O(n)$ 的时间完成了这个 dp，这就是著名的斜率优化。\n## 总结\n我们来总结一下斜率优化的普遍规律。对于一个转移方程，$Y$ 就是只与 $j$ 有关的项，$A$ 就是 $i,j$ 的乘积项中与 $i$ 有关的因式，$X$ 就是 $i,j$ 乘积项中与 $j$ 有关的因式，$B$ 就是只与 $i$ 有关的项。知道了这些，就可以轻松解决许多斜率优化 dp 的题目了。\n## 注意事项\n实现斜率优化时需要注意几点：注意最小值与最大值的区别，最大值的判断方法与最小值相反，也就是整个图形是上凸的，每一个直线 $B$ 最大的时候前一个线段斜率比它大，后一个线段斜率比它小。注意计算斜率时判断两个点横坐标是否相同，如果忽略则会导致出现 $\\div 0$ 的情况出现，直接 $\\color{purple}{\\text{RE}}$。\n但是有的时候数组 $a$ 并不单调，意味着直线的斜率也不是单调的，这是我们就需要保存所有的节点，每一次二分查找，时间 $O(n\\log n)$。\n## code\n此代码为经典题 [P3195](https://www.luogu.com.cn/problem/P3195) 的代码。\n```cpp\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\ntypedef long long ll;\nconst int N=1000001;\nint n,m,a[N],Q[N*2],T=0,R=0;\nll b[N],c[N],f[N];\nll abc(int x,int y)\n{\n    if(c[x]==c[y]) return 1e18;\n    return ((f[x]+c[x]*c[x])-(f[y]+c[y]*c[y]))/(c[x]-c[y]);\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    c[0]=m+1;\n    for(int i=1;i<=n;++i)\n    {\n        scanf(\"%d\",&a[i]);\n        b[i]=b[i-1]+a[i]+1;\n        c[i]=c[i-1]+a[i]+1;\n    }\n    for(int i=1;i<=n;++i)\n    {\n        while(T<R&&abc(Q[T],Q[T+1])<2*b[i]) ++T;\n        f[i]=f[Q[T]]+b[i]*b[i]-2*b[i]*c[Q[T]]+c[Q[T]]*c[Q[T]];\n        while(T<R&&abc(Q[R],i)<abc(Q[R-1],Q[R])) --R;\n        Q[++R]=i;\n    }\n    printf(\"%lld\",f[n]);\n    return 0;\n}\n```","slug":"Slope-optimization-DP","published":1,"updated":"2023-02-24T10:05:12.024Z","_id":"cleid928600262sjf81z67obe","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>经典题：<a href=\"https://www.luogu.com.cn/problem/P3195\">P3195 [HNOI2008]玩具装箱</a><br><a href=\"/post/Slope-optimization-DP-problemlist/\">斜率优化题单</a><br>之前我们学习了单调队列优化 dp，它可以用来解决转移方程中有 $i,j$ 相关项的和。但是如果转移方程中有 $i,j$ 的乘积项 $f[i]&#x3D;\\min(f[j]+x \\times a[i]+y \\times a[j]+z \\times a[i] \\times a[j])(1\\leqslant j &lt; i)$，单调队列就无法解决这种问题了，因为对于不同的 $i$，$j$ 相关项的最小值并不相同。所以我们需要用新的方法来解决。</p>\n<h2 id=\"基本思路\"><a href=\"#基本思路\" class=\"headerlink\" title=\"基本思路\"></a>基本思路</h2><p>我们再来改写一下转移方程，就变成：$f[j]+y \\times a[j]&#x3D;-z \\times a[i] \\times a[j]+f[i]-x \\times a[i](1\\leqslant j &lt; i)$，当 $i$ 不变时，以 $j$ 为自变量，于是这个转移方程就变成了一个一次函数 $Y&#x3D;A \\times X+B$，其中 $Y&#x3D;f[j]+y \\times a[j]$，$A&#x3D;-z \\times a[i]$，$X&#x3D;a[j]$，$B&#x3D;f[i]-x \\times a[i]$。如果我们要求 $f[i]$ 最小值，我们就是要求 $B$ 的最大值。我们先把已经求出的所有点 $P(X,Y)$ 画出来：<br><img src=\"/post-images/Slope-optimization-DP-1.png\" alt=\"1\"><br>我们再画一条直线，直线的斜率就是 $A$，如果这条直线过点 $P(X_j,Y_j)$ ，那么对于这条直线这条直线就可以列出 $Y_j&#x3D;A \\times X_j+B$，而 $B$ 就是我们要求的值。我们就要让 $B$ 尽量地小，也就是直线要尽量靠下。<br><img src=\"/post-images/Slope-optimization-DP-2.png\" alt=\"2\"><br><img src=\"/post-images/Slope-optimization-DP-3.png\" alt=\"3\"></p>\n<h2 id=\"实现方法\"><a href=\"#实现方法\" class=\"headerlink\" title=\"实现方法\"></a>实现方法</h2><p>就像这样我们就找到了 $B$ 的最小值，那么我们要如何实现呢？我们可以发现，如果一个点与他左右的两个点形成了“上凸”的形状，如上图的 $P_4$，可以肯定，这个点不可能成为一个最优解，也就是任意斜率的直线在 $B$ 最小的时候都不会经过这个点，那么我们就可以删去这个点。于是图就变成了这样：<br><img src=\"/post-images/Slope-optimization-DP-4.png\" alt=\"4\"><br>下图是三根不同斜率的直线在 $B$ 取得最小值的情况，可以发现，每一条线过的第一个点，左边的线段的斜率小于这条直线的斜率，右边的线段大于等于这条直线时，$B$ 取得最小值。<br><img src=\"/post-images/Slope-optimization-DP-5.png\" alt=\"5\"><br>于是我们自然而然地想到二分查找，可以在 $O(n\\log n)$ 的时间内完成。但是一般情况下，$a$ 是递增的，也就是说直线的斜率也是递增的。在这种情况下，我们又可以用单调队列了，只需要维护所有比当前直线斜率大的线段即可。枚举 $i$，对于每个 $i$：首先弹出队首，知道队首点和它的下一个点的线段斜率比直线 $i$ 的斜率小，就一直弹出队首。然后用队首点计算 $f[i]$。然后弹出队尾，如果队尾点与它的上一个点的线段斜率比点 $i(X_i,Y_i)$ 与队尾点的线段斜率大，也就是出现“上凸”，就一直弹出队尾。最后将点 $i$ 入队。<br>于是我们用 $O(n)$ 的时间完成了这个 dp，这就是著名的斜率优化。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>我们来总结一下斜率优化的普遍规律。对于一个转移方程，$Y$ 就是只与 $j$ 有关的项，$A$ 就是 $i,j$ 的乘积项中与 $i$ 有关的因式，$X$ 就是 $i,j$ 乘积项中与 $j$ 有关的因式，$B$ 就是只与 $i$ 有关的项。知道了这些，就可以轻松解决许多斜率优化 dp 的题目了。</p>\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><p>实现斜率优化时需要注意几点：注意最小值与最大值的区别，最大值的判断方法与最小值相反，也就是整个图形是上凸的，每一个直线 $B$ 最大的时候前一个线段斜率比它大，后一个线段斜率比它小。注意计算斜率时判断两个点横坐标是否相同，如果忽略则会导致出现 $\\div 0$ 的情况出现，直接 $\\color{purple}{\\text{RE}}$。<br>但是有的时候数组 $a$ 并不单调，意味着直线的斜率也不是单调的，这是我们就需要保存所有的节点，每一次二分查找，时间 $O(n\\log n)$。</p>\n<h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><p>此代码为经典题 <a href=\"https://www.luogu.com.cn/problem/P3195\">P3195</a> 的代码。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> ll;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1000001</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m,a[N],Q[N*<span class=\"number\">2</span>],T=<span class=\"number\">0</span>,R=<span class=\"number\">0</span>;</span><br><span class=\"line\">ll b[N],c[N],f[N];</span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">abc</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(c[x]==c[y]) <span class=\"keyword\">return</span> <span class=\"number\">1e18</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ((f[x]+c[x]*c[x])-(f[y]+c[y]*c[y]))/(c[x]-c[y]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class=\"line\">    c[<span class=\"number\">0</span>]=m+<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class=\"line\">        b[i]=b[i<span class=\"number\">-1</span>]+a[i]+<span class=\"number\">1</span>;</span><br><span class=\"line\">        c[i]=c[i<span class=\"number\">-1</span>]+a[i]+<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(T&lt;R&amp;&amp;<span class=\"built_in\">abc</span>(Q[T],Q[T+<span class=\"number\">1</span>])&lt;<span class=\"number\">2</span>*b[i]) ++T;</span><br><span class=\"line\">        f[i]=f[Q[T]]+b[i]*b[i]<span class=\"number\">-2</span>*b[i]*c[Q[T]]+c[Q[T]]*c[Q[T]];</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(T&lt;R&amp;&amp;<span class=\"built_in\">abc</span>(Q[R],i)&lt;<span class=\"built_in\">abc</span>(Q[R<span class=\"number\">-1</span>],Q[R])) --R;</span><br><span class=\"line\">        Q[++R]=i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld&quot;</span>,f[n]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>经典题：<a href=\"https://www.luogu.com.cn/problem/P3195\">P3195 [HNOI2008]玩具装箱</a><br><a href=\"/post/Slope-optimization-DP-problemlist/\">斜率优化题单</a><br>之前我们学习了单调队列优化 dp，它可以用来解决转移方程中有 $i,j$ 相关项的和。但是如果转移方程中有 $i,j$ 的乘积项 $f[i]&#x3D;\\min(f[j]+x \\times a[i]+y \\times a[j]+z \\times a[i] \\times a[j])(1\\leqslant j &lt; i)$，单调队列就无法解决这种问题了，因为对于不同的 $i$，$j$ 相关项的最小值并不相同。所以我们需要用新的方法来解决。</p>\n<h2 id=\"基本思路\"><a href=\"#基本思路\" class=\"headerlink\" title=\"基本思路\"></a>基本思路</h2><p>我们再来改写一下转移方程，就变成：$f[j]+y \\times a[j]&#x3D;-z \\times a[i] \\times a[j]+f[i]-x \\times a[i](1\\leqslant j &lt; i)$，当 $i$ 不变时，以 $j$ 为自变量，于是这个转移方程就变成了一个一次函数 $Y&#x3D;A \\times X+B$，其中 $Y&#x3D;f[j]+y \\times a[j]$，$A&#x3D;-z \\times a[i]$，$X&#x3D;a[j]$，$B&#x3D;f[i]-x \\times a[i]$。如果我们要求 $f[i]$ 最小值，我们就是要求 $B$ 的最大值。我们先把已经求出的所有点 $P(X,Y)$ 画出来：<br><img src=\"/post-images/Slope-optimization-DP-1.png\" alt=\"1\"><br>我们再画一条直线，直线的斜率就是 $A$，如果这条直线过点 $P(X_j,Y_j)$ ，那么对于这条直线这条直线就可以列出 $Y_j&#x3D;A \\times X_j+B$，而 $B$ 就是我们要求的值。我们就要让 $B$ 尽量地小，也就是直线要尽量靠下。<br><img src=\"/post-images/Slope-optimization-DP-2.png\" alt=\"2\"><br><img src=\"/post-images/Slope-optimization-DP-3.png\" alt=\"3\"></p>\n<h2 id=\"实现方法\"><a href=\"#实现方法\" class=\"headerlink\" title=\"实现方法\"></a>实现方法</h2><p>就像这样我们就找到了 $B$ 的最小值，那么我们要如何实现呢？我们可以发现，如果一个点与他左右的两个点形成了“上凸”的形状，如上图的 $P_4$，可以肯定，这个点不可能成为一个最优解，也就是任意斜率的直线在 $B$ 最小的时候都不会经过这个点，那么我们就可以删去这个点。于是图就变成了这样：<br><img src=\"/post-images/Slope-optimization-DP-4.png\" alt=\"4\"><br>下图是三根不同斜率的直线在 $B$ 取得最小值的情况，可以发现，每一条线过的第一个点，左边的线段的斜率小于这条直线的斜率，右边的线段大于等于这条直线时，$B$ 取得最小值。<br><img src=\"/post-images/Slope-optimization-DP-5.png\" alt=\"5\"><br>于是我们自然而然地想到二分查找，可以在 $O(n\\log n)$ 的时间内完成。但是一般情况下，$a$ 是递增的，也就是说直线的斜率也是递增的。在这种情况下，我们又可以用单调队列了，只需要维护所有比当前直线斜率大的线段即可。枚举 $i$，对于每个 $i$：首先弹出队首，知道队首点和它的下一个点的线段斜率比直线 $i$ 的斜率小，就一直弹出队首。然后用队首点计算 $f[i]$。然后弹出队尾，如果队尾点与它的上一个点的线段斜率比点 $i(X_i,Y_i)$ 与队尾点的线段斜率大，也就是出现“上凸”，就一直弹出队尾。最后将点 $i$ 入队。<br>于是我们用 $O(n)$ 的时间完成了这个 dp，这就是著名的斜率优化。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>我们来总结一下斜率优化的普遍规律。对于一个转移方程，$Y$ 就是只与 $j$ 有关的项，$A$ 就是 $i,j$ 的乘积项中与 $i$ 有关的因式，$X$ 就是 $i,j$ 乘积项中与 $j$ 有关的因式，$B$ 就是只与 $i$ 有关的项。知道了这些，就可以轻松解决许多斜率优化 dp 的题目了。</p>\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><p>实现斜率优化时需要注意几点：注意最小值与最大值的区别，最大值的判断方法与最小值相反，也就是整个图形是上凸的，每一个直线 $B$ 最大的时候前一个线段斜率比它大，后一个线段斜率比它小。注意计算斜率时判断两个点横坐标是否相同，如果忽略则会导致出现 $\\div 0$ 的情况出现，直接 $\\color{purple}{\\text{RE}}$。<br>但是有的时候数组 $a$ 并不单调，意味着直线的斜率也不是单调的，这是我们就需要保存所有的节点，每一次二分查找，时间 $O(n\\log n)$。</p>\n<h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><p>此代码为经典题 <a href=\"https://www.luogu.com.cn/problem/P3195\">P3195</a> 的代码。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> ll;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1000001</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m,a[N],Q[N*<span class=\"number\">2</span>],T=<span class=\"number\">0</span>,R=<span class=\"number\">0</span>;</span><br><span class=\"line\">ll b[N],c[N],f[N];</span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">abc</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(c[x]==c[y]) <span class=\"keyword\">return</span> <span class=\"number\">1e18</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ((f[x]+c[x]*c[x])-(f[y]+c[y]*c[y]))/(c[x]-c[y]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class=\"line\">    c[<span class=\"number\">0</span>]=m+<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class=\"line\">        b[i]=b[i<span class=\"number\">-1</span>]+a[i]+<span class=\"number\">1</span>;</span><br><span class=\"line\">        c[i]=c[i<span class=\"number\">-1</span>]+a[i]+<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(T&lt;R&amp;&amp;<span class=\"built_in\">abc</span>(Q[T],Q[T+<span class=\"number\">1</span>])&lt;<span class=\"number\">2</span>*b[i]) ++T;</span><br><span class=\"line\">        f[i]=f[Q[T]]+b[i]*b[i]<span class=\"number\">-2</span>*b[i]*c[Q[T]]+c[Q[T]]*c[Q[T]];</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(T&lt;R&amp;&amp;<span class=\"built_in\">abc</span>(Q[R],i)&lt;<span class=\"built_in\">abc</span>(Q[R<span class=\"number\">-1</span>],Q[R])) --R;</span><br><span class=\"line\">        Q[++R]=i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld&quot;</span>,f[n]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"可持续化线段树","date":"2022-03-10T05:40:48.000Z","description":" ","_content":"\n# 可持续化线段树\n## 前言\n&#8195； 模板题：[P3919 【模板】可持久化线段树 1（可持久化数组）](https://www.luogu.com.cn/problem/P3919)\n我们学习了很多的数据结构，它们支持修改、查询的操作。但是如果我们想在过去的某个版本上进行操作，我们就需要可持续化数据结构，比如说可持续化线段树，它支持在 $O(\\log n)$ 的时间内进行操作。\n## 基本思想\n朴素的方法实现可持续化需要记录每个版本，修改一次就需要 $O(n)$ 的时间来复制，不能接受。但是我们可以发现，线段树上每一次操作都只改变树上的一条链，如果我们只复制这条链，就只需要 $O(\\log n)$ 的时间来复制了。\n我们要在只复制一条链的情况下保持原树和新树都是完整的，就需要把没有改变的所有点与新的链连在一起，并记录每一个版本的根节点。由于每一次修改都要改变根节点，所以每一个版本都对应一个根节点，这个根节点的子树就是一颗完整的线段树。如下图：\n![0](/post-images/Sustainable-segment-tree-1.jpg =450x)\n![1](/post-images/Sustainable-segment-tree-2.jpg =450x)\n（图片来自网络）\n## 储存及更新\n可持续化线段树不再像线段树那样储存左端点与右端点，而是左儿子与右儿子，因为可持续化线段树不再满足完全二叉树那样的编号规律，但是左右端点都可以轻松算出来。\n```cpp\nstruct tree\n{\n    int l,r,s;\n}T[100000001];\nvoid pushup(int x)\n{\n    T[x].s=T[T[x].l].s+T[T[x].r].s;\n}\n```\n## 建树\n可持续化线段树的建立和线段树几乎一样，只是新节点的编号要单独算，这个过程要传址，就像平衡树那样。\n```cpp\nvoid build(int &x,int l,int r)\n{\n    x=++p;\n    if(l==r)\n    {\n        T[x].s=a[l];\n        return;\n    }\n    int z=l+r>>1;\n    build(T[x].l,l,z);\n    build(T[x].r,z+1,r);\n}\n```\n## 修改\n可持续化线段树的单点修改需要把所修改节点到根节点的所有节点全部备份一遍、更改，注意这个过程还要传递当前区间的左右端点，同时也要传址。\n```cpp\nvoid modify(int &x,int l,int r,int q,int k)\n{\n    T[++p]=T[x];\n    T[p].s=k;\n    x=p;\n    if(l==r) return;\n    int z=l+r>>1;\n    if(q<=z) modify(T[x].l,l,z,q,k);\n    else modify(T[x].r,z+1,r,q,k);\n}\n```\n## 查询\n查询操作就和线段树十分相似了，只是同时需要传递左右端点。\n```cpp\nint sum(int x,int l,int r,int l0,int r0)\n{\n    if(l>=l0&&r<=r0) return T[x].s;\n    int z=l+r>>1,s=0;\n    if(l0<=z) s+=sum(T[x].l,l,z,l0,r0);\n    if(r0>z) s+=sum(T[x].r,z+1,r,l0,r0);\n    return s;\n}\n```\n## 调用\n可持续化线段树调用的根节点是指定版本的根节点复制过来的根节点，这样调用的时候就会在这个根节点下面新建节点，同时这个根节点也会在操作后指向新的节点。不过板子题比较特殊的是查询操作也要新建版本，我们只需要把根节点复制一遍即可，其它节点都不用变。可持续化线段树一般也要建树，对应的根节点为 $0$，这样可以防止在一些操作中越界。\n```cpp\nbuild(rt[0],1,n);\nfor(int i=1;i<=m;++i)\n{\n    int d,z,x,y;\n    scanf(\"%d%d%d%d\",&d,&z,&x,&y);\n    rt[i]=rt[d];\n    if(z==1)\n    {\n         modify(rt[i],1,n,x,y);\n    }\n    else\n    {\n        printf(\"%d\\n\",sum(rt[i],1,n,x,y));\n    }\n}\n```\n## code\n```cpp\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\nint n,m,p=0,a[1000001],b[1000001],rt[1000001];\nstruct tree\n{\n    int l,r,s;\n}T[100000001];\nvoid pushup(int x)\n{\n    T[x].s=T[T[x].l].s+T[T[x].r].s;\n}\nvoid build(int &x,int l,int r)\n{\n    x=++p;\n    if(l==r)\n    {\n        T[x].s=a[l];\n        return;\n    }\n    int z=l+r>>1;\n    build(T[x].l,l,z);\n    build(T[x].r,z+1,r);\n}\nvoid modify(int &x,int l,int r,int q,int k)\n{\n    T[++p]=T[x];\n    T[p].s=k;\n    x=p;\n    if(l==r) return;\n    int z=l+r>>1;\n    if(q<=z) modify(T[x].l,l,z,q,k);\n    else modify(T[x].r,z+1,r,q,k);\n}\nint sum(int x,int l,int r,int l0,int r0)\n{\n    if(l>=l0&&r<=r0) return T[x].s;\n    int z=l+r>>1,s=0;\n    if(l0<=z) s+=sum(T[x].l,l,z,l0,r0);\n    if(r0>z) s+=sum(T[x].r,z+1,r,l0,r0);\n    return s;\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n;++i)\n    {\n        scanf(\"%d\",&a[i]);\n    }\n    build(rt[0],1,n);\n    for(int i=1;i<=m;++i)\n    {\n        int d,z,x,y;\n        scanf(\"%d%d%d%d\",&d,&z,&x,&y);\n        rt[i]=rt[d];\n        if(z==1)\n        {\n            modify(rt[i],1,n,x,y);\n        }\n        else\n        {\n            printf(\"%d\\n\",sum(rt[i],1,n,x,y));\n        }\n    }\n    return 0;\n}\n```\n# 主席树\n## 前言\n&#8195； 模板题：[P3834 【模板】可持久化线段树 2](https://www.luogu.com.cn/problem/P3834)\n主席树是可持续化线段树的一种经典应用，但是它不是用来解决需要操作历史版本的问题的，而是用来解决一个不可修改的序列的，经典问题就是一个数在区间 $[l,r]$ 的排名和区间第 $k$ 小，不带修改操作的话主席树就是最好的解法。\n## 基本思想\n要找一个数在区间 $[l,r]$ 的排名，我们很容易想到对于每个数做前缀和的方法，但是要从第 $i-1$ 个数转移到第 $i$ 个数，就需要转移 $q$ 次（$q$ 是所有数离散化后的数的个数），不能接受。但是我们发现，每一次转移都只有一个数发生了改变，其它的都与上一个版本相同。而可持续化线段树就是在历史版本上用 $\\log n$ 的时间复制并修改一个版本上的一个点。\n主席树的基本思想是把 $1\\sim n$ 这 $n$ 个点看做 $n$ 个版本，对于版本 $i$ 记录每个数 $1\\sim q$ 在 $[1,i]$ 中出现的次数 $b$，而主席树维护的就是 $b$ 数组。为什么要这样做？如果我们要找离散化后的数 $x$ 在区间 [l,r] 中的排名，我们只需要在版本 $l-1$ 中找到 $[1,x-1]$ 的和，同时在 $r$ 中找到 $[1,r]$ 的和，相减即为答案。而主席树版本 $i$ 与版本 $i-1$ 之间只有原序列 $a$ 的第 $i$ 上的数对应的位置的值改变了，相当于单点修改。但是在查询的时候有可能要访问到版本 $0$ 所以我们要先建立 $0$ 号版本，防止越界。\n要解决区间第 $k$ 小的问题，我们只需要在线段树上进行二分。同时维护版本 $l-1$ 的当前节点 $x1$ 与版本 $r$ 上的当前节点 $x2$，如果 $x2$ 的左子树的和减去 $x1$ 左子树的和小于等于 $k$，表明区间 $[l,r]$ 中 $1\\sim a_q$ 的数的总数比 $k$ 多，答案在左子树上，否则在右子树上。\n## code\n```cpp\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\nint n,m,p=0,a[1000001],b[1000001],rt[1000001];\nstruct tree\n{\n    int l,r,s;\n}T[10000001];\nvoid pushup(int x)\n{\n    T[x].s=T[T[x].l].s+T[T[x].r].s;\n}\nvoid build(int &x,int l,int r)\n{\n    x=++p;\n    if(l==r) return;\n    int z=l+r>>1;\n    build(T[x].l,l,z);\n    build(T[x].r,z+1,r);\n}\nvoid modify(int &x,int l,int r,int q)\n{\n    T[++p]=T[x];\n    ++T[p].s;\n    x=p;\n    if(l==r) return;\n    int z=l+r>>1;\n    if(q<=z) modify(T[x].l,l,z,q);\n    else modify(T[x].r,z+1,r,q);\n}\nint sum(int x1,int x2,int l,int r,int q)\n{\n    if(l==r) return b[l];\n    int z=l+r>>1,k=T[T[x2].l].s-T[T[x1].l].s;\n    if(q<=k) return sum(T[x1].l,T[x2].l,l,z,q);\n    else return sum(T[x1].r,T[x2].r,z+1,r,q-k);\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n;++i)\n    {\n        scanf(\"%d\",&a[i]);\n        b[i]=a[i];\n    }\n    sort(b+1,b+n+1);\n    int q=unique(b+1,b+n+1)-b-1;\n    build(rt[0],1,q);\n    for(int i=1;i<=n;++i)\n    {\n        rt[i]=rt[i-1];\n        modify(rt[i],1,q,lower_bound(b+1,b+q+1,a[i])-b);\n    }\n    for(int i=1;i<=m;++i)\n    {\n        int l,r,k;\n        scanf(\"%d%d%d\",&l,&r,&k);\n        printf(\"%d\\n\",sum(rt[l-1],rt[r],1,q,k));\n    }\n    return 0;\n}\n```","source":"_posts/Sustainable-segment-tree.md","raw":"---\ntitle: '可持续化线段树'\ndate: 2022-03-10 13:40:48\ntags: [可持续化线段树,主席树]\ndescription: ' '\n---\n\n# 可持续化线段树\n## 前言\n&#8195； 模板题：[P3919 【模板】可持久化线段树 1（可持久化数组）](https://www.luogu.com.cn/problem/P3919)\n我们学习了很多的数据结构，它们支持修改、查询的操作。但是如果我们想在过去的某个版本上进行操作，我们就需要可持续化数据结构，比如说可持续化线段树，它支持在 $O(\\log n)$ 的时间内进行操作。\n## 基本思想\n朴素的方法实现可持续化需要记录每个版本，修改一次就需要 $O(n)$ 的时间来复制，不能接受。但是我们可以发现，线段树上每一次操作都只改变树上的一条链，如果我们只复制这条链，就只需要 $O(\\log n)$ 的时间来复制了。\n我们要在只复制一条链的情况下保持原树和新树都是完整的，就需要把没有改变的所有点与新的链连在一起，并记录每一个版本的根节点。由于每一次修改都要改变根节点，所以每一个版本都对应一个根节点，这个根节点的子树就是一颗完整的线段树。如下图：\n![0](/post-images/Sustainable-segment-tree-1.jpg =450x)\n![1](/post-images/Sustainable-segment-tree-2.jpg =450x)\n（图片来自网络）\n## 储存及更新\n可持续化线段树不再像线段树那样储存左端点与右端点，而是左儿子与右儿子，因为可持续化线段树不再满足完全二叉树那样的编号规律，但是左右端点都可以轻松算出来。\n```cpp\nstruct tree\n{\n    int l,r,s;\n}T[100000001];\nvoid pushup(int x)\n{\n    T[x].s=T[T[x].l].s+T[T[x].r].s;\n}\n```\n## 建树\n可持续化线段树的建立和线段树几乎一样，只是新节点的编号要单独算，这个过程要传址，就像平衡树那样。\n```cpp\nvoid build(int &x,int l,int r)\n{\n    x=++p;\n    if(l==r)\n    {\n        T[x].s=a[l];\n        return;\n    }\n    int z=l+r>>1;\n    build(T[x].l,l,z);\n    build(T[x].r,z+1,r);\n}\n```\n## 修改\n可持续化线段树的单点修改需要把所修改节点到根节点的所有节点全部备份一遍、更改，注意这个过程还要传递当前区间的左右端点，同时也要传址。\n```cpp\nvoid modify(int &x,int l,int r,int q,int k)\n{\n    T[++p]=T[x];\n    T[p].s=k;\n    x=p;\n    if(l==r) return;\n    int z=l+r>>1;\n    if(q<=z) modify(T[x].l,l,z,q,k);\n    else modify(T[x].r,z+1,r,q,k);\n}\n```\n## 查询\n查询操作就和线段树十分相似了，只是同时需要传递左右端点。\n```cpp\nint sum(int x,int l,int r,int l0,int r0)\n{\n    if(l>=l0&&r<=r0) return T[x].s;\n    int z=l+r>>1,s=0;\n    if(l0<=z) s+=sum(T[x].l,l,z,l0,r0);\n    if(r0>z) s+=sum(T[x].r,z+1,r,l0,r0);\n    return s;\n}\n```\n## 调用\n可持续化线段树调用的根节点是指定版本的根节点复制过来的根节点，这样调用的时候就会在这个根节点下面新建节点，同时这个根节点也会在操作后指向新的节点。不过板子题比较特殊的是查询操作也要新建版本，我们只需要把根节点复制一遍即可，其它节点都不用变。可持续化线段树一般也要建树，对应的根节点为 $0$，这样可以防止在一些操作中越界。\n```cpp\nbuild(rt[0],1,n);\nfor(int i=1;i<=m;++i)\n{\n    int d,z,x,y;\n    scanf(\"%d%d%d%d\",&d,&z,&x,&y);\n    rt[i]=rt[d];\n    if(z==1)\n    {\n         modify(rt[i],1,n,x,y);\n    }\n    else\n    {\n        printf(\"%d\\n\",sum(rt[i],1,n,x,y));\n    }\n}\n```\n## code\n```cpp\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\nint n,m,p=0,a[1000001],b[1000001],rt[1000001];\nstruct tree\n{\n    int l,r,s;\n}T[100000001];\nvoid pushup(int x)\n{\n    T[x].s=T[T[x].l].s+T[T[x].r].s;\n}\nvoid build(int &x,int l,int r)\n{\n    x=++p;\n    if(l==r)\n    {\n        T[x].s=a[l];\n        return;\n    }\n    int z=l+r>>1;\n    build(T[x].l,l,z);\n    build(T[x].r,z+1,r);\n}\nvoid modify(int &x,int l,int r,int q,int k)\n{\n    T[++p]=T[x];\n    T[p].s=k;\n    x=p;\n    if(l==r) return;\n    int z=l+r>>1;\n    if(q<=z) modify(T[x].l,l,z,q,k);\n    else modify(T[x].r,z+1,r,q,k);\n}\nint sum(int x,int l,int r,int l0,int r0)\n{\n    if(l>=l0&&r<=r0) return T[x].s;\n    int z=l+r>>1,s=0;\n    if(l0<=z) s+=sum(T[x].l,l,z,l0,r0);\n    if(r0>z) s+=sum(T[x].r,z+1,r,l0,r0);\n    return s;\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n;++i)\n    {\n        scanf(\"%d\",&a[i]);\n    }\n    build(rt[0],1,n);\n    for(int i=1;i<=m;++i)\n    {\n        int d,z,x,y;\n        scanf(\"%d%d%d%d\",&d,&z,&x,&y);\n        rt[i]=rt[d];\n        if(z==1)\n        {\n            modify(rt[i],1,n,x,y);\n        }\n        else\n        {\n            printf(\"%d\\n\",sum(rt[i],1,n,x,y));\n        }\n    }\n    return 0;\n}\n```\n# 主席树\n## 前言\n&#8195； 模板题：[P3834 【模板】可持久化线段树 2](https://www.luogu.com.cn/problem/P3834)\n主席树是可持续化线段树的一种经典应用，但是它不是用来解决需要操作历史版本的问题的，而是用来解决一个不可修改的序列的，经典问题就是一个数在区间 $[l,r]$ 的排名和区间第 $k$ 小，不带修改操作的话主席树就是最好的解法。\n## 基本思想\n要找一个数在区间 $[l,r]$ 的排名，我们很容易想到对于每个数做前缀和的方法，但是要从第 $i-1$ 个数转移到第 $i$ 个数，就需要转移 $q$ 次（$q$ 是所有数离散化后的数的个数），不能接受。但是我们发现，每一次转移都只有一个数发生了改变，其它的都与上一个版本相同。而可持续化线段树就是在历史版本上用 $\\log n$ 的时间复制并修改一个版本上的一个点。\n主席树的基本思想是把 $1\\sim n$ 这 $n$ 个点看做 $n$ 个版本，对于版本 $i$ 记录每个数 $1\\sim q$ 在 $[1,i]$ 中出现的次数 $b$，而主席树维护的就是 $b$ 数组。为什么要这样做？如果我们要找离散化后的数 $x$ 在区间 [l,r] 中的排名，我们只需要在版本 $l-1$ 中找到 $[1,x-1]$ 的和，同时在 $r$ 中找到 $[1,r]$ 的和，相减即为答案。而主席树版本 $i$ 与版本 $i-1$ 之间只有原序列 $a$ 的第 $i$ 上的数对应的位置的值改变了，相当于单点修改。但是在查询的时候有可能要访问到版本 $0$ 所以我们要先建立 $0$ 号版本，防止越界。\n要解决区间第 $k$ 小的问题，我们只需要在线段树上进行二分。同时维护版本 $l-1$ 的当前节点 $x1$ 与版本 $r$ 上的当前节点 $x2$，如果 $x2$ 的左子树的和减去 $x1$ 左子树的和小于等于 $k$，表明区间 $[l,r]$ 中 $1\\sim a_q$ 的数的总数比 $k$ 多，答案在左子树上，否则在右子树上。\n## code\n```cpp\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\nint n,m,p=0,a[1000001],b[1000001],rt[1000001];\nstruct tree\n{\n    int l,r,s;\n}T[10000001];\nvoid pushup(int x)\n{\n    T[x].s=T[T[x].l].s+T[T[x].r].s;\n}\nvoid build(int &x,int l,int r)\n{\n    x=++p;\n    if(l==r) return;\n    int z=l+r>>1;\n    build(T[x].l,l,z);\n    build(T[x].r,z+1,r);\n}\nvoid modify(int &x,int l,int r,int q)\n{\n    T[++p]=T[x];\n    ++T[p].s;\n    x=p;\n    if(l==r) return;\n    int z=l+r>>1;\n    if(q<=z) modify(T[x].l,l,z,q);\n    else modify(T[x].r,z+1,r,q);\n}\nint sum(int x1,int x2,int l,int r,int q)\n{\n    if(l==r) return b[l];\n    int z=l+r>>1,k=T[T[x2].l].s-T[T[x1].l].s;\n    if(q<=k) return sum(T[x1].l,T[x2].l,l,z,q);\n    else return sum(T[x1].r,T[x2].r,z+1,r,q-k);\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n;++i)\n    {\n        scanf(\"%d\",&a[i]);\n        b[i]=a[i];\n    }\n    sort(b+1,b+n+1);\n    int q=unique(b+1,b+n+1)-b-1;\n    build(rt[0],1,q);\n    for(int i=1;i<=n;++i)\n    {\n        rt[i]=rt[i-1];\n        modify(rt[i],1,q,lower_bound(b+1,b+q+1,a[i])-b);\n    }\n    for(int i=1;i<=m;++i)\n    {\n        int l,r,k;\n        scanf(\"%d%d%d\",&l,&r,&k);\n        printf(\"%d\\n\",sum(rt[l-1],rt[r],1,q,k));\n    }\n    return 0;\n}\n```","slug":"Sustainable-segment-tree","published":1,"updated":"2022-11-28T13:55:21.975Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cleid928700282sjfghjkdqlz","content":"<h1 id=\"可持续化线段树\"><a href=\"#可持续化线段树\" class=\"headerlink\" title=\"可持续化线段树\"></a>可持续化线段树</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>&amp;#8195； 模板题：<a href=\"https://www.luogu.com.cn/problem/P3919\">P3919 【模板】可持久化线段树 1（可持久化数组）</a><br>我们学习了很多的数据结构，它们支持修改、查询的操作。但是如果我们想在过去的某个版本上进行操作，我们就需要可持续化数据结构，比如说可持续化线段树，它支持在 $O(\\log n)$ 的时间内进行操作。</p>\n<h2 id=\"基本思想\"><a href=\"#基本思想\" class=\"headerlink\" title=\"基本思想\"></a>基本思想</h2><p>朴素的方法实现可持续化需要记录每个版本，修改一次就需要 $O(n)$ 的时间来复制，不能接受。但是我们可以发现，线段树上每一次操作都只改变树上的一条链，如果我们只复制这条链，就只需要 $O(\\log n)$ 的时间来复制了。<br>我们要在只复制一条链的情况下保持原树和新树都是完整的，就需要把没有改变的所有点与新的链连在一起，并记录每一个版本的根节点。由于每一次修改都要改变根节点，所以每一个版本都对应一个根节点，这个根节点的子树就是一颗完整的线段树。如下图：<br>![0](&#x2F;post-images&#x2F;Sustainable-segment-tree-1.jpg &#x3D;450x)<br>![1](&#x2F;post-images&#x2F;Sustainable-segment-tree-2.jpg &#x3D;450x)<br>（图片来自网络）</p>\n<h2 id=\"储存及更新\"><a href=\"#储存及更新\" class=\"headerlink\" title=\"储存及更新\"></a>储存及更新</h2><p>可持续化线段树不再像线段树那样储存左端点与右端点，而是左儿子与右儿子，因为可持续化线段树不再满足完全二叉树那样的编号规律，但是左右端点都可以轻松算出来。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">tree</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> l,r,s;</span><br><span class=\"line\">&#125;T[<span class=\"number\">100000001</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pushup</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    T[x].s=T[T[x].l].s+T[T[x].r].s;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"建树\"><a href=\"#建树\" class=\"headerlink\" title=\"建树\"></a>建树</h2><p>可持续化线段树的建立和线段树几乎一样，只是新节点的编号要单独算，这个过程要传址，就像平衡树那样。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"type\">int</span> &amp;x,<span class=\"type\">int</span> l,<span class=\"type\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    x=++p;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l==r)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        T[x].s=a[l];</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> z=l+r&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(T[x].l,l,z);</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(T[x].r,z+<span class=\"number\">1</span>,r);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"修改\"><a href=\"#修改\" class=\"headerlink\" title=\"修改\"></a>修改</h2><p>可持续化线段树的单点修改需要把所修改节点到根节点的所有节点全部备份一遍、更改，注意这个过程还要传递当前区间的左右端点，同时也要传址。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">modify</span><span class=\"params\">(<span class=\"type\">int</span> &amp;x,<span class=\"type\">int</span> l,<span class=\"type\">int</span> r,<span class=\"type\">int</span> q,<span class=\"type\">int</span> k)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    T[++p]=T[x];</span><br><span class=\"line\">    T[p].s=k;</span><br><span class=\"line\">    x=p;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l==r) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> z=l+r&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(q&lt;=z) <span class=\"built_in\">modify</span>(T[x].l,l,z,q,k);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"built_in\">modify</span>(T[x].r,z+<span class=\"number\">1</span>,r,q,k);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"查询\"><a href=\"#查询\" class=\"headerlink\" title=\"查询\"></a>查询</h2><p>查询操作就和线段树十分相似了，只是同时需要传递左右端点。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">sum</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> l,<span class=\"type\">int</span> r,<span class=\"type\">int</span> l0,<span class=\"type\">int</span> r0)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l&gt;=l0&amp;&amp;r&lt;=r0) <span class=\"keyword\">return</span> T[x].s;</span><br><span class=\"line\">    <span class=\"type\">int</span> z=l+r&gt;&gt;<span class=\"number\">1</span>,s=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l0&lt;=z) s+=<span class=\"built_in\">sum</span>(T[x].l,l,z,l0,r0);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r0&gt;z) s+=<span class=\"built_in\">sum</span>(T[x].r,z+<span class=\"number\">1</span>,r,l0,r0);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"调用\"><a href=\"#调用\" class=\"headerlink\" title=\"调用\"></a>调用</h2><p>可持续化线段树调用的根节点是指定版本的根节点复制过来的根节点，这样调用的时候就会在这个根节点下面新建节点，同时这个根节点也会在操作后指向新的节点。不过板子题比较特殊的是查询操作也要新建版本，我们只需要把根节点复制一遍即可，其它节点都不用变。可持续化线段树一般也要建树，对应的根节点为 $0$，这样可以防止在一些操作中越界。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">build</span>(rt[<span class=\"number\">0</span>],<span class=\"number\">1</span>,n);</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> d,z,x,y;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d%d&quot;</span>,&amp;d,&amp;z,&amp;x,&amp;y);</span><br><span class=\"line\">    rt[i]=rt[d];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(z==<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">         <span class=\"built_in\">modify</span>(rt[i],<span class=\"number\">1</span>,n,x,y);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,<span class=\"built_in\">sum</span>(rt[i],<span class=\"number\">1</span>,n,x,y));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m,p=<span class=\"number\">0</span>,a[<span class=\"number\">1000001</span>],b[<span class=\"number\">1000001</span>],rt[<span class=\"number\">1000001</span>];</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">tree</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> l,r,s;</span><br><span class=\"line\">&#125;T[<span class=\"number\">100000001</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pushup</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    T[x].s=T[T[x].l].s+T[T[x].r].s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"type\">int</span> &amp;x,<span class=\"type\">int</span> l,<span class=\"type\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    x=++p;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l==r)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        T[x].s=a[l];</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> z=l+r&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(T[x].l,l,z);</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(T[x].r,z+<span class=\"number\">1</span>,r);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">modify</span><span class=\"params\">(<span class=\"type\">int</span> &amp;x,<span class=\"type\">int</span> l,<span class=\"type\">int</span> r,<span class=\"type\">int</span> q,<span class=\"type\">int</span> k)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    T[++p]=T[x];</span><br><span class=\"line\">    T[p].s=k;</span><br><span class=\"line\">    x=p;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l==r) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> z=l+r&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(q&lt;=z) <span class=\"built_in\">modify</span>(T[x].l,l,z,q,k);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"built_in\">modify</span>(T[x].r,z+<span class=\"number\">1</span>,r,q,k);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">sum</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> l,<span class=\"type\">int</span> r,<span class=\"type\">int</span> l0,<span class=\"type\">int</span> r0)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l&gt;=l0&amp;&amp;r&lt;=r0) <span class=\"keyword\">return</span> T[x].s;</span><br><span class=\"line\">    <span class=\"type\">int</span> z=l+r&gt;&gt;<span class=\"number\">1</span>,s=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l0&lt;=z) s+=<span class=\"built_in\">sum</span>(T[x].l,l,z,l0,r0);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r0&gt;z) s+=<span class=\"built_in\">sum</span>(T[x].r,z+<span class=\"number\">1</span>,r,l0,r0);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(rt[<span class=\"number\">0</span>],<span class=\"number\">1</span>,n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> d,z,x,y;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d%d&quot;</span>,&amp;d,&amp;z,&amp;x,&amp;y);</span><br><span class=\"line\">        rt[i]=rt[d];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(z==<span class=\"number\">1</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">modify</span>(rt[i],<span class=\"number\">1</span>,n,x,y);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,<span class=\"built_in\">sum</span>(rt[i],<span class=\"number\">1</span>,n,x,y));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"主席树\"><a href=\"#主席树\" class=\"headerlink\" title=\"主席树\"></a>主席树</h1><h2 id=\"前言-1\"><a href=\"#前言-1\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>&amp;#8195； 模板题：<a href=\"https://www.luogu.com.cn/problem/P3834\">P3834 【模板】可持久化线段树 2</a><br>主席树是可持续化线段树的一种经典应用，但是它不是用来解决需要操作历史版本的问题的，而是用来解决一个不可修改的序列的，经典问题就是一个数在区间 $[l,r]$ 的排名和区间第 $k$ 小，不带修改操作的话主席树就是最好的解法。</p>\n<h2 id=\"基本思想-1\"><a href=\"#基本思想-1\" class=\"headerlink\" title=\"基本思想\"></a>基本思想</h2><p>要找一个数在区间 $[l,r]$ 的排名，我们很容易想到对于每个数做前缀和的方法，但是要从第 $i-1$ 个数转移到第 $i$ 个数，就需要转移 $q$ 次（$q$ 是所有数离散化后的数的个数），不能接受。但是我们发现，每一次转移都只有一个数发生了改变，其它的都与上一个版本相同。而可持续化线段树就是在历史版本上用 $\\log n$ 的时间复制并修改一个版本上的一个点。<br>主席树的基本思想是把 $1\\sim n$ 这 $n$ 个点看做 $n$ 个版本，对于版本 $i$ 记录每个数 $1\\sim q$ 在 $[1,i]$ 中出现的次数 $b$，而主席树维护的就是 $b$ 数组。为什么要这样做？如果我们要找离散化后的数 $x$ 在区间 [l,r] 中的排名，我们只需要在版本 $l-1$ 中找到 $[1,x-1]$ 的和，同时在 $r$ 中找到 $[1,r]$ 的和，相减即为答案。而主席树版本 $i$ 与版本 $i-1$ 之间只有原序列 $a$ 的第 $i$ 上的数对应的位置的值改变了，相当于单点修改。但是在查询的时候有可能要访问到版本 $0$ 所以我们要先建立 $0$ 号版本，防止越界。<br>要解决区间第 $k$ 小的问题，我们只需要在线段树上进行二分。同时维护版本 $l-1$ 的当前节点 $x1$ 与版本 $r$ 上的当前节点 $x2$，如果 $x2$ 的左子树的和减去 $x1$ 左子树的和小于等于 $k$，表明区间 $[l,r]$ 中 $1\\sim a_q$ 的数的总数比 $k$ 多，答案在左子树上，否则在右子树上。</p>\n<h2 id=\"code-1\"><a href=\"#code-1\" class=\"headerlink\" title=\"code\"></a>code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m,p=<span class=\"number\">0</span>,a[<span class=\"number\">1000001</span>],b[<span class=\"number\">1000001</span>],rt[<span class=\"number\">1000001</span>];</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">tree</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> l,r,s;</span><br><span class=\"line\">&#125;T[<span class=\"number\">10000001</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pushup</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    T[x].s=T[T[x].l].s+T[T[x].r].s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"type\">int</span> &amp;x,<span class=\"type\">int</span> l,<span class=\"type\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    x=++p;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l==r) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> z=l+r&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(T[x].l,l,z);</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(T[x].r,z+<span class=\"number\">1</span>,r);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">modify</span><span class=\"params\">(<span class=\"type\">int</span> &amp;x,<span class=\"type\">int</span> l,<span class=\"type\">int</span> r,<span class=\"type\">int</span> q)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    T[++p]=T[x];</span><br><span class=\"line\">    ++T[p].s;</span><br><span class=\"line\">    x=p;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l==r) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> z=l+r&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(q&lt;=z) <span class=\"built_in\">modify</span>(T[x].l,l,z,q);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"built_in\">modify</span>(T[x].r,z+<span class=\"number\">1</span>,r,q);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">sum</span><span class=\"params\">(<span class=\"type\">int</span> x1,<span class=\"type\">int</span> x2,<span class=\"type\">int</span> l,<span class=\"type\">int</span> r,<span class=\"type\">int</span> q)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l==r) <span class=\"keyword\">return</span> b[l];</span><br><span class=\"line\">    <span class=\"type\">int</span> z=l+r&gt;&gt;<span class=\"number\">1</span>,k=T[T[x2].l].s-T[T[x1].l].s;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(q&lt;=k) <span class=\"keyword\">return</span> <span class=\"built_in\">sum</span>(T[x1].l,T[x2].l,l,z,q);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"built_in\">sum</span>(T[x1].r,T[x2].r,z+<span class=\"number\">1</span>,r,q-k);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class=\"line\">        b[i]=a[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(b+<span class=\"number\">1</span>,b+n+<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"type\">int</span> q=<span class=\"built_in\">unique</span>(b+<span class=\"number\">1</span>,b+n+<span class=\"number\">1</span>)-b<span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(rt[<span class=\"number\">0</span>],<span class=\"number\">1</span>,q);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        rt[i]=rt[i<span class=\"number\">-1</span>];</span><br><span class=\"line\">        <span class=\"built_in\">modify</span>(rt[i],<span class=\"number\">1</span>,q,<span class=\"built_in\">lower_bound</span>(b+<span class=\"number\">1</span>,b+q+<span class=\"number\">1</span>,a[i])-b);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> l,r,k;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>,&amp;l,&amp;r,&amp;k);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,<span class=\"built_in\">sum</span>(rt[l<span class=\"number\">-1</span>],rt[r],<span class=\"number\">1</span>,q,k));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"可持续化线段树\"><a href=\"#可持续化线段树\" class=\"headerlink\" title=\"可持续化线段树\"></a>可持续化线段树</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>&amp;#8195； 模板题：<a href=\"https://www.luogu.com.cn/problem/P3919\">P3919 【模板】可持久化线段树 1（可持久化数组）</a><br>我们学习了很多的数据结构，它们支持修改、查询的操作。但是如果我们想在过去的某个版本上进行操作，我们就需要可持续化数据结构，比如说可持续化线段树，它支持在 $O(\\log n)$ 的时间内进行操作。</p>\n<h2 id=\"基本思想\"><a href=\"#基本思想\" class=\"headerlink\" title=\"基本思想\"></a>基本思想</h2><p>朴素的方法实现可持续化需要记录每个版本，修改一次就需要 $O(n)$ 的时间来复制，不能接受。但是我们可以发现，线段树上每一次操作都只改变树上的一条链，如果我们只复制这条链，就只需要 $O(\\log n)$ 的时间来复制了。<br>我们要在只复制一条链的情况下保持原树和新树都是完整的，就需要把没有改变的所有点与新的链连在一起，并记录每一个版本的根节点。由于每一次修改都要改变根节点，所以每一个版本都对应一个根节点，这个根节点的子树就是一颗完整的线段树。如下图：<br>![0](&#x2F;post-images&#x2F;Sustainable-segment-tree-1.jpg &#x3D;450x)<br>![1](&#x2F;post-images&#x2F;Sustainable-segment-tree-2.jpg &#x3D;450x)<br>（图片来自网络）</p>\n<h2 id=\"储存及更新\"><a href=\"#储存及更新\" class=\"headerlink\" title=\"储存及更新\"></a>储存及更新</h2><p>可持续化线段树不再像线段树那样储存左端点与右端点，而是左儿子与右儿子，因为可持续化线段树不再满足完全二叉树那样的编号规律，但是左右端点都可以轻松算出来。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">tree</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> l,r,s;</span><br><span class=\"line\">&#125;T[<span class=\"number\">100000001</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pushup</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    T[x].s=T[T[x].l].s+T[T[x].r].s;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"建树\"><a href=\"#建树\" class=\"headerlink\" title=\"建树\"></a>建树</h2><p>可持续化线段树的建立和线段树几乎一样，只是新节点的编号要单独算，这个过程要传址，就像平衡树那样。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"type\">int</span> &amp;x,<span class=\"type\">int</span> l,<span class=\"type\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    x=++p;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l==r)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        T[x].s=a[l];</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> z=l+r&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(T[x].l,l,z);</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(T[x].r,z+<span class=\"number\">1</span>,r);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"修改\"><a href=\"#修改\" class=\"headerlink\" title=\"修改\"></a>修改</h2><p>可持续化线段树的单点修改需要把所修改节点到根节点的所有节点全部备份一遍、更改，注意这个过程还要传递当前区间的左右端点，同时也要传址。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">modify</span><span class=\"params\">(<span class=\"type\">int</span> &amp;x,<span class=\"type\">int</span> l,<span class=\"type\">int</span> r,<span class=\"type\">int</span> q,<span class=\"type\">int</span> k)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    T[++p]=T[x];</span><br><span class=\"line\">    T[p].s=k;</span><br><span class=\"line\">    x=p;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l==r) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> z=l+r&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(q&lt;=z) <span class=\"built_in\">modify</span>(T[x].l,l,z,q,k);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"built_in\">modify</span>(T[x].r,z+<span class=\"number\">1</span>,r,q,k);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"查询\"><a href=\"#查询\" class=\"headerlink\" title=\"查询\"></a>查询</h2><p>查询操作就和线段树十分相似了，只是同时需要传递左右端点。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">sum</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> l,<span class=\"type\">int</span> r,<span class=\"type\">int</span> l0,<span class=\"type\">int</span> r0)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l&gt;=l0&amp;&amp;r&lt;=r0) <span class=\"keyword\">return</span> T[x].s;</span><br><span class=\"line\">    <span class=\"type\">int</span> z=l+r&gt;&gt;<span class=\"number\">1</span>,s=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l0&lt;=z) s+=<span class=\"built_in\">sum</span>(T[x].l,l,z,l0,r0);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r0&gt;z) s+=<span class=\"built_in\">sum</span>(T[x].r,z+<span class=\"number\">1</span>,r,l0,r0);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"调用\"><a href=\"#调用\" class=\"headerlink\" title=\"调用\"></a>调用</h2><p>可持续化线段树调用的根节点是指定版本的根节点复制过来的根节点，这样调用的时候就会在这个根节点下面新建节点，同时这个根节点也会在操作后指向新的节点。不过板子题比较特殊的是查询操作也要新建版本，我们只需要把根节点复制一遍即可，其它节点都不用变。可持续化线段树一般也要建树，对应的根节点为 $0$，这样可以防止在一些操作中越界。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">build</span>(rt[<span class=\"number\">0</span>],<span class=\"number\">1</span>,n);</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> d,z,x,y;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d%d&quot;</span>,&amp;d,&amp;z,&amp;x,&amp;y);</span><br><span class=\"line\">    rt[i]=rt[d];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(z==<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">         <span class=\"built_in\">modify</span>(rt[i],<span class=\"number\">1</span>,n,x,y);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,<span class=\"built_in\">sum</span>(rt[i],<span class=\"number\">1</span>,n,x,y));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m,p=<span class=\"number\">0</span>,a[<span class=\"number\">1000001</span>],b[<span class=\"number\">1000001</span>],rt[<span class=\"number\">1000001</span>];</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">tree</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> l,r,s;</span><br><span class=\"line\">&#125;T[<span class=\"number\">100000001</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pushup</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    T[x].s=T[T[x].l].s+T[T[x].r].s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"type\">int</span> &amp;x,<span class=\"type\">int</span> l,<span class=\"type\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    x=++p;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l==r)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        T[x].s=a[l];</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> z=l+r&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(T[x].l,l,z);</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(T[x].r,z+<span class=\"number\">1</span>,r);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">modify</span><span class=\"params\">(<span class=\"type\">int</span> &amp;x,<span class=\"type\">int</span> l,<span class=\"type\">int</span> r,<span class=\"type\">int</span> q,<span class=\"type\">int</span> k)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    T[++p]=T[x];</span><br><span class=\"line\">    T[p].s=k;</span><br><span class=\"line\">    x=p;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l==r) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> z=l+r&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(q&lt;=z) <span class=\"built_in\">modify</span>(T[x].l,l,z,q,k);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"built_in\">modify</span>(T[x].r,z+<span class=\"number\">1</span>,r,q,k);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">sum</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> l,<span class=\"type\">int</span> r,<span class=\"type\">int</span> l0,<span class=\"type\">int</span> r0)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l&gt;=l0&amp;&amp;r&lt;=r0) <span class=\"keyword\">return</span> T[x].s;</span><br><span class=\"line\">    <span class=\"type\">int</span> z=l+r&gt;&gt;<span class=\"number\">1</span>,s=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l0&lt;=z) s+=<span class=\"built_in\">sum</span>(T[x].l,l,z,l0,r0);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r0&gt;z) s+=<span class=\"built_in\">sum</span>(T[x].r,z+<span class=\"number\">1</span>,r,l0,r0);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(rt[<span class=\"number\">0</span>],<span class=\"number\">1</span>,n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> d,z,x,y;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d%d&quot;</span>,&amp;d,&amp;z,&amp;x,&amp;y);</span><br><span class=\"line\">        rt[i]=rt[d];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(z==<span class=\"number\">1</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">modify</span>(rt[i],<span class=\"number\">1</span>,n,x,y);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,<span class=\"built_in\">sum</span>(rt[i],<span class=\"number\">1</span>,n,x,y));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"主席树\"><a href=\"#主席树\" class=\"headerlink\" title=\"主席树\"></a>主席树</h1><h2 id=\"前言-1\"><a href=\"#前言-1\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>&amp;#8195； 模板题：<a href=\"https://www.luogu.com.cn/problem/P3834\">P3834 【模板】可持久化线段树 2</a><br>主席树是可持续化线段树的一种经典应用，但是它不是用来解决需要操作历史版本的问题的，而是用来解决一个不可修改的序列的，经典问题就是一个数在区间 $[l,r]$ 的排名和区间第 $k$ 小，不带修改操作的话主席树就是最好的解法。</p>\n<h2 id=\"基本思想-1\"><a href=\"#基本思想-1\" class=\"headerlink\" title=\"基本思想\"></a>基本思想</h2><p>要找一个数在区间 $[l,r]$ 的排名，我们很容易想到对于每个数做前缀和的方法，但是要从第 $i-1$ 个数转移到第 $i$ 个数，就需要转移 $q$ 次（$q$ 是所有数离散化后的数的个数），不能接受。但是我们发现，每一次转移都只有一个数发生了改变，其它的都与上一个版本相同。而可持续化线段树就是在历史版本上用 $\\log n$ 的时间复制并修改一个版本上的一个点。<br>主席树的基本思想是把 $1\\sim n$ 这 $n$ 个点看做 $n$ 个版本，对于版本 $i$ 记录每个数 $1\\sim q$ 在 $[1,i]$ 中出现的次数 $b$，而主席树维护的就是 $b$ 数组。为什么要这样做？如果我们要找离散化后的数 $x$ 在区间 [l,r] 中的排名，我们只需要在版本 $l-1$ 中找到 $[1,x-1]$ 的和，同时在 $r$ 中找到 $[1,r]$ 的和，相减即为答案。而主席树版本 $i$ 与版本 $i-1$ 之间只有原序列 $a$ 的第 $i$ 上的数对应的位置的值改变了，相当于单点修改。但是在查询的时候有可能要访问到版本 $0$ 所以我们要先建立 $0$ 号版本，防止越界。<br>要解决区间第 $k$ 小的问题，我们只需要在线段树上进行二分。同时维护版本 $l-1$ 的当前节点 $x1$ 与版本 $r$ 上的当前节点 $x2$，如果 $x2$ 的左子树的和减去 $x1$ 左子树的和小于等于 $k$，表明区间 $[l,r]$ 中 $1\\sim a_q$ 的数的总数比 $k$ 多，答案在左子树上，否则在右子树上。</p>\n<h2 id=\"code-1\"><a href=\"#code-1\" class=\"headerlink\" title=\"code\"></a>code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m,p=<span class=\"number\">0</span>,a[<span class=\"number\">1000001</span>],b[<span class=\"number\">1000001</span>],rt[<span class=\"number\">1000001</span>];</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">tree</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> l,r,s;</span><br><span class=\"line\">&#125;T[<span class=\"number\">10000001</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pushup</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    T[x].s=T[T[x].l].s+T[T[x].r].s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"type\">int</span> &amp;x,<span class=\"type\">int</span> l,<span class=\"type\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    x=++p;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l==r) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> z=l+r&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(T[x].l,l,z);</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(T[x].r,z+<span class=\"number\">1</span>,r);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">modify</span><span class=\"params\">(<span class=\"type\">int</span> &amp;x,<span class=\"type\">int</span> l,<span class=\"type\">int</span> r,<span class=\"type\">int</span> q)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    T[++p]=T[x];</span><br><span class=\"line\">    ++T[p].s;</span><br><span class=\"line\">    x=p;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l==r) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> z=l+r&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(q&lt;=z) <span class=\"built_in\">modify</span>(T[x].l,l,z,q);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"built_in\">modify</span>(T[x].r,z+<span class=\"number\">1</span>,r,q);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">sum</span><span class=\"params\">(<span class=\"type\">int</span> x1,<span class=\"type\">int</span> x2,<span class=\"type\">int</span> l,<span class=\"type\">int</span> r,<span class=\"type\">int</span> q)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l==r) <span class=\"keyword\">return</span> b[l];</span><br><span class=\"line\">    <span class=\"type\">int</span> z=l+r&gt;&gt;<span class=\"number\">1</span>,k=T[T[x2].l].s-T[T[x1].l].s;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(q&lt;=k) <span class=\"keyword\">return</span> <span class=\"built_in\">sum</span>(T[x1].l,T[x2].l,l,z,q);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"built_in\">sum</span>(T[x1].r,T[x2].r,z+<span class=\"number\">1</span>,r,q-k);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class=\"line\">        b[i]=a[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(b+<span class=\"number\">1</span>,b+n+<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"type\">int</span> q=<span class=\"built_in\">unique</span>(b+<span class=\"number\">1</span>,b+n+<span class=\"number\">1</span>)-b<span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(rt[<span class=\"number\">0</span>],<span class=\"number\">1</span>,q);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        rt[i]=rt[i<span class=\"number\">-1</span>];</span><br><span class=\"line\">        <span class=\"built_in\">modify</span>(rt[i],<span class=\"number\">1</span>,q,<span class=\"built_in\">lower_bound</span>(b+<span class=\"number\">1</span>,b+q+<span class=\"number\">1</span>,a[i])-b);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> l,r,k;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>,&amp;l,&amp;r,&amp;k);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,<span class=\"built_in\">sum</span>(rt[l<span class=\"number\">-1</span>],rt[r],<span class=\"number\">1</span>,q,k));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"树链剖分","date":"2022-05-07T12:11:24.000Z","description":" ","_content":"\n## 前言\n\n树链剖分是用来解决树上问题的经典方法，而且常数极小。这其中的一个经典问题就是 [最近公共祖先（LCA）](https://www.luogu.com.cn/problem/P3379)，这道题可以当做树剖的模板题。\n\n## 基本思路\n\n树链剖分，顾名思义，是把树剖分成很多条链。为什么要剖分成链？因为在解决树上问题时，一条链往往可以一次性操作，就如模板题 LCA，我们在两个点向上跳时就可以直接跳到所在链的链头。如何剖分？剖分有多种方法，其中重链剖分和长链剖分较为常见。重链剖分就是将这个节点与其子节点的子树中节点个数最多的子节点（又称“重儿子”）与这个节点连在一起组成一条链，其余子节点各自成一条链；长链剖分就是将这个节点与其子节点的子树深度最深的子节点连在一起组成一条链，其与子节点各自成一条链。\n\n![1](/post-images/Tree-chain-subdivision-1.png?300x)\n\n比如这样一棵树，对它进行重链剖分后就是这个样子：\n\n![2](/post-images/Tree-chain-subdivision-2.png?500x)\n\n而长链剖分后就是这个样子：\n\n![3](/post-images/Tree-chain-subdivision-3.png?500x)\n\n## 实现\n\n树剖理解起来很容易，但是不容易实现。进行重链剖分对于每个节点，我们要处理一下信息：父亲，子树大小、深度、所在链头与重儿子。我们要进行两次 dfs，第一次处理基本信息：父亲、子树大小、深度与重儿子，第二次进行剖分，首先访问重儿子（顺序不能换，以后会用到），将当前节点的链头传递给重儿子；然后访问其余子节点，链头为子节点本身。这样我们就成功剖分了这棵树。\n对于长链剖分，只需要将子树大小改为最大深度即可。\n\n## LCA\n\n要实现 LCA，我们需要先进行重链剖分，因为子树大小越多求这里面的点的可能越大。要找到点 $x$ 与点 $y$ 的 LCA，首先判断两个点有没有在同一条链中，也就是两个点的链头是否相同。如果不相同，将深度较深的点跳转至其链头的父节点，再进行判断；如果在，那么深度较浅的那一个点就是 LCA。证明也非常简单，如果不在同一条链中，深度较深的点所在的链头一定不是另一个点的祖先，所以 LCA 也一定不在这条链中，就跳到上一条链。\n\n## code\n\n```cpp\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\nconst int N=500001;\nint n,m,r,p=1,t[N];\nstruct tree\n{\n    int f,s,d,t,z;\n}T[N];\nstruct road\n{\n    int m,q;\n}a[N<<1];\nvoid road(int x,int y)\n{\n    a[++p].m=y;\n    a[p].q=t[x];\n    t[x]=p;\n}\nvoid dfs1(int x)\n{\n    T[x].s=1;\n    T[x].d=T[T[x].f].d+1;\n    for(int i=t[x];i!=0;i=a[i].q)\n    {\n        if(a[i].m==T[x].f) continue;\n        T[a[i].m].f=x;\n        dfs1(a[i].m);\n        T[x].s+=T[a[i].m].s;\n        if(T[a[i].m].s>T[T[x].z].s) T[x].z=a[i].m;\n    }\n}\nvoid dfs2(int x,int k)\n{\n    T[x].t=k;\n    if(T[x].z!=0) dfs2(T[x].z,k);\n    for(int i=t[x];i!=0;i=a[i].q)\n    {\n        if(a[i].m==T[x].f||a[i].m==T[x].z) continue;\n        else dfs2(a[i].m,a[i].m);\n    }\n}\nint LCA(int x,int y)\n{\n    while(T[x].t!=T[y].t)\n    {\n        if(T[T[x].t].d>=T[T[y].t].d) x=T[T[x].t].f;\n        else y=T[T[y].t].f;\n    }\n    if(T[x].d<T[y].d) return x;\n    else return y;\n}\nint main()\n{\n    scanf(\"%d%d%d\",&n,&m,&r);\n    for(int i=1;i<=n-1;++i)\n    {\n        int x,y;\n        scanf(\"%d%d\",&x,&y);\n        road(x,y);\n        road(y,x);\n    }\n    dfs1(r);\n    dfs2(r,r);\n    for(int i=1;i<=m;++i)\n    {\n        int x,y;\n        scanf(\"%d%d\",&x,&y);\n        printf(\"%d\\n\",LCA(x,y));\n    }\n    return 0;\n}\n```","source":"_posts/Tree-chain-subdivision.md","raw":"---\ntitle: '树链剖分'\ndate: 2022-05-07 20:11:24\ntags: [树,树链剖分]\ndescription: ' '\n---\n\n## 前言\n\n树链剖分是用来解决树上问题的经典方法，而且常数极小。这其中的一个经典问题就是 [最近公共祖先（LCA）](https://www.luogu.com.cn/problem/P3379)，这道题可以当做树剖的模板题。\n\n## 基本思路\n\n树链剖分，顾名思义，是把树剖分成很多条链。为什么要剖分成链？因为在解决树上问题时，一条链往往可以一次性操作，就如模板题 LCA，我们在两个点向上跳时就可以直接跳到所在链的链头。如何剖分？剖分有多种方法，其中重链剖分和长链剖分较为常见。重链剖分就是将这个节点与其子节点的子树中节点个数最多的子节点（又称“重儿子”）与这个节点连在一起组成一条链，其余子节点各自成一条链；长链剖分就是将这个节点与其子节点的子树深度最深的子节点连在一起组成一条链，其与子节点各自成一条链。\n\n![1](/post-images/Tree-chain-subdivision-1.png?300x)\n\n比如这样一棵树，对它进行重链剖分后就是这个样子：\n\n![2](/post-images/Tree-chain-subdivision-2.png?500x)\n\n而长链剖分后就是这个样子：\n\n![3](/post-images/Tree-chain-subdivision-3.png?500x)\n\n## 实现\n\n树剖理解起来很容易，但是不容易实现。进行重链剖分对于每个节点，我们要处理一下信息：父亲，子树大小、深度、所在链头与重儿子。我们要进行两次 dfs，第一次处理基本信息：父亲、子树大小、深度与重儿子，第二次进行剖分，首先访问重儿子（顺序不能换，以后会用到），将当前节点的链头传递给重儿子；然后访问其余子节点，链头为子节点本身。这样我们就成功剖分了这棵树。\n对于长链剖分，只需要将子树大小改为最大深度即可。\n\n## LCA\n\n要实现 LCA，我们需要先进行重链剖分，因为子树大小越多求这里面的点的可能越大。要找到点 $x$ 与点 $y$ 的 LCA，首先判断两个点有没有在同一条链中，也就是两个点的链头是否相同。如果不相同，将深度较深的点跳转至其链头的父节点，再进行判断；如果在，那么深度较浅的那一个点就是 LCA。证明也非常简单，如果不在同一条链中，深度较深的点所在的链头一定不是另一个点的祖先，所以 LCA 也一定不在这条链中，就跳到上一条链。\n\n## code\n\n```cpp\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\nconst int N=500001;\nint n,m,r,p=1,t[N];\nstruct tree\n{\n    int f,s,d,t,z;\n}T[N];\nstruct road\n{\n    int m,q;\n}a[N<<1];\nvoid road(int x,int y)\n{\n    a[++p].m=y;\n    a[p].q=t[x];\n    t[x]=p;\n}\nvoid dfs1(int x)\n{\n    T[x].s=1;\n    T[x].d=T[T[x].f].d+1;\n    for(int i=t[x];i!=0;i=a[i].q)\n    {\n        if(a[i].m==T[x].f) continue;\n        T[a[i].m].f=x;\n        dfs1(a[i].m);\n        T[x].s+=T[a[i].m].s;\n        if(T[a[i].m].s>T[T[x].z].s) T[x].z=a[i].m;\n    }\n}\nvoid dfs2(int x,int k)\n{\n    T[x].t=k;\n    if(T[x].z!=0) dfs2(T[x].z,k);\n    for(int i=t[x];i!=0;i=a[i].q)\n    {\n        if(a[i].m==T[x].f||a[i].m==T[x].z) continue;\n        else dfs2(a[i].m,a[i].m);\n    }\n}\nint LCA(int x,int y)\n{\n    while(T[x].t!=T[y].t)\n    {\n        if(T[T[x].t].d>=T[T[y].t].d) x=T[T[x].t].f;\n        else y=T[T[y].t].f;\n    }\n    if(T[x].d<T[y].d) return x;\n    else return y;\n}\nint main()\n{\n    scanf(\"%d%d%d\",&n,&m,&r);\n    for(int i=1;i<=n-1;++i)\n    {\n        int x,y;\n        scanf(\"%d%d\",&x,&y);\n        road(x,y);\n        road(y,x);\n    }\n    dfs1(r);\n    dfs2(r,r);\n    for(int i=1;i<=m;++i)\n    {\n        int x,y;\n        scanf(\"%d%d\",&x,&y);\n        printf(\"%d\\n\",LCA(x,y));\n    }\n    return 0;\n}\n```","slug":"Tree-chain-subdivision","published":1,"updated":"2023-03-15T01:57:00.428Z","_id":"cleid9288002b2sjf0ypuhfme","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>树链剖分是用来解决树上问题的经典方法，而且常数极小。这其中的一个经典问题就是 <a href=\"https://www.luogu.com.cn/problem/P3379\">最近公共祖先（LCA）</a>，这道题可以当做树剖的模板题。</p>\n<h2 id=\"基本思路\"><a href=\"#基本思路\" class=\"headerlink\" title=\"基本思路\"></a>基本思路</h2><p>树链剖分，顾名思义，是把树剖分成很多条链。为什么要剖分成链？因为在解决树上问题时，一条链往往可以一次性操作，就如模板题 LCA，我们在两个点向上跳时就可以直接跳到所在链的链头。如何剖分？剖分有多种方法，其中重链剖分和长链剖分较为常见。重链剖分就是将这个节点与其子节点的子树中节点个数最多的子节点（又称“重儿子”）与这个节点连在一起组成一条链，其余子节点各自成一条链；长链剖分就是将这个节点与其子节点的子树深度最深的子节点连在一起组成一条链，其与子节点各自成一条链。</p>\n<p><img src=\"/post-images/Tree-chain-subdivision-1.png?300x\" alt=\"1\"></p>\n<p>比如这样一棵树，对它进行重链剖分后就是这个样子：</p>\n<p><img src=\"/post-images/Tree-chain-subdivision-2.png?500x\" alt=\"2\"></p>\n<p>而长链剖分后就是这个样子：</p>\n<p><img src=\"/post-images/Tree-chain-subdivision-3.png?500x\" alt=\"3\"></p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p>树剖理解起来很容易，但是不容易实现。进行重链剖分对于每个节点，我们要处理一下信息：父亲，子树大小、深度、所在链头与重儿子。我们要进行两次 dfs，第一次处理基本信息：父亲、子树大小、深度与重儿子，第二次进行剖分，首先访问重儿子（顺序不能换，以后会用到），将当前节点的链头传递给重儿子；然后访问其余子节点，链头为子节点本身。这样我们就成功剖分了这棵树。<br>对于长链剖分，只需要将子树大小改为最大深度即可。</p>\n<h2 id=\"LCA\"><a href=\"#LCA\" class=\"headerlink\" title=\"LCA\"></a>LCA</h2><p>要实现 LCA，我们需要先进行重链剖分，因为子树大小越多求这里面的点的可能越大。要找到点 $x$ 与点 $y$ 的 LCA，首先判断两个点有没有在同一条链中，也就是两个点的链头是否相同。如果不相同，将深度较深的点跳转至其链头的父节点，再进行判断；如果在，那么深度较浅的那一个点就是 LCA。证明也非常简单，如果不在同一条链中，深度较深的点所在的链头一定不是另一个点的祖先，所以 LCA 也一定不在这条链中，就跳到上一条链。</p>\n<h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">500001</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m,r,p=<span class=\"number\">1</span>,t[N];</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">tree</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> f,s,d,t,z;</span><br><span class=\"line\">&#125;T[N];</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">road</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> m,q;</span><br><span class=\"line\">&#125;a[N&lt;&lt;<span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">road</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    a[++p].m=y;</span><br><span class=\"line\">    a[p].q=t[x];</span><br><span class=\"line\">    t[x]=p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs1</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    T[x].s=<span class=\"number\">1</span>;</span><br><span class=\"line\">    T[x].d=T[T[x].f].d+<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t[x];i!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a[i].m==T[x].f) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        T[a[i].m].f=x;</span><br><span class=\"line\">        <span class=\"built_in\">dfs1</span>(a[i].m);</span><br><span class=\"line\">        T[x].s+=T[a[i].m].s;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(T[a[i].m].s&gt;T[T[x].z].s) T[x].z=a[i].m;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs2</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> k)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    T[x].t=k;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(T[x].z!=<span class=\"number\">0</span>) <span class=\"built_in\">dfs2</span>(T[x].z,k);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t[x];i!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a[i].m==T[x].f||a[i].m==T[x].z) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"built_in\">dfs2</span>(a[i].m,a[i].m);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">LCA</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(T[x].t!=T[y].t)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(T[T[x].t].d&gt;=T[T[y].t].d) x=T[T[x].t].f;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> y=T[T[y].t].f;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(T[x].d&lt;T[y].d) <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;r);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n<span class=\"number\">-1</span>;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x,y;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;x,&amp;y);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(x,y);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(y,x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">dfs1</span>(r);</span><br><span class=\"line\">    <span class=\"built_in\">dfs2</span>(r,r);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x,y;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;x,&amp;y);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,<span class=\"built_in\">LCA</span>(x,y));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>树链剖分是用来解决树上问题的经典方法，而且常数极小。这其中的一个经典问题就是 <a href=\"https://www.luogu.com.cn/problem/P3379\">最近公共祖先（LCA）</a>，这道题可以当做树剖的模板题。</p>\n<h2 id=\"基本思路\"><a href=\"#基本思路\" class=\"headerlink\" title=\"基本思路\"></a>基本思路</h2><p>树链剖分，顾名思义，是把树剖分成很多条链。为什么要剖分成链？因为在解决树上问题时，一条链往往可以一次性操作，就如模板题 LCA，我们在两个点向上跳时就可以直接跳到所在链的链头。如何剖分？剖分有多种方法，其中重链剖分和长链剖分较为常见。重链剖分就是将这个节点与其子节点的子树中节点个数最多的子节点（又称“重儿子”）与这个节点连在一起组成一条链，其余子节点各自成一条链；长链剖分就是将这个节点与其子节点的子树深度最深的子节点连在一起组成一条链，其与子节点各自成一条链。</p>\n<p><img src=\"/post-images/Tree-chain-subdivision-1.png?300x\" alt=\"1\"></p>\n<p>比如这样一棵树，对它进行重链剖分后就是这个样子：</p>\n<p><img src=\"/post-images/Tree-chain-subdivision-2.png?500x\" alt=\"2\"></p>\n<p>而长链剖分后就是这个样子：</p>\n<p><img src=\"/post-images/Tree-chain-subdivision-3.png?500x\" alt=\"3\"></p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p>树剖理解起来很容易，但是不容易实现。进行重链剖分对于每个节点，我们要处理一下信息：父亲，子树大小、深度、所在链头与重儿子。我们要进行两次 dfs，第一次处理基本信息：父亲、子树大小、深度与重儿子，第二次进行剖分，首先访问重儿子（顺序不能换，以后会用到），将当前节点的链头传递给重儿子；然后访问其余子节点，链头为子节点本身。这样我们就成功剖分了这棵树。<br>对于长链剖分，只需要将子树大小改为最大深度即可。</p>\n<h2 id=\"LCA\"><a href=\"#LCA\" class=\"headerlink\" title=\"LCA\"></a>LCA</h2><p>要实现 LCA，我们需要先进行重链剖分，因为子树大小越多求这里面的点的可能越大。要找到点 $x$ 与点 $y$ 的 LCA，首先判断两个点有没有在同一条链中，也就是两个点的链头是否相同。如果不相同，将深度较深的点跳转至其链头的父节点，再进行判断；如果在，那么深度较浅的那一个点就是 LCA。证明也非常简单，如果不在同一条链中，深度较深的点所在的链头一定不是另一个点的祖先，所以 LCA 也一定不在这条链中，就跳到上一条链。</p>\n<h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">500001</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m,r,p=<span class=\"number\">1</span>,t[N];</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">tree</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> f,s,d,t,z;</span><br><span class=\"line\">&#125;T[N];</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">road</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> m,q;</span><br><span class=\"line\">&#125;a[N&lt;&lt;<span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">road</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    a[++p].m=y;</span><br><span class=\"line\">    a[p].q=t[x];</span><br><span class=\"line\">    t[x]=p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs1</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    T[x].s=<span class=\"number\">1</span>;</span><br><span class=\"line\">    T[x].d=T[T[x].f].d+<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t[x];i!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a[i].m==T[x].f) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        T[a[i].m].f=x;</span><br><span class=\"line\">        <span class=\"built_in\">dfs1</span>(a[i].m);</span><br><span class=\"line\">        T[x].s+=T[a[i].m].s;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(T[a[i].m].s&gt;T[T[x].z].s) T[x].z=a[i].m;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs2</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> k)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    T[x].t=k;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(T[x].z!=<span class=\"number\">0</span>) <span class=\"built_in\">dfs2</span>(T[x].z,k);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t[x];i!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a[i].m==T[x].f||a[i].m==T[x].z) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"built_in\">dfs2</span>(a[i].m,a[i].m);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">LCA</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(T[x].t!=T[y].t)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(T[T[x].t].d&gt;=T[T[y].t].d) x=T[T[x].t].f;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> y=T[T[y].t].f;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(T[x].d&lt;T[y].d) <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;r);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n<span class=\"number\">-1</span>;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x,y;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;x,&amp;y);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(x,y);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(y,x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">dfs1</span>(r);</span><br><span class=\"line\">    <span class=\"built_in\">dfs2</span>(r,r);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x,y;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;x,&amp;y);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,<span class=\"built_in\">LCA</span>(x,y));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"上下界网络流","date":"2022-02-26T12:49:33.000Z","description":" ","_content":"\n## 前言\n在一般的网络流问题中，每条边都有一定的容量，也就是流量上限。而有的问题中，每条边还需要限制一个“流量下限”，也就是流过这条边的流量必须大于等于流量上限且小于等于流量下限。这样的问题需要新的思路来解决，我们需要将其转换为朴素的最大流。\n上下界网络流分为几个问题：无源汇上下界可行流、有源汇上下界可行流、有源汇上下界最大流与有源汇上下界最小流。\n## 无源汇上下界可行流\n我们知道上下界网络流问题中每条边都有流量下限，所以是不是可以将最小流量流满，然后再跑最大流？显然不行，因为将最小流量流满后的图不一定满足流量守恒，也就是一个点流入的流量等于流出的流量（除源点、汇点）。如下图：\n![1](/post-images/Upper-and-lower-bound-network-flow-1.png?500x)\n这个图就会变成下面两个图，第一幅是流满最小流量的图，第二幅是剩下最大流量的图。\n![2](/post-images/Upper-and-lower-bound-network-flow-2.png)\n显然，第一幅图并不满足流量守恒，这样第二幅图跑出来了原图也不一定有解。第一幅图中 $1$ 号点流入流量比流出流量少了 $15$，$2$ 号点流入流量比流出流量少了 $10$，$3$ 号点流入流量比流出流量多了 $15$，$4$ 号点流入流量比流出流量多了 $10$。多的流量去哪里，少的流量从哪里来？我们可以用新建的超级源点和超级汇点，用源点补充少的流量，汇点吸走多的流量，如果这个点流入流量较多就连一条边到汇点，这个点流出流量较多从源点向这个点连一条边。但是超级源点和汇点并不存在，流量也不能这样流。所以源点补充的流量应该从第二幅图中来，汇点多出的流量也应该流到第二幅图中去。所以我们在第二幅图中也建立超级源点和汇点，并像第一幅图一样连边，只不过附加边方向反向，超级源点和超级汇点互换。如下图：\n![3](/post-images/Upper-and-lower-bound-network-flow-3.png?500x)\n![4](/post-images/Upper-and-lower-bound-network-flow-4.png?500x)\n如何判断是否存在可行流？我们只需要在第二幅图中从源点到汇点跑最大流，如果从源点流出的按所有边已经流满，也就是流入汇点的所有边都流满了，就说明存在可行流。因为这样就说明第二幅图可以提供第一幅图的超级源点和超级汇点需要的流量，反之则无法满足第一幅图的超级源汇点所需流量，原图也就不存在可行流。由于从源点流出的边的总容量和流入汇点的边的总容量相等，所以只需要判断一边即可。上图就不存在可行流。\n## 有源汇上下界可行流\n如果我们在上图把 $1$ 号点设为源点，$4$ 号点设为汇点，情况就又不一样了。源点和汇点的特点是源点可以流出无限流量，汇点可以接收无限流量，源点流出的流量和汇点流入的流量相等。如何实现？我们只需要从汇点向源点连一条容量为无穷的边，就可以保证源点和汇点的流量相等。注意这条容量为正无穷的边是在建立了超级源点与超级汇点之后建立的，不影响与超级源点和超级汇点的连边。\n![5](/post-images/Upper-and-lower-bound-network-flow-5.png)\n判断方法同上无源汇上下界可行流。这样我们就可以发现原图有解了。从源点流出或汇点流入的流量就是从源点流向汇点的流量。\n## 有源汇上下界最大流\n我们现在这个图中跑一边有源汇上下界可行流，找到从汇点到源点的附加边的实际流量，也就是这条边反向边的容量。但是我们只能得到一个可行流，并不是最大流，所以我们要再在残留网络上从源点到汇点跑一边最大流，注意这时要先删去附加边。跑出来的最大流加上原来附加边的实际流量就是最大流。\n我们可以发现图中汇点到源点除了附加边，还有一条容量为 $15$ 的边，则就导致可能有流量从汇点到源点的部分流量这种边流过，我们也就无法得到真实的可行流的流量，但是这个对于最后的最大流没有影响，因为如果有流量从这些边流到源点，跑最大流的时候也一定能沿着反向边流过相同的流量到达终点，最后的和就没有变化。\n## code\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<queue>\nusing namespace std;\nint n,m,p=1,s1,s2,t1,t2,t[10001],t0[10001],f[10001],b[10001];\nstruct str\n{\n    int m,q,r;\n}a[1000001];\nvoid road(int x,int y,int r)\n{\n    a[++p].m=y;\n    a[p].q=t[x];\n    t[x]=p;\n    a[p].r=r;\n}\nbool bfs()\n{\n    queue<int> Q;\n    Q.push(s1);\n    for(int i=1;i<=n;++i) f[i]=0;\n    f[s1]=1;\n    while(!Q.empty())\n    {\n        int k=Q.front();\n        Q.pop();\n        for(int i=t[k];i!=0;i=a[i].q)\n        {\n            if(f[a[i].m]==0&&a[i].r!=0)\n            {\n                f[a[i].m]=f[k]+1;\n                Q.push(a[i].m);\n            }\n        }\n    }\n    return f[s2]!=0;\n}\nint dfs(int x,int r)\n{\n    if(x==s2) return r;\n    int s=0;\n    for(int i=t0[x];i!=0;i=a[i].q)\n    {\n        t0[x]=i;\n        if(f[a[i].m]==f[x]+1&&a[i].r!=0)\n        {\n            int z=dfs(a[i].m,min(r,a[i].r));\n            if(z!=0)\n            {\n                a[i].r-=z;\n                a[i^1].r+=z;\n                r-=z;\n                s+=z;\n            }\n            else f[a[i].m]=0;\n            if(r==0) return s; \n        }\n    }\n    return s;\n}\nint main()\n{\n    scanf(\"%d%d%d%d\",&n,&m,&t1,&t2);\n    s1=n+1;\n    s2=n+2;\n    for(int i=1;i<=m;++i)\n    {\n        int x,y,r1,r2;\n        scanf(\"%d%d%d%d\",&x,&y,&r1,&r2);\n        road(x,y,r2-r1);\n        road(y,x,0);\n        b[x]+=r1;\n        b[y]-=r1;\n    }\n    for(int i=1;i<=n;++i)\n    {\n        if(b[i]<0)\n        {\n            road(s1,i,-b[i]);\n            road(i,s1,0);\n        }\n        else if(b[i]>0)\n        {\n            road(i,s2,b[i]);\n            road(s2,i,0);\n        }\n    }\n    road(t2,t1,1e9);\n    road(t1,t2,0);\n    n+=2;\n    while(bfs())\n    {\n        for(int i=1;i<=n;++i) t0[i]=t[i];\n        dfs(s1,1e9);\n    }\n    for(int i=t[s1];i!=0;i=a[i].q)\n    {\n        if(a[i].r!=0)\n        {\n            printf(\"please go home to sleep\");\n            return 0;\n        }\n    }\n    n-=2;\n    s1=t1;\n    s2=t2;\n    int r=0;\n    for(int i=t[s2];i!=0;i=a[i].q)\n    {\n        if(a[i].m==s1)\n        {\n            r+=a[i^1].r;\n            a[i].r=a[i^1].r=0;\n        }\n    }\n    while(bfs())\n    {\n        for(int i=1;i<=n;++i) t0[i]=t[i];\n        r+=dfs(s1,1e9);\n    }\n    printf(\"%d\",r);\n    return 0;\n}\n```","source":"_posts/Upper-and-lower-bound-network-flow.md","raw":"---\ntitle: '上下界网络流'\ndate: 2022-02-26 20:49:33\ntags: [网络流,最大流,上下界网络流]\ndescription: ' '\n---\n\n## 前言\n在一般的网络流问题中，每条边都有一定的容量，也就是流量上限。而有的问题中，每条边还需要限制一个“流量下限”，也就是流过这条边的流量必须大于等于流量上限且小于等于流量下限。这样的问题需要新的思路来解决，我们需要将其转换为朴素的最大流。\n上下界网络流分为几个问题：无源汇上下界可行流、有源汇上下界可行流、有源汇上下界最大流与有源汇上下界最小流。\n## 无源汇上下界可行流\n我们知道上下界网络流问题中每条边都有流量下限，所以是不是可以将最小流量流满，然后再跑最大流？显然不行，因为将最小流量流满后的图不一定满足流量守恒，也就是一个点流入的流量等于流出的流量（除源点、汇点）。如下图：\n![1](/post-images/Upper-and-lower-bound-network-flow-1.png?500x)\n这个图就会变成下面两个图，第一幅是流满最小流量的图，第二幅是剩下最大流量的图。\n![2](/post-images/Upper-and-lower-bound-network-flow-2.png)\n显然，第一幅图并不满足流量守恒，这样第二幅图跑出来了原图也不一定有解。第一幅图中 $1$ 号点流入流量比流出流量少了 $15$，$2$ 号点流入流量比流出流量少了 $10$，$3$ 号点流入流量比流出流量多了 $15$，$4$ 号点流入流量比流出流量多了 $10$。多的流量去哪里，少的流量从哪里来？我们可以用新建的超级源点和超级汇点，用源点补充少的流量，汇点吸走多的流量，如果这个点流入流量较多就连一条边到汇点，这个点流出流量较多从源点向这个点连一条边。但是超级源点和汇点并不存在，流量也不能这样流。所以源点补充的流量应该从第二幅图中来，汇点多出的流量也应该流到第二幅图中去。所以我们在第二幅图中也建立超级源点和汇点，并像第一幅图一样连边，只不过附加边方向反向，超级源点和超级汇点互换。如下图：\n![3](/post-images/Upper-and-lower-bound-network-flow-3.png?500x)\n![4](/post-images/Upper-and-lower-bound-network-flow-4.png?500x)\n如何判断是否存在可行流？我们只需要在第二幅图中从源点到汇点跑最大流，如果从源点流出的按所有边已经流满，也就是流入汇点的所有边都流满了，就说明存在可行流。因为这样就说明第二幅图可以提供第一幅图的超级源点和超级汇点需要的流量，反之则无法满足第一幅图的超级源汇点所需流量，原图也就不存在可行流。由于从源点流出的边的总容量和流入汇点的边的总容量相等，所以只需要判断一边即可。上图就不存在可行流。\n## 有源汇上下界可行流\n如果我们在上图把 $1$ 号点设为源点，$4$ 号点设为汇点，情况就又不一样了。源点和汇点的特点是源点可以流出无限流量，汇点可以接收无限流量，源点流出的流量和汇点流入的流量相等。如何实现？我们只需要从汇点向源点连一条容量为无穷的边，就可以保证源点和汇点的流量相等。注意这条容量为正无穷的边是在建立了超级源点与超级汇点之后建立的，不影响与超级源点和超级汇点的连边。\n![5](/post-images/Upper-and-lower-bound-network-flow-5.png)\n判断方法同上无源汇上下界可行流。这样我们就可以发现原图有解了。从源点流出或汇点流入的流量就是从源点流向汇点的流量。\n## 有源汇上下界最大流\n我们现在这个图中跑一边有源汇上下界可行流，找到从汇点到源点的附加边的实际流量，也就是这条边反向边的容量。但是我们只能得到一个可行流，并不是最大流，所以我们要再在残留网络上从源点到汇点跑一边最大流，注意这时要先删去附加边。跑出来的最大流加上原来附加边的实际流量就是最大流。\n我们可以发现图中汇点到源点除了附加边，还有一条容量为 $15$ 的边，则就导致可能有流量从汇点到源点的部分流量这种边流过，我们也就无法得到真实的可行流的流量，但是这个对于最后的最大流没有影响，因为如果有流量从这些边流到源点，跑最大流的时候也一定能沿着反向边流过相同的流量到达终点，最后的和就没有变化。\n## code\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<queue>\nusing namespace std;\nint n,m,p=1,s1,s2,t1,t2,t[10001],t0[10001],f[10001],b[10001];\nstruct str\n{\n    int m,q,r;\n}a[1000001];\nvoid road(int x,int y,int r)\n{\n    a[++p].m=y;\n    a[p].q=t[x];\n    t[x]=p;\n    a[p].r=r;\n}\nbool bfs()\n{\n    queue<int> Q;\n    Q.push(s1);\n    for(int i=1;i<=n;++i) f[i]=0;\n    f[s1]=1;\n    while(!Q.empty())\n    {\n        int k=Q.front();\n        Q.pop();\n        for(int i=t[k];i!=0;i=a[i].q)\n        {\n            if(f[a[i].m]==0&&a[i].r!=0)\n            {\n                f[a[i].m]=f[k]+1;\n                Q.push(a[i].m);\n            }\n        }\n    }\n    return f[s2]!=0;\n}\nint dfs(int x,int r)\n{\n    if(x==s2) return r;\n    int s=0;\n    for(int i=t0[x];i!=0;i=a[i].q)\n    {\n        t0[x]=i;\n        if(f[a[i].m]==f[x]+1&&a[i].r!=0)\n        {\n            int z=dfs(a[i].m,min(r,a[i].r));\n            if(z!=0)\n            {\n                a[i].r-=z;\n                a[i^1].r+=z;\n                r-=z;\n                s+=z;\n            }\n            else f[a[i].m]=0;\n            if(r==0) return s; \n        }\n    }\n    return s;\n}\nint main()\n{\n    scanf(\"%d%d%d%d\",&n,&m,&t1,&t2);\n    s1=n+1;\n    s2=n+2;\n    for(int i=1;i<=m;++i)\n    {\n        int x,y,r1,r2;\n        scanf(\"%d%d%d%d\",&x,&y,&r1,&r2);\n        road(x,y,r2-r1);\n        road(y,x,0);\n        b[x]+=r1;\n        b[y]-=r1;\n    }\n    for(int i=1;i<=n;++i)\n    {\n        if(b[i]<0)\n        {\n            road(s1,i,-b[i]);\n            road(i,s1,0);\n        }\n        else if(b[i]>0)\n        {\n            road(i,s2,b[i]);\n            road(s2,i,0);\n        }\n    }\n    road(t2,t1,1e9);\n    road(t1,t2,0);\n    n+=2;\n    while(bfs())\n    {\n        for(int i=1;i<=n;++i) t0[i]=t[i];\n        dfs(s1,1e9);\n    }\n    for(int i=t[s1];i!=0;i=a[i].q)\n    {\n        if(a[i].r!=0)\n        {\n            printf(\"please go home to sleep\");\n            return 0;\n        }\n    }\n    n-=2;\n    s1=t1;\n    s2=t2;\n    int r=0;\n    for(int i=t[s2];i!=0;i=a[i].q)\n    {\n        if(a[i].m==s1)\n        {\n            r+=a[i^1].r;\n            a[i].r=a[i^1].r=0;\n        }\n    }\n    while(bfs())\n    {\n        for(int i=1;i<=n;++i) t0[i]=t[i];\n        r+=dfs(s1,1e9);\n    }\n    printf(\"%d\",r);\n    return 0;\n}\n```","slug":"Upper-and-lower-bound-network-flow","published":1,"updated":"2023-03-15T01:57:00.442Z","_id":"cleid9288002c2sjfa7g1feb7","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在一般的网络流问题中，每条边都有一定的容量，也就是流量上限。而有的问题中，每条边还需要限制一个“流量下限”，也就是流过这条边的流量必须大于等于流量上限且小于等于流量下限。这样的问题需要新的思路来解决，我们需要将其转换为朴素的最大流。<br>上下界网络流分为几个问题：无源汇上下界可行流、有源汇上下界可行流、有源汇上下界最大流与有源汇上下界最小流。</p>\n<h2 id=\"无源汇上下界可行流\"><a href=\"#无源汇上下界可行流\" class=\"headerlink\" title=\"无源汇上下界可行流\"></a>无源汇上下界可行流</h2><p>我们知道上下界网络流问题中每条边都有流量下限，所以是不是可以将最小流量流满，然后再跑最大流？显然不行，因为将最小流量流满后的图不一定满足流量守恒，也就是一个点流入的流量等于流出的流量（除源点、汇点）。如下图：<br><img src=\"/post-images/Upper-and-lower-bound-network-flow-1.png?500x\" alt=\"1\"><br>这个图就会变成下面两个图，第一幅是流满最小流量的图，第二幅是剩下最大流量的图。<br><img src=\"/post-images/Upper-and-lower-bound-network-flow-2.png\" alt=\"2\"><br>显然，第一幅图并不满足流量守恒，这样第二幅图跑出来了原图也不一定有解。第一幅图中 $1$ 号点流入流量比流出流量少了 $15$，$2$ 号点流入流量比流出流量少了 $10$，$3$ 号点流入流量比流出流量多了 $15$，$4$ 号点流入流量比流出流量多了 $10$。多的流量去哪里，少的流量从哪里来？我们可以用新建的超级源点和超级汇点，用源点补充少的流量，汇点吸走多的流量，如果这个点流入流量较多就连一条边到汇点，这个点流出流量较多从源点向这个点连一条边。但是超级源点和汇点并不存在，流量也不能这样流。所以源点补充的流量应该从第二幅图中来，汇点多出的流量也应该流到第二幅图中去。所以我们在第二幅图中也建立超级源点和汇点，并像第一幅图一样连边，只不过附加边方向反向，超级源点和超级汇点互换。如下图：<br><img src=\"/post-images/Upper-and-lower-bound-network-flow-3.png?500x\" alt=\"3\"><br><img src=\"/post-images/Upper-and-lower-bound-network-flow-4.png?500x\" alt=\"4\"><br>如何判断是否存在可行流？我们只需要在第二幅图中从源点到汇点跑最大流，如果从源点流出的按所有边已经流满，也就是流入汇点的所有边都流满了，就说明存在可行流。因为这样就说明第二幅图可以提供第一幅图的超级源点和超级汇点需要的流量，反之则无法满足第一幅图的超级源汇点所需流量，原图也就不存在可行流。由于从源点流出的边的总容量和流入汇点的边的总容量相等，所以只需要判断一边即可。上图就不存在可行流。</p>\n<h2 id=\"有源汇上下界可行流\"><a href=\"#有源汇上下界可行流\" class=\"headerlink\" title=\"有源汇上下界可行流\"></a>有源汇上下界可行流</h2><p>如果我们在上图把 $1$ 号点设为源点，$4$ 号点设为汇点，情况就又不一样了。源点和汇点的特点是源点可以流出无限流量，汇点可以接收无限流量，源点流出的流量和汇点流入的流量相等。如何实现？我们只需要从汇点向源点连一条容量为无穷的边，就可以保证源点和汇点的流量相等。注意这条容量为正无穷的边是在建立了超级源点与超级汇点之后建立的，不影响与超级源点和超级汇点的连边。<br><img src=\"/post-images/Upper-and-lower-bound-network-flow-5.png\" alt=\"5\"><br>判断方法同上无源汇上下界可行流。这样我们就可以发现原图有解了。从源点流出或汇点流入的流量就是从源点流向汇点的流量。</p>\n<h2 id=\"有源汇上下界最大流\"><a href=\"#有源汇上下界最大流\" class=\"headerlink\" title=\"有源汇上下界最大流\"></a>有源汇上下界最大流</h2><p>我们现在这个图中跑一边有源汇上下界可行流，找到从汇点到源点的附加边的实际流量，也就是这条边反向边的容量。但是我们只能得到一个可行流，并不是最大流，所以我们要再在残留网络上从源点到汇点跑一边最大流，注意这时要先删去附加边。跑出来的最大流加上原来附加边的实际流量就是最大流。<br>我们可以发现图中汇点到源点除了附加边，还有一条容量为 $15$ 的边，则就导致可能有流量从汇点到源点的部分流量这种边流过，我们也就无法得到真实的可行流的流量，但是这个对于最后的最大流没有影响，因为如果有流量从这些边流到源点，跑最大流的时候也一定能沿着反向边流过相同的流量到达终点，最后的和就没有变化。</p>\n<h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m,p=<span class=\"number\">1</span>,s1,s2,t1,t2,t[<span class=\"number\">10001</span>],t0[<span class=\"number\">10001</span>],f[<span class=\"number\">10001</span>],b[<span class=\"number\">10001</span>];</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">str</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> m,q,r;</span><br><span class=\"line\">&#125;a[<span class=\"number\">1000001</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">road</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y,<span class=\"type\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    a[++p].m=y;</span><br><span class=\"line\">    a[p].q=t[x];</span><br><span class=\"line\">    t[x]=p;</span><br><span class=\"line\">    a[p].r=r;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">bfs</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    queue&lt;<span class=\"type\">int</span>&gt; Q;</span><br><span class=\"line\">    Q.<span class=\"built_in\">push</span>(s1);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i) f[i]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    f[s1]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!Q.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> k=Q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">        Q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t[k];i!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(f[a[i].m]==<span class=\"number\">0</span>&amp;&amp;a[i].r!=<span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                f[a[i].m]=f[k]+<span class=\"number\">1</span>;</span><br><span class=\"line\">                Q.<span class=\"built_in\">push</span>(a[i].m);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> f[s2]!=<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x==s2) <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">    <span class=\"type\">int</span> s=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t0[x];i!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        t0[x]=i;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(f[a[i].m]==f[x]+<span class=\"number\">1</span>&amp;&amp;a[i].r!=<span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> z=<span class=\"built_in\">dfs</span>(a[i].m,<span class=\"built_in\">min</span>(r,a[i].r));</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(z!=<span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                a[i].r-=z;</span><br><span class=\"line\">                a[i^<span class=\"number\">1</span>].r+=z;</span><br><span class=\"line\">                r-=z;</span><br><span class=\"line\">                s+=z;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> f[a[i].m]=<span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(r==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> s; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;t1,&amp;t2);</span><br><span class=\"line\">    s1=n+<span class=\"number\">1</span>;</span><br><span class=\"line\">    s2=n+<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x,y,r1,r2;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d%d&quot;</span>,&amp;x,&amp;y,&amp;r1,&amp;r2);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(x,y,r2-r1);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(y,x,<span class=\"number\">0</span>);</span><br><span class=\"line\">        b[x]+=r1;</span><br><span class=\"line\">        b[y]-=r1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(b[i]&lt;<span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">road</span>(s1,i,-b[i]);</span><br><span class=\"line\">            <span class=\"built_in\">road</span>(i,s1,<span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(b[i]&gt;<span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">road</span>(i,s2,b[i]);</span><br><span class=\"line\">            <span class=\"built_in\">road</span>(s2,i,<span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">road</span>(t2,t1,<span class=\"number\">1e9</span>);</span><br><span class=\"line\">    <span class=\"built_in\">road</span>(t1,t2,<span class=\"number\">0</span>);</span><br><span class=\"line\">    n+=<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">bfs</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i) t0[i]=t[i];</span><br><span class=\"line\">        <span class=\"built_in\">dfs</span>(s1,<span class=\"number\">1e9</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t[s1];i!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a[i].r!=<span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;please go home to sleep&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    n-=<span class=\"number\">2</span>;</span><br><span class=\"line\">    s1=t1;</span><br><span class=\"line\">    s2=t2;</span><br><span class=\"line\">    <span class=\"type\">int</span> r=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t[s2];i!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a[i].m==s1)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            r+=a[i^<span class=\"number\">1</span>].r;</span><br><span class=\"line\">            a[i].r=a[i^<span class=\"number\">1</span>].r=<span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">bfs</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i) t0[i]=t[i];</span><br><span class=\"line\">        r+=<span class=\"built_in\">dfs</span>(s1,<span class=\"number\">1e9</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,r);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在一般的网络流问题中，每条边都有一定的容量，也就是流量上限。而有的问题中，每条边还需要限制一个“流量下限”，也就是流过这条边的流量必须大于等于流量上限且小于等于流量下限。这样的问题需要新的思路来解决，我们需要将其转换为朴素的最大流。<br>上下界网络流分为几个问题：无源汇上下界可行流、有源汇上下界可行流、有源汇上下界最大流与有源汇上下界最小流。</p>\n<h2 id=\"无源汇上下界可行流\"><a href=\"#无源汇上下界可行流\" class=\"headerlink\" title=\"无源汇上下界可行流\"></a>无源汇上下界可行流</h2><p>我们知道上下界网络流问题中每条边都有流量下限，所以是不是可以将最小流量流满，然后再跑最大流？显然不行，因为将最小流量流满后的图不一定满足流量守恒，也就是一个点流入的流量等于流出的流量（除源点、汇点）。如下图：<br><img src=\"/post-images/Upper-and-lower-bound-network-flow-1.png?500x\" alt=\"1\"><br>这个图就会变成下面两个图，第一幅是流满最小流量的图，第二幅是剩下最大流量的图。<br><img src=\"/post-images/Upper-and-lower-bound-network-flow-2.png\" alt=\"2\"><br>显然，第一幅图并不满足流量守恒，这样第二幅图跑出来了原图也不一定有解。第一幅图中 $1$ 号点流入流量比流出流量少了 $15$，$2$ 号点流入流量比流出流量少了 $10$，$3$ 号点流入流量比流出流量多了 $15$，$4$ 号点流入流量比流出流量多了 $10$。多的流量去哪里，少的流量从哪里来？我们可以用新建的超级源点和超级汇点，用源点补充少的流量，汇点吸走多的流量，如果这个点流入流量较多就连一条边到汇点，这个点流出流量较多从源点向这个点连一条边。但是超级源点和汇点并不存在，流量也不能这样流。所以源点补充的流量应该从第二幅图中来，汇点多出的流量也应该流到第二幅图中去。所以我们在第二幅图中也建立超级源点和汇点，并像第一幅图一样连边，只不过附加边方向反向，超级源点和超级汇点互换。如下图：<br><img src=\"/post-images/Upper-and-lower-bound-network-flow-3.png?500x\" alt=\"3\"><br><img src=\"/post-images/Upper-and-lower-bound-network-flow-4.png?500x\" alt=\"4\"><br>如何判断是否存在可行流？我们只需要在第二幅图中从源点到汇点跑最大流，如果从源点流出的按所有边已经流满，也就是流入汇点的所有边都流满了，就说明存在可行流。因为这样就说明第二幅图可以提供第一幅图的超级源点和超级汇点需要的流量，反之则无法满足第一幅图的超级源汇点所需流量，原图也就不存在可行流。由于从源点流出的边的总容量和流入汇点的边的总容量相等，所以只需要判断一边即可。上图就不存在可行流。</p>\n<h2 id=\"有源汇上下界可行流\"><a href=\"#有源汇上下界可行流\" class=\"headerlink\" title=\"有源汇上下界可行流\"></a>有源汇上下界可行流</h2><p>如果我们在上图把 $1$ 号点设为源点，$4$ 号点设为汇点，情况就又不一样了。源点和汇点的特点是源点可以流出无限流量，汇点可以接收无限流量，源点流出的流量和汇点流入的流量相等。如何实现？我们只需要从汇点向源点连一条容量为无穷的边，就可以保证源点和汇点的流量相等。注意这条容量为正无穷的边是在建立了超级源点与超级汇点之后建立的，不影响与超级源点和超级汇点的连边。<br><img src=\"/post-images/Upper-and-lower-bound-network-flow-5.png\" alt=\"5\"><br>判断方法同上无源汇上下界可行流。这样我们就可以发现原图有解了。从源点流出或汇点流入的流量就是从源点流向汇点的流量。</p>\n<h2 id=\"有源汇上下界最大流\"><a href=\"#有源汇上下界最大流\" class=\"headerlink\" title=\"有源汇上下界最大流\"></a>有源汇上下界最大流</h2><p>我们现在这个图中跑一边有源汇上下界可行流，找到从汇点到源点的附加边的实际流量，也就是这条边反向边的容量。但是我们只能得到一个可行流，并不是最大流，所以我们要再在残留网络上从源点到汇点跑一边最大流，注意这时要先删去附加边。跑出来的最大流加上原来附加边的实际流量就是最大流。<br>我们可以发现图中汇点到源点除了附加边，还有一条容量为 $15$ 的边，则就导致可能有流量从汇点到源点的部分流量这种边流过，我们也就无法得到真实的可行流的流量，但是这个对于最后的最大流没有影响，因为如果有流量从这些边流到源点，跑最大流的时候也一定能沿着反向边流过相同的流量到达终点，最后的和就没有变化。</p>\n<h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m,p=<span class=\"number\">1</span>,s1,s2,t1,t2,t[<span class=\"number\">10001</span>],t0[<span class=\"number\">10001</span>],f[<span class=\"number\">10001</span>],b[<span class=\"number\">10001</span>];</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">str</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> m,q,r;</span><br><span class=\"line\">&#125;a[<span class=\"number\">1000001</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">road</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y,<span class=\"type\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    a[++p].m=y;</span><br><span class=\"line\">    a[p].q=t[x];</span><br><span class=\"line\">    t[x]=p;</span><br><span class=\"line\">    a[p].r=r;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">bfs</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    queue&lt;<span class=\"type\">int</span>&gt; Q;</span><br><span class=\"line\">    Q.<span class=\"built_in\">push</span>(s1);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i) f[i]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    f[s1]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!Q.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> k=Q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">        Q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t[k];i!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(f[a[i].m]==<span class=\"number\">0</span>&amp;&amp;a[i].r!=<span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                f[a[i].m]=f[k]+<span class=\"number\">1</span>;</span><br><span class=\"line\">                Q.<span class=\"built_in\">push</span>(a[i].m);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> f[s2]!=<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x==s2) <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">    <span class=\"type\">int</span> s=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t0[x];i!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        t0[x]=i;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(f[a[i].m]==f[x]+<span class=\"number\">1</span>&amp;&amp;a[i].r!=<span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> z=<span class=\"built_in\">dfs</span>(a[i].m,<span class=\"built_in\">min</span>(r,a[i].r));</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(z!=<span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                a[i].r-=z;</span><br><span class=\"line\">                a[i^<span class=\"number\">1</span>].r+=z;</span><br><span class=\"line\">                r-=z;</span><br><span class=\"line\">                s+=z;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> f[a[i].m]=<span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(r==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> s; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;t1,&amp;t2);</span><br><span class=\"line\">    s1=n+<span class=\"number\">1</span>;</span><br><span class=\"line\">    s2=n+<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x,y,r1,r2;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d%d&quot;</span>,&amp;x,&amp;y,&amp;r1,&amp;r2);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(x,y,r2-r1);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(y,x,<span class=\"number\">0</span>);</span><br><span class=\"line\">        b[x]+=r1;</span><br><span class=\"line\">        b[y]-=r1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(b[i]&lt;<span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">road</span>(s1,i,-b[i]);</span><br><span class=\"line\">            <span class=\"built_in\">road</span>(i,s1,<span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(b[i]&gt;<span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">road</span>(i,s2,b[i]);</span><br><span class=\"line\">            <span class=\"built_in\">road</span>(s2,i,<span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">road</span>(t2,t1,<span class=\"number\">1e9</span>);</span><br><span class=\"line\">    <span class=\"built_in\">road</span>(t1,t2,<span class=\"number\">0</span>);</span><br><span class=\"line\">    n+=<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">bfs</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i) t0[i]=t[i];</span><br><span class=\"line\">        <span class=\"built_in\">dfs</span>(s1,<span class=\"number\">1e9</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t[s1];i!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a[i].r!=<span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;please go home to sleep&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    n-=<span class=\"number\">2</span>;</span><br><span class=\"line\">    s1=t1;</span><br><span class=\"line\">    s2=t2;</span><br><span class=\"line\">    <span class=\"type\">int</span> r=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t[s2];i!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a[i].m==s1)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            r+=a[i^<span class=\"number\">1</span>].r;</span><br><span class=\"line\">            a[i].r=a[i^<span class=\"number\">1</span>].r=<span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">bfs</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i) t0[i]=t[i];</span><br><span class=\"line\">        r+=<span class=\"built_in\">dfs</span>(s1,<span class=\"number\">1e9</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,r);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"最大流Dinic","date":"2022-02-15T03:15:34.000Z","description":" ","_content":"\n## 前言\n模板题：[P3376 【模板】网络最大流](https://www.luogu.com.cn/problem/P3376)\n[最大流题单](/post/maximum-flow-problemlist/)\n进阶知识：[最大流ISAP](/post/maximum-flow-ISAP/)\n一个图中，每条边都有一定的承载能力，也就是容量，流过这条边的流量不得超过这条边的最大流量，从源点到汇点的最大流量就叫做最大流。\n最大流问题有很多种解法，而 Dinic 是一种简单又比较实用的方法，但是多数解法都有一个思想：残留网络。\n## 残留网络\n增广路指的就是一条从源点到汇点，且经过的边最小容量不为 $0$ 的路径.显而易见，我们可以通过每一次搜索增广路，然后将经过的边的流量减去这条增广路的流量，这条增广路的流量就是经过的所有边的容量的最小值。但是这种算法是错误的，见下图：\n![1](/post-images/maximum-flow-Dinic-1.png?300x)\n如果我们按照上述算法，可能就会找到这个路径：\n![2](/post-images/maximum-flow-Dinic-2.png?300x)\n这样找出来的最大流为 $1$，而真实的最大流为 $2$，显然不正确。这是因为我们第一次找到的增广路影响了后面寻找更多增广路。如果我们让后续寻找更多增广路时可以“反悔”，也就是修改之前的增广路，这个问题就解决了。为了实现这个方案，残留网络就出现了。\n我们对于每一条边都增加一条容量为 $0$ 反向边，找到增广路后经过的边流量要减去此增广路的流量，其反向边的流量还要加上此增广路的流量。所有反向边组成的图就是残留网络。于是刚刚的图就变成了这个图：\n![3](/post-images/maximum-flow-Dinic-3.png?300x)\n![4](/post-images/maximum-flow-Dinic-4.png?300x)\n对于这个图，我们还可以找到一条增广路：\n![5](/post-images/maximum-flow-Dinic-5.png?300x)\n于是我们就正确求解出了这个图的最大流。\n残留网络并不是简单地增加了一条运输流量的边，它是让之后寻找增广路时可以使水流沿着这条边流回去，也就是将之前的增广路“反悔”了。所以这种思想是正确的。为什么反边的容量为 $0$ 呢？因为只有再原边有流量的时候才能反悔，原边流量多少才能反悔多少。\n## Dinic\nDinic算法就成功实现了这种思想。寻找增广路就是寻找一条可行解，而不是最优解，若使用 bfs 会几乎遍历整张图，而 dfs 就可以很快找到一条增广路。但是 dfs 也容易被卡，因为可能会绕远路甚至流回已经过的点，就会浪费时间。所以 Dinic 结合了 bfs 与 dfs，新增了分层图这个概念。\nDInic算法会首先进行一次 bfs，按照搜索的先后顺序分层，构建分层图。然后进行 dfs，此时 dfs 有一个限制，就是流量只会从上一层流到下一层。这样可能已经找不到增广路了，但实际上还有许多增广路没被发现。这时就需要再一次进行 bfs，注意 bfs 不会经过容量为 $0$ 的边，这样就会构建一个新的分层图，再进行 dfs 。最后直到一次 bfs 无法到达汇点，即不存在增广路，Dinic 结束。此时的总流量就是最大流。\nDinic成功解决了之前dfs被卡的问题，因为流量只能从高的点向低的点流，并且bfs次数较少。不过Dinic还是要进行数次bfs，所以出现了更优的算法ISAP，可以只进行一次bfs。\n## 优化\ndfs过程中我们会一直流直到把一条边流完再转到下一条边，如果一条边有容量但是却没有增广路，说明这条边的下一个点已经没有更多容量了，我们就可以把连接的这个点的高度标记为 $0$ ，下一次就不会再搜索到这个点了。\n不过 Dinic 还是很慢，甚至比 EK 还慢，这时候我们就需要拯救 Dinic 的当前弧优化。上面说到，dfs 过程中会一直流直到把一条边流完再转到下一条边，当搜索到一条边的时候说明这条边之前的所有边都已经没有增广路了，我们就可以直接将 $t$ 指向这条边，这样下一次就不会再次搜索已经没有流量的边了。\n## 无向图\n无向图的最大流可以通过建立两组边来实现，但是也可以更简单地去掉流量为 $0$ 的反向边，也就是对于一条容量为 $r$ 的无向边，从起点到终点建立一条容量为 $r$ 的无向边，再从终点到起点建立一条容量为 $r$ 的无向边即可。\n## code\n``` cpp\n#include<cstdio>\n#include<algorithm>\n#include<queue>\nusing namespace std;\nint n,m,p=1,s1,s2,t[10001],t0[10001],f[10001];\nstruct str\n{\n    int m,q,r;\n}a[1000001];\nvoid road(int x,int y,int r)\n{\n    a[++p].m=y;\n    a[p].q=t[x];\n    t[x]=p;\n    a[p].r=r;\n}\nbool bfs()\n{\n    queue<int> Q;\n    Q.push(s1);\n    for(int i=1;i<=n;++i) f[i]=0;\n    f[s1]=1;\n    while(!Q.empty())\n    {\n        int k=Q.front();\n        Q.pop();\n        for(int i=t[k];i!=0;i=a[i].q)\n        {\n            if(f[a[i].m]==0&&a[i].r!=0)\n            {\n                f[a[i].m]=f[k]+1;\n                Q.push(a[i].m);\n            }\n        }\n    }\n    return f[s2]!=0;\n}\nint dfs(int x,int r)\n{\n    if(x==s2) return r;\n    int s=0;\n    for(int i=t0[x];i!=0;i=a[i].q)\n    {\n        t0[x]=i;\n        if(f[a[i].m]==f[x]+1&&a[i].r!=0)\n        {\n            int z=dfs(a[i].m,min(r,a[i].r));\n            if(z!=0)\n            {\n                a[i].r-=z;\n                a[i^1].r+=z;\n                r-=z;\n                s+=z;\n            }\n            else f[a[i].m]=0;\n            if(r==0) return s; \n        }\n    }\n    return s;\n}\nint main()\n{\n    scanf(\"%d%d%d%d\",&n,&m,&s1,&s2);\n    for(int i=1;i<=m;++i)\n    {\n        int x,y,r;\n        scanf(\"%d%d%d\",&x,&y,&r);\n        road(x,y,r);\n        road(y,x,0);\n    }\n    int r=0;\n    while(bfs())\n    {\n        for(int i=1;i<=n;++i) t0[i]=t[i];\n        r+=dfs(s1,1e9);\n    }\n    printf(\"%d\",r);\n    return 0;\n}\n```","source":"_posts/maximum-flow-Dinic.md","raw":"---\ntitle: '最大流Dinic'\ndate: 2022-02-15 11:15:34\ntags: [网络流,最大流]\ndescription: ' '\n---\n\n## 前言\n模板题：[P3376 【模板】网络最大流](https://www.luogu.com.cn/problem/P3376)\n[最大流题单](/post/maximum-flow-problemlist/)\n进阶知识：[最大流ISAP](/post/maximum-flow-ISAP/)\n一个图中，每条边都有一定的承载能力，也就是容量，流过这条边的流量不得超过这条边的最大流量，从源点到汇点的最大流量就叫做最大流。\n最大流问题有很多种解法，而 Dinic 是一种简单又比较实用的方法，但是多数解法都有一个思想：残留网络。\n## 残留网络\n增广路指的就是一条从源点到汇点，且经过的边最小容量不为 $0$ 的路径.显而易见，我们可以通过每一次搜索增广路，然后将经过的边的流量减去这条增广路的流量，这条增广路的流量就是经过的所有边的容量的最小值。但是这种算法是错误的，见下图：\n![1](/post-images/maximum-flow-Dinic-1.png?300x)\n如果我们按照上述算法，可能就会找到这个路径：\n![2](/post-images/maximum-flow-Dinic-2.png?300x)\n这样找出来的最大流为 $1$，而真实的最大流为 $2$，显然不正确。这是因为我们第一次找到的增广路影响了后面寻找更多增广路。如果我们让后续寻找更多增广路时可以“反悔”，也就是修改之前的增广路，这个问题就解决了。为了实现这个方案，残留网络就出现了。\n我们对于每一条边都增加一条容量为 $0$ 反向边，找到增广路后经过的边流量要减去此增广路的流量，其反向边的流量还要加上此增广路的流量。所有反向边组成的图就是残留网络。于是刚刚的图就变成了这个图：\n![3](/post-images/maximum-flow-Dinic-3.png?300x)\n![4](/post-images/maximum-flow-Dinic-4.png?300x)\n对于这个图，我们还可以找到一条增广路：\n![5](/post-images/maximum-flow-Dinic-5.png?300x)\n于是我们就正确求解出了这个图的最大流。\n残留网络并不是简单地增加了一条运输流量的边，它是让之后寻找增广路时可以使水流沿着这条边流回去，也就是将之前的增广路“反悔”了。所以这种思想是正确的。为什么反边的容量为 $0$ 呢？因为只有再原边有流量的时候才能反悔，原边流量多少才能反悔多少。\n## Dinic\nDinic算法就成功实现了这种思想。寻找增广路就是寻找一条可行解，而不是最优解，若使用 bfs 会几乎遍历整张图，而 dfs 就可以很快找到一条增广路。但是 dfs 也容易被卡，因为可能会绕远路甚至流回已经过的点，就会浪费时间。所以 Dinic 结合了 bfs 与 dfs，新增了分层图这个概念。\nDInic算法会首先进行一次 bfs，按照搜索的先后顺序分层，构建分层图。然后进行 dfs，此时 dfs 有一个限制，就是流量只会从上一层流到下一层。这样可能已经找不到增广路了，但实际上还有许多增广路没被发现。这时就需要再一次进行 bfs，注意 bfs 不会经过容量为 $0$ 的边，这样就会构建一个新的分层图，再进行 dfs 。最后直到一次 bfs 无法到达汇点，即不存在增广路，Dinic 结束。此时的总流量就是最大流。\nDinic成功解决了之前dfs被卡的问题，因为流量只能从高的点向低的点流，并且bfs次数较少。不过Dinic还是要进行数次bfs，所以出现了更优的算法ISAP，可以只进行一次bfs。\n## 优化\ndfs过程中我们会一直流直到把一条边流完再转到下一条边，如果一条边有容量但是却没有增广路，说明这条边的下一个点已经没有更多容量了，我们就可以把连接的这个点的高度标记为 $0$ ，下一次就不会再搜索到这个点了。\n不过 Dinic 还是很慢，甚至比 EK 还慢，这时候我们就需要拯救 Dinic 的当前弧优化。上面说到，dfs 过程中会一直流直到把一条边流完再转到下一条边，当搜索到一条边的时候说明这条边之前的所有边都已经没有增广路了，我们就可以直接将 $t$ 指向这条边，这样下一次就不会再次搜索已经没有流量的边了。\n## 无向图\n无向图的最大流可以通过建立两组边来实现，但是也可以更简单地去掉流量为 $0$ 的反向边，也就是对于一条容量为 $r$ 的无向边，从起点到终点建立一条容量为 $r$ 的无向边，再从终点到起点建立一条容量为 $r$ 的无向边即可。\n## code\n``` cpp\n#include<cstdio>\n#include<algorithm>\n#include<queue>\nusing namespace std;\nint n,m,p=1,s1,s2,t[10001],t0[10001],f[10001];\nstruct str\n{\n    int m,q,r;\n}a[1000001];\nvoid road(int x,int y,int r)\n{\n    a[++p].m=y;\n    a[p].q=t[x];\n    t[x]=p;\n    a[p].r=r;\n}\nbool bfs()\n{\n    queue<int> Q;\n    Q.push(s1);\n    for(int i=1;i<=n;++i) f[i]=0;\n    f[s1]=1;\n    while(!Q.empty())\n    {\n        int k=Q.front();\n        Q.pop();\n        for(int i=t[k];i!=0;i=a[i].q)\n        {\n            if(f[a[i].m]==0&&a[i].r!=0)\n            {\n                f[a[i].m]=f[k]+1;\n                Q.push(a[i].m);\n            }\n        }\n    }\n    return f[s2]!=0;\n}\nint dfs(int x,int r)\n{\n    if(x==s2) return r;\n    int s=0;\n    for(int i=t0[x];i!=0;i=a[i].q)\n    {\n        t0[x]=i;\n        if(f[a[i].m]==f[x]+1&&a[i].r!=0)\n        {\n            int z=dfs(a[i].m,min(r,a[i].r));\n            if(z!=0)\n            {\n                a[i].r-=z;\n                a[i^1].r+=z;\n                r-=z;\n                s+=z;\n            }\n            else f[a[i].m]=0;\n            if(r==0) return s; \n        }\n    }\n    return s;\n}\nint main()\n{\n    scanf(\"%d%d%d%d\",&n,&m,&s1,&s2);\n    for(int i=1;i<=m;++i)\n    {\n        int x,y,r;\n        scanf(\"%d%d%d\",&x,&y,&r);\n        road(x,y,r);\n        road(y,x,0);\n    }\n    int r=0;\n    while(bfs())\n    {\n        for(int i=1;i<=n;++i) t0[i]=t[i];\n        r+=dfs(s1,1e9);\n    }\n    printf(\"%d\",r);\n    return 0;\n}\n```","slug":"maximum-flow-Dinic","published":1,"updated":"2023-03-15T01:57:00.442Z","_id":"cleid928a002e2sjf544s1t3m","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>模板题：<a href=\"https://www.luogu.com.cn/problem/P3376\">P3376 【模板】网络最大流</a><br><a href=\"/post/maximum-flow-problemlist/\">最大流题单</a><br>进阶知识：<a href=\"/post/maximum-flow-ISAP/\">最大流ISAP</a><br>一个图中，每条边都有一定的承载能力，也就是容量，流过这条边的流量不得超过这条边的最大流量，从源点到汇点的最大流量就叫做最大流。<br>最大流问题有很多种解法，而 Dinic 是一种简单又比较实用的方法，但是多数解法都有一个思想：残留网络。</p>\n<h2 id=\"残留网络\"><a href=\"#残留网络\" class=\"headerlink\" title=\"残留网络\"></a>残留网络</h2><p>增广路指的就是一条从源点到汇点，且经过的边最小容量不为 $0$ 的路径.显而易见，我们可以通过每一次搜索增广路，然后将经过的边的流量减去这条增广路的流量，这条增广路的流量就是经过的所有边的容量的最小值。但是这种算法是错误的，见下图：<br><img src=\"/post-images/maximum-flow-Dinic-1.png?300x\" alt=\"1\"><br>如果我们按照上述算法，可能就会找到这个路径：<br><img src=\"/post-images/maximum-flow-Dinic-2.png?300x\" alt=\"2\"><br>这样找出来的最大流为 $1$，而真实的最大流为 $2$，显然不正确。这是因为我们第一次找到的增广路影响了后面寻找更多增广路。如果我们让后续寻找更多增广路时可以“反悔”，也就是修改之前的增广路，这个问题就解决了。为了实现这个方案，残留网络就出现了。<br>我们对于每一条边都增加一条容量为 $0$ 反向边，找到增广路后经过的边流量要减去此增广路的流量，其反向边的流量还要加上此增广路的流量。所有反向边组成的图就是残留网络。于是刚刚的图就变成了这个图：<br><img src=\"/post-images/maximum-flow-Dinic-3.png?300x\" alt=\"3\"><br><img src=\"/post-images/maximum-flow-Dinic-4.png?300x\" alt=\"4\"><br>对于这个图，我们还可以找到一条增广路：<br><img src=\"/post-images/maximum-flow-Dinic-5.png?300x\" alt=\"5\"><br>于是我们就正确求解出了这个图的最大流。<br>残留网络并不是简单地增加了一条运输流量的边，它是让之后寻找增广路时可以使水流沿着这条边流回去，也就是将之前的增广路“反悔”了。所以这种思想是正确的。为什么反边的容量为 $0$ 呢？因为只有再原边有流量的时候才能反悔，原边流量多少才能反悔多少。</p>\n<h2 id=\"Dinic\"><a href=\"#Dinic\" class=\"headerlink\" title=\"Dinic\"></a>Dinic</h2><p>Dinic算法就成功实现了这种思想。寻找增广路就是寻找一条可行解，而不是最优解，若使用 bfs 会几乎遍历整张图，而 dfs 就可以很快找到一条增广路。但是 dfs 也容易被卡，因为可能会绕远路甚至流回已经过的点，就会浪费时间。所以 Dinic 结合了 bfs 与 dfs，新增了分层图这个概念。<br>DInic算法会首先进行一次 bfs，按照搜索的先后顺序分层，构建分层图。然后进行 dfs，此时 dfs 有一个限制，就是流量只会从上一层流到下一层。这样可能已经找不到增广路了，但实际上还有许多增广路没被发现。这时就需要再一次进行 bfs，注意 bfs 不会经过容量为 $0$ 的边，这样就会构建一个新的分层图，再进行 dfs 。最后直到一次 bfs 无法到达汇点，即不存在增广路，Dinic 结束。此时的总流量就是最大流。<br>Dinic成功解决了之前dfs被卡的问题，因为流量只能从高的点向低的点流，并且bfs次数较少。不过Dinic还是要进行数次bfs，所以出现了更优的算法ISAP，可以只进行一次bfs。</p>\n<h2 id=\"优化\"><a href=\"#优化\" class=\"headerlink\" title=\"优化\"></a>优化</h2><p>dfs过程中我们会一直流直到把一条边流完再转到下一条边，如果一条边有容量但是却没有增广路，说明这条边的下一个点已经没有更多容量了，我们就可以把连接的这个点的高度标记为 $0$ ，下一次就不会再搜索到这个点了。<br>不过 Dinic 还是很慢，甚至比 EK 还慢，这时候我们就需要拯救 Dinic 的当前弧优化。上面说到，dfs 过程中会一直流直到把一条边流完再转到下一条边，当搜索到一条边的时候说明这条边之前的所有边都已经没有增广路了，我们就可以直接将 $t$ 指向这条边，这样下一次就不会再次搜索已经没有流量的边了。</p>\n<h2 id=\"无向图\"><a href=\"#无向图\" class=\"headerlink\" title=\"无向图\"></a>无向图</h2><p>无向图的最大流可以通过建立两组边来实现，但是也可以更简单地去掉流量为 $0$ 的反向边，也就是对于一条容量为 $r$ 的无向边，从起点到终点建立一条容量为 $r$ 的无向边，再从终点到起点建立一条容量为 $r$ 的无向边即可。</p>\n<h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m,p=<span class=\"number\">1</span>,s1,s2,t[<span class=\"number\">10001</span>],t0[<span class=\"number\">10001</span>],f[<span class=\"number\">10001</span>];</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">str</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> m,q,r;</span><br><span class=\"line\">&#125;a[<span class=\"number\">1000001</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">road</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y,<span class=\"type\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    a[++p].m=y;</span><br><span class=\"line\">    a[p].q=t[x];</span><br><span class=\"line\">    t[x]=p;</span><br><span class=\"line\">    a[p].r=r;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">bfs</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    queue&lt;<span class=\"type\">int</span>&gt; Q;</span><br><span class=\"line\">    Q.<span class=\"built_in\">push</span>(s1);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i) f[i]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    f[s1]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!Q.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> k=Q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">        Q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t[k];i!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(f[a[i].m]==<span class=\"number\">0</span>&amp;&amp;a[i].r!=<span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                f[a[i].m]=f[k]+<span class=\"number\">1</span>;</span><br><span class=\"line\">                Q.<span class=\"built_in\">push</span>(a[i].m);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> f[s2]!=<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x==s2) <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">    <span class=\"type\">int</span> s=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t0[x];i!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        t0[x]=i;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(f[a[i].m]==f[x]+<span class=\"number\">1</span>&amp;&amp;a[i].r!=<span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> z=<span class=\"built_in\">dfs</span>(a[i].m,<span class=\"built_in\">min</span>(r,a[i].r));</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(z!=<span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                a[i].r-=z;</span><br><span class=\"line\">                a[i^<span class=\"number\">1</span>].r+=z;</span><br><span class=\"line\">                r-=z;</span><br><span class=\"line\">                s+=z;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> f[a[i].m]=<span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(r==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> s; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;s1,&amp;s2);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x,y,r;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>,&amp;x,&amp;y,&amp;r);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(x,y,r);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(y,x,<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> r=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">bfs</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i) t0[i]=t[i];</span><br><span class=\"line\">        r+=<span class=\"built_in\">dfs</span>(s1,<span class=\"number\">1e9</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,r);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>模板题：<a href=\"https://www.luogu.com.cn/problem/P3376\">P3376 【模板】网络最大流</a><br><a href=\"/post/maximum-flow-problemlist/\">最大流题单</a><br>进阶知识：<a href=\"/post/maximum-flow-ISAP/\">最大流ISAP</a><br>一个图中，每条边都有一定的承载能力，也就是容量，流过这条边的流量不得超过这条边的最大流量，从源点到汇点的最大流量就叫做最大流。<br>最大流问题有很多种解法，而 Dinic 是一种简单又比较实用的方法，但是多数解法都有一个思想：残留网络。</p>\n<h2 id=\"残留网络\"><a href=\"#残留网络\" class=\"headerlink\" title=\"残留网络\"></a>残留网络</h2><p>增广路指的就是一条从源点到汇点，且经过的边最小容量不为 $0$ 的路径.显而易见，我们可以通过每一次搜索增广路，然后将经过的边的流量减去这条增广路的流量，这条增广路的流量就是经过的所有边的容量的最小值。但是这种算法是错误的，见下图：<br><img src=\"/post-images/maximum-flow-Dinic-1.png?300x\" alt=\"1\"><br>如果我们按照上述算法，可能就会找到这个路径：<br><img src=\"/post-images/maximum-flow-Dinic-2.png?300x\" alt=\"2\"><br>这样找出来的最大流为 $1$，而真实的最大流为 $2$，显然不正确。这是因为我们第一次找到的增广路影响了后面寻找更多增广路。如果我们让后续寻找更多增广路时可以“反悔”，也就是修改之前的增广路，这个问题就解决了。为了实现这个方案，残留网络就出现了。<br>我们对于每一条边都增加一条容量为 $0$ 反向边，找到增广路后经过的边流量要减去此增广路的流量，其反向边的流量还要加上此增广路的流量。所有反向边组成的图就是残留网络。于是刚刚的图就变成了这个图：<br><img src=\"/post-images/maximum-flow-Dinic-3.png?300x\" alt=\"3\"><br><img src=\"/post-images/maximum-flow-Dinic-4.png?300x\" alt=\"4\"><br>对于这个图，我们还可以找到一条增广路：<br><img src=\"/post-images/maximum-flow-Dinic-5.png?300x\" alt=\"5\"><br>于是我们就正确求解出了这个图的最大流。<br>残留网络并不是简单地增加了一条运输流量的边，它是让之后寻找增广路时可以使水流沿着这条边流回去，也就是将之前的增广路“反悔”了。所以这种思想是正确的。为什么反边的容量为 $0$ 呢？因为只有再原边有流量的时候才能反悔，原边流量多少才能反悔多少。</p>\n<h2 id=\"Dinic\"><a href=\"#Dinic\" class=\"headerlink\" title=\"Dinic\"></a>Dinic</h2><p>Dinic算法就成功实现了这种思想。寻找增广路就是寻找一条可行解，而不是最优解，若使用 bfs 会几乎遍历整张图，而 dfs 就可以很快找到一条增广路。但是 dfs 也容易被卡，因为可能会绕远路甚至流回已经过的点，就会浪费时间。所以 Dinic 结合了 bfs 与 dfs，新增了分层图这个概念。<br>DInic算法会首先进行一次 bfs，按照搜索的先后顺序分层，构建分层图。然后进行 dfs，此时 dfs 有一个限制，就是流量只会从上一层流到下一层。这样可能已经找不到增广路了，但实际上还有许多增广路没被发现。这时就需要再一次进行 bfs，注意 bfs 不会经过容量为 $0$ 的边，这样就会构建一个新的分层图，再进行 dfs 。最后直到一次 bfs 无法到达汇点，即不存在增广路，Dinic 结束。此时的总流量就是最大流。<br>Dinic成功解决了之前dfs被卡的问题，因为流量只能从高的点向低的点流，并且bfs次数较少。不过Dinic还是要进行数次bfs，所以出现了更优的算法ISAP，可以只进行一次bfs。</p>\n<h2 id=\"优化\"><a href=\"#优化\" class=\"headerlink\" title=\"优化\"></a>优化</h2><p>dfs过程中我们会一直流直到把一条边流完再转到下一条边，如果一条边有容量但是却没有增广路，说明这条边的下一个点已经没有更多容量了，我们就可以把连接的这个点的高度标记为 $0$ ，下一次就不会再搜索到这个点了。<br>不过 Dinic 还是很慢，甚至比 EK 还慢，这时候我们就需要拯救 Dinic 的当前弧优化。上面说到，dfs 过程中会一直流直到把一条边流完再转到下一条边，当搜索到一条边的时候说明这条边之前的所有边都已经没有增广路了，我们就可以直接将 $t$ 指向这条边，这样下一次就不会再次搜索已经没有流量的边了。</p>\n<h2 id=\"无向图\"><a href=\"#无向图\" class=\"headerlink\" title=\"无向图\"></a>无向图</h2><p>无向图的最大流可以通过建立两组边来实现，但是也可以更简单地去掉流量为 $0$ 的反向边，也就是对于一条容量为 $r$ 的无向边，从起点到终点建立一条容量为 $r$ 的无向边，再从终点到起点建立一条容量为 $r$ 的无向边即可。</p>\n<h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m,p=<span class=\"number\">1</span>,s1,s2,t[<span class=\"number\">10001</span>],t0[<span class=\"number\">10001</span>],f[<span class=\"number\">10001</span>];</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">str</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> m,q,r;</span><br><span class=\"line\">&#125;a[<span class=\"number\">1000001</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">road</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y,<span class=\"type\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    a[++p].m=y;</span><br><span class=\"line\">    a[p].q=t[x];</span><br><span class=\"line\">    t[x]=p;</span><br><span class=\"line\">    a[p].r=r;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">bfs</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    queue&lt;<span class=\"type\">int</span>&gt; Q;</span><br><span class=\"line\">    Q.<span class=\"built_in\">push</span>(s1);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i) f[i]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    f[s1]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!Q.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> k=Q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">        Q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t[k];i!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(f[a[i].m]==<span class=\"number\">0</span>&amp;&amp;a[i].r!=<span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                f[a[i].m]=f[k]+<span class=\"number\">1</span>;</span><br><span class=\"line\">                Q.<span class=\"built_in\">push</span>(a[i].m);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> f[s2]!=<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x==s2) <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">    <span class=\"type\">int</span> s=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t0[x];i!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        t0[x]=i;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(f[a[i].m]==f[x]+<span class=\"number\">1</span>&amp;&amp;a[i].r!=<span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> z=<span class=\"built_in\">dfs</span>(a[i].m,<span class=\"built_in\">min</span>(r,a[i].r));</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(z!=<span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                a[i].r-=z;</span><br><span class=\"line\">                a[i^<span class=\"number\">1</span>].r+=z;</span><br><span class=\"line\">                r-=z;</span><br><span class=\"line\">                s+=z;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> f[a[i].m]=<span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(r==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> s; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;s1,&amp;s2);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x,y,r;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>,&amp;x,&amp;y,&amp;r);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(x,y,r);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(y,x,<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> r=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">bfs</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i) t0[i]=t[i];</span><br><span class=\"line\">        r+=<span class=\"built_in\">dfs</span>(s1,<span class=\"number\">1e9</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,r);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"CSP-S 2022 游记","date":"2022-10-30T00:41:54.000Z","description":" ","_content":"## Day 1\n\n进了考场，才发现高新的机房挤得要死，还不隔开坐，跟某东辰国际一样，~~但是某东辰国际至少有挡板，这里瞟代码完全发现不了~~，手都活动不开，键盘盒子还是下沉的，打起来十分奇妙，不过质量感觉比我们机房好很多。\n\nT1 求无向图上过点 $1$ 的最大权五元环，容易想到分成 $1$ 号点左半边和右半边，但是还有保证点互不相同，想了 $10$ 分钟，才想到可以维护前三大值来避免重复。码的时候比较脑车可以写 bfs 的写了个 SPFA。\n\n15:10 开了 T2，策略很显然，如果对面既有正数也有负数，就分别选最接近 $0$ 的正数/负数，否则就选符号相反且绝对值最大的。由于是静态的，可以用 ST 表，但是我怕写挂，还是写了线段树。然后我比较懒，没有分类讨论，直接暴力枚举最小/最大的非负数/负数这四个数组成的情况，反正都有一个 $\\log$ 了。\n\n15:40 开 T3，题目非常长，说了半天就是可以对一个数或一个集合中的数同时加 $1$ 或减 $1$，问当前是否每个数都是 $1$。然后我觉得可能是根号分治之类的，由于集合大小总和与点数同级，所以大小比 $\\sqrt {N}$ 大的集合最多有 $\\sqrt {N}$ 个，但是半个小时都没想出来。然后想到可以把点分成几组（一个点可以在多个组中），我们只需要看每个组的和是否等于它的大小，但是有想了一会，想不到保证正确的分法，但感觉不好卡，实在想不出来就写这个。看了一眼 T4，不会。等到 17:00，仍然想不出来，于是我就按二进制的每一位分组，写出来了。但是我犯了个非常**脑车**的错误，就是在分组判出来没错后线性判，主要是怕 WA，但是当时忘了可能出一堆 `YES` 来卡（心肌梗死的原因）。\n\n17:40 开 T4，好像 $n,m \\leq 2000$ 可以跑最短路，但是暴力建边会卡成 $n^2$ 或 $n^3$ 级别的，马上想到分层图，然后就写出来了。虽然还有 $8$ 分可以跑树剖，但是我还没有检查，便放弃了。\n\n18:10 开始检查，首先检查在 Linux 下的编译，好家伙，还真有一个 CE，居然是有个函数忘写 `void` 了。然后检查空间、`ll`，过了遍大样例，还把 T1 拍了一遍。希望没挂分。\n\n## Day 1 晚\n\n出来叶老就问分，T1、T2、T4 加起来 244 分，T3 是真不知道。然后 [sgc](https://sukwants.github.io/) 巨佬就来蹭车，还在和 [sxg](https://song-gan.github.io/) 巨佬打电话，才发现 T1 脑车了，跑了个 SPFA，不过 [zc](https://feynn.github.io/) 巨佬说他 bfs 没判连通，我 SPFA 初始化的 `inf`，撞大运了。\n\n晚上和 [sgc](https://sukwants.github.io/) 巨佬一起吃饭，看到了 [chen_zhe 的帖子](https://www.luogu.com.cn/discuss/520101)。回了寝室之后一直摆烂，结果 22:23 叶老突然就把代码发下来了。luogu 上已经有 T1，T2，T4 的数据，在寝室等了二十分钟不敢交 ~~（期间把 zym 的 T1 交了试试水，结果过了，更慌了）~~。\n\n22:45 终于交了，看起来 T1、T2、T4 都没挂分，刚好 244。T3 交到了 InfOJ 上，发现 T 了，这时才想起来会被卡，然后删了线性判断一交，95 分，当场心肌梗死了。所以我 T3 的瓶颈在于 `put(\"YES\\n\")`，然后就心肌梗死了一晚上，和 [zsq](https://wtyakioi.github.io/) 巨佬刷表情，刷了整整 $10$ 分钟，摆烂了。一直到 12 点过才睡。\n\n## Day 2\n\n绵阳又封了，只有待在机房划水。\n\n晚上 [zc](https://feynn.github.io/) 巨佬来机房了，我发现他 T4 过了，问他咋做，他说他抽了一个人的代码交居然过了，得出结论，人均会 T4，就我不会。\n\nluogu 居然一整天都没有 T3 数据。\n\n然后突然发现计蒜客也可以估分，交了一发，T1 居然给我 T 掉了，但在 luogu 上只跑了 500ms，可能是机子太撇了。更震惊的是，T3 给我过了，希望 CCF 的数据也能用脚造。\n\n看了一下 [zlx](https://blog.zlx.pw/) 巨佬的题解，才发现 T3 脑车了，可以随机赋权值然后看和是否满足。T4 感觉如果多给一些时间应该有点思路。但是完全没有改题的心情，又开始摆烂。\n\n等到快睡觉了才发现 luogu 已经有数据了，交了一发 T3，居然也过了，可能出题人根本不会想到卡我这种复杂度，只有看 rp 了。\n\n## Day 3\n\n下午讲 CSP，听说有人 luogu  T1 的数据 $O(n^4)$ 只 T 一个点，麻了，感觉 T1 各种乱搞都能过。\n\n小图灵也出分了，和 luogu 一样。现在各个网站的分数如下：\nluogu ：$100+100+100+44=344$\nInfOJ：$100+100+40+44=284$\n小图灵：$100+100+100+44=344$\n计蒜客：$100+100+100+44=344$\n（InfOJ 数据更新后就满了，计蒜客重交也满了）。","source":"_posts/csp-s-2022-travels.md","raw":"---\ntitle: 'CSP-S 2022 游记'\ndate: 2022-10-30 08:41:54\ntags: [游记]\ndescription: ' '\n---\n## Day 1\n\n进了考场，才发现高新的机房挤得要死，还不隔开坐，跟某东辰国际一样，~~但是某东辰国际至少有挡板，这里瞟代码完全发现不了~~，手都活动不开，键盘盒子还是下沉的，打起来十分奇妙，不过质量感觉比我们机房好很多。\n\nT1 求无向图上过点 $1$ 的最大权五元环，容易想到分成 $1$ 号点左半边和右半边，但是还有保证点互不相同，想了 $10$ 分钟，才想到可以维护前三大值来避免重复。码的时候比较脑车可以写 bfs 的写了个 SPFA。\n\n15:10 开了 T2，策略很显然，如果对面既有正数也有负数，就分别选最接近 $0$ 的正数/负数，否则就选符号相反且绝对值最大的。由于是静态的，可以用 ST 表，但是我怕写挂，还是写了线段树。然后我比较懒，没有分类讨论，直接暴力枚举最小/最大的非负数/负数这四个数组成的情况，反正都有一个 $\\log$ 了。\n\n15:40 开 T3，题目非常长，说了半天就是可以对一个数或一个集合中的数同时加 $1$ 或减 $1$，问当前是否每个数都是 $1$。然后我觉得可能是根号分治之类的，由于集合大小总和与点数同级，所以大小比 $\\sqrt {N}$ 大的集合最多有 $\\sqrt {N}$ 个，但是半个小时都没想出来。然后想到可以把点分成几组（一个点可以在多个组中），我们只需要看每个组的和是否等于它的大小，但是有想了一会，想不到保证正确的分法，但感觉不好卡，实在想不出来就写这个。看了一眼 T4，不会。等到 17:00，仍然想不出来，于是我就按二进制的每一位分组，写出来了。但是我犯了个非常**脑车**的错误，就是在分组判出来没错后线性判，主要是怕 WA，但是当时忘了可能出一堆 `YES` 来卡（心肌梗死的原因）。\n\n17:40 开 T4，好像 $n,m \\leq 2000$ 可以跑最短路，但是暴力建边会卡成 $n^2$ 或 $n^3$ 级别的，马上想到分层图，然后就写出来了。虽然还有 $8$ 分可以跑树剖，但是我还没有检查，便放弃了。\n\n18:10 开始检查，首先检查在 Linux 下的编译，好家伙，还真有一个 CE，居然是有个函数忘写 `void` 了。然后检查空间、`ll`，过了遍大样例，还把 T1 拍了一遍。希望没挂分。\n\n## Day 1 晚\n\n出来叶老就问分，T1、T2、T4 加起来 244 分，T3 是真不知道。然后 [sgc](https://sukwants.github.io/) 巨佬就来蹭车，还在和 [sxg](https://song-gan.github.io/) 巨佬打电话，才发现 T1 脑车了，跑了个 SPFA，不过 [zc](https://feynn.github.io/) 巨佬说他 bfs 没判连通，我 SPFA 初始化的 `inf`，撞大运了。\n\n晚上和 [sgc](https://sukwants.github.io/) 巨佬一起吃饭，看到了 [chen_zhe 的帖子](https://www.luogu.com.cn/discuss/520101)。回了寝室之后一直摆烂，结果 22:23 叶老突然就把代码发下来了。luogu 上已经有 T1，T2，T4 的数据，在寝室等了二十分钟不敢交 ~~（期间把 zym 的 T1 交了试试水，结果过了，更慌了）~~。\n\n22:45 终于交了，看起来 T1、T2、T4 都没挂分，刚好 244。T3 交到了 InfOJ 上，发现 T 了，这时才想起来会被卡，然后删了线性判断一交，95 分，当场心肌梗死了。所以我 T3 的瓶颈在于 `put(\"YES\\n\")`，然后就心肌梗死了一晚上，和 [zsq](https://wtyakioi.github.io/) 巨佬刷表情，刷了整整 $10$ 分钟，摆烂了。一直到 12 点过才睡。\n\n## Day 2\n\n绵阳又封了，只有待在机房划水。\n\n晚上 [zc](https://feynn.github.io/) 巨佬来机房了，我发现他 T4 过了，问他咋做，他说他抽了一个人的代码交居然过了，得出结论，人均会 T4，就我不会。\n\nluogu 居然一整天都没有 T3 数据。\n\n然后突然发现计蒜客也可以估分，交了一发，T1 居然给我 T 掉了，但在 luogu 上只跑了 500ms，可能是机子太撇了。更震惊的是，T3 给我过了，希望 CCF 的数据也能用脚造。\n\n看了一下 [zlx](https://blog.zlx.pw/) 巨佬的题解，才发现 T3 脑车了，可以随机赋权值然后看和是否满足。T4 感觉如果多给一些时间应该有点思路。但是完全没有改题的心情，又开始摆烂。\n\n等到快睡觉了才发现 luogu 已经有数据了，交了一发 T3，居然也过了，可能出题人根本不会想到卡我这种复杂度，只有看 rp 了。\n\n## Day 3\n\n下午讲 CSP，听说有人 luogu  T1 的数据 $O(n^4)$ 只 T 一个点，麻了，感觉 T1 各种乱搞都能过。\n\n小图灵也出分了，和 luogu 一样。现在各个网站的分数如下：\nluogu ：$100+100+100+44=344$\nInfOJ：$100+100+40+44=284$\n小图灵：$100+100+100+44=344$\n计蒜客：$100+100+100+44=344$\n（InfOJ 数据更新后就满了，计蒜客重交也满了）。","slug":"csp-s-2022-travels","published":1,"updated":"2023-03-06T11:04:53.875Z","_id":"cleid928c002g2sjfc0gzczy2","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"Day-1\"><a href=\"#Day-1\" class=\"headerlink\" title=\"Day 1\"></a>Day 1</h2><p>进了考场，才发现高新的机房挤得要死，还不隔开坐，跟某东辰国际一样，<del>但是某东辰国际至少有挡板，这里瞟代码完全发现不了</del>，手都活动不开，键盘盒子还是下沉的，打起来十分奇妙，不过质量感觉比我们机房好很多。</p>\n<p>T1 求无向图上过点 $1$ 的最大权五元环，容易想到分成 $1$ 号点左半边和右半边，但是还有保证点互不相同，想了 $10$ 分钟，才想到可以维护前三大值来避免重复。码的时候比较脑车可以写 bfs 的写了个 SPFA。</p>\n<p>15:10 开了 T2，策略很显然，如果对面既有正数也有负数，就分别选最接近 $0$ 的正数&#x2F;负数，否则就选符号相反且绝对值最大的。由于是静态的，可以用 ST 表，但是我怕写挂，还是写了线段树。然后我比较懒，没有分类讨论，直接暴力枚举最小&#x2F;最大的非负数&#x2F;负数这四个数组成的情况，反正都有一个 $\\log$ 了。</p>\n<p>15:40 开 T3，题目非常长，说了半天就是可以对一个数或一个集合中的数同时加 $1$ 或减 $1$，问当前是否每个数都是 $1$。然后我觉得可能是根号分治之类的，由于集合大小总和与点数同级，所以大小比 $\\sqrt {N}$ 大的集合最多有 $\\sqrt {N}$ 个，但是半个小时都没想出来。然后想到可以把点分成几组（一个点可以在多个组中），我们只需要看每个组的和是否等于它的大小，但是有想了一会，想不到保证正确的分法，但感觉不好卡，实在想不出来就写这个。看了一眼 T4，不会。等到 17:00，仍然想不出来，于是我就按二进制的每一位分组，写出来了。但是我犯了个非常<strong>脑车</strong>的错误，就是在分组判出来没错后线性判，主要是怕 WA，但是当时忘了可能出一堆 <code>YES</code> 来卡（心肌梗死的原因）。</p>\n<p>17:40 开 T4，好像 $n,m \\leq 2000$ 可以跑最短路，但是暴力建边会卡成 $n^2$ 或 $n^3$ 级别的，马上想到分层图，然后就写出来了。虽然还有 $8$ 分可以跑树剖，但是我还没有检查，便放弃了。</p>\n<p>18:10 开始检查，首先检查在 Linux 下的编译，好家伙，还真有一个 CE，居然是有个函数忘写 <code>void</code> 了。然后检查空间、<code>ll</code>，过了遍大样例，还把 T1 拍了一遍。希望没挂分。</p>\n<h2 id=\"Day-1-晚\"><a href=\"#Day-1-晚\" class=\"headerlink\" title=\"Day 1 晚\"></a>Day 1 晚</h2><p>出来叶老就问分，T1、T2、T4 加起来 244 分，T3 是真不知道。然后 <a href=\"https://sukwants.github.io/\">sgc</a> 巨佬就来蹭车，还在和 <a href=\"https://song-gan.github.io/\">sxg</a> 巨佬打电话，才发现 T1 脑车了，跑了个 SPFA，不过 <a href=\"https://feynn.github.io/\">zc</a> 巨佬说他 bfs 没判连通，我 SPFA 初始化的 <code>inf</code>，撞大运了。</p>\n<p>晚上和 <a href=\"https://sukwants.github.io/\">sgc</a> 巨佬一起吃饭，看到了 <a href=\"https://www.luogu.com.cn/discuss/520101\">chen_zhe 的帖子</a>。回了寝室之后一直摆烂，结果 22:23 叶老突然就把代码发下来了。luogu 上已经有 T1，T2，T4 的数据，在寝室等了二十分钟不敢交 <del>（期间把 zym 的 T1 交了试试水，结果过了，更慌了）</del>。</p>\n<p>22:45 终于交了，看起来 T1、T2、T4 都没挂分，刚好 244。T3 交到了 InfOJ 上，发现 T 了，这时才想起来会被卡，然后删了线性判断一交，95 分，当场心肌梗死了。所以我 T3 的瓶颈在于 <code>put(&quot;YES\\n&quot;)</code>，然后就心肌梗死了一晚上，和 <a href=\"https://wtyakioi.github.io/\">zsq</a> 巨佬刷表情，刷了整整 $10$ 分钟，摆烂了。一直到 12 点过才睡。</p>\n<h2 id=\"Day-2\"><a href=\"#Day-2\" class=\"headerlink\" title=\"Day 2\"></a>Day 2</h2><p>绵阳又封了，只有待在机房划水。</p>\n<p>晚上 <a href=\"https://feynn.github.io/\">zc</a> 巨佬来机房了，我发现他 T4 过了，问他咋做，他说他抽了一个人的代码交居然过了，得出结论，人均会 T4，就我不会。</p>\n<p>luogu 居然一整天都没有 T3 数据。</p>\n<p>然后突然发现计蒜客也可以估分，交了一发，T1 居然给我 T 掉了，但在 luogu 上只跑了 500ms，可能是机子太撇了。更震惊的是，T3 给我过了，希望 CCF 的数据也能用脚造。</p>\n<p>看了一下 <a href=\"https://blog.zlx.pw/\">zlx</a> 巨佬的题解，才发现 T3 脑车了，可以随机赋权值然后看和是否满足。T4 感觉如果多给一些时间应该有点思路。但是完全没有改题的心情，又开始摆烂。</p>\n<p>等到快睡觉了才发现 luogu 已经有数据了，交了一发 T3，居然也过了，可能出题人根本不会想到卡我这种复杂度，只有看 rp 了。</p>\n<h2 id=\"Day-3\"><a href=\"#Day-3\" class=\"headerlink\" title=\"Day 3\"></a>Day 3</h2><p>下午讲 CSP，听说有人 luogu  T1 的数据 $O(n^4)$ 只 T 一个点，麻了，感觉 T1 各种乱搞都能过。</p>\n<p>小图灵也出分了，和 luogu 一样。现在各个网站的分数如下：<br>luogu ：$100+100+100+44&#x3D;344$<br>InfOJ：$100+100+40+44&#x3D;284$<br>小图灵：$100+100+100+44&#x3D;344$<br>计蒜客：$100+100+100+44&#x3D;344$<br>（InfOJ 数据更新后就满了，计蒜客重交也满了）。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Day-1\"><a href=\"#Day-1\" class=\"headerlink\" title=\"Day 1\"></a>Day 1</h2><p>进了考场，才发现高新的机房挤得要死，还不隔开坐，跟某东辰国际一样，<del>但是某东辰国际至少有挡板，这里瞟代码完全发现不了</del>，手都活动不开，键盘盒子还是下沉的，打起来十分奇妙，不过质量感觉比我们机房好很多。</p>\n<p>T1 求无向图上过点 $1$ 的最大权五元环，容易想到分成 $1$ 号点左半边和右半边，但是还有保证点互不相同，想了 $10$ 分钟，才想到可以维护前三大值来避免重复。码的时候比较脑车可以写 bfs 的写了个 SPFA。</p>\n<p>15:10 开了 T2，策略很显然，如果对面既有正数也有负数，就分别选最接近 $0$ 的正数&#x2F;负数，否则就选符号相反且绝对值最大的。由于是静态的，可以用 ST 表，但是我怕写挂，还是写了线段树。然后我比较懒，没有分类讨论，直接暴力枚举最小&#x2F;最大的非负数&#x2F;负数这四个数组成的情况，反正都有一个 $\\log$ 了。</p>\n<p>15:40 开 T3，题目非常长，说了半天就是可以对一个数或一个集合中的数同时加 $1$ 或减 $1$，问当前是否每个数都是 $1$。然后我觉得可能是根号分治之类的，由于集合大小总和与点数同级，所以大小比 $\\sqrt {N}$ 大的集合最多有 $\\sqrt {N}$ 个，但是半个小时都没想出来。然后想到可以把点分成几组（一个点可以在多个组中），我们只需要看每个组的和是否等于它的大小，但是有想了一会，想不到保证正确的分法，但感觉不好卡，实在想不出来就写这个。看了一眼 T4，不会。等到 17:00，仍然想不出来，于是我就按二进制的每一位分组，写出来了。但是我犯了个非常<strong>脑车</strong>的错误，就是在分组判出来没错后线性判，主要是怕 WA，但是当时忘了可能出一堆 <code>YES</code> 来卡（心肌梗死的原因）。</p>\n<p>17:40 开 T4，好像 $n,m \\leq 2000$ 可以跑最短路，但是暴力建边会卡成 $n^2$ 或 $n^3$ 级别的，马上想到分层图，然后就写出来了。虽然还有 $8$ 分可以跑树剖，但是我还没有检查，便放弃了。</p>\n<p>18:10 开始检查，首先检查在 Linux 下的编译，好家伙，还真有一个 CE，居然是有个函数忘写 <code>void</code> 了。然后检查空间、<code>ll</code>，过了遍大样例，还把 T1 拍了一遍。希望没挂分。</p>\n<h2 id=\"Day-1-晚\"><a href=\"#Day-1-晚\" class=\"headerlink\" title=\"Day 1 晚\"></a>Day 1 晚</h2><p>出来叶老就问分，T1、T2、T4 加起来 244 分，T3 是真不知道。然后 <a href=\"https://sukwants.github.io/\">sgc</a> 巨佬就来蹭车，还在和 <a href=\"https://song-gan.github.io/\">sxg</a> 巨佬打电话，才发现 T1 脑车了，跑了个 SPFA，不过 <a href=\"https://feynn.github.io/\">zc</a> 巨佬说他 bfs 没判连通，我 SPFA 初始化的 <code>inf</code>，撞大运了。</p>\n<p>晚上和 <a href=\"https://sukwants.github.io/\">sgc</a> 巨佬一起吃饭，看到了 <a href=\"https://www.luogu.com.cn/discuss/520101\">chen_zhe 的帖子</a>。回了寝室之后一直摆烂，结果 22:23 叶老突然就把代码发下来了。luogu 上已经有 T1，T2，T4 的数据，在寝室等了二十分钟不敢交 <del>（期间把 zym 的 T1 交了试试水，结果过了，更慌了）</del>。</p>\n<p>22:45 终于交了，看起来 T1、T2、T4 都没挂分，刚好 244。T3 交到了 InfOJ 上，发现 T 了，这时才想起来会被卡，然后删了线性判断一交，95 分，当场心肌梗死了。所以我 T3 的瓶颈在于 <code>put(&quot;YES\\n&quot;)</code>，然后就心肌梗死了一晚上，和 <a href=\"https://wtyakioi.github.io/\">zsq</a> 巨佬刷表情，刷了整整 $10$ 分钟，摆烂了。一直到 12 点过才睡。</p>\n<h2 id=\"Day-2\"><a href=\"#Day-2\" class=\"headerlink\" title=\"Day 2\"></a>Day 2</h2><p>绵阳又封了，只有待在机房划水。</p>\n<p>晚上 <a href=\"https://feynn.github.io/\">zc</a> 巨佬来机房了，我发现他 T4 过了，问他咋做，他说他抽了一个人的代码交居然过了，得出结论，人均会 T4，就我不会。</p>\n<p>luogu 居然一整天都没有 T3 数据。</p>\n<p>然后突然发现计蒜客也可以估分，交了一发，T1 居然给我 T 掉了，但在 luogu 上只跑了 500ms，可能是机子太撇了。更震惊的是，T3 给我过了，希望 CCF 的数据也能用脚造。</p>\n<p>看了一下 <a href=\"https://blog.zlx.pw/\">zlx</a> 巨佬的题解，才发现 T3 脑车了，可以随机赋权值然后看和是否满足。T4 感觉如果多给一些时间应该有点思路。但是完全没有改题的心情，又开始摆烂。</p>\n<p>等到快睡觉了才发现 luogu 已经有数据了，交了一发 T3，居然也过了，可能出题人根本不会想到卡我这种复杂度，只有看 rp 了。</p>\n<h2 id=\"Day-3\"><a href=\"#Day-3\" class=\"headerlink\" title=\"Day 3\"></a>Day 3</h2><p>下午讲 CSP，听说有人 luogu  T1 的数据 $O(n^4)$ 只 T 一个点，麻了，感觉 T1 各种乱搞都能过。</p>\n<p>小图灵也出分了，和 luogu 一样。现在各个网站的分数如下：<br>luogu ：$100+100+100+44&#x3D;344$<br>InfOJ：$100+100+40+44&#x3D;284$<br>小图灵：$100+100+100+44&#x3D;344$<br>计蒜客：$100+100+100+44&#x3D;344$<br>（InfOJ 数据更新后就满了，计蒜客重交也满了）。</p>\n"},{"title":"最大流ISAP","date":"2022-02-18T04:35:04.000Z","description":" ","_content":"\n## 前言\n模板题：[P3376 【模板】网络最大流](https://www.luogu.com.cn/problem/P3376)\n[最大流题单](/post/maximum-flow-problemlist/)\n前置知识：[最大流Dinic](/post/maximum-flow-Dinic/)\nDinic 算法已经能够很好地解决最大流问题了，但是它还是有一个弊端：会进行多次且次数不确定的 bfs，就会浪费时间，还可能被毒瘤出题人卡。Dinic 中，bfs 的作用就是将这个图分层，如果我们只在一开始时将图分层，在之后的 dfs 中调整每个点的高度，就可以大大减少bfs次数。\n## ISAP\nISAP 就成功地优化了 Dinic。不过 ISAP 是将汇点的高度设为 $1$，源点最高，流量会从高度较高的点流到高度较低的点，原因会在后面解释。在 dfs 过程中，如果一个点仍有剩余流量却流不出去了，那么就把这个点的高度加一，这样它才能流到更多的点。如果汇点高度最高，就需要其它点的高度减一，就可能出现负数，最好避免这种情况。这样就可以避免多次分层浪费时间。\n但是 ISAP 不是在找不到汇点的时候结束，而是在出现断层的时候停止。断层指的是汇点的高度到源点的高度之间有一个高度没有点。由于流量都是从一层流向下一层，如果有一个高度没有点，流量就无法到达下一层，也就无法到达汇点，就可以直接停止算法。由于一开始高度是连续的，只要有剩余流量，就会增加高度，没有流量就不会，所以这个图在出现断层时一定是上一个层的所有点没有剩余流量了。\n同样，ISAP 也可以添加当前弧优化，具体见最大流 Dinic 算法。\n## code\n``` cpp\n#include<cstdio>\n#include<algorithm>\n#include<queue>\nusing namespace std;\nint n,m,p=1,s1,s2,t[10001],t0[10001],f[10001],g[10001];\nbool u=true;\nstruct str\n{\n    int m,q,r;\n}a[1000001];\nvoid road(int x,int y,int r)\n{\n    a[++p].m=y;\n    a[p].q=t[x];\n    t[x]=p;\n    a[p].r=r;\n}\nvoid bfs()\n{\n    queue<int> Q;\n    Q.push(s2);\n    f[s2]=1;\n    g[1]=1;\n    while(!Q.empty())\n    {\n        int k=Q.front();\n        Q.pop();\n        for(int i=t[k];i!=0;i=a[i].q)\n        {\n            if(f[a[i].m]==0&&a[i].r==0)\n            {\n                f[a[i].m]=f[k]+1;\n                ++g[f[a[i].m]];\n                Q.push(a[i].m);\n            }\n        }\n    }\n}\nint dfs(int x,int r)\n{\n    if(x==s2) return r;\n    int s=0;\n    for(int i=t0[x];i!=0;i=a[i].q)\n    {\n        t0[x]=i;\n        if(f[x]==f[a[i].m]+1&&a[i].r!=0)\n        {\n            int z=dfs(a[i].m,min(r,a[i].r));\n            if(z!=0)\n            {\n                a[i].r-=z;\n                a[i^1].r+=z;\n                r-=z;\n                s+=z;\n            }\n            if(r==0) return s;\n        }\n    }\n    --g[f[x]];\n    if(g[f[x]]==0) u=false;\n    ++f[x];\n    ++g[f[x]];\n    return s;\n}\nint main()\n{\n    scanf(\"%d%d%d%d\",&n,&m,&s1,&s2);\n    for(int i=1;i<=m;++i)\n    {\n        int x,y,r;\n        scanf(\"%d%d%d\",&x,&y,&r);\n        road(x,y,r);\n        road(y,x,0);\n    }\n    bfs();\n    int r=0;\n    while(u==true)\n    {\n        for(int i=1;i<=n;++i) t0[i]=t[i];\n        r+=dfs(s1,1e9);\n    }\n    printf(\"%d\",r);\n    return 0;\n}\n```","source":"_posts/maximum-flow-ISAP.md","raw":"---\ntitle: '最大流ISAP'\ndate: 2022-02-18 12:35:04\ntags: [网络流,最大流]\ndescription: ' '\n---\n\n## 前言\n模板题：[P3376 【模板】网络最大流](https://www.luogu.com.cn/problem/P3376)\n[最大流题单](/post/maximum-flow-problemlist/)\n前置知识：[最大流Dinic](/post/maximum-flow-Dinic/)\nDinic 算法已经能够很好地解决最大流问题了，但是它还是有一个弊端：会进行多次且次数不确定的 bfs，就会浪费时间，还可能被毒瘤出题人卡。Dinic 中，bfs 的作用就是将这个图分层，如果我们只在一开始时将图分层，在之后的 dfs 中调整每个点的高度，就可以大大减少bfs次数。\n## ISAP\nISAP 就成功地优化了 Dinic。不过 ISAP 是将汇点的高度设为 $1$，源点最高，流量会从高度较高的点流到高度较低的点，原因会在后面解释。在 dfs 过程中，如果一个点仍有剩余流量却流不出去了，那么就把这个点的高度加一，这样它才能流到更多的点。如果汇点高度最高，就需要其它点的高度减一，就可能出现负数，最好避免这种情况。这样就可以避免多次分层浪费时间。\n但是 ISAP 不是在找不到汇点的时候结束，而是在出现断层的时候停止。断层指的是汇点的高度到源点的高度之间有一个高度没有点。由于流量都是从一层流向下一层，如果有一个高度没有点，流量就无法到达下一层，也就无法到达汇点，就可以直接停止算法。由于一开始高度是连续的，只要有剩余流量，就会增加高度，没有流量就不会，所以这个图在出现断层时一定是上一个层的所有点没有剩余流量了。\n同样，ISAP 也可以添加当前弧优化，具体见最大流 Dinic 算法。\n## code\n``` cpp\n#include<cstdio>\n#include<algorithm>\n#include<queue>\nusing namespace std;\nint n,m,p=1,s1,s2,t[10001],t0[10001],f[10001],g[10001];\nbool u=true;\nstruct str\n{\n    int m,q,r;\n}a[1000001];\nvoid road(int x,int y,int r)\n{\n    a[++p].m=y;\n    a[p].q=t[x];\n    t[x]=p;\n    a[p].r=r;\n}\nvoid bfs()\n{\n    queue<int> Q;\n    Q.push(s2);\n    f[s2]=1;\n    g[1]=1;\n    while(!Q.empty())\n    {\n        int k=Q.front();\n        Q.pop();\n        for(int i=t[k];i!=0;i=a[i].q)\n        {\n            if(f[a[i].m]==0&&a[i].r==0)\n            {\n                f[a[i].m]=f[k]+1;\n                ++g[f[a[i].m]];\n                Q.push(a[i].m);\n            }\n        }\n    }\n}\nint dfs(int x,int r)\n{\n    if(x==s2) return r;\n    int s=0;\n    for(int i=t0[x];i!=0;i=a[i].q)\n    {\n        t0[x]=i;\n        if(f[x]==f[a[i].m]+1&&a[i].r!=0)\n        {\n            int z=dfs(a[i].m,min(r,a[i].r));\n            if(z!=0)\n            {\n                a[i].r-=z;\n                a[i^1].r+=z;\n                r-=z;\n                s+=z;\n            }\n            if(r==0) return s;\n        }\n    }\n    --g[f[x]];\n    if(g[f[x]]==0) u=false;\n    ++f[x];\n    ++g[f[x]];\n    return s;\n}\nint main()\n{\n    scanf(\"%d%d%d%d\",&n,&m,&s1,&s2);\n    for(int i=1;i<=m;++i)\n    {\n        int x,y,r;\n        scanf(\"%d%d%d\",&x,&y,&r);\n        road(x,y,r);\n        road(y,x,0);\n    }\n    bfs();\n    int r=0;\n    while(u==true)\n    {\n        for(int i=1;i<=n;++i) t0[i]=t[i];\n        r+=dfs(s1,1e9);\n    }\n    printf(\"%d\",r);\n    return 0;\n}\n```","slug":"maximum-flow-ISAP","published":1,"updated":"2023-02-24T10:05:12.024Z","_id":"cleid928f002l2sjf01wwgj1s","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>模板题：<a href=\"https://www.luogu.com.cn/problem/P3376\">P3376 【模板】网络最大流</a><br><a href=\"/post/maximum-flow-problemlist/\">最大流题单</a><br>前置知识：<a href=\"/post/maximum-flow-Dinic/\">最大流Dinic</a><br>Dinic 算法已经能够很好地解决最大流问题了，但是它还是有一个弊端：会进行多次且次数不确定的 bfs，就会浪费时间，还可能被毒瘤出题人卡。Dinic 中，bfs 的作用就是将这个图分层，如果我们只在一开始时将图分层，在之后的 dfs 中调整每个点的高度，就可以大大减少bfs次数。</p>\n<h2 id=\"ISAP\"><a href=\"#ISAP\" class=\"headerlink\" title=\"ISAP\"></a>ISAP</h2><p>ISAP 就成功地优化了 Dinic。不过 ISAP 是将汇点的高度设为 $1$，源点最高，流量会从高度较高的点流到高度较低的点，原因会在后面解释。在 dfs 过程中，如果一个点仍有剩余流量却流不出去了，那么就把这个点的高度加一，这样它才能流到更多的点。如果汇点高度最高，就需要其它点的高度减一，就可能出现负数，最好避免这种情况。这样就可以避免多次分层浪费时间。<br>但是 ISAP 不是在找不到汇点的时候结束，而是在出现断层的时候停止。断层指的是汇点的高度到源点的高度之间有一个高度没有点。由于流量都是从一层流向下一层，如果有一个高度没有点，流量就无法到达下一层，也就无法到达汇点，就可以直接停止算法。由于一开始高度是连续的，只要有剩余流量，就会增加高度，没有流量就不会，所以这个图在出现断层时一定是上一个层的所有点没有剩余流量了。<br>同样，ISAP 也可以添加当前弧优化，具体见最大流 Dinic 算法。</p>\n<h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m,p=<span class=\"number\">1</span>,s1,s2,t[<span class=\"number\">10001</span>],t0[<span class=\"number\">10001</span>],f[<span class=\"number\">10001</span>],g[<span class=\"number\">10001</span>];</span><br><span class=\"line\"><span class=\"type\">bool</span> u=<span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">str</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> m,q,r;</span><br><span class=\"line\">&#125;a[<span class=\"number\">1000001</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">road</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y,<span class=\"type\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    a[++p].m=y;</span><br><span class=\"line\">    a[p].q=t[x];</span><br><span class=\"line\">    t[x]=p;</span><br><span class=\"line\">    a[p].r=r;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">bfs</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    queue&lt;<span class=\"type\">int</span>&gt; Q;</span><br><span class=\"line\">    Q.<span class=\"built_in\">push</span>(s2);</span><br><span class=\"line\">    f[s2]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    g[<span class=\"number\">1</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!Q.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> k=Q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">        Q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t[k];i!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(f[a[i].m]==<span class=\"number\">0</span>&amp;&amp;a[i].r==<span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                f[a[i].m]=f[k]+<span class=\"number\">1</span>;</span><br><span class=\"line\">                ++g[f[a[i].m]];</span><br><span class=\"line\">                Q.<span class=\"built_in\">push</span>(a[i].m);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x==s2) <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">    <span class=\"type\">int</span> s=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t0[x];i!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        t0[x]=i;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(f[x]==f[a[i].m]+<span class=\"number\">1</span>&amp;&amp;a[i].r!=<span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> z=<span class=\"built_in\">dfs</span>(a[i].m,<span class=\"built_in\">min</span>(r,a[i].r));</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(z!=<span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                a[i].r-=z;</span><br><span class=\"line\">                a[i^<span class=\"number\">1</span>].r+=z;</span><br><span class=\"line\">                r-=z;</span><br><span class=\"line\">                s+=z;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(r==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    --g[f[x]];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(g[f[x]]==<span class=\"number\">0</span>) u=<span class=\"literal\">false</span>;</span><br><span class=\"line\">    ++f[x];</span><br><span class=\"line\">    ++g[f[x]];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;s1,&amp;s2);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x,y,r;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>,&amp;x,&amp;y,&amp;r);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(x,y,r);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(y,x,<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">bfs</span>();</span><br><span class=\"line\">    <span class=\"type\">int</span> r=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(u==<span class=\"literal\">true</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i) t0[i]=t[i];</span><br><span class=\"line\">        r+=<span class=\"built_in\">dfs</span>(s1,<span class=\"number\">1e9</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,r);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>模板题：<a href=\"https://www.luogu.com.cn/problem/P3376\">P3376 【模板】网络最大流</a><br><a href=\"/post/maximum-flow-problemlist/\">最大流题单</a><br>前置知识：<a href=\"/post/maximum-flow-Dinic/\">最大流Dinic</a><br>Dinic 算法已经能够很好地解决最大流问题了，但是它还是有一个弊端：会进行多次且次数不确定的 bfs，就会浪费时间，还可能被毒瘤出题人卡。Dinic 中，bfs 的作用就是将这个图分层，如果我们只在一开始时将图分层，在之后的 dfs 中调整每个点的高度，就可以大大减少bfs次数。</p>\n<h2 id=\"ISAP\"><a href=\"#ISAP\" class=\"headerlink\" title=\"ISAP\"></a>ISAP</h2><p>ISAP 就成功地优化了 Dinic。不过 ISAP 是将汇点的高度设为 $1$，源点最高，流量会从高度较高的点流到高度较低的点，原因会在后面解释。在 dfs 过程中，如果一个点仍有剩余流量却流不出去了，那么就把这个点的高度加一，这样它才能流到更多的点。如果汇点高度最高，就需要其它点的高度减一，就可能出现负数，最好避免这种情况。这样就可以避免多次分层浪费时间。<br>但是 ISAP 不是在找不到汇点的时候结束，而是在出现断层的时候停止。断层指的是汇点的高度到源点的高度之间有一个高度没有点。由于流量都是从一层流向下一层，如果有一个高度没有点，流量就无法到达下一层，也就无法到达汇点，就可以直接停止算法。由于一开始高度是连续的，只要有剩余流量，就会增加高度，没有流量就不会，所以这个图在出现断层时一定是上一个层的所有点没有剩余流量了。<br>同样，ISAP 也可以添加当前弧优化，具体见最大流 Dinic 算法。</p>\n<h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m,p=<span class=\"number\">1</span>,s1,s2,t[<span class=\"number\">10001</span>],t0[<span class=\"number\">10001</span>],f[<span class=\"number\">10001</span>],g[<span class=\"number\">10001</span>];</span><br><span class=\"line\"><span class=\"type\">bool</span> u=<span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">str</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> m,q,r;</span><br><span class=\"line\">&#125;a[<span class=\"number\">1000001</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">road</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y,<span class=\"type\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    a[++p].m=y;</span><br><span class=\"line\">    a[p].q=t[x];</span><br><span class=\"line\">    t[x]=p;</span><br><span class=\"line\">    a[p].r=r;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">bfs</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    queue&lt;<span class=\"type\">int</span>&gt; Q;</span><br><span class=\"line\">    Q.<span class=\"built_in\">push</span>(s2);</span><br><span class=\"line\">    f[s2]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    g[<span class=\"number\">1</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!Q.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> k=Q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">        Q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t[k];i!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(f[a[i].m]==<span class=\"number\">0</span>&amp;&amp;a[i].r==<span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                f[a[i].m]=f[k]+<span class=\"number\">1</span>;</span><br><span class=\"line\">                ++g[f[a[i].m]];</span><br><span class=\"line\">                Q.<span class=\"built_in\">push</span>(a[i].m);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x==s2) <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">    <span class=\"type\">int</span> s=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t0[x];i!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        t0[x]=i;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(f[x]==f[a[i].m]+<span class=\"number\">1</span>&amp;&amp;a[i].r!=<span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> z=<span class=\"built_in\">dfs</span>(a[i].m,<span class=\"built_in\">min</span>(r,a[i].r));</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(z!=<span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                a[i].r-=z;</span><br><span class=\"line\">                a[i^<span class=\"number\">1</span>].r+=z;</span><br><span class=\"line\">                r-=z;</span><br><span class=\"line\">                s+=z;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(r==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    --g[f[x]];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(g[f[x]]==<span class=\"number\">0</span>) u=<span class=\"literal\">false</span>;</span><br><span class=\"line\">    ++f[x];</span><br><span class=\"line\">    ++g[f[x]];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;s1,&amp;s2);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x,y,r;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>,&amp;x,&amp;y,&amp;r);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(x,y,r);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(y,x,<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">bfs</span>();</span><br><span class=\"line\">    <span class=\"type\">int</span> r=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(u==<span class=\"literal\">true</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i) t0[i]=t[i];</span><br><span class=\"line\">        r+=<span class=\"built_in\">dfs</span>(s1,<span class=\"number\">1e9</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,r);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"最大流题单","date":"2022-04-16T11:02:26.000Z","description":" ","_content":"\n这是 [最大流](/post/maximum-flow-Dinic) 的几道经典题目，建议按照顺序来做。\n\n[P2740 [USACO4.2]草地排水Drainage Ditches](/post/P2740-solution)\n\n[P1343 地震逃生](/post/P1343-solution)\n\n[P2936 [USACO09JAN]Total Flow S](/post/P2936-solution)\n\n[P3254 圆桌问题](/post/P3254-solution)\n\n[P2763 试题库问题](/post/P2763-solution)\n\n[P2065 [TJOI2011]卡片](/post/P2065-solution)\n\n[P4638 [SHOI2011]银行家](/post/P4638-solution)\n\n[P2754 [CTSC1999]家园 / 星际转移问题](/post/P2754-solution)\n\n[P1231 教辅的组成](/post/P1231-solution)\n\n[P1402 酒店之王](/post/P1402-solution)\n\n[P2472 [SCOI2007] 蜥蜴](/post/P2472-solution)\n\n[P2774 方格取数问题](/post/P2774-solution)\n\n[P3355 骑士共存问题](/post/P3355-solution)\n\n[P4304 [TJOI2013]攻击装置](/post/P4304-solution)\n\n[P5030 长脖子鹿放置](/post/P5030-solution)","source":"_posts/maximum-flow-problemlist.md","raw":"---\ntitle: '最大流题单'\ndate: 2022-04-16 19:02:26\ntags: [网络流,最大流]\ndescription: ' '\n---\n\n这是 [最大流](/post/maximum-flow-Dinic) 的几道经典题目，建议按照顺序来做。\n\n[P2740 [USACO4.2]草地排水Drainage Ditches](/post/P2740-solution)\n\n[P1343 地震逃生](/post/P1343-solution)\n\n[P2936 [USACO09JAN]Total Flow S](/post/P2936-solution)\n\n[P3254 圆桌问题](/post/P3254-solution)\n\n[P2763 试题库问题](/post/P2763-solution)\n\n[P2065 [TJOI2011]卡片](/post/P2065-solution)\n\n[P4638 [SHOI2011]银行家](/post/P4638-solution)\n\n[P2754 [CTSC1999]家园 / 星际转移问题](/post/P2754-solution)\n\n[P1231 教辅的组成](/post/P1231-solution)\n\n[P1402 酒店之王](/post/P1402-solution)\n\n[P2472 [SCOI2007] 蜥蜴](/post/P2472-solution)\n\n[P2774 方格取数问题](/post/P2774-solution)\n\n[P3355 骑士共存问题](/post/P3355-solution)\n\n[P4304 [TJOI2013]攻击装置](/post/P4304-solution)\n\n[P5030 长脖子鹿放置](/post/P5030-solution)","slug":"maximum-flow-problemlist","published":1,"updated":"2023-02-24T10:05:12.024Z","_id":"cleid928h002o2sjf2xl20qjf","comments":1,"layout":"post","photos":[],"link":"","content":"<p>这是 <a href=\"/post/maximum-flow-Dinic\">最大流</a> 的几道经典题目，建议按照顺序来做。</p>\n<p><a href=\"/post/P2740-solution\">P2740 [USACO4.2]草地排水Drainage Ditches</a></p>\n<p><a href=\"/post/P1343-solution\">P1343 地震逃生</a></p>\n<p><a href=\"/post/P2936-solution\">P2936 [USACO09JAN]Total Flow S</a></p>\n<p><a href=\"/post/P3254-solution\">P3254 圆桌问题</a></p>\n<p><a href=\"/post/P2763-solution\">P2763 试题库问题</a></p>\n<p><a href=\"/post/P2065-solution\">P2065 [TJOI2011]卡片</a></p>\n<p><a href=\"/post/P4638-solution\">P4638 [SHOI2011]银行家</a></p>\n<p><a href=\"/post/P2754-solution\">P2754 [CTSC1999]家园 &#x2F; 星际转移问题</a></p>\n<p><a href=\"/post/P1231-solution\">P1231 教辅的组成</a></p>\n<p><a href=\"/post/P1402-solution\">P1402 酒店之王</a></p>\n<p><a href=\"/post/P2472-solution\">P2472 [SCOI2007] 蜥蜴</a></p>\n<p><a href=\"/post/P2774-solution\">P2774 方格取数问题</a></p>\n<p><a href=\"/post/P3355-solution\">P3355 骑士共存问题</a></p>\n<p><a href=\"/post/P4304-solution\">P4304 [TJOI2013]攻击装置</a></p>\n<p><a href=\"/post/P5030-solution\">P5030 长脖子鹿放置</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>这是 <a href=\"/post/maximum-flow-Dinic\">最大流</a> 的几道经典题目，建议按照顺序来做。</p>\n<p><a href=\"/post/P2740-solution\">P2740 [USACO4.2]草地排水Drainage Ditches</a></p>\n<p><a href=\"/post/P1343-solution\">P1343 地震逃生</a></p>\n<p><a href=\"/post/P2936-solution\">P2936 [USACO09JAN]Total Flow S</a></p>\n<p><a href=\"/post/P3254-solution\">P3254 圆桌问题</a></p>\n<p><a href=\"/post/P2763-solution\">P2763 试题库问题</a></p>\n<p><a href=\"/post/P2065-solution\">P2065 [TJOI2011]卡片</a></p>\n<p><a href=\"/post/P4638-solution\">P4638 [SHOI2011]银行家</a></p>\n<p><a href=\"/post/P2754-solution\">P2754 [CTSC1999]家园 &#x2F; 星际转移问题</a></p>\n<p><a href=\"/post/P1231-solution\">P1231 教辅的组成</a></p>\n<p><a href=\"/post/P1402-solution\">P1402 酒店之王</a></p>\n<p><a href=\"/post/P2472-solution\">P2472 [SCOI2007] 蜥蜴</a></p>\n<p><a href=\"/post/P2774-solution\">P2774 方格取数问题</a></p>\n<p><a href=\"/post/P3355-solution\">P3355 骑士共存问题</a></p>\n<p><a href=\"/post/P4304-solution\">P4304 [TJOI2013]攻击装置</a></p>\n<p><a href=\"/post/P5030-solution\">P5030 长脖子鹿放置</a></p>\n"},{"title":"最小费用最大流Dinic","date":"2022-04-20T06:50:20.000Z","description":" ","_content":"\n## 前言\n模板题：[P3381 【模板】最小费用最大流](https://www.luogu.com.cn/problem/P3381)\n[费用流题单](/post/minimum-cost-maximum-flow-problemlist/)\n前置知识：[最小费用最大流Dinic](/post/minimum-cost-maximum-flow-EK/)\n我们已经学习了用 EK 解决费用流的问题，但是 EK 每一次增广都要一次 SPFA，效率低，于是我们想，费用流能不能用 Dinic 呢？答案是肯定的。\n## 基本思路\n最大流的 Dinic 就是用一次 bfs 来分层，然后进行 dfs，而费用流的 EK 用的是多次 SPFA，如果我们把 Dinic 中的 bfs 换成 SPFA 就可以了，只需要判断这条边是否在最短路图中，也就起点到这个点的距离加上边权等于下一个点到起点的距离。但是有一个问题，最大流中的分层图是不存在环路的，但是最短路图就有可能，就有可能死循环并 $\\color{black}{\\text{MLE}}$，我们需要用一个数组来判断一个点是否走过，到达这个点标记真，离开后标记为假。\n## code\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<queue>\nusing namespace std;\ntypedef long long ll;\nconst int N=10001,M=100001;\nint n,m,p=1,v,s1,s2,t[N],t0[N];\nll f[N];\nbool h[N];\nstruct str\n{\n    int m,q;\n    ll r,w;\n}a[M];\nvoid road(int x,int y,ll r,ll w)\n{\n    a[++p].m=y;\n    a[p].q=t[x];\n    t[x]=p;\n    a[p].r=r;\n    a[p].w=w;\n}\nbool SPFA()\n{\n    queue<int> Q;\n    Q.push(s1);\n    for(int i=1;i<=n;++i)\n    {\n        f[i]=1e18;\n        h[i]=false;\n    }\n    f[s1]=0;\n    h[s1]=true;\n    while(!Q.empty())\n    {\n        int k=Q.front();\n        Q.pop();\n        if(h[k]==false) continue;\n        h[k]=false;\n        for(int i=t[k];i!=0;i=a[i].q)\n        {\n            if(a[i].r>0&&f[k]+a[i].w<f[a[i].m])\n            {\n                f[a[i].m]=f[k]+a[i].w;\n                Q.push(a[i].m);\n                h[a[i].m]=true;\n            }\n        }\n    }\n    if(f[s2]!=1e18) return true;\n    return false;\n}\nll dfs(int x,ll r)\n{\n    if(x==s2) return r;\n    ll s=0;\n    for(int i=t0[x];i!=0;i=a[i].q)\n    {\n        t0[x]=i;\n        if(h[a[i].m]==false&&a[i].r>0&&f[a[i].m]==f[x]+a[i].w)\n        {\n            h[a[i].m]=true;\n            ll z=dfs(a[i].m,min(r,a[i].r));\n            h[a[i].m]=false;\n            if(z!=0)\n            {\n                a[i].r-=z;\n                a[i^1].r+=z;\n                r-=z;\n                s+=z;\n                v+=z*a[i].w;\n            }\n            else f[a[i].m]=0;\n            if(r==0) return s; \n        }\n    }\n    return s;\n}\nint main()\n{\n    scanf(\"%d%d%d%d\",&n,&m,&s1,&s2);\n    for(int i=1;i<=m;++i)\n    {\n        int x,y;\n        ll r,w;\n        scanf(\"%d%d%lld%lld\",&x,&y,&r,&w);\n        road(x,y,r,w);\n        road(y,x,0,-w);\n    }\n    ll r=0;\n    while(SPFA())\n    {\n        for(int i=1;i<=n;++i) \n        {\n            t0[i]=t[i];\n            h[i]=false;\n        }\n        r+=dfs(s1,1e18);\n    }\n    printf(\"%lld %lld\",r,v);\n    return 0;\n}\n```","source":"_posts/minimum-cost-maximum-flow-Dinic.md","raw":"---\ntitle: '最小费用最大流Dinic'\ndate: 2022-04-20 14:50:20\ntags: [网络流,费用流]\ndescription: ' '\n---\n\n## 前言\n模板题：[P3381 【模板】最小费用最大流](https://www.luogu.com.cn/problem/P3381)\n[费用流题单](/post/minimum-cost-maximum-flow-problemlist/)\n前置知识：[最小费用最大流Dinic](/post/minimum-cost-maximum-flow-EK/)\n我们已经学习了用 EK 解决费用流的问题，但是 EK 每一次增广都要一次 SPFA，效率低，于是我们想，费用流能不能用 Dinic 呢？答案是肯定的。\n## 基本思路\n最大流的 Dinic 就是用一次 bfs 来分层，然后进行 dfs，而费用流的 EK 用的是多次 SPFA，如果我们把 Dinic 中的 bfs 换成 SPFA 就可以了，只需要判断这条边是否在最短路图中，也就起点到这个点的距离加上边权等于下一个点到起点的距离。但是有一个问题，最大流中的分层图是不存在环路的，但是最短路图就有可能，就有可能死循环并 $\\color{black}{\\text{MLE}}$，我们需要用一个数组来判断一个点是否走过，到达这个点标记真，离开后标记为假。\n## code\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<queue>\nusing namespace std;\ntypedef long long ll;\nconst int N=10001,M=100001;\nint n,m,p=1,v,s1,s2,t[N],t0[N];\nll f[N];\nbool h[N];\nstruct str\n{\n    int m,q;\n    ll r,w;\n}a[M];\nvoid road(int x,int y,ll r,ll w)\n{\n    a[++p].m=y;\n    a[p].q=t[x];\n    t[x]=p;\n    a[p].r=r;\n    a[p].w=w;\n}\nbool SPFA()\n{\n    queue<int> Q;\n    Q.push(s1);\n    for(int i=1;i<=n;++i)\n    {\n        f[i]=1e18;\n        h[i]=false;\n    }\n    f[s1]=0;\n    h[s1]=true;\n    while(!Q.empty())\n    {\n        int k=Q.front();\n        Q.pop();\n        if(h[k]==false) continue;\n        h[k]=false;\n        for(int i=t[k];i!=0;i=a[i].q)\n        {\n            if(a[i].r>0&&f[k]+a[i].w<f[a[i].m])\n            {\n                f[a[i].m]=f[k]+a[i].w;\n                Q.push(a[i].m);\n                h[a[i].m]=true;\n            }\n        }\n    }\n    if(f[s2]!=1e18) return true;\n    return false;\n}\nll dfs(int x,ll r)\n{\n    if(x==s2) return r;\n    ll s=0;\n    for(int i=t0[x];i!=0;i=a[i].q)\n    {\n        t0[x]=i;\n        if(h[a[i].m]==false&&a[i].r>0&&f[a[i].m]==f[x]+a[i].w)\n        {\n            h[a[i].m]=true;\n            ll z=dfs(a[i].m,min(r,a[i].r));\n            h[a[i].m]=false;\n            if(z!=0)\n            {\n                a[i].r-=z;\n                a[i^1].r+=z;\n                r-=z;\n                s+=z;\n                v+=z*a[i].w;\n            }\n            else f[a[i].m]=0;\n            if(r==0) return s; \n        }\n    }\n    return s;\n}\nint main()\n{\n    scanf(\"%d%d%d%d\",&n,&m,&s1,&s2);\n    for(int i=1;i<=m;++i)\n    {\n        int x,y;\n        ll r,w;\n        scanf(\"%d%d%lld%lld\",&x,&y,&r,&w);\n        road(x,y,r,w);\n        road(y,x,0,-w);\n    }\n    ll r=0;\n    while(SPFA())\n    {\n        for(int i=1;i<=n;++i) \n        {\n            t0[i]=t[i];\n            h[i]=false;\n        }\n        r+=dfs(s1,1e18);\n    }\n    printf(\"%lld %lld\",r,v);\n    return 0;\n}\n```","slug":"minimum-cost-maximum-flow-Dinic","published":1,"updated":"2023-02-24T10:05:11.988Z","_id":"cleid928j002q2sjf3dfibvhb","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>模板题：<a href=\"https://www.luogu.com.cn/problem/P3381\">P3381 【模板】最小费用最大流</a><br><a href=\"/post/minimum-cost-maximum-flow-problemlist/\">费用流题单</a><br>前置知识：<a href=\"/post/minimum-cost-maximum-flow-EK/\">最小费用最大流Dinic</a><br>我们已经学习了用 EK 解决费用流的问题，但是 EK 每一次增广都要一次 SPFA，效率低，于是我们想，费用流能不能用 Dinic 呢？答案是肯定的。</p>\n<h2 id=\"基本思路\"><a href=\"#基本思路\" class=\"headerlink\" title=\"基本思路\"></a>基本思路</h2><p>最大流的 Dinic 就是用一次 bfs 来分层，然后进行 dfs，而费用流的 EK 用的是多次 SPFA，如果我们把 Dinic 中的 bfs 换成 SPFA 就可以了，只需要判断这条边是否在最短路图中，也就起点到这个点的距离加上边权等于下一个点到起点的距离。但是有一个问题，最大流中的分层图是不存在环路的，但是最短路图就有可能，就有可能死循环并 $\\color{black}{\\text{MLE}}$，我们需要用一个数组来判断一个点是否走过，到达这个点标记真，离开后标记为假。</p>\n<h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> ll;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">10001</span>,M=<span class=\"number\">100001</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m,p=<span class=\"number\">1</span>,v,s1,s2,t[N],t0[N];</span><br><span class=\"line\">ll f[N];</span><br><span class=\"line\"><span class=\"type\">bool</span> h[N];</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">str</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> m,q;</span><br><span class=\"line\">    ll r,w;</span><br><span class=\"line\">&#125;a[M];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">road</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y,ll r,ll w)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    a[++p].m=y;</span><br><span class=\"line\">    a[p].q=t[x];</span><br><span class=\"line\">    t[x]=p;</span><br><span class=\"line\">    a[p].r=r;</span><br><span class=\"line\">    a[p].w=w;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">SPFA</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    queue&lt;<span class=\"type\">int</span>&gt; Q;</span><br><span class=\"line\">    Q.<span class=\"built_in\">push</span>(s1);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        f[i]=<span class=\"number\">1e18</span>;</span><br><span class=\"line\">        h[i]=<span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    f[s1]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    h[s1]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!Q.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> k=Q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">        Q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(h[k]==<span class=\"literal\">false</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        h[k]=<span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t[k];i!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(a[i].r&gt;<span class=\"number\">0</span>&amp;&amp;f[k]+a[i].w&lt;f[a[i].m])</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                f[a[i].m]=f[k]+a[i].w;</span><br><span class=\"line\">                Q.<span class=\"built_in\">push</span>(a[i].m);</span><br><span class=\"line\">                h[a[i].m]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(f[s2]!=<span class=\"number\">1e18</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> x,ll r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x==s2) <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">    ll s=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t0[x];i!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        t0[x]=i;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(h[a[i].m]==<span class=\"literal\">false</span>&amp;&amp;a[i].r&gt;<span class=\"number\">0</span>&amp;&amp;f[a[i].m]==f[x]+a[i].w)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            h[a[i].m]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">            ll z=<span class=\"built_in\">dfs</span>(a[i].m,<span class=\"built_in\">min</span>(r,a[i].r));</span><br><span class=\"line\">            h[a[i].m]=<span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(z!=<span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                a[i].r-=z;</span><br><span class=\"line\">                a[i^<span class=\"number\">1</span>].r+=z;</span><br><span class=\"line\">                r-=z;</span><br><span class=\"line\">                s+=z;</span><br><span class=\"line\">                v+=z*a[i].w;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> f[a[i].m]=<span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(r==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> s; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;s1,&amp;s2);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x,y;</span><br><span class=\"line\">        ll r,w;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%lld%lld&quot;</span>,&amp;x,&amp;y,&amp;r,&amp;w);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(x,y,r,w);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(y,x,<span class=\"number\">0</span>,-w);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ll r=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">SPFA</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i) </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            t0[i]=t[i];</span><br><span class=\"line\">            h[i]=<span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        r+=<span class=\"built_in\">dfs</span>(s1,<span class=\"number\">1e18</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld %lld&quot;</span>,r,v);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>模板题：<a href=\"https://www.luogu.com.cn/problem/P3381\">P3381 【模板】最小费用最大流</a><br><a href=\"/post/minimum-cost-maximum-flow-problemlist/\">费用流题单</a><br>前置知识：<a href=\"/post/minimum-cost-maximum-flow-EK/\">最小费用最大流Dinic</a><br>我们已经学习了用 EK 解决费用流的问题，但是 EK 每一次增广都要一次 SPFA，效率低，于是我们想，费用流能不能用 Dinic 呢？答案是肯定的。</p>\n<h2 id=\"基本思路\"><a href=\"#基本思路\" class=\"headerlink\" title=\"基本思路\"></a>基本思路</h2><p>最大流的 Dinic 就是用一次 bfs 来分层，然后进行 dfs，而费用流的 EK 用的是多次 SPFA，如果我们把 Dinic 中的 bfs 换成 SPFA 就可以了，只需要判断这条边是否在最短路图中，也就起点到这个点的距离加上边权等于下一个点到起点的距离。但是有一个问题，最大流中的分层图是不存在环路的，但是最短路图就有可能，就有可能死循环并 $\\color{black}{\\text{MLE}}$，我们需要用一个数组来判断一个点是否走过，到达这个点标记真，离开后标记为假。</p>\n<h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> ll;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">10001</span>,M=<span class=\"number\">100001</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m,p=<span class=\"number\">1</span>,v,s1,s2,t[N],t0[N];</span><br><span class=\"line\">ll f[N];</span><br><span class=\"line\"><span class=\"type\">bool</span> h[N];</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">str</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> m,q;</span><br><span class=\"line\">    ll r,w;</span><br><span class=\"line\">&#125;a[M];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">road</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y,ll r,ll w)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    a[++p].m=y;</span><br><span class=\"line\">    a[p].q=t[x];</span><br><span class=\"line\">    t[x]=p;</span><br><span class=\"line\">    a[p].r=r;</span><br><span class=\"line\">    a[p].w=w;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">SPFA</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    queue&lt;<span class=\"type\">int</span>&gt; Q;</span><br><span class=\"line\">    Q.<span class=\"built_in\">push</span>(s1);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        f[i]=<span class=\"number\">1e18</span>;</span><br><span class=\"line\">        h[i]=<span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    f[s1]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    h[s1]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!Q.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> k=Q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">        Q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(h[k]==<span class=\"literal\">false</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        h[k]=<span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t[k];i!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(a[i].r&gt;<span class=\"number\">0</span>&amp;&amp;f[k]+a[i].w&lt;f[a[i].m])</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                f[a[i].m]=f[k]+a[i].w;</span><br><span class=\"line\">                Q.<span class=\"built_in\">push</span>(a[i].m);</span><br><span class=\"line\">                h[a[i].m]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(f[s2]!=<span class=\"number\">1e18</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> x,ll r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x==s2) <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">    ll s=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t0[x];i!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        t0[x]=i;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(h[a[i].m]==<span class=\"literal\">false</span>&amp;&amp;a[i].r&gt;<span class=\"number\">0</span>&amp;&amp;f[a[i].m]==f[x]+a[i].w)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            h[a[i].m]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">            ll z=<span class=\"built_in\">dfs</span>(a[i].m,<span class=\"built_in\">min</span>(r,a[i].r));</span><br><span class=\"line\">            h[a[i].m]=<span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(z!=<span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                a[i].r-=z;</span><br><span class=\"line\">                a[i^<span class=\"number\">1</span>].r+=z;</span><br><span class=\"line\">                r-=z;</span><br><span class=\"line\">                s+=z;</span><br><span class=\"line\">                v+=z*a[i].w;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> f[a[i].m]=<span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(r==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> s; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;s1,&amp;s2);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x,y;</span><br><span class=\"line\">        ll r,w;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%lld%lld&quot;</span>,&amp;x,&amp;y,&amp;r,&amp;w);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(x,y,r,w);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(y,x,<span class=\"number\">0</span>,-w);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ll r=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">SPFA</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i) </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            t0[i]=t[i];</span><br><span class=\"line\">            h[i]=<span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        r+=<span class=\"built_in\">dfs</span>(s1,<span class=\"number\">1e18</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld %lld&quot;</span>,r,v);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"最小费用最大流EK","date":"2022-02-19T05:14:26.000Z","description":" ","_content":"\n ## 前言\n模板题：[P3381 【模板】最小费用最大流](https://www.luogu.com.cn/problem/P3381)\n[费用流题单](/post/minimum-cost-maximum-flow-problemlist/)\n前置知识：[最大流Dinic](/post/maximum-flow-Dinic/)\n进阶知识：[最小费用最大流Dinic](/post/minimum-cost-maximum-flow-Dinic/)\n最小费用最大流问题，简称费用流。费用流问题是在最大流的基础上给每条边添加一个边权，也就是费用，总费用就是流过每条边的流量乘上费用的和，在保证流量最大的情况下，求出这个最小费用。\n最大流问题可以使用每次 dfs 找增广路来解决，费用流就可以用 SPFA 来寻找增广路，这样就可以保证每一次的增广路的费用最小。由于最大流算法可以“反悔”，所以即使当前的增广路并不是全局最优的，也可以在之后的增广中“反悔”，所以最后找到的一定是最优解。不过 SPFA 在搜索过程中不知道最优解，所以要记录最优路线，搜索完成后再更新所有边的容量。\n## SPFA\nSPFA 的过程中总共需要维护 $3$ 个数组：到达每个点的流量，到达每个点的费用，与这个点是由哪个点更新来的。不过SPFA是找到费用最小的增广路，而不是流量最大，因为可以进行多次 SPFA 增加流量。如果当前边的流量不为 $0$ ，到达每个点的最小费用 $g$ 的就可以做如下更新： $g[a[i].m]=\\max(g[a[i].m],g[x]))$。如果最小费用更新成功，流量 $f[a[i].m]$ 也要更新为 $min(f[x]),a[i].r$ ，这个点的父亲 $r[a[i].m]$ 则更新为 $x$。这样就可以找到当前费用最小的增广路。当汇点没有被走到的时候，就说明不存在增广路了。\n进行完一次 SPFA 后，最大流量就要加上汇点的流量 $f[t]$，费用加上汇点的流量与到达汇点的费用之积 $f[t] \\times g[t]$\n在进行了 SPFA 之后，我们就需要更新每条边的容量。从汇点开始，每一次都到达当前点的父亲，并把经过的所有边的容量减去 $f[t]$，其相反边的容量加上 $f[s]$。\n## code\n``` cpp\n#include<cstdio>\n#include<algorithm>\n#include<queue>\nusing namespace std;\nint n,m,s1,s2,p=1,t[10001],f[10001],g[10001],r[10001];\nbool h[10001];\nstruct str\n{\n    int x,m,q,r,w;\n}a[100001];\nvoid road(int x,int y,int r,int w)\n{\n    a[++p].x=x;\n    a[p].m=y;\n    a[p].q=t[x];\n    t[x]=p;\n    a[p].r=r;\n    a[p].w=w;\n}\nbool SPFA()\n{\n    queue<int> q;\n    q.push(s1);\n    for(int i=1;i<=n;++i)\n    {\n        f[i]=1e9;\n        g[i]=1e9;\n        h[i]=false;\n        r[i]=0;\n    }\n    g[s1]=0;\n    h[s1]=true;\n    while(!q.empty())\n    {\n        int k=q.front();\n        q.pop();\n        if(h[k]==false) continue;\n        h[k]=false;\n        for(int i=t[k];i!=0;i=a[i].q)\n        {\n            if(a[i].r>0&&g[k]+a[i].w<g[a[i].m])\n            {\n                f[a[i].m]=min(f[k],a[i].r);\n                g[a[i].m]=g[k]+a[i].w;\n                r[a[i].m]=i;\n                q.push(a[i].m);\n                h[a[i].m]=true;\n            }\n        }\n    }\n    if(f[s2]!=1e9) return true;\n    return false;\n}\nint main()\n{\n    scanf(\"%d%d%d%d\",&n,&m,&s1,&s2);\n    for(int i=1;i<=m;++i)\n    {\n        int x,y,r,w;\n        scanf(\"%d%d%d%d\",&x,&y,&r,&w);\n        road(x,y,r,w);\n        road(y,x,0,-w);\n    }\n    int s=0,w=0;\n    while(SPFA())\n    {\n        s+=f[s2];\n        w+=f[s2]*g[s2];\n        int x=s2;\n        while(x!=s1)\n        {\n            a[r[x]].r-=f[s2];\n            a[r[x]^1].r+=f[s2];\n            x=a[r[x]].x;\n        }\n    }\n    printf(\"%d %d\",s,w);\n    return 0;\n}\n```","source":"_posts/minimum-cost-maximum-flow-EK.md","raw":"---\ntitle: '最小费用最大流EK'\ndate: 2022-02-19 13:14:26\ntags: [网络流,费用流]\ndescription: ' '\n---\n\n ## 前言\n模板题：[P3381 【模板】最小费用最大流](https://www.luogu.com.cn/problem/P3381)\n[费用流题单](/post/minimum-cost-maximum-flow-problemlist/)\n前置知识：[最大流Dinic](/post/maximum-flow-Dinic/)\n进阶知识：[最小费用最大流Dinic](/post/minimum-cost-maximum-flow-Dinic/)\n最小费用最大流问题，简称费用流。费用流问题是在最大流的基础上给每条边添加一个边权，也就是费用，总费用就是流过每条边的流量乘上费用的和，在保证流量最大的情况下，求出这个最小费用。\n最大流问题可以使用每次 dfs 找增广路来解决，费用流就可以用 SPFA 来寻找增广路，这样就可以保证每一次的增广路的费用最小。由于最大流算法可以“反悔”，所以即使当前的增广路并不是全局最优的，也可以在之后的增广中“反悔”，所以最后找到的一定是最优解。不过 SPFA 在搜索过程中不知道最优解，所以要记录最优路线，搜索完成后再更新所有边的容量。\n## SPFA\nSPFA 的过程中总共需要维护 $3$ 个数组：到达每个点的流量，到达每个点的费用，与这个点是由哪个点更新来的。不过SPFA是找到费用最小的增广路，而不是流量最大，因为可以进行多次 SPFA 增加流量。如果当前边的流量不为 $0$ ，到达每个点的最小费用 $g$ 的就可以做如下更新： $g[a[i].m]=\\max(g[a[i].m],g[x]))$。如果最小费用更新成功，流量 $f[a[i].m]$ 也要更新为 $min(f[x]),a[i].r$ ，这个点的父亲 $r[a[i].m]$ 则更新为 $x$。这样就可以找到当前费用最小的增广路。当汇点没有被走到的时候，就说明不存在增广路了。\n进行完一次 SPFA 后，最大流量就要加上汇点的流量 $f[t]$，费用加上汇点的流量与到达汇点的费用之积 $f[t] \\times g[t]$\n在进行了 SPFA 之后，我们就需要更新每条边的容量。从汇点开始，每一次都到达当前点的父亲，并把经过的所有边的容量减去 $f[t]$，其相反边的容量加上 $f[s]$。\n## code\n``` cpp\n#include<cstdio>\n#include<algorithm>\n#include<queue>\nusing namespace std;\nint n,m,s1,s2,p=1,t[10001],f[10001],g[10001],r[10001];\nbool h[10001];\nstruct str\n{\n    int x,m,q,r,w;\n}a[100001];\nvoid road(int x,int y,int r,int w)\n{\n    a[++p].x=x;\n    a[p].m=y;\n    a[p].q=t[x];\n    t[x]=p;\n    a[p].r=r;\n    a[p].w=w;\n}\nbool SPFA()\n{\n    queue<int> q;\n    q.push(s1);\n    for(int i=1;i<=n;++i)\n    {\n        f[i]=1e9;\n        g[i]=1e9;\n        h[i]=false;\n        r[i]=0;\n    }\n    g[s1]=0;\n    h[s1]=true;\n    while(!q.empty())\n    {\n        int k=q.front();\n        q.pop();\n        if(h[k]==false) continue;\n        h[k]=false;\n        for(int i=t[k];i!=0;i=a[i].q)\n        {\n            if(a[i].r>0&&g[k]+a[i].w<g[a[i].m])\n            {\n                f[a[i].m]=min(f[k],a[i].r);\n                g[a[i].m]=g[k]+a[i].w;\n                r[a[i].m]=i;\n                q.push(a[i].m);\n                h[a[i].m]=true;\n            }\n        }\n    }\n    if(f[s2]!=1e9) return true;\n    return false;\n}\nint main()\n{\n    scanf(\"%d%d%d%d\",&n,&m,&s1,&s2);\n    for(int i=1;i<=m;++i)\n    {\n        int x,y,r,w;\n        scanf(\"%d%d%d%d\",&x,&y,&r,&w);\n        road(x,y,r,w);\n        road(y,x,0,-w);\n    }\n    int s=0,w=0;\n    while(SPFA())\n    {\n        s+=f[s2];\n        w+=f[s2]*g[s2];\n        int x=s2;\n        while(x!=s1)\n        {\n            a[r[x]].r-=f[s2];\n            a[r[x]^1].r+=f[s2];\n            x=a[r[x]].x;\n        }\n    }\n    printf(\"%d %d\",s,w);\n    return 0;\n}\n```","slug":"minimum-cost-maximum-flow-EK","published":1,"updated":"2023-02-24T10:05:12.024Z","_id":"cleid928l002t2sjfh23lavx1","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>模板题：<a href=\"https://www.luogu.com.cn/problem/P3381\">P3381 【模板】最小费用最大流</a><br><a href=\"/post/minimum-cost-maximum-flow-problemlist/\">费用流题单</a><br>前置知识：<a href=\"/post/maximum-flow-Dinic/\">最大流Dinic</a><br>进阶知识：<a href=\"/post/minimum-cost-maximum-flow-Dinic/\">最小费用最大流Dinic</a><br>最小费用最大流问题，简称费用流。费用流问题是在最大流的基础上给每条边添加一个边权，也就是费用，总费用就是流过每条边的流量乘上费用的和，在保证流量最大的情况下，求出这个最小费用。<br>最大流问题可以使用每次 dfs 找增广路来解决，费用流就可以用 SPFA 来寻找增广路，这样就可以保证每一次的增广路的费用最小。由于最大流算法可以“反悔”，所以即使当前的增广路并不是全局最优的，也可以在之后的增广中“反悔”，所以最后找到的一定是最优解。不过 SPFA 在搜索过程中不知道最优解，所以要记录最优路线，搜索完成后再更新所有边的容量。</p>\n<h2 id=\"SPFA\"><a href=\"#SPFA\" class=\"headerlink\" title=\"SPFA\"></a>SPFA</h2><p>SPFA 的过程中总共需要维护 $3$ 个数组：到达每个点的流量，到达每个点的费用，与这个点是由哪个点更新来的。不过SPFA是找到费用最小的增广路，而不是流量最大，因为可以进行多次 SPFA 增加流量。如果当前边的流量不为 $0$ ，到达每个点的最小费用 $g$ 的就可以做如下更新： $g[a[i].m]&#x3D;\\max(g[a[i].m],g[x]))$。如果最小费用更新成功，流量 $f[a[i].m]$ 也要更新为 $min(f[x]),a[i].r$ ，这个点的父亲 $r[a[i].m]$ 则更新为 $x$。这样就可以找到当前费用最小的增广路。当汇点没有被走到的时候，就说明不存在增广路了。<br>进行完一次 SPFA 后，最大流量就要加上汇点的流量 $f[t]$，费用加上汇点的流量与到达汇点的费用之积 $f[t] \\times g[t]$<br>在进行了 SPFA 之后，我们就需要更新每条边的容量。从汇点开始，每一次都到达当前点的父亲，并把经过的所有边的容量减去 $f[t]$，其相反边的容量加上 $f[s]$。</p>\n<h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m,s1,s2,p=<span class=\"number\">1</span>,t[<span class=\"number\">10001</span>],f[<span class=\"number\">10001</span>],g[<span class=\"number\">10001</span>],r[<span class=\"number\">10001</span>];</span><br><span class=\"line\"><span class=\"type\">bool</span> h[<span class=\"number\">10001</span>];</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">str</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> x,m,q,r,w;</span><br><span class=\"line\">&#125;a[<span class=\"number\">100001</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">road</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y,<span class=\"type\">int</span> r,<span class=\"type\">int</span> w)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    a[++p].x=x;</span><br><span class=\"line\">    a[p].m=y;</span><br><span class=\"line\">    a[p].q=t[x];</span><br><span class=\"line\">    t[x]=p;</span><br><span class=\"line\">    a[p].r=r;</span><br><span class=\"line\">    a[p].w=w;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">SPFA</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    queue&lt;<span class=\"type\">int</span>&gt; q;</span><br><span class=\"line\">    q.<span class=\"built_in\">push</span>(s1);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        f[i]=<span class=\"number\">1e9</span>;</span><br><span class=\"line\">        g[i]=<span class=\"number\">1e9</span>;</span><br><span class=\"line\">        h[i]=<span class=\"literal\">false</span>;</span><br><span class=\"line\">        r[i]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    g[s1]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    h[s1]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!q.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> k=q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">        q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(h[k]==<span class=\"literal\">false</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        h[k]=<span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t[k];i!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(a[i].r&gt;<span class=\"number\">0</span>&amp;&amp;g[k]+a[i].w&lt;g[a[i].m])</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                f[a[i].m]=<span class=\"built_in\">min</span>(f[k],a[i].r);</span><br><span class=\"line\">                g[a[i].m]=g[k]+a[i].w;</span><br><span class=\"line\">                r[a[i].m]=i;</span><br><span class=\"line\">                q.<span class=\"built_in\">push</span>(a[i].m);</span><br><span class=\"line\">                h[a[i].m]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(f[s2]!=<span class=\"number\">1e9</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;s1,&amp;s2);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x,y,r,w;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d%d&quot;</span>,&amp;x,&amp;y,&amp;r,&amp;w);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(x,y,r,w);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(y,x,<span class=\"number\">0</span>,-w);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> s=<span class=\"number\">0</span>,w=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">SPFA</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        s+=f[s2];</span><br><span class=\"line\">        w+=f[s2]*g[s2];</span><br><span class=\"line\">        <span class=\"type\">int</span> x=s2;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(x!=s1)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            a[r[x]].r-=f[s2];</span><br><span class=\"line\">            a[r[x]^<span class=\"number\">1</span>].r+=f[s2];</span><br><span class=\"line\">            x=a[r[x]].x;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d %d&quot;</span>,s,w);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>模板题：<a href=\"https://www.luogu.com.cn/problem/P3381\">P3381 【模板】最小费用最大流</a><br><a href=\"/post/minimum-cost-maximum-flow-problemlist/\">费用流题单</a><br>前置知识：<a href=\"/post/maximum-flow-Dinic/\">最大流Dinic</a><br>进阶知识：<a href=\"/post/minimum-cost-maximum-flow-Dinic/\">最小费用最大流Dinic</a><br>最小费用最大流问题，简称费用流。费用流问题是在最大流的基础上给每条边添加一个边权，也就是费用，总费用就是流过每条边的流量乘上费用的和，在保证流量最大的情况下，求出这个最小费用。<br>最大流问题可以使用每次 dfs 找增广路来解决，费用流就可以用 SPFA 来寻找增广路，这样就可以保证每一次的增广路的费用最小。由于最大流算法可以“反悔”，所以即使当前的增广路并不是全局最优的，也可以在之后的增广中“反悔”，所以最后找到的一定是最优解。不过 SPFA 在搜索过程中不知道最优解，所以要记录最优路线，搜索完成后再更新所有边的容量。</p>\n<h2 id=\"SPFA\"><a href=\"#SPFA\" class=\"headerlink\" title=\"SPFA\"></a>SPFA</h2><p>SPFA 的过程中总共需要维护 $3$ 个数组：到达每个点的流量，到达每个点的费用，与这个点是由哪个点更新来的。不过SPFA是找到费用最小的增广路，而不是流量最大，因为可以进行多次 SPFA 增加流量。如果当前边的流量不为 $0$ ，到达每个点的最小费用 $g$ 的就可以做如下更新： $g[a[i].m]&#x3D;\\max(g[a[i].m],g[x]))$。如果最小费用更新成功，流量 $f[a[i].m]$ 也要更新为 $min(f[x]),a[i].r$ ，这个点的父亲 $r[a[i].m]$ 则更新为 $x$。这样就可以找到当前费用最小的增广路。当汇点没有被走到的时候，就说明不存在增广路了。<br>进行完一次 SPFA 后，最大流量就要加上汇点的流量 $f[t]$，费用加上汇点的流量与到达汇点的费用之积 $f[t] \\times g[t]$<br>在进行了 SPFA 之后，我们就需要更新每条边的容量。从汇点开始，每一次都到达当前点的父亲，并把经过的所有边的容量减去 $f[t]$，其相反边的容量加上 $f[s]$。</p>\n<h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m,s1,s2,p=<span class=\"number\">1</span>,t[<span class=\"number\">10001</span>],f[<span class=\"number\">10001</span>],g[<span class=\"number\">10001</span>],r[<span class=\"number\">10001</span>];</span><br><span class=\"line\"><span class=\"type\">bool</span> h[<span class=\"number\">10001</span>];</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">str</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> x,m,q,r,w;</span><br><span class=\"line\">&#125;a[<span class=\"number\">100001</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">road</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y,<span class=\"type\">int</span> r,<span class=\"type\">int</span> w)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    a[++p].x=x;</span><br><span class=\"line\">    a[p].m=y;</span><br><span class=\"line\">    a[p].q=t[x];</span><br><span class=\"line\">    t[x]=p;</span><br><span class=\"line\">    a[p].r=r;</span><br><span class=\"line\">    a[p].w=w;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">SPFA</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    queue&lt;<span class=\"type\">int</span>&gt; q;</span><br><span class=\"line\">    q.<span class=\"built_in\">push</span>(s1);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        f[i]=<span class=\"number\">1e9</span>;</span><br><span class=\"line\">        g[i]=<span class=\"number\">1e9</span>;</span><br><span class=\"line\">        h[i]=<span class=\"literal\">false</span>;</span><br><span class=\"line\">        r[i]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    g[s1]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    h[s1]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!q.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> k=q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">        q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(h[k]==<span class=\"literal\">false</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        h[k]=<span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t[k];i!=<span class=\"number\">0</span>;i=a[i].q)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(a[i].r&gt;<span class=\"number\">0</span>&amp;&amp;g[k]+a[i].w&lt;g[a[i].m])</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                f[a[i].m]=<span class=\"built_in\">min</span>(f[k],a[i].r);</span><br><span class=\"line\">                g[a[i].m]=g[k]+a[i].w;</span><br><span class=\"line\">                r[a[i].m]=i;</span><br><span class=\"line\">                q.<span class=\"built_in\">push</span>(a[i].m);</span><br><span class=\"line\">                h[a[i].m]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(f[s2]!=<span class=\"number\">1e9</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;s1,&amp;s2);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x,y,r,w;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d%d&quot;</span>,&amp;x,&amp;y,&amp;r,&amp;w);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(x,y,r,w);</span><br><span class=\"line\">        <span class=\"built_in\">road</span>(y,x,<span class=\"number\">0</span>,-w);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> s=<span class=\"number\">0</span>,w=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">SPFA</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        s+=f[s2];</span><br><span class=\"line\">        w+=f[s2]*g[s2];</span><br><span class=\"line\">        <span class=\"type\">int</span> x=s2;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(x!=s1)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            a[r[x]].r-=f[s2];</span><br><span class=\"line\">            a[r[x]^<span class=\"number\">1</span>].r+=f[s2];</span><br><span class=\"line\">            x=a[r[x]].x;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d %d&quot;</span>,s,w);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"费用流题单","date":"2022-05-10T05:45:38.000Z","description":" ","_content":"\n这是 [费用流](/post/minimum-cost-maximum-flow-EK) 的几道经典题目，建议按照顺序来做。\n\n[P1251 餐巾计划问题](/post/P1251-solution)\n\n[P4015 运输问题](/post/P4015-solution)\n\n[P4014 分配问题](/post/P4014-solution)\n\n[P2604 [ZJOI2010]网络扩容](/post/P2604-solution)\n\n[P4012 深海机器人问题](/post/P4012-solution)\n\n[P3356 火星探险问题](/post/P3356-solution)","source":"_posts/minimum-cost-maximum-flow-problemlist.md","raw":"---\ntitle: '费用流题单'\ndate: 2022-05-10 13:45:38\ntags: [网络流,费用流]\ndescription: ' '\n---\n\n这是 [费用流](/post/minimum-cost-maximum-flow-EK) 的几道经典题目，建议按照顺序来做。\n\n[P1251 餐巾计划问题](/post/P1251-solution)\n\n[P4015 运输问题](/post/P4015-solution)\n\n[P4014 分配问题](/post/P4014-solution)\n\n[P2604 [ZJOI2010]网络扩容](/post/P2604-solution)\n\n[P4012 深海机器人问题](/post/P4012-solution)\n\n[P3356 火星探险问题](/post/P3356-solution)","slug":"minimum-cost-maximum-flow-problemlist","published":1,"updated":"2023-02-24T10:05:12.001Z","_id":"cleid928t002v2sjf6jmp99wi","comments":1,"layout":"post","photos":[],"link":"","content":"<p>这是 <a href=\"/post/minimum-cost-maximum-flow-EK\">费用流</a> 的几道经典题目，建议按照顺序来做。</p>\n<p><a href=\"/post/P1251-solution\">P1251 餐巾计划问题</a></p>\n<p><a href=\"/post/P4015-solution\">P4015 运输问题</a></p>\n<p><a href=\"/post/P4014-solution\">P4014 分配问题</a></p>\n<p><a href=\"/post/P2604-solution\">P2604 [ZJOI2010]网络扩容</a></p>\n<p><a href=\"/post/P4012-solution\">P4012 深海机器人问题</a></p>\n<p><a href=\"/post/P3356-solution\">P3356 火星探险问题</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>这是 <a href=\"/post/minimum-cost-maximum-flow-EK\">费用流</a> 的几道经典题目，建议按照顺序来做。</p>\n<p><a href=\"/post/P1251-solution\">P1251 餐巾计划问题</a></p>\n<p><a href=\"/post/P4015-solution\">P4015 运输问题</a></p>\n<p><a href=\"/post/P4014-solution\">P4014 分配问题</a></p>\n<p><a href=\"/post/P2604-solution\">P2604 [ZJOI2010]网络扩容</a></p>\n<p><a href=\"/post/P4012-solution\">P4012 深海机器人问题</a></p>\n<p><a href=\"/post/P3356-solution\">P3356 火星探险问题</a></p>\n"},{"title":"NOIP 2022 游记","date":"2022-11-29T04:17:00.000Z","description":" ","_content":"\n寄了 sa\n\nAFO\n\n## Day -4 $\\sim$ 0\n\n这次 NOIP 在绵阳南山考，大家都来 ~~绵阳 5 日游~~ 隔离了，我要也去隔离酒店住几天。\n\n迫真绵阳 5 日游。\n\n每天都是早上起来就去 [sgc](https://sukwants.github.io/) 和 [syy](https://www.luogu.com.cn/blog/snowbamboo/) 的房间 219 做联考题，然后一个同学会了，大家都会了。\n\n中午吃饭之后找了个餐桌打乒乓。下午基本就是各种颓，ygg 也不组织讨论，一直颓到晚上。晚上就有五六个人待在 219，边颓边看世界杯，还有两天晚上点了外卖。\n\n后来 [sgc](https://sukwants.github.io/) 开始放各种 WC 才艺展示，然后大家都开始听，直接投屏到电视上放《我的一个 OIer 朋友》。估计考场上要单曲循环了。\n\n## Day 1 上午\n\n11 月 26 号早上 8 点进入了考场，然后配好电脑。\n\n考试开始后，我依然顺序开题，T1 一眼是傻逼题，只需要以 $\\text{C}$ 和 $\\text{F}$ 的左上角为参照，找 $\\text{C}$ 的最下面一点和 $\\text{F}$ 的中间一点的个数，要计算横或竖长度不同的情况。马上开始写，9 点左右写完。\n\nT2 看起来像是傻逼题，但是完全没有思路，想了一下 $k=2n-2$ 的部分，很容易就想出来了，大概就是前 $n-1$ 个栈每个栈放两个不同的元素，消上面的元素就直接放上去，消下面的元素就放在最后一个栈消。然后想了一个多小时，到了 10:30 还没想出来，放弃去看了一眼 T3。\n\nT3 看起来很可做，因为只有守割边才有贡献，所以可以做边双缩点然后树形 dp。立马开始码，11 点就码出来了，但是发现过不了大样例，以为边双写挂了，调了一会，然后突然有了一点 T2 的思路，马上又去搞 T2。\n\nT2 $k=2n-1$ 的情况只需要多处理多出来的那一个数 $k$，假设 $k$ 后面的数是 $p$，如果 $p$ 在某一个栈 $A$ 下面，就可以把 $k$ 放到 $A$ 中，然后把 $p$ 放到最后一个栈，两个 $p$ 消掉就可以了。我认为这个算法没有假，马上开始写，但是很多地方写挂了，调了很多次才过大样例，这时候已经 12:55 了，T4 暴力都没来得及打，寄了 sa。\n\n刚出考场，想了一下 T3 的做法，马上发现一个地方假了，只需要稍微改一下树形 dp 即可，亏麻了。但是 T2 许多人都没思路，又亏麻了。\n\n后来测了民间数据，T1 没挂，T2 假了，只有大约一半的分，T3 居然有 15 分，大概是 $150 \\sim 170$。寄了 sa，可能省选都进不了。真 ** 不该搞 3h 的 T2，亏麻了，T3 纯纯的傻逼题，5 分钟可以改过。\n\n## Day 1 下午\n\n一问各个巨佬，都考的比我高。ljy 和季老师大概是 300+，剩下的 1 队也基本 200+，但是看到 yl 在校门口快哭了，默哀。2 队的 [zc](https://www.cnblogs.com/Feyn/) 切了 T3，[lyh](https://www.luogu.com.cn/blog/AIQ/) 大暴力凑了个 200+，%%%。剩下的貌似我最高，但是拿头进省选。\n\n## Day 2 $\\sim$ 4\n\n从绵阳回来还是要居家隔离 3 天，去了 [sgc](https://sukwants.github.io/) 家划水，大概就是天天打 generals.io，再搞点奇妙的技术问题。由于 [zsq](https://wtyakioi.github.io/) 和 syy 住的很近，还来一起耍了。\n\nluogu、infOJ、小图灵都出分了。我引用一下 [zc](https://www.cnblogs.com/Feyn/) 博客里小图灵的统计：\n\n> zzh299，ljy220，zyt123，xby280，llt280，shr183，yxr86，wzx179，zlx240，cs270，syy76，swc240，zyc170，sgc115，zym200，zsq87，yl29，hyy195，lyh209\n\n再补一个 zc235。\n\n%%%\n\n就我最菜。\n\n退役力。\n\n自开力。\n\nAFO\n\n## Day 5\n\n要返校了。\n\n学校电脑莫名其妙有一坨电源跳闸了，刚好就有我的，预示我被踢出机房力。\n\n## Day 10\n\n寄了 sa。\n\nNOI 官网出分，数据极限强，T1 满，T2 $25$ 分，T3 爆 $0$，直接退役。\n\n傻逼 T2。\n\n我菜麻了。\n\n真退役力。\n\n## Day N\n\n据说是一等以上全部进省选（同时女生全部进），虽然拿头进省队，但是不用上文化课了，舒服！\n","source":"_posts/noip-2022-travels.md","raw":"---\ntitle: 'NOIP 2022 游记'\ndate: 2022-11-29 12:17:00\ntags: [游记]\ndescription: ' '\n---\n\n寄了 sa\n\nAFO\n\n## Day -4 $\\sim$ 0\n\n这次 NOIP 在绵阳南山考，大家都来 ~~绵阳 5 日游~~ 隔离了，我要也去隔离酒店住几天。\n\n迫真绵阳 5 日游。\n\n每天都是早上起来就去 [sgc](https://sukwants.github.io/) 和 [syy](https://www.luogu.com.cn/blog/snowbamboo/) 的房间 219 做联考题，然后一个同学会了，大家都会了。\n\n中午吃饭之后找了个餐桌打乒乓。下午基本就是各种颓，ygg 也不组织讨论，一直颓到晚上。晚上就有五六个人待在 219，边颓边看世界杯，还有两天晚上点了外卖。\n\n后来 [sgc](https://sukwants.github.io/) 开始放各种 WC 才艺展示，然后大家都开始听，直接投屏到电视上放《我的一个 OIer 朋友》。估计考场上要单曲循环了。\n\n## Day 1 上午\n\n11 月 26 号早上 8 点进入了考场，然后配好电脑。\n\n考试开始后，我依然顺序开题，T1 一眼是傻逼题，只需要以 $\\text{C}$ 和 $\\text{F}$ 的左上角为参照，找 $\\text{C}$ 的最下面一点和 $\\text{F}$ 的中间一点的个数，要计算横或竖长度不同的情况。马上开始写，9 点左右写完。\n\nT2 看起来像是傻逼题，但是完全没有思路，想了一下 $k=2n-2$ 的部分，很容易就想出来了，大概就是前 $n-1$ 个栈每个栈放两个不同的元素，消上面的元素就直接放上去，消下面的元素就放在最后一个栈消。然后想了一个多小时，到了 10:30 还没想出来，放弃去看了一眼 T3。\n\nT3 看起来很可做，因为只有守割边才有贡献，所以可以做边双缩点然后树形 dp。立马开始码，11 点就码出来了，但是发现过不了大样例，以为边双写挂了，调了一会，然后突然有了一点 T2 的思路，马上又去搞 T2。\n\nT2 $k=2n-1$ 的情况只需要多处理多出来的那一个数 $k$，假设 $k$ 后面的数是 $p$，如果 $p$ 在某一个栈 $A$ 下面，就可以把 $k$ 放到 $A$ 中，然后把 $p$ 放到最后一个栈，两个 $p$ 消掉就可以了。我认为这个算法没有假，马上开始写，但是很多地方写挂了，调了很多次才过大样例，这时候已经 12:55 了，T4 暴力都没来得及打，寄了 sa。\n\n刚出考场，想了一下 T3 的做法，马上发现一个地方假了，只需要稍微改一下树形 dp 即可，亏麻了。但是 T2 许多人都没思路，又亏麻了。\n\n后来测了民间数据，T1 没挂，T2 假了，只有大约一半的分，T3 居然有 15 分，大概是 $150 \\sim 170$。寄了 sa，可能省选都进不了。真 ** 不该搞 3h 的 T2，亏麻了，T3 纯纯的傻逼题，5 分钟可以改过。\n\n## Day 1 下午\n\n一问各个巨佬，都考的比我高。ljy 和季老师大概是 300+，剩下的 1 队也基本 200+，但是看到 yl 在校门口快哭了，默哀。2 队的 [zc](https://www.cnblogs.com/Feyn/) 切了 T3，[lyh](https://www.luogu.com.cn/blog/AIQ/) 大暴力凑了个 200+，%%%。剩下的貌似我最高，但是拿头进省选。\n\n## Day 2 $\\sim$ 4\n\n从绵阳回来还是要居家隔离 3 天，去了 [sgc](https://sukwants.github.io/) 家划水，大概就是天天打 generals.io，再搞点奇妙的技术问题。由于 [zsq](https://wtyakioi.github.io/) 和 syy 住的很近，还来一起耍了。\n\nluogu、infOJ、小图灵都出分了。我引用一下 [zc](https://www.cnblogs.com/Feyn/) 博客里小图灵的统计：\n\n> zzh299，ljy220，zyt123，xby280，llt280，shr183，yxr86，wzx179，zlx240，cs270，syy76，swc240，zyc170，sgc115，zym200，zsq87，yl29，hyy195，lyh209\n\n再补一个 zc235。\n\n%%%\n\n就我最菜。\n\n退役力。\n\n自开力。\n\nAFO\n\n## Day 5\n\n要返校了。\n\n学校电脑莫名其妙有一坨电源跳闸了，刚好就有我的，预示我被踢出机房力。\n\n## Day 10\n\n寄了 sa。\n\nNOI 官网出分，数据极限强，T1 满，T2 $25$ 分，T3 爆 $0$，直接退役。\n\n傻逼 T2。\n\n我菜麻了。\n\n真退役力。\n\n## Day N\n\n据说是一等以上全部进省选（同时女生全部进），虽然拿头进省队，但是不用上文化课了，舒服！\n","slug":"noip-2022-travels","published":1,"updated":"2022-12-31T06:17:30.860Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cleid928x002y2sjfbko6b5ig","content":"<p>寄了 sa</p>\n<p>AFO</p>\n<h2 id=\"Day-4-sim-0\"><a href=\"#Day-4-sim-0\" class=\"headerlink\" title=\"Day -4 $\\sim$ 0\"></a>Day -4 $\\sim$ 0</h2><p>这次 NOIP 在绵阳南山考，大家都来 <del>绵阳 5 日游</del> 隔离了，我要也去隔离酒店住几天。</p>\n<p>迫真绵阳 5 日游。</p>\n<p>每天都是早上起来就去 <a href=\"https://sukwants.github.io/\">sgc</a> 和 <a href=\"https://www.luogu.com.cn/blog/snowbamboo/\">syy</a> 的房间 219 做联考题，然后一个同学会了，大家都会了。</p>\n<p>中午吃饭之后找了个餐桌打乒乓。下午基本就是各种颓，ygg 也不组织讨论，一直颓到晚上。晚上就有五六个人待在 219，边颓边看世界杯，还有两天晚上点了外卖。</p>\n<p>后来 <a href=\"https://sukwants.github.io/\">sgc</a> 开始放各种 WC 才艺展示，然后大家都开始听，直接投屏到电视上放《我的一个 OIer 朋友》。估计考场上要单曲循环了。</p>\n<h2 id=\"Day-1-上午\"><a href=\"#Day-1-上午\" class=\"headerlink\" title=\"Day 1 上午\"></a>Day 1 上午</h2><p>11 月 26 号早上 8 点进入了考场，然后配好电脑。</p>\n<p>考试开始后，我依然顺序开题，T1 一眼是傻逼题，只需要以 $\\text{C}$ 和 $\\text{F}$ 的左上角为参照，找 $\\text{C}$ 的最下面一点和 $\\text{F}$ 的中间一点的个数，要计算横或竖长度不同的情况。马上开始写，9 点左右写完。</p>\n<p>T2 看起来像是傻逼题，但是完全没有思路，想了一下 $k&#x3D;2n-2$ 的部分，很容易就想出来了，大概就是前 $n-1$ 个栈每个栈放两个不同的元素，消上面的元素就直接放上去，消下面的元素就放在最后一个栈消。然后想了一个多小时，到了 10:30 还没想出来，放弃去看了一眼 T3。</p>\n<p>T3 看起来很可做，因为只有守割边才有贡献，所以可以做边双缩点然后树形 dp。立马开始码，11 点就码出来了，但是发现过不了大样例，以为边双写挂了，调了一会，然后突然有了一点 T2 的思路，马上又去搞 T2。</p>\n<p>T2 $k&#x3D;2n-1$ 的情况只需要多处理多出来的那一个数 $k$，假设 $k$ 后面的数是 $p$，如果 $p$ 在某一个栈 $A$ 下面，就可以把 $k$ 放到 $A$ 中，然后把 $p$ 放到最后一个栈，两个 $p$ 消掉就可以了。我认为这个算法没有假，马上开始写，但是很多地方写挂了，调了很多次才过大样例，这时候已经 12:55 了，T4 暴力都没来得及打，寄了 sa。</p>\n<p>刚出考场，想了一下 T3 的做法，马上发现一个地方假了，只需要稍微改一下树形 dp 即可，亏麻了。但是 T2 许多人都没思路，又亏麻了。</p>\n<p>后来测了民间数据，T1 没挂，T2 假了，只有大约一半的分，T3 居然有 15 分，大概是 $150 \\sim 170$。寄了 sa，可能省选都进不了。真 ** 不该搞 3h 的 T2，亏麻了，T3 纯纯的傻逼题，5 分钟可以改过。</p>\n<h2 id=\"Day-1-下午\"><a href=\"#Day-1-下午\" class=\"headerlink\" title=\"Day 1 下午\"></a>Day 1 下午</h2><p>一问各个巨佬，都考的比我高。ljy 和季老师大概是 300+，剩下的 1 队也基本 200+，但是看到 yl 在校门口快哭了，默哀。2 队的 <a href=\"https://www.cnblogs.com/Feyn/\">zc</a> 切了 T3，<a href=\"https://www.luogu.com.cn/blog/AIQ/\">lyh</a> 大暴力凑了个 200+，%%%。剩下的貌似我最高，但是拿头进省选。</p>\n<h2 id=\"Day-2-sim-4\"><a href=\"#Day-2-sim-4\" class=\"headerlink\" title=\"Day 2 $\\sim$ 4\"></a>Day 2 $\\sim$ 4</h2><p>从绵阳回来还是要居家隔离 3 天，去了 <a href=\"https://sukwants.github.io/\">sgc</a> 家划水，大概就是天天打 generals.io，再搞点奇妙的技术问题。由于 <a href=\"https://wtyakioi.github.io/\">zsq</a> 和 syy 住的很近，还来一起耍了。</p>\n<p>luogu、infOJ、小图灵都出分了。我引用一下 <a href=\"https://www.cnblogs.com/Feyn/\">zc</a> 博客里小图灵的统计：</p>\n<blockquote>\n<p>zzh299，ljy220，zyt123，xby280，llt280，shr183，yxr86，wzx179，zlx240，cs270，syy76，swc240，zyc170，sgc115，zym200，zsq87，yl29，hyy195，lyh209</p>\n</blockquote>\n<p>再补一个 zc235。</p>\n<p>%%%</p>\n<p>就我最菜。</p>\n<p>退役力。</p>\n<p>自开力。</p>\n<p>AFO</p>\n<h2 id=\"Day-5\"><a href=\"#Day-5\" class=\"headerlink\" title=\"Day 5\"></a>Day 5</h2><p>要返校了。</p>\n<p>学校电脑莫名其妙有一坨电源跳闸了，刚好就有我的，预示我被踢出机房力。</p>\n<h2 id=\"Day-10\"><a href=\"#Day-10\" class=\"headerlink\" title=\"Day 10\"></a>Day 10</h2><p>寄了 sa。</p>\n<p>NOI 官网出分，数据极限强，T1 满，T2 $25$ 分，T3 爆 $0$，直接退役。</p>\n<p>傻逼 T2。</p>\n<p>我菜麻了。</p>\n<p>真退役力。</p>\n<h2 id=\"Day-N\"><a href=\"#Day-N\" class=\"headerlink\" title=\"Day N\"></a>Day N</h2><p>据说是一等以上全部进省选（同时女生全部进），虽然拿头进省队，但是不用上文化课了，舒服！</p>\n","site":{"data":{}},"excerpt":"","more":"<p>寄了 sa</p>\n<p>AFO</p>\n<h2 id=\"Day-4-sim-0\"><a href=\"#Day-4-sim-0\" class=\"headerlink\" title=\"Day -4 $\\sim$ 0\"></a>Day -4 $\\sim$ 0</h2><p>这次 NOIP 在绵阳南山考，大家都来 <del>绵阳 5 日游</del> 隔离了，我要也去隔离酒店住几天。</p>\n<p>迫真绵阳 5 日游。</p>\n<p>每天都是早上起来就去 <a href=\"https://sukwants.github.io/\">sgc</a> 和 <a href=\"https://www.luogu.com.cn/blog/snowbamboo/\">syy</a> 的房间 219 做联考题，然后一个同学会了，大家都会了。</p>\n<p>中午吃饭之后找了个餐桌打乒乓。下午基本就是各种颓，ygg 也不组织讨论，一直颓到晚上。晚上就有五六个人待在 219，边颓边看世界杯，还有两天晚上点了外卖。</p>\n<p>后来 <a href=\"https://sukwants.github.io/\">sgc</a> 开始放各种 WC 才艺展示，然后大家都开始听，直接投屏到电视上放《我的一个 OIer 朋友》。估计考场上要单曲循环了。</p>\n<h2 id=\"Day-1-上午\"><a href=\"#Day-1-上午\" class=\"headerlink\" title=\"Day 1 上午\"></a>Day 1 上午</h2><p>11 月 26 号早上 8 点进入了考场，然后配好电脑。</p>\n<p>考试开始后，我依然顺序开题，T1 一眼是傻逼题，只需要以 $\\text{C}$ 和 $\\text{F}$ 的左上角为参照，找 $\\text{C}$ 的最下面一点和 $\\text{F}$ 的中间一点的个数，要计算横或竖长度不同的情况。马上开始写，9 点左右写完。</p>\n<p>T2 看起来像是傻逼题，但是完全没有思路，想了一下 $k&#x3D;2n-2$ 的部分，很容易就想出来了，大概就是前 $n-1$ 个栈每个栈放两个不同的元素，消上面的元素就直接放上去，消下面的元素就放在最后一个栈消。然后想了一个多小时，到了 10:30 还没想出来，放弃去看了一眼 T3。</p>\n<p>T3 看起来很可做，因为只有守割边才有贡献，所以可以做边双缩点然后树形 dp。立马开始码，11 点就码出来了，但是发现过不了大样例，以为边双写挂了，调了一会，然后突然有了一点 T2 的思路，马上又去搞 T2。</p>\n<p>T2 $k&#x3D;2n-1$ 的情况只需要多处理多出来的那一个数 $k$，假设 $k$ 后面的数是 $p$，如果 $p$ 在某一个栈 $A$ 下面，就可以把 $k$ 放到 $A$ 中，然后把 $p$ 放到最后一个栈，两个 $p$ 消掉就可以了。我认为这个算法没有假，马上开始写，但是很多地方写挂了，调了很多次才过大样例，这时候已经 12:55 了，T4 暴力都没来得及打，寄了 sa。</p>\n<p>刚出考场，想了一下 T3 的做法，马上发现一个地方假了，只需要稍微改一下树形 dp 即可，亏麻了。但是 T2 许多人都没思路，又亏麻了。</p>\n<p>后来测了民间数据，T1 没挂，T2 假了，只有大约一半的分，T3 居然有 15 分，大概是 $150 \\sim 170$。寄了 sa，可能省选都进不了。真 ** 不该搞 3h 的 T2，亏麻了，T3 纯纯的傻逼题，5 分钟可以改过。</p>\n<h2 id=\"Day-1-下午\"><a href=\"#Day-1-下午\" class=\"headerlink\" title=\"Day 1 下午\"></a>Day 1 下午</h2><p>一问各个巨佬，都考的比我高。ljy 和季老师大概是 300+，剩下的 1 队也基本 200+，但是看到 yl 在校门口快哭了，默哀。2 队的 <a href=\"https://www.cnblogs.com/Feyn/\">zc</a> 切了 T3，<a href=\"https://www.luogu.com.cn/blog/AIQ/\">lyh</a> 大暴力凑了个 200+，%%%。剩下的貌似我最高，但是拿头进省选。</p>\n<h2 id=\"Day-2-sim-4\"><a href=\"#Day-2-sim-4\" class=\"headerlink\" title=\"Day 2 $\\sim$ 4\"></a>Day 2 $\\sim$ 4</h2><p>从绵阳回来还是要居家隔离 3 天，去了 <a href=\"https://sukwants.github.io/\">sgc</a> 家划水，大概就是天天打 generals.io，再搞点奇妙的技术问题。由于 <a href=\"https://wtyakioi.github.io/\">zsq</a> 和 syy 住的很近，还来一起耍了。</p>\n<p>luogu、infOJ、小图灵都出分了。我引用一下 <a href=\"https://www.cnblogs.com/Feyn/\">zc</a> 博客里小图灵的统计：</p>\n<blockquote>\n<p>zzh299，ljy220，zyt123，xby280，llt280，shr183，yxr86，wzx179，zlx240，cs270，syy76，swc240，zyc170，sgc115，zym200，zsq87，yl29，hyy195，lyh209</p>\n</blockquote>\n<p>再补一个 zc235。</p>\n<p>%%%</p>\n<p>就我最菜。</p>\n<p>退役力。</p>\n<p>自开力。</p>\n<p>AFO</p>\n<h2 id=\"Day-5\"><a href=\"#Day-5\" class=\"headerlink\" title=\"Day 5\"></a>Day 5</h2><p>要返校了。</p>\n<p>学校电脑莫名其妙有一坨电源跳闸了，刚好就有我的，预示我被踢出机房力。</p>\n<h2 id=\"Day-10\"><a href=\"#Day-10\" class=\"headerlink\" title=\"Day 10\"></a>Day 10</h2><p>寄了 sa。</p>\n<p>NOI 官网出分，数据极限强，T1 满，T2 $25$ 分，T3 爆 $0$，直接退役。</p>\n<p>傻逼 T2。</p>\n<p>我菜麻了。</p>\n<p>真退役力。</p>\n<h2 id=\"Day-N\"><a href=\"#Day-N\" class=\"headerlink\" title=\"Day N\"></a>Day N</h2><p>据说是一等以上全部进省选（同时女生全部进），虽然拿头进省队，但是不用上文化课了，舒服！</p>\n"},{"title":"退役记","date":"2022-12-06T04:17:00.000Z","description":" ","_content":"\n## 2022-12-06\n\n中午查到 NOIP 的分了，125，直接退役。\n\n可能还是比较遗憾的吧。\n\nNOIP 的 T1 和 T3 都是傻逼题，T2 比较难，T4 对我来说就不要想了。\n\n在 NOIP 考场上被 T2 卡三个多小时简直太傻逼了，可能我并没有调整好状态，NOIP 的时候还是平常做题的状态，完全忘了考试应该怎么考，可能和平时联考太水有很大关系。\n\n当然，T2 在后来看起来也挺傻逼的，当时思路方向偏了一点点，思维方面还有待加强。\n\n晚上就被叶老约谈了，大概就是进省选继续搞，没进回 whk。也只能这样了，没办法，虽然我很不想回。\n\n结束了 sa。\n\n明年再见了。\n\nDC 巨佬应该都考的很好，要被 zwh 拿去当反面教材了。\n\n数了一下，这次林荫总共进了 13 个人，高新 3 个，进的人差不多就保送省队了。\n\n突然感觉亏麻了，* * * * * * *。\n\n但是可以先恭喜 zc 和 lyh 保送省队 sa。","source":"_posts/retirement-record.md","raw":"---\ntitle: '退役记'\ndate: 2022-12-06 12:17:00\ntags: \ndescription: ' '\n\n---\n\n## 2022-12-06\n\n中午查到 NOIP 的分了，125，直接退役。\n\n可能还是比较遗憾的吧。\n\nNOIP 的 T1 和 T3 都是傻逼题，T2 比较难，T4 对我来说就不要想了。\n\n在 NOIP 考场上被 T2 卡三个多小时简直太傻逼了，可能我并没有调整好状态，NOIP 的时候还是平常做题的状态，完全忘了考试应该怎么考，可能和平时联考太水有很大关系。\n\n当然，T2 在后来看起来也挺傻逼的，当时思路方向偏了一点点，思维方面还有待加强。\n\n晚上就被叶老约谈了，大概就是进省选继续搞，没进回 whk。也只能这样了，没办法，虽然我很不想回。\n\n结束了 sa。\n\n明年再见了。\n\nDC 巨佬应该都考的很好，要被 zwh 拿去当反面教材了。\n\n数了一下，这次林荫总共进了 13 个人，高新 3 个，进的人差不多就保送省队了。\n\n突然感觉亏麻了，* * * * * * *。\n\n但是可以先恭喜 zc 和 lyh 保送省队 sa。","slug":"retirement-record","published":1,"updated":"2022-12-06T10:52:15.260Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cleid928z00302sjf9hz6ed1l","content":"<h2 id=\"2022-12-06\"><a href=\"#2022-12-06\" class=\"headerlink\" title=\"2022-12-06\"></a>2022-12-06</h2><p>中午查到 NOIP 的分了，125，直接退役。</p>\n<p>可能还是比较遗憾的吧。</p>\n<p>NOIP 的 T1 和 T3 都是傻逼题，T2 比较难，T4 对我来说就不要想了。</p>\n<p>在 NOIP 考场上被 T2 卡三个多小时简直太傻逼了，可能我并没有调整好状态，NOIP 的时候还是平常做题的状态，完全忘了考试应该怎么考，可能和平时联考太水有很大关系。</p>\n<p>当然，T2 在后来看起来也挺傻逼的，当时思路方向偏了一点点，思维方面还有待加强。</p>\n<p>晚上就被叶老约谈了，大概就是进省选继续搞，没进回 whk。也只能这样了，没办法，虽然我很不想回。</p>\n<p>结束了 sa。</p>\n<p>明年再见了。</p>\n<p>DC 巨佬应该都考的很好，要被 zwh 拿去当反面教材了。</p>\n<p>数了一下，这次林荫总共进了 13 个人，高新 3 个，进的人差不多就保送省队了。</p>\n<p>突然感觉亏麻了，* * * * * * *。</p>\n<p>但是可以先恭喜 zc 和 lyh 保送省队 sa。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"2022-12-06\"><a href=\"#2022-12-06\" class=\"headerlink\" title=\"2022-12-06\"></a>2022-12-06</h2><p>中午查到 NOIP 的分了，125，直接退役。</p>\n<p>可能还是比较遗憾的吧。</p>\n<p>NOIP 的 T1 和 T3 都是傻逼题，T2 比较难，T4 对我来说就不要想了。</p>\n<p>在 NOIP 考场上被 T2 卡三个多小时简直太傻逼了，可能我并没有调整好状态，NOIP 的时候还是平常做题的状态，完全忘了考试应该怎么考，可能和平时联考太水有很大关系。</p>\n<p>当然，T2 在后来看起来也挺傻逼的，当时思路方向偏了一点点，思维方面还有待加强。</p>\n<p>晚上就被叶老约谈了，大概就是进省选继续搞，没进回 whk。也只能这样了，没办法，虽然我很不想回。</p>\n<p>结束了 sa。</p>\n<p>明年再见了。</p>\n<p>DC 巨佬应该都考的很好，要被 zwh 拿去当反面教材了。</p>\n<p>数了一下，这次林荫总共进了 13 个人，高新 3 个，进的人差不多就保送省队了。</p>\n<p>突然感觉亏麻了，* * * * * * *。</p>\n<p>但是可以先恭喜 zc 和 lyh 保送省队 sa。</p>\n"},{"title":"WC 2023 游记","date":"2023-01-17T07:00:00.000Z","description":" ","_content":"## Day 0\n\n这次 WC 除集训队选手都是在线上，通过腾讯会议来上课。今天晚上开幕式属实离谱，放 CCF 宣传片，成都宣传片，cdqz 宣传片，然后一车人讲话，然后一车表演。CCF 的宣传片（PV），总共用标准的发音读了不下二十次的 C C F，放完之后就满脑子的标准发音读的 C C F，包括后面课间都要放。然后一车领导上去讲话（没有 ygg，悲），第一句话统一「尊敬的~~肚子的~~dzd主席」，然后背一通政治书。最后再来一波离大谱的表演，这玩意是 WC 的开幕式？和 OI 有毛线关系啊。\n\n## Day 1 $\\sim$ 5\n\n上课。\n\n基本上都是去的一课，但是第一节二课是 ygg 讲 「矩阵神法 & 动态 dp」，那肯定得去捧场啊。\n\n后面几节课都挺一般，一般听完前几道题就跑了，把这几道题做了基本上就完了。但是在一课中，有这样一位人物，WC 人尽皆知，他就是我们的罗老师[罗宜](https://www.zhihu.com/question/578857489/answer/2848819013)。当然他只是代表，讨论区里听不懂提问的很多（包括「什么是网络流」「什么是线段树」）老师解答浪费了很多时间（我声称 ygg 是讲的最好的，因为他不看评论区）。\n\n也有 CCF 的不完全迷惑的操作，[如何评价WC2023课程休息时间中有人因为发了一个“草”而被禁止上课一天？](https://www.zhihu.com/question/578498940)。其实在教室里说脏话确实该被处罚，但是评论区有很多其他的影响上课的迷惑行为，比如刷无意义内容、问脑瘫问题，单刷一个 「草」相比于这些影响还是比较小吧。但也有可能是 CCF 的迷惑操作，之前不也有代码里有「暴戾语言」被禁三的。再说你要不要看看说的对象：\n\n![1](/post-images/wc-2023-travels-1.png)\n\n不好评价。\n\n## Day 6\n\n啊哈 CCF 居然不监考，那不是 ACM 赛制。\n\n本来是早上 8:30 开始测试，结果一大早起来变九点了。。。\n\n先看题，T1 想不到什么好的数据结构维护，但是 $m a_{max}$ 还是比较显然的。T2 连多项式算法都不会，暴力 16 分。T3 感觉很可做，先放着。\n\n开 T1，$m a_{max}$ 只有 25 分，想怎么把值域给干掉。不久后想到 $a$ 的有效值的个数只有 $O(m)$ 个，这样就可以 $O(m)$ 查询，修改直接暴力 $O(m)$ 了，懒得搞，可持久化也不用了，暴力复杂度是对的。一个小时的时候开始写 T1，大概一个半小时后调完，自己写的 checker，不知道有没有锅（脑瘫 CCF 又没有 checker），估 35 分。\n\n想 T3，因为大的会覆盖小的，所以从值小的开始推，显然当前值最小为 $q$ 的点中有且仅有一个通过边 $q$ 直接连的根节点，交换当前最小边 $p$ 和 $q$，现在值为 $p$ 的点 $t$ 就是和根节点相连的点，将这个点和根节点合并，问题规模缩小为 $n-1$。但是如果合并后的根节点不止一个点，我们还要准确的求出它的父亲，只需要把合并根节点包含的所有除了 $1$ 的点到它父亲的边与 $p$ 交换，看 $t$ 的值是否变化，取深度最大的点作为父亲即可。操作一的次数大约是 $n^2$，操作二是 $1.5n^2$。\n\n在写 T3 之前我先把 T2 暴力写了，估 16 分。然后写 T3，写了一个多小时，能过第三个大样例，估 36 分。\n\n总分估 50 吧，我声称要挂飞。\n\nWC 打铁！~~原地退役。~~\n\n## Day 7\n\n出分。\n\n$40 + 8 + 36 = 84$\n\nT1 多 hao 了 5 分，T2 数组开小挂了 8 分。\n\n线 $\\text{Au} \\ \\ 89,\\text{Ag} \\ \\ 56,\\text{Cu} \\ \\ 24$。\n\n~~（差 5 分 Au，亏麻了）~~\n\n\n\n","source":"_posts/wc-2023-travels.md","raw":"---\ntitle: 'WC 2023 游记'\ndate: 2023-01-17 15:00:00\ntags: [游记]\ndescription: ' '\n---\n## Day 0\n\n这次 WC 除集训队选手都是在线上，通过腾讯会议来上课。今天晚上开幕式属实离谱，放 CCF 宣传片，成都宣传片，cdqz 宣传片，然后一车人讲话，然后一车表演。CCF 的宣传片（PV），总共用标准的发音读了不下二十次的 C C F，放完之后就满脑子的标准发音读的 C C F，包括后面课间都要放。然后一车领导上去讲话（没有 ygg，悲），第一句话统一「尊敬的~~肚子的~~dzd主席」，然后背一通政治书。最后再来一波离大谱的表演，这玩意是 WC 的开幕式？和 OI 有毛线关系啊。\n\n## Day 1 $\\sim$ 5\n\n上课。\n\n基本上都是去的一课，但是第一节二课是 ygg 讲 「矩阵神法 & 动态 dp」，那肯定得去捧场啊。\n\n后面几节课都挺一般，一般听完前几道题就跑了，把这几道题做了基本上就完了。但是在一课中，有这样一位人物，WC 人尽皆知，他就是我们的罗老师[罗宜](https://www.zhihu.com/question/578857489/answer/2848819013)。当然他只是代表，讨论区里听不懂提问的很多（包括「什么是网络流」「什么是线段树」）老师解答浪费了很多时间（我声称 ygg 是讲的最好的，因为他不看评论区）。\n\n也有 CCF 的不完全迷惑的操作，[如何评价WC2023课程休息时间中有人因为发了一个“草”而被禁止上课一天？](https://www.zhihu.com/question/578498940)。其实在教室里说脏话确实该被处罚，但是评论区有很多其他的影响上课的迷惑行为，比如刷无意义内容、问脑瘫问题，单刷一个 「草」相比于这些影响还是比较小吧。但也有可能是 CCF 的迷惑操作，之前不也有代码里有「暴戾语言」被禁三的。再说你要不要看看说的对象：\n\n![1](/post-images/wc-2023-travels-1.png)\n\n不好评价。\n\n## Day 6\n\n啊哈 CCF 居然不监考，那不是 ACM 赛制。\n\n本来是早上 8:30 开始测试，结果一大早起来变九点了。。。\n\n先看题，T1 想不到什么好的数据结构维护，但是 $m a_{max}$ 还是比较显然的。T2 连多项式算法都不会，暴力 16 分。T3 感觉很可做，先放着。\n\n开 T1，$m a_{max}$ 只有 25 分，想怎么把值域给干掉。不久后想到 $a$ 的有效值的个数只有 $O(m)$ 个，这样就可以 $O(m)$ 查询，修改直接暴力 $O(m)$ 了，懒得搞，可持久化也不用了，暴力复杂度是对的。一个小时的时候开始写 T1，大概一个半小时后调完，自己写的 checker，不知道有没有锅（脑瘫 CCF 又没有 checker），估 35 分。\n\n想 T3，因为大的会覆盖小的，所以从值小的开始推，显然当前值最小为 $q$ 的点中有且仅有一个通过边 $q$ 直接连的根节点，交换当前最小边 $p$ 和 $q$，现在值为 $p$ 的点 $t$ 就是和根节点相连的点，将这个点和根节点合并，问题规模缩小为 $n-1$。但是如果合并后的根节点不止一个点，我们还要准确的求出它的父亲，只需要把合并根节点包含的所有除了 $1$ 的点到它父亲的边与 $p$ 交换，看 $t$ 的值是否变化，取深度最大的点作为父亲即可。操作一的次数大约是 $n^2$，操作二是 $1.5n^2$。\n\n在写 T3 之前我先把 T2 暴力写了，估 16 分。然后写 T3，写了一个多小时，能过第三个大样例，估 36 分。\n\n总分估 50 吧，我声称要挂飞。\n\nWC 打铁！~~原地退役。~~\n\n## Day 7\n\n出分。\n\n$40 + 8 + 36 = 84$\n\nT1 多 hao 了 5 分，T2 数组开小挂了 8 分。\n\n线 $\\text{Au} \\ \\ 89,\\text{Ag} \\ \\ 56,\\text{Cu} \\ \\ 24$。\n\n~~（差 5 分 Au，亏麻了）~~\n\n\n\n","slug":"wc-2023-travels","published":1,"updated":"2023-03-06T11:04:57.635Z","_id":"cleid929000322sjfbj1d8otc","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"Day-0\"><a href=\"#Day-0\" class=\"headerlink\" title=\"Day 0\"></a>Day 0</h2><p>这次 WC 除集训队选手都是在线上，通过腾讯会议来上课。今天晚上开幕式属实离谱，放 CCF 宣传片，成都宣传片，cdqz 宣传片，然后一车人讲话，然后一车表演。CCF 的宣传片（PV），总共用标准的发音读了不下二十次的 C C F，放完之后就满脑子的标准发音读的 C C F，包括后面课间都要放。然后一车领导上去讲话（没有 ygg，悲），第一句话统一「尊敬的<del>肚子的</del>dzd主席」，然后背一通政治书。最后再来一波离大谱的表演，这玩意是 WC 的开幕式？和 OI 有毛线关系啊。</p>\n<h2 id=\"Day-1-sim-5\"><a href=\"#Day-1-sim-5\" class=\"headerlink\" title=\"Day 1 $\\sim$ 5\"></a>Day 1 $\\sim$ 5</h2><p>上课。</p>\n<p>基本上都是去的一课，但是第一节二课是 ygg 讲 「矩阵神法 &amp; 动态 dp」，那肯定得去捧场啊。</p>\n<p>后面几节课都挺一般，一般听完前几道题就跑了，把这几道题做了基本上就完了。但是在一课中，有这样一位人物，WC 人尽皆知，他就是我们的罗老师<a href=\"https://www.zhihu.com/question/578857489/answer/2848819013\">罗宜</a>。当然他只是代表，讨论区里听不懂提问的很多（包括「什么是网络流」「什么是线段树」）老师解答浪费了很多时间（我声称 ygg 是讲的最好的，因为他不看评论区）。</p>\n<p>也有 CCF 的不完全迷惑的操作，<a href=\"https://www.zhihu.com/question/578498940\">如何评价WC2023课程休息时间中有人因为发了一个“草”而被禁止上课一天？</a>。其实在教室里说脏话确实该被处罚，但是评论区有很多其他的影响上课的迷惑行为，比如刷无意义内容、问脑瘫问题，单刷一个 「草」相比于这些影响还是比较小吧。但也有可能是 CCF 的迷惑操作，之前不也有代码里有「暴戾语言」被禁三的。再说你要不要看看说的对象：</p>\n<p><img src=\"/post-images/wc-2023-travels-1.png\" alt=\"1\"></p>\n<p>不好评价。</p>\n<h2 id=\"Day-6\"><a href=\"#Day-6\" class=\"headerlink\" title=\"Day 6\"></a>Day 6</h2><p>啊哈 CCF 居然不监考，那不是 ACM 赛制。</p>\n<p>本来是早上 8:30 开始测试，结果一大早起来变九点了。。。</p>\n<p>先看题，T1 想不到什么好的数据结构维护，但是 $m a_{max}$ 还是比较显然的。T2 连多项式算法都不会，暴力 16 分。T3 感觉很可做，先放着。</p>\n<p>开 T1，$m a_{max}$ 只有 25 分，想怎么把值域给干掉。不久后想到 $a$ 的有效值的个数只有 $O(m)$ 个，这样就可以 $O(m)$ 查询，修改直接暴力 $O(m)$ 了，懒得搞，可持久化也不用了，暴力复杂度是对的。一个小时的时候开始写 T1，大概一个半小时后调完，自己写的 checker，不知道有没有锅（脑瘫 CCF 又没有 checker），估 35 分。</p>\n<p>想 T3，因为大的会覆盖小的，所以从值小的开始推，显然当前值最小为 $q$ 的点中有且仅有一个通过边 $q$ 直接连的根节点，交换当前最小边 $p$ 和 $q$，现在值为 $p$ 的点 $t$ 就是和根节点相连的点，将这个点和根节点合并，问题规模缩小为 $n-1$。但是如果合并后的根节点不止一个点，我们还要准确的求出它的父亲，只需要把合并根节点包含的所有除了 $1$ 的点到它父亲的边与 $p$ 交换，看 $t$ 的值是否变化，取深度最大的点作为父亲即可。操作一的次数大约是 $n^2$，操作二是 $1.5n^2$。</p>\n<p>在写 T3 之前我先把 T2 暴力写了，估 16 分。然后写 T3，写了一个多小时，能过第三个大样例，估 36 分。</p>\n<p>总分估 50 吧，我声称要挂飞。</p>\n<p>WC 打铁！<del>原地退役。</del></p>\n<h2 id=\"Day-7\"><a href=\"#Day-7\" class=\"headerlink\" title=\"Day 7\"></a>Day 7</h2><p>出分。</p>\n<p>$40 + 8 + 36 &#x3D; 84$</p>\n<p>T1 多 hao 了 5 分，T2 数组开小挂了 8 分。</p>\n<p>线 $\\text{Au} \\ \\ 89,\\text{Ag} \\ \\ 56,\\text{Cu} \\ \\ 24$。</p>\n<p><del>（差 5 分 Au，亏麻了）</del></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Day-0\"><a href=\"#Day-0\" class=\"headerlink\" title=\"Day 0\"></a>Day 0</h2><p>这次 WC 除集训队选手都是在线上，通过腾讯会议来上课。今天晚上开幕式属实离谱，放 CCF 宣传片，成都宣传片，cdqz 宣传片，然后一车人讲话，然后一车表演。CCF 的宣传片（PV），总共用标准的发音读了不下二十次的 C C F，放完之后就满脑子的标准发音读的 C C F，包括后面课间都要放。然后一车领导上去讲话（没有 ygg，悲），第一句话统一「尊敬的<del>肚子的</del>dzd主席」，然后背一通政治书。最后再来一波离大谱的表演，这玩意是 WC 的开幕式？和 OI 有毛线关系啊。</p>\n<h2 id=\"Day-1-sim-5\"><a href=\"#Day-1-sim-5\" class=\"headerlink\" title=\"Day 1 $\\sim$ 5\"></a>Day 1 $\\sim$ 5</h2><p>上课。</p>\n<p>基本上都是去的一课，但是第一节二课是 ygg 讲 「矩阵神法 &amp; 动态 dp」，那肯定得去捧场啊。</p>\n<p>后面几节课都挺一般，一般听完前几道题就跑了，把这几道题做了基本上就完了。但是在一课中，有这样一位人物，WC 人尽皆知，他就是我们的罗老师<a href=\"https://www.zhihu.com/question/578857489/answer/2848819013\">罗宜</a>。当然他只是代表，讨论区里听不懂提问的很多（包括「什么是网络流」「什么是线段树」）老师解答浪费了很多时间（我声称 ygg 是讲的最好的，因为他不看评论区）。</p>\n<p>也有 CCF 的不完全迷惑的操作，<a href=\"https://www.zhihu.com/question/578498940\">如何评价WC2023课程休息时间中有人因为发了一个“草”而被禁止上课一天？</a>。其实在教室里说脏话确实该被处罚，但是评论区有很多其他的影响上课的迷惑行为，比如刷无意义内容、问脑瘫问题，单刷一个 「草」相比于这些影响还是比较小吧。但也有可能是 CCF 的迷惑操作，之前不也有代码里有「暴戾语言」被禁三的。再说你要不要看看说的对象：</p>\n<p><img src=\"/post-images/wc-2023-travels-1.png\" alt=\"1\"></p>\n<p>不好评价。</p>\n<h2 id=\"Day-6\"><a href=\"#Day-6\" class=\"headerlink\" title=\"Day 6\"></a>Day 6</h2><p>啊哈 CCF 居然不监考，那不是 ACM 赛制。</p>\n<p>本来是早上 8:30 开始测试，结果一大早起来变九点了。。。</p>\n<p>先看题，T1 想不到什么好的数据结构维护，但是 $m a_{max}$ 还是比较显然的。T2 连多项式算法都不会，暴力 16 分。T3 感觉很可做，先放着。</p>\n<p>开 T1，$m a_{max}$ 只有 25 分，想怎么把值域给干掉。不久后想到 $a$ 的有效值的个数只有 $O(m)$ 个，这样就可以 $O(m)$ 查询，修改直接暴力 $O(m)$ 了，懒得搞，可持久化也不用了，暴力复杂度是对的。一个小时的时候开始写 T1，大概一个半小时后调完，自己写的 checker，不知道有没有锅（脑瘫 CCF 又没有 checker），估 35 分。</p>\n<p>想 T3，因为大的会覆盖小的，所以从值小的开始推，显然当前值最小为 $q$ 的点中有且仅有一个通过边 $q$ 直接连的根节点，交换当前最小边 $p$ 和 $q$，现在值为 $p$ 的点 $t$ 就是和根节点相连的点，将这个点和根节点合并，问题规模缩小为 $n-1$。但是如果合并后的根节点不止一个点，我们还要准确的求出它的父亲，只需要把合并根节点包含的所有除了 $1$ 的点到它父亲的边与 $p$ 交换，看 $t$ 的值是否变化，取深度最大的点作为父亲即可。操作一的次数大约是 $n^2$，操作二是 $1.5n^2$。</p>\n<p>在写 T3 之前我先把 T2 暴力写了，估 16 分。然后写 T3，写了一个多小时，能过第三个大样例，估 36 分。</p>\n<p>总分估 50 吧，我声称要挂飞。</p>\n<p>WC 打铁！<del>原地退役。</del></p>\n<h2 id=\"Day-7\"><a href=\"#Day-7\" class=\"headerlink\" title=\"Day 7\"></a>Day 7</h2><p>出分。</p>\n<p>$40 + 8 + 36 &#x3D; 84$</p>\n<p>T1 多 hao 了 5 分，T2 数组开小挂了 8 分。</p>\n<p>线 $\\text{Au} \\ \\ 89,\\text{Ag} \\ \\ 56,\\text{Cu} \\ \\ 24$。</p>\n<p><del>（差 5 分 Au，亏麻了）</del></p>\n"},{"title":"CF1340F 题解","date":"2023-02-24T10:26:04.000Z","description":" ","_content":"\n## 题意\n\n给定一个长为 $n$ 的有 $k$ 种括号的括号序列，$q$ 个操作，每次操作修改一个位置的字符或查询一个区间是否为合法括号序列。\n\n## 思路\n\n显然朴素的做法是维护一个栈来判断。\n\n我们可以考虑分块，每一块维护这一块的栈然后合并之类的。\n\n对于每一块，由于它前面可能还有东西，所以最前面的右括号被认为是合法的。同理最后的左括号也是合法的，剩下的就应该被消完。也就是一个序列是合法的当且仅当这个序列消除完之后是由一段右括号接上一段左括号组成的，我们只需要维护这个东西即可。\n\n但是我们在合并两个块的时候，显然需要判断一段左括号与一段右括号能不能匹配，暴力复杂度可能达到 $O(\\text{块长})$，无法接受。考虑使用哈希判断，维护左右括号序列的前缀哈希，具体的维护从外层到内层的哈希，方便添加东西。\n\n如果合并时我们依然用栈来维护左括号，复杂度还是 $O(n)$ 的，但是左括号序列可以划分成很多段，每一段来自同一块，我们只需要用 vector 来维护每一段的长度和前缀哈希，用一个指针指向算好的哈希数组。而最左边和最右边的散块暴力处理。\n\n修改时我们只需要暴力重构某一个块即可。\n\n## code\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<cmath>\nusing namespace std;\ntypedef long long ll;\nconst ll P=1e9+7;\nconst int N=200001,M=500,K=3;\nint n,m,q,a[N],b1[N],b2[N],g1[N],g2[N],T,S1[N],T1,S2[N],T2;\nbool h[M];\nll f1[M][M],f2[M][M],f3[M],f4[M],powb[N];\nstruct str\n{\n    int g;\n    ll *f;\n    str(){}\n    str(int g,ll *f):g(g),f(f){}\n}S[N];\nbool solve(int l,int r)\n{\n    T1=T2=0;\n    for(int i=l;i<=r;++i)\n    {\n        if(a[i]>0) S2[++T2]=a[i];\n        else\n        {\n            if(T2==0) S1[++T1]=-a[i];\n            else if(S2[T2]!=-a[i]) return false;\n            else --T2;\n        }\n    }\n    return true;\n}\nvoid build(int x)\n{\n    h[x]=true;\n    if(solve(b1[x-1]+1,b1[x])==false)\n    {\n        h[x]=false;\n        return;\n    }\n    g1[x]=T1,g2[x]=T2;\n    for(int i=1;i<=T1;++i)\n    {\n        f1[x][i]=(f1[x][i-1]*K+S1[T1-i+1])%P;\n    }\n    for(int i=1;i<=T2;++i)\n    {\n        f2[x][i]=(f2[x][i-1]*K+S2[i])%P;\n    }\n}\nbool check(int x,ll *f)\n{\n    while(x>0&&T>0)\n    {\n        int z=min(S[T].g,x);\n        if(((S[T].f[S[T].g]-S[T].f[S[T].g-z]*powb[z]%P)%P+P)%P!=((f[x]-f[x-z]*powb[z]%P)%P+P)%P) return false;\n        S[T].g-=z;\n        x-=z;\n        if(S[T].g==0) --T;\n    }\n    if(T==0&&x!=0) return false;\n    return true;\n}\nbool query(int l,int r)\n{\n    if(b2[l]==b2[r])\n    {\n        if(solve(l,r)==false) return false;\n        if(T1!=0||T2!=0) return false;\n        return true;\n    }\n    T=0;\n    if(solve(l,b1[b2[l]])==false) return false;\n    if(T1!=0) return false;\n    for(int i=1;i<=T2;++i) f3[i]=(f3[i-1]*K+S2[i])%P;\n    if(T2!=0) S[++T]=str(T2,f3);\n    for(int i=b2[l]+1;i<=b2[r]-1;++i)\n    {\n        if(h[i]==false) return false;\n        if(check(g1[i],f1[i])==false) return false;\n        if(g2[i]!=0) S[++T]=str(g2[i],f2[i]);\n    }\n    if(solve(b1[b2[r]-1]+1,r)==false) return false;\n    for(int i=1;i<=T1;++i) f4[i]=(f4[i-1]*K+S1[T1-i+1])%P;\n    if(check(T1,f4)==false) return false;\n    while(T>=1&&S[T].g==0) --T;\n    if(T2!=0||T!=0) return false;\n    return true;\n}\nint main()\n{\n    scanf(\"%d%*d\",&n);\n    for(int i=1;i<=n;++i)\n    {\n        scanf(\"%d\",&a[i]);\n    }\n    powb[0]=1;\n    for(int i=1;i<=n;++i) powb[i]=powb[i-1]*K%P;\n    q=sqrt(n);\n    for(int i=1;i<=q;++i) b1[i]=(n/q)*i;\n    b1[q]=n;\n    for(int i=1;i<=q;++i)\n    {\n        for(int j=b1[i-1]+1;j<=b1[i];++j) b2[j]=i;\n    }\n    for(int i=1;i<=q;++i) build(i);\n    scanf(\"%d\",&m);\n    for(int i=1;i<=m;++i)\n    {\n        int z;\n        scanf(\"%d\",&z);\n        if(z==1)\n        {\n            int x,k;\n            scanf(\"%d%d\",&x,&k);\n            a[x]=k;\n            build(b2[x]);\n        }\n        else if(z==2)\n        {\n            int l,r;\n            scanf(\"%d%d\",&l,&r);\n            if(query(l,r)) printf(\"Yes\\n\");\n            else printf(\"No\\n\");\n        }\n    }\n    return 0;\n}\n```\n\n\n\n","source":"_posts/CF1340F-solution.md","raw":"---\ntitle: 'CF1340F 题解'\ndate: 2023-02-24 18:26:04\ntags: [CF]\ndescription: ' '\n---\n\n## 题意\n\n给定一个长为 $n$ 的有 $k$ 种括号的括号序列，$q$ 个操作，每次操作修改一个位置的字符或查询一个区间是否为合法括号序列。\n\n## 思路\n\n显然朴素的做法是维护一个栈来判断。\n\n我们可以考虑分块，每一块维护这一块的栈然后合并之类的。\n\n对于每一块，由于它前面可能还有东西，所以最前面的右括号被认为是合法的。同理最后的左括号也是合法的，剩下的就应该被消完。也就是一个序列是合法的当且仅当这个序列消除完之后是由一段右括号接上一段左括号组成的，我们只需要维护这个东西即可。\n\n但是我们在合并两个块的时候，显然需要判断一段左括号与一段右括号能不能匹配，暴力复杂度可能达到 $O(\\text{块长})$，无法接受。考虑使用哈希判断，维护左右括号序列的前缀哈希，具体的维护从外层到内层的哈希，方便添加东西。\n\n如果合并时我们依然用栈来维护左括号，复杂度还是 $O(n)$ 的，但是左括号序列可以划分成很多段，每一段来自同一块，我们只需要用 vector 来维护每一段的长度和前缀哈希，用一个指针指向算好的哈希数组。而最左边和最右边的散块暴力处理。\n\n修改时我们只需要暴力重构某一个块即可。\n\n## code\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<cmath>\nusing namespace std;\ntypedef long long ll;\nconst ll P=1e9+7;\nconst int N=200001,M=500,K=3;\nint n,m,q,a[N],b1[N],b2[N],g1[N],g2[N],T,S1[N],T1,S2[N],T2;\nbool h[M];\nll f1[M][M],f2[M][M],f3[M],f4[M],powb[N];\nstruct str\n{\n    int g;\n    ll *f;\n    str(){}\n    str(int g,ll *f):g(g),f(f){}\n}S[N];\nbool solve(int l,int r)\n{\n    T1=T2=0;\n    for(int i=l;i<=r;++i)\n    {\n        if(a[i]>0) S2[++T2]=a[i];\n        else\n        {\n            if(T2==0) S1[++T1]=-a[i];\n            else if(S2[T2]!=-a[i]) return false;\n            else --T2;\n        }\n    }\n    return true;\n}\nvoid build(int x)\n{\n    h[x]=true;\n    if(solve(b1[x-1]+1,b1[x])==false)\n    {\n        h[x]=false;\n        return;\n    }\n    g1[x]=T1,g2[x]=T2;\n    for(int i=1;i<=T1;++i)\n    {\n        f1[x][i]=(f1[x][i-1]*K+S1[T1-i+1])%P;\n    }\n    for(int i=1;i<=T2;++i)\n    {\n        f2[x][i]=(f2[x][i-1]*K+S2[i])%P;\n    }\n}\nbool check(int x,ll *f)\n{\n    while(x>0&&T>0)\n    {\n        int z=min(S[T].g,x);\n        if(((S[T].f[S[T].g]-S[T].f[S[T].g-z]*powb[z]%P)%P+P)%P!=((f[x]-f[x-z]*powb[z]%P)%P+P)%P) return false;\n        S[T].g-=z;\n        x-=z;\n        if(S[T].g==0) --T;\n    }\n    if(T==0&&x!=0) return false;\n    return true;\n}\nbool query(int l,int r)\n{\n    if(b2[l]==b2[r])\n    {\n        if(solve(l,r)==false) return false;\n        if(T1!=0||T2!=0) return false;\n        return true;\n    }\n    T=0;\n    if(solve(l,b1[b2[l]])==false) return false;\n    if(T1!=0) return false;\n    for(int i=1;i<=T2;++i) f3[i]=(f3[i-1]*K+S2[i])%P;\n    if(T2!=0) S[++T]=str(T2,f3);\n    for(int i=b2[l]+1;i<=b2[r]-1;++i)\n    {\n        if(h[i]==false) return false;\n        if(check(g1[i],f1[i])==false) return false;\n        if(g2[i]!=0) S[++T]=str(g2[i],f2[i]);\n    }\n    if(solve(b1[b2[r]-1]+1,r)==false) return false;\n    for(int i=1;i<=T1;++i) f4[i]=(f4[i-1]*K+S1[T1-i+1])%P;\n    if(check(T1,f4)==false) return false;\n    while(T>=1&&S[T].g==0) --T;\n    if(T2!=0||T!=0) return false;\n    return true;\n}\nint main()\n{\n    scanf(\"%d%*d\",&n);\n    for(int i=1;i<=n;++i)\n    {\n        scanf(\"%d\",&a[i]);\n    }\n    powb[0]=1;\n    for(int i=1;i<=n;++i) powb[i]=powb[i-1]*K%P;\n    q=sqrt(n);\n    for(int i=1;i<=q;++i) b1[i]=(n/q)*i;\n    b1[q]=n;\n    for(int i=1;i<=q;++i)\n    {\n        for(int j=b1[i-1]+1;j<=b1[i];++j) b2[j]=i;\n    }\n    for(int i=1;i<=q;++i) build(i);\n    scanf(\"%d\",&m);\n    for(int i=1;i<=m;++i)\n    {\n        int z;\n        scanf(\"%d\",&z);\n        if(z==1)\n        {\n            int x,k;\n            scanf(\"%d%d\",&x,&k);\n            a[x]=k;\n            build(b2[x]);\n        }\n        else if(z==2)\n        {\n            int l,r;\n            scanf(\"%d%d\",&l,&r);\n            if(query(l,r)) printf(\"Yes\\n\");\n            else printf(\"No\\n\");\n        }\n    }\n    return 0;\n}\n```\n\n\n\n","slug":"CF1340F-solution","published":1,"updated":"2023-02-24T10:50:25.783Z","_id":"cleieq3jv0000hkjf80nj19dd","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h2><p>给定一个长为 $n$ 的有 $k$ 种括号的括号序列，$q$ 个操作，每次操作修改一个位置的字符或查询一个区间是否为合法括号序列。</p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>显然朴素的做法是维护一个栈来判断。</p>\n<p>我们可以考虑分块，每一块维护这一块的栈然后合并之类的。</p>\n<p>对于每一块，由于它前面可能还有东西，所以最前面的右括号被认为是合法的。同理最后的左括号也是合法的，剩下的就应该被消完。也就是一个序列是合法的当且仅当这个序列消除完之后是由一段右括号接上一段左括号组成的，我们只需要维护这个东西即可。</p>\n<p>但是我们在合并两个块的时候，显然需要判断一段左括号与一段右括号能不能匹配，暴力复杂度可能达到 $O(\\text{块长})$，无法接受。考虑使用哈希判断，维护左右括号序列的前缀哈希，具体的维护从外层到内层的哈希，方便添加东西。</p>\n<p>如果合并时我们依然用栈来维护左括号，复杂度还是 $O(n)$ 的，但是左括号序列可以划分成很多段，每一段来自同一块，我们只需要用 vector 来维护每一段的长度和前缀哈希，用一个指针指向算好的哈希数组。而最左边和最右边的散块暴力处理。</p>\n<p>修改时我们只需要暴力重构某一个块即可。</p>\n<h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> ll;</span><br><span class=\"line\"><span class=\"type\">const</span> ll P=<span class=\"number\">1e9</span>+<span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">200001</span>,M=<span class=\"number\">500</span>,K=<span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m,q,a[N],b1[N],b2[N],g1[N],g2[N],T,S1[N],T1,S2[N],T2;</span><br><span class=\"line\"><span class=\"type\">bool</span> h[M];</span><br><span class=\"line\">ll f1[M][M],f2[M][M],f3[M],f4[M],powb[N];</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">str</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> g;</span><br><span class=\"line\">    ll *f;</span><br><span class=\"line\">    <span class=\"built_in\">str</span>()&#123;&#125;</span><br><span class=\"line\">    <span class=\"built_in\">str</span>(<span class=\"type\">int</span> g,ll *f):<span class=\"built_in\">g</span>(g),<span class=\"built_in\">f</span>(f)&#123;&#125;</span><br><span class=\"line\">&#125;S[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">solve</span><span class=\"params\">(<span class=\"type\">int</span> l,<span class=\"type\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    T1=T2=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=l;i&lt;=r;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a[i]&gt;<span class=\"number\">0</span>) S2[++T2]=a[i];</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(T2==<span class=\"number\">0</span>) S1[++T1]=-a[i];</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(S2[T2]!=-a[i]) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> --T2;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    h[x]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">solve</span>(b1[x<span class=\"number\">-1</span>]+<span class=\"number\">1</span>,b1[x])==<span class=\"literal\">false</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        h[x]=<span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    g1[x]=T1,g2[x]=T2;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=T1;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        f1[x][i]=(f1[x][i<span class=\"number\">-1</span>]*K+S1[T1-i+<span class=\"number\">1</span>])%P;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=T2;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        f2[x][i]=(f2[x][i<span class=\"number\">-1</span>]*K+S2[i])%P;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">check</span><span class=\"params\">(<span class=\"type\">int</span> x,ll *f)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(x&gt;<span class=\"number\">0</span>&amp;&amp;T&gt;<span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> z=<span class=\"built_in\">min</span>(S[T].g,x);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(((S[T].f[S[T].g]-S[T].f[S[T].g-z]*powb[z]%P)%P+P)%P!=((f[x]-f[x-z]*powb[z]%P)%P+P)%P) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        S[T].g-=z;</span><br><span class=\"line\">        x-=z;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(S[T].g==<span class=\"number\">0</span>) --T;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(T==<span class=\"number\">0</span>&amp;&amp;x!=<span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"type\">int</span> l,<span class=\"type\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(b2[l]==b2[r])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">solve</span>(l,r)==<span class=\"literal\">false</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(T1!=<span class=\"number\">0</span>||T2!=<span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    T=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">solve</span>(l,b1[b2[l]])==<span class=\"literal\">false</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(T1!=<span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=T2;++i) f3[i]=(f3[i<span class=\"number\">-1</span>]*K+S2[i])%P;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(T2!=<span class=\"number\">0</span>) S[++T]=<span class=\"built_in\">str</span>(T2,f3);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=b2[l]+<span class=\"number\">1</span>;i&lt;=b2[r]<span class=\"number\">-1</span>;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(h[i]==<span class=\"literal\">false</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">check</span>(g1[i],f1[i])==<span class=\"literal\">false</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(g2[i]!=<span class=\"number\">0</span>) S[++T]=<span class=\"built_in\">str</span>(g2[i],f2[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">solve</span>(b1[b2[r]<span class=\"number\">-1</span>]+<span class=\"number\">1</span>,r)==<span class=\"literal\">false</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=T1;++i) f4[i]=(f4[i<span class=\"number\">-1</span>]*K+S1[T1-i+<span class=\"number\">1</span>])%P;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">check</span>(T1,f4)==<span class=\"literal\">false</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(T&gt;=<span class=\"number\">1</span>&amp;&amp;S[T].g==<span class=\"number\">0</span>) --T;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(T2!=<span class=\"number\">0</span>||T!=<span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%*d&quot;</span>,&amp;n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    powb[<span class=\"number\">0</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i) powb[i]=powb[i<span class=\"number\">-1</span>]*K%P;</span><br><span class=\"line\">    q=<span class=\"built_in\">sqrt</span>(n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=q;++i) b1[i]=(n/q)*i;</span><br><span class=\"line\">    b1[q]=n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=q;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=b1[i<span class=\"number\">-1</span>]+<span class=\"number\">1</span>;j&lt;=b1[i];++j) b2[j]=i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=q;++i) <span class=\"built_in\">build</span>(i);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;m);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> z;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;z);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(z==<span class=\"number\">1</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> x,k;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;x,&amp;k);</span><br><span class=\"line\">            a[x]=k;</span><br><span class=\"line\">            <span class=\"built_in\">build</span>(b2[x]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(z==<span class=\"number\">2</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> l,r;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;l,&amp;r);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"built_in\">query</span>(l,r)) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Yes\\n&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;No\\n&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h2><p>给定一个长为 $n$ 的有 $k$ 种括号的括号序列，$q$ 个操作，每次操作修改一个位置的字符或查询一个区间是否为合法括号序列。</p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>显然朴素的做法是维护一个栈来判断。</p>\n<p>我们可以考虑分块，每一块维护这一块的栈然后合并之类的。</p>\n<p>对于每一块，由于它前面可能还有东西，所以最前面的右括号被认为是合法的。同理最后的左括号也是合法的，剩下的就应该被消完。也就是一个序列是合法的当且仅当这个序列消除完之后是由一段右括号接上一段左括号组成的，我们只需要维护这个东西即可。</p>\n<p>但是我们在合并两个块的时候，显然需要判断一段左括号与一段右括号能不能匹配，暴力复杂度可能达到 $O(\\text{块长})$，无法接受。考虑使用哈希判断，维护左右括号序列的前缀哈希，具体的维护从外层到内层的哈希，方便添加东西。</p>\n<p>如果合并时我们依然用栈来维护左括号，复杂度还是 $O(n)$ 的，但是左括号序列可以划分成很多段，每一段来自同一块，我们只需要用 vector 来维护每一段的长度和前缀哈希，用一个指针指向算好的哈希数组。而最左边和最右边的散块暴力处理。</p>\n<p>修改时我们只需要暴力重构某一个块即可。</p>\n<h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> ll;</span><br><span class=\"line\"><span class=\"type\">const</span> ll P=<span class=\"number\">1e9</span>+<span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">200001</span>,M=<span class=\"number\">500</span>,K=<span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m,q,a[N],b1[N],b2[N],g1[N],g2[N],T,S1[N],T1,S2[N],T2;</span><br><span class=\"line\"><span class=\"type\">bool</span> h[M];</span><br><span class=\"line\">ll f1[M][M],f2[M][M],f3[M],f4[M],powb[N];</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">str</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> g;</span><br><span class=\"line\">    ll *f;</span><br><span class=\"line\">    <span class=\"built_in\">str</span>()&#123;&#125;</span><br><span class=\"line\">    <span class=\"built_in\">str</span>(<span class=\"type\">int</span> g,ll *f):<span class=\"built_in\">g</span>(g),<span class=\"built_in\">f</span>(f)&#123;&#125;</span><br><span class=\"line\">&#125;S[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">solve</span><span class=\"params\">(<span class=\"type\">int</span> l,<span class=\"type\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    T1=T2=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=l;i&lt;=r;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a[i]&gt;<span class=\"number\">0</span>) S2[++T2]=a[i];</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(T2==<span class=\"number\">0</span>) S1[++T1]=-a[i];</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(S2[T2]!=-a[i]) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> --T2;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    h[x]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">solve</span>(b1[x<span class=\"number\">-1</span>]+<span class=\"number\">1</span>,b1[x])==<span class=\"literal\">false</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        h[x]=<span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    g1[x]=T1,g2[x]=T2;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=T1;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        f1[x][i]=(f1[x][i<span class=\"number\">-1</span>]*K+S1[T1-i+<span class=\"number\">1</span>])%P;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=T2;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        f2[x][i]=(f2[x][i<span class=\"number\">-1</span>]*K+S2[i])%P;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">check</span><span class=\"params\">(<span class=\"type\">int</span> x,ll *f)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(x&gt;<span class=\"number\">0</span>&amp;&amp;T&gt;<span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> z=<span class=\"built_in\">min</span>(S[T].g,x);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(((S[T].f[S[T].g]-S[T].f[S[T].g-z]*powb[z]%P)%P+P)%P!=((f[x]-f[x-z]*powb[z]%P)%P+P)%P) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        S[T].g-=z;</span><br><span class=\"line\">        x-=z;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(S[T].g==<span class=\"number\">0</span>) --T;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(T==<span class=\"number\">0</span>&amp;&amp;x!=<span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"type\">int</span> l,<span class=\"type\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(b2[l]==b2[r])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">solve</span>(l,r)==<span class=\"literal\">false</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(T1!=<span class=\"number\">0</span>||T2!=<span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    T=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">solve</span>(l,b1[b2[l]])==<span class=\"literal\">false</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(T1!=<span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=T2;++i) f3[i]=(f3[i<span class=\"number\">-1</span>]*K+S2[i])%P;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(T2!=<span class=\"number\">0</span>) S[++T]=<span class=\"built_in\">str</span>(T2,f3);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=b2[l]+<span class=\"number\">1</span>;i&lt;=b2[r]<span class=\"number\">-1</span>;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(h[i]==<span class=\"literal\">false</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">check</span>(g1[i],f1[i])==<span class=\"literal\">false</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(g2[i]!=<span class=\"number\">0</span>) S[++T]=<span class=\"built_in\">str</span>(g2[i],f2[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">solve</span>(b1[b2[r]<span class=\"number\">-1</span>]+<span class=\"number\">1</span>,r)==<span class=\"literal\">false</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=T1;++i) f4[i]=(f4[i<span class=\"number\">-1</span>]*K+S1[T1-i+<span class=\"number\">1</span>])%P;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">check</span>(T1,f4)==<span class=\"literal\">false</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(T&gt;=<span class=\"number\">1</span>&amp;&amp;S[T].g==<span class=\"number\">0</span>) --T;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(T2!=<span class=\"number\">0</span>||T!=<span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%*d&quot;</span>,&amp;n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    powb[<span class=\"number\">0</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i) powb[i]=powb[i<span class=\"number\">-1</span>]*K%P;</span><br><span class=\"line\">    q=<span class=\"built_in\">sqrt</span>(n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=q;++i) b1[i]=(n/q)*i;</span><br><span class=\"line\">    b1[q]=n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=q;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=b1[i<span class=\"number\">-1</span>]+<span class=\"number\">1</span>;j&lt;=b1[i];++j) b2[j]=i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=q;++i) <span class=\"built_in\">build</span>(i);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;m);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> z;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;z);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(z==<span class=\"number\">1</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> x,k;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;x,&amp;k);</span><br><span class=\"line\">            a[x]=k;</span><br><span class=\"line\">            <span class=\"built_in\">build</span>(b2[x]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(z==<span class=\"number\">2</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> l,r;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;l,&amp;r);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"built_in\">query</span>(l,r)) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Yes\\n&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;No\\n&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n"},{"title":"CF827F 题解","date":"2023-02-26T10:26:04.000Z","description":" ","_content":"\n## 题意\n\n一张无向图，边权为 $1$，第 $i$ 条边仅能在 $[l_i,r_i]$ 的时间通过，求 $1$ 到 $n$ 的最短路。\n\n## 提示\n\n注意这个是无向图，所以只要在这条边的时间范围内，就可以反复走同一条边。\n\n## 思路\n\n注意，接下来定义第 $i$ 条边可以走的时间范围是 $[l_i,r_i]$，也就是 $r_i$ 等于题目中的 $r_i-1$。\n\n首先这是一张无向图，我们考虑如果在到达一个点但是还要等一会才能走出去时，我们可以反复走一条边来拖时间。由于需要 $2$ 的时间往返一次，所以需要把时间分奇偶讨论。也就是说，如果我们能在 $t \\in [l_i,r_i]$ 的时间到达边 $i$ 的起点，那么我们可以在 $[t+1,r_i+1]$ 中奇偶性相同的任意时间到达终点。\n\n我们可以考虑每一个点拆成奇数点和偶数点，然后对于一条边，一个点的奇数点向另一个点的偶数点连边，偶数点向奇数点连边，并调整时间边界的奇偶性。接下来的讨论已经没有奇偶限制。\n\n假如从边 $i$ 到达了 $x$，接下来要走边 $j$，如果 $i$ 已经无法走了 $j$ 还没到时间，我们可以考虑反复走 $x$ 连出去的其他边 $k$。这种情况其实不用单独考虑，因为我们可以把从 $i$ 到 $j$（重复走 $i$ 和 $k$）转换为先从 $i$ 到 $k$（重复走 $k$），然后再从 $k$ 走到 $j$（重复走 $k$）。\n\n我们用一个三元组 $(x,l,r)$ 表示我们可以在 $[l,r]$ 的时间内都可以从点 $x$ 出发，枚举出边 $i$。如果 $l_i>r$ 显然没法走。显然到达终点的时间最早是 $l+1$ 和 $l_i+1$ 取最大值，最晚是 $r_i+1$，因为我们可以重复走这条边。然后我们用一个类似 $\\text{Dijkstra}$ 的东西维护：每一次取所有三元组中 $l$ 最小的，更新答案，一个点可以重复更新。但是每次遍历边显然要寄，我们可以发现每一次更新的 $l$ 是不降的，所以能更新的边的左端点也是不降的，我们只需要将边排序，每一次从上一次结束的地方开始。\n\n## code\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<vector>\n#include<queue>\nusing namespace std;\nconst int N=1000001;\nint n,m,t[N];\nstruct str\n{\n    int x,l,r;\n    str(){}\n    str(int x,int l,int r):x(x),l(l),r(r){}\n    friend bool operator <(str a,str b)\n    {\n        return a.l>b.l;\n    }\n};\nvector<str> a[N];\nbool cmp(str a,str b)\n{\n    return a.l<b.l;\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=m;++i)\n    {\n        int x,y,l,r;\n        scanf(\"%d%d%d%d\",&x,&y,&l,&r);\n        --r;\n        int l1=l,l2=l,r1=r,r2=r;\n        if(l%2==1) ++l1;\n        else ++l2;\n        if(r%2==1) --r1;\n        else --r2;\n        if(l1<=r1)\n        {\n            a[x].push_back(str(y+n,l1,r1));\n            a[y].push_back(str(x+n,l1,r1));\n        }\n        if(l2<=r2)\n        {\n            a[x+n].push_back(str(y,l2,r2));\n            a[y+n].push_back(str(x,l2,r2));\n        }\n    }\n    for(int i=1;i<=n*2;++i)\n    {\n        sort(a[i].begin(),a[i].end(),cmp);\n    }\n    priority_queue<str> Q;\n    Q.push(str(1,0,0));\n    while(!Q.empty())\n    {\n        str k=Q.top();\n        Q.pop();\n        if(k.x==n||k.x==n*2)\n        {\n            printf(\"%d\",k.l);\n            return 0;\n        }\n        for(int i=t[k.x];i<a[k.x].size();++i)\n        {\n            if(a[k.x][i].l>k.r) break;\n            t[k.x]=i+1;\n            if(k.l<=a[k.x][i].r) Q.push(str(a[k.x][i].x,max(k.l,a[k.x][i].l)+1,a[k.x][i].r+1));\n        }\n    }\n    printf(\"-1\");\n    return 0;\n}\n```\n","source":"_posts/CF827F-solution.md","raw":"---\ntitle: 'CF827F 题解'\ndate: 2023-02-26 18:26:04\ntags: [CF]\ndescription: ' '\n---\n\n## 题意\n\n一张无向图，边权为 $1$，第 $i$ 条边仅能在 $[l_i,r_i]$ 的时间通过，求 $1$ 到 $n$ 的最短路。\n\n## 提示\n\n注意这个是无向图，所以只要在这条边的时间范围内，就可以反复走同一条边。\n\n## 思路\n\n注意，接下来定义第 $i$ 条边可以走的时间范围是 $[l_i,r_i]$，也就是 $r_i$ 等于题目中的 $r_i-1$。\n\n首先这是一张无向图，我们考虑如果在到达一个点但是还要等一会才能走出去时，我们可以反复走一条边来拖时间。由于需要 $2$ 的时间往返一次，所以需要把时间分奇偶讨论。也就是说，如果我们能在 $t \\in [l_i,r_i]$ 的时间到达边 $i$ 的起点，那么我们可以在 $[t+1,r_i+1]$ 中奇偶性相同的任意时间到达终点。\n\n我们可以考虑每一个点拆成奇数点和偶数点，然后对于一条边，一个点的奇数点向另一个点的偶数点连边，偶数点向奇数点连边，并调整时间边界的奇偶性。接下来的讨论已经没有奇偶限制。\n\n假如从边 $i$ 到达了 $x$，接下来要走边 $j$，如果 $i$ 已经无法走了 $j$ 还没到时间，我们可以考虑反复走 $x$ 连出去的其他边 $k$。这种情况其实不用单独考虑，因为我们可以把从 $i$ 到 $j$（重复走 $i$ 和 $k$）转换为先从 $i$ 到 $k$（重复走 $k$），然后再从 $k$ 走到 $j$（重复走 $k$）。\n\n我们用一个三元组 $(x,l,r)$ 表示我们可以在 $[l,r]$ 的时间内都可以从点 $x$ 出发，枚举出边 $i$。如果 $l_i>r$ 显然没法走。显然到达终点的时间最早是 $l+1$ 和 $l_i+1$ 取最大值，最晚是 $r_i+1$，因为我们可以重复走这条边。然后我们用一个类似 $\\text{Dijkstra}$ 的东西维护：每一次取所有三元组中 $l$ 最小的，更新答案，一个点可以重复更新。但是每次遍历边显然要寄，我们可以发现每一次更新的 $l$ 是不降的，所以能更新的边的左端点也是不降的，我们只需要将边排序，每一次从上一次结束的地方开始。\n\n## code\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<vector>\n#include<queue>\nusing namespace std;\nconst int N=1000001;\nint n,m,t[N];\nstruct str\n{\n    int x,l,r;\n    str(){}\n    str(int x,int l,int r):x(x),l(l),r(r){}\n    friend bool operator <(str a,str b)\n    {\n        return a.l>b.l;\n    }\n};\nvector<str> a[N];\nbool cmp(str a,str b)\n{\n    return a.l<b.l;\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=m;++i)\n    {\n        int x,y,l,r;\n        scanf(\"%d%d%d%d\",&x,&y,&l,&r);\n        --r;\n        int l1=l,l2=l,r1=r,r2=r;\n        if(l%2==1) ++l1;\n        else ++l2;\n        if(r%2==1) --r1;\n        else --r2;\n        if(l1<=r1)\n        {\n            a[x].push_back(str(y+n,l1,r1));\n            a[y].push_back(str(x+n,l1,r1));\n        }\n        if(l2<=r2)\n        {\n            a[x+n].push_back(str(y,l2,r2));\n            a[y+n].push_back(str(x,l2,r2));\n        }\n    }\n    for(int i=1;i<=n*2;++i)\n    {\n        sort(a[i].begin(),a[i].end(),cmp);\n    }\n    priority_queue<str> Q;\n    Q.push(str(1,0,0));\n    while(!Q.empty())\n    {\n        str k=Q.top();\n        Q.pop();\n        if(k.x==n||k.x==n*2)\n        {\n            printf(\"%d\",k.l);\n            return 0;\n        }\n        for(int i=t[k.x];i<a[k.x].size();++i)\n        {\n            if(a[k.x][i].l>k.r) break;\n            t[k.x]=i+1;\n            if(k.l<=a[k.x][i].r) Q.push(str(a[k.x][i].x,max(k.l,a[k.x][i].l)+1,a[k.x][i].r+1));\n        }\n    }\n    printf(\"-1\");\n    return 0;\n}\n```\n","slug":"CF827F-solution","published":1,"updated":"2023-03-06T11:06:29.847Z","_id":"cleoevvse0000k8jf6kjs8mk0","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h2><p>一张无向图，边权为 $1$，第 $i$ 条边仅能在 $[l_i,r_i]$ 的时间通过，求 $1$ 到 $n$ 的最短路。</p>\n<h2 id=\"提示\"><a href=\"#提示\" class=\"headerlink\" title=\"提示\"></a>提示</h2><p>注意这个是无向图，所以只要在这条边的时间范围内，就可以反复走同一条边。</p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>注意，接下来定义第 $i$ 条边可以走的时间范围是 $[l_i,r_i]$，也就是 $r_i$ 等于题目中的 $r_i-1$。</p>\n<p>首先这是一张无向图，我们考虑如果在到达一个点但是还要等一会才能走出去时，我们可以反复走一条边来拖时间。由于需要 $2$ 的时间往返一次，所以需要把时间分奇偶讨论。也就是说，如果我们能在 $t \\in [l_i,r_i]$ 的时间到达边 $i$ 的起点，那么我们可以在 $[t+1,r_i+1]$ 中奇偶性相同的任意时间到达终点。</p>\n<p>我们可以考虑每一个点拆成奇数点和偶数点，然后对于一条边，一个点的奇数点向另一个点的偶数点连边，偶数点向奇数点连边，并调整时间边界的奇偶性。接下来的讨论已经没有奇偶限制。</p>\n<p>假如从边 $i$ 到达了 $x$，接下来要走边 $j$，如果 $i$ 已经无法走了 $j$ 还没到时间，我们可以考虑反复走 $x$ 连出去的其他边 $k$。这种情况其实不用单独考虑，因为我们可以把从 $i$ 到 $j$（重复走 $i$ 和 $k$）转换为先从 $i$ 到 $k$（重复走 $k$），然后再从 $k$ 走到 $j$（重复走 $k$）。</p>\n<p>我们用一个三元组 $(x,l,r)$ 表示我们可以在 $[l,r]$ 的时间内都可以从点 $x$ 出发，枚举出边 $i$。如果 $l_i&gt;r$ 显然没法走。显然到达终点的时间最早是 $l+1$ 和 $l_i+1$ 取最大值，最晚是 $r_i+1$，因为我们可以重复走这条边。然后我们用一个类似 $\\text{Dijkstra}$ 的东西维护：每一次取所有三元组中 $l$ 最小的，更新答案，一个点可以重复更新。但是每次遍历边显然要寄，我们可以发现每一次更新的 $l$ 是不降的，所以能更新的边的左端点也是不降的，我们只需要将边排序，每一次从上一次结束的地方开始。</p>\n<h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1000001</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m,t[N];</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">str</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> x,l,r;</span><br><span class=\"line\">    <span class=\"built_in\">str</span>()&#123;&#125;</span><br><span class=\"line\">    <span class=\"built_in\">str</span>(<span class=\"type\">int</span> x,<span class=\"type\">int</span> l,<span class=\"type\">int</span> r):<span class=\"built_in\">x</span>(x),<span class=\"built_in\">l</span>(l),<span class=\"built_in\">r</span>(r)&#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">friend</span> <span class=\"type\">bool</span> <span class=\"keyword\">operator</span> &lt;(str a,str b)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a.l&gt;b.l;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">vector&lt;str&gt; a[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(str a,str b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.l&lt;b.l;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x,y,l,r;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d%d&quot;</span>,&amp;x,&amp;y,&amp;l,&amp;r);</span><br><span class=\"line\">        --r;</span><br><span class=\"line\">        <span class=\"type\">int</span> l1=l,l2=l,r1=r,r2=r;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(l%<span class=\"number\">2</span>==<span class=\"number\">1</span>) ++l1;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> ++l2;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(r%<span class=\"number\">2</span>==<span class=\"number\">1</span>) --r1;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> --r2;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(l1&lt;=r1)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            a[x].<span class=\"built_in\">push_back</span>(<span class=\"built_in\">str</span>(y+n,l1,r1));</span><br><span class=\"line\">            a[y].<span class=\"built_in\">push_back</span>(<span class=\"built_in\">str</span>(x+n,l1,r1));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(l2&lt;=r2)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            a[x+n].<span class=\"built_in\">push_back</span>(<span class=\"built_in\">str</span>(y,l2,r2));</span><br><span class=\"line\">            a[y+n].<span class=\"built_in\">push_back</span>(<span class=\"built_in\">str</span>(x,l2,r2));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n*<span class=\"number\">2</span>;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">sort</span>(a[i].<span class=\"built_in\">begin</span>(),a[i].<span class=\"built_in\">end</span>(),cmp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    priority_queue&lt;str&gt; Q;</span><br><span class=\"line\">    Q.<span class=\"built_in\">push</span>(<span class=\"built_in\">str</span>(<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>));</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!Q.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        str k=Q.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">        Q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(k.x==n||k.x==n*<span class=\"number\">2</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,k.l);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t[k.x];i&lt;a[k.x].<span class=\"built_in\">size</span>();++i)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(a[k.x][i].l&gt;k.r) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            t[k.x]=i+<span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(k.l&lt;=a[k.x][i].r) Q.<span class=\"built_in\">push</span>(<span class=\"built_in\">str</span>(a[k.x][i].x,<span class=\"built_in\">max</span>(k.l,a[k.x][i].l)+<span class=\"number\">1</span>,a[k.x][i].r+<span class=\"number\">1</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;-1&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h2><p>一张无向图，边权为 $1$，第 $i$ 条边仅能在 $[l_i,r_i]$ 的时间通过，求 $1$ 到 $n$ 的最短路。</p>\n<h2 id=\"提示\"><a href=\"#提示\" class=\"headerlink\" title=\"提示\"></a>提示</h2><p>注意这个是无向图，所以只要在这条边的时间范围内，就可以反复走同一条边。</p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>注意，接下来定义第 $i$ 条边可以走的时间范围是 $[l_i,r_i]$，也就是 $r_i$ 等于题目中的 $r_i-1$。</p>\n<p>首先这是一张无向图，我们考虑如果在到达一个点但是还要等一会才能走出去时，我们可以反复走一条边来拖时间。由于需要 $2$ 的时间往返一次，所以需要把时间分奇偶讨论。也就是说，如果我们能在 $t \\in [l_i,r_i]$ 的时间到达边 $i$ 的起点，那么我们可以在 $[t+1,r_i+1]$ 中奇偶性相同的任意时间到达终点。</p>\n<p>我们可以考虑每一个点拆成奇数点和偶数点，然后对于一条边，一个点的奇数点向另一个点的偶数点连边，偶数点向奇数点连边，并调整时间边界的奇偶性。接下来的讨论已经没有奇偶限制。</p>\n<p>假如从边 $i$ 到达了 $x$，接下来要走边 $j$，如果 $i$ 已经无法走了 $j$ 还没到时间，我们可以考虑反复走 $x$ 连出去的其他边 $k$。这种情况其实不用单独考虑，因为我们可以把从 $i$ 到 $j$（重复走 $i$ 和 $k$）转换为先从 $i$ 到 $k$（重复走 $k$），然后再从 $k$ 走到 $j$（重复走 $k$）。</p>\n<p>我们用一个三元组 $(x,l,r)$ 表示我们可以在 $[l,r]$ 的时间内都可以从点 $x$ 出发，枚举出边 $i$。如果 $l_i&gt;r$ 显然没法走。显然到达终点的时间最早是 $l+1$ 和 $l_i+1$ 取最大值，最晚是 $r_i+1$，因为我们可以重复走这条边。然后我们用一个类似 $\\text{Dijkstra}$ 的东西维护：每一次取所有三元组中 $l$ 最小的，更新答案，一个点可以重复更新。但是每次遍历边显然要寄，我们可以发现每一次更新的 $l$ 是不降的，所以能更新的边的左端点也是不降的，我们只需要将边排序，每一次从上一次结束的地方开始。</p>\n<h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1000001</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m,t[N];</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">str</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> x,l,r;</span><br><span class=\"line\">    <span class=\"built_in\">str</span>()&#123;&#125;</span><br><span class=\"line\">    <span class=\"built_in\">str</span>(<span class=\"type\">int</span> x,<span class=\"type\">int</span> l,<span class=\"type\">int</span> r):<span class=\"built_in\">x</span>(x),<span class=\"built_in\">l</span>(l),<span class=\"built_in\">r</span>(r)&#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">friend</span> <span class=\"type\">bool</span> <span class=\"keyword\">operator</span> &lt;(str a,str b)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a.l&gt;b.l;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">vector&lt;str&gt; a[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(str a,str b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.l&lt;b.l;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x,y,l,r;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d%d&quot;</span>,&amp;x,&amp;y,&amp;l,&amp;r);</span><br><span class=\"line\">        --r;</span><br><span class=\"line\">        <span class=\"type\">int</span> l1=l,l2=l,r1=r,r2=r;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(l%<span class=\"number\">2</span>==<span class=\"number\">1</span>) ++l1;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> ++l2;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(r%<span class=\"number\">2</span>==<span class=\"number\">1</span>) --r1;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> --r2;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(l1&lt;=r1)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            a[x].<span class=\"built_in\">push_back</span>(<span class=\"built_in\">str</span>(y+n,l1,r1));</span><br><span class=\"line\">            a[y].<span class=\"built_in\">push_back</span>(<span class=\"built_in\">str</span>(x+n,l1,r1));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(l2&lt;=r2)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            a[x+n].<span class=\"built_in\">push_back</span>(<span class=\"built_in\">str</span>(y,l2,r2));</span><br><span class=\"line\">            a[y+n].<span class=\"built_in\">push_back</span>(<span class=\"built_in\">str</span>(x,l2,r2));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n*<span class=\"number\">2</span>;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">sort</span>(a[i].<span class=\"built_in\">begin</span>(),a[i].<span class=\"built_in\">end</span>(),cmp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    priority_queue&lt;str&gt; Q;</span><br><span class=\"line\">    Q.<span class=\"built_in\">push</span>(<span class=\"built_in\">str</span>(<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>));</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!Q.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        str k=Q.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">        Q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(k.x==n||k.x==n*<span class=\"number\">2</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,k.l);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t[k.x];i&lt;a[k.x].<span class=\"built_in\">size</span>();++i)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(a[k.x][i].l&gt;k.r) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            t[k.x]=i+<span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(k.l&lt;=a[k.x][i].r) Q.<span class=\"built_in\">push</span>(<span class=\"built_in\">str</span>(a[k.x][i].x,<span class=\"built_in\">max</span>(k.l,a[k.x][i].l)+<span class=\"number\">1</span>,a[k.x][i].r+<span class=\"number\">1</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;-1&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"NOI 春季测试 T4 密码锁题解","date":"2023-03-06T11:02:44.000Z","description":" ","_content":"\n## 题意\n\n给你一个 $k$ 行 $n$ 列的矩阵（$k \\leq 4$），每次可以选定一列进行一次循环位移，定义 $c(i)$ 为任意次操作后第 $i$ 行的最大值与最小值之差，求 $\\max c(i)$ 的最小值。\n\n## 提示\n\n尝试二分答案。\n\n考虑全局最大值一定是某一行的最大值，全局最小值一定是某一行最小值。\n\n最大值和最小值在不同行一定不劣于在同一行。\n\n## 思路\n\n最大值最小，考虑二分答案。\n\n接下来我们要判定 $\\forall i,c(i)\\leq x$。我们按 $k$ 从小到大解决。\n\n$k=1$ 显然等于最大值减最小值。\n\n假如我们已经钦定了某一行的最大值 $mx_i$，显然在这一行的每一数应该大于等于 $mx_i-x$。但是直接枚举显然不优。我们发现全局最大值 $mx$ 一定是某一行的最大值，由于行与行之间没有区别，我们直接钦定 $mx_1 = mx$。\n\n同理，我们也可以发现全局最小值 $mn$ 也一定是某一行的最小值。如果把 $mx$ 和 $mn$ 放在同一行，答案 $mx-mn$ 显然达到了上界，所以把 $mx$ 和 $mn$ 不同行一定不劣。所以我们钦定 $mx_1 = mx,mn_2 = mn$，就可以判断每一列是否可能满足限制。至此，我们已经解决了 $k=2$。\n\n对于 $k=3$ 的情况，我们可以钦定 $mx_1 = mx$，但是最小值在第二行或第三行实际上是不同的情况，所以我们需要枚举最小值所在的行，令剩下没有钦定的行为 $i$，钦定最小值为 $mn_i$。对于某一列，总共有三种情况，首先要去除不满足全局最大最小限制的情况，还要满足 $a_i \\leq mn_i + x$，即\n$$\na_i-x \\leq mn_i \\leq a_i\n$$\n总共有 $O(n)$ 个这样的式子，$mn_i$ 必须要满足每一列至少有一个式子成立。显然如果存在这样一个 $mn_i$，一定可以找到一个这一行的数满足每一列至少成立一个式子（即向上找到第一个上界）。问题转化为有 $n$ 种区间，求是否存在一个点使得每种区间都存在一个区间包含这个点。我们只需要使用扫描线，用一个数组记录当前点被第 $i$ 种区间包含了多少次即可。\n\n对于 $k=4$ 的情况，我们用一样的方法，发现变量变成了两个，即有 $O(n)$ 组\n\n{% raw %}\n$$\n\\left\\{\n\\begin{aligned}\na_i-x \\leq mn_i \\leq a_i\\\\\na_j-x \\leq mn_j \\leq a_j\n\\end{aligned}\n\\right.\n$$\n{% endraw %}\n\n这样的式子，$mn_i$ 与 $mn_j$ 必须满足每一列至少有一组式子成立。转换过来就变成了二维的，有 $n$ 种矩阵，求平面上是否存在一个点使得每种矩阵都存在一个矩阵包含这个点。同样考虑扫描线，用线段树维护当前高度的一条线上每个点被多少种区间覆盖，和这个的全局最大值，但是这里不好去重，我采用的比较暴力的方法：由于每种矩阵最多只有 $4$ 个，所以我们可以容斥一下变成至多 $15$ 个矩阵。我们只需要判断被覆盖的区间数的最大值是不是 $n$ 即可。\n\n## code\n\n```cpp\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\nconst int N=1000001;\nint n,m,k,q,mx,mn,a[N][4],e[N];\nstruct node\n{\n    int x1,x2,y1,y2;\n    node() {}\n    node(int x1,int x2,int y1,int y2):x1(x1),x2(x2),y1(y1),y2(y2) {}\n}b[N][4];\nstruct line\n{\n    int x1,x2,h,u;\n    line() {}\n    line(int x1,int x2,int h,int u):x1(x1),x2(x2),h(h),u(u) {}\n}c[N<<5];\nbool cmp(line a,line b)\n{\n    return a.h<b.h;\n}\nstruct tree\n{\n    int l,r,s,k;\n}T[N<<2];\nvoid pushup(int x)\n{\n    T[x].s=max(T[x<<1].s,T[x<<1|1].s);\n}\nvoid pushdown(int x)\n{\n    if(T[x].k==0) return;\n    T[x<<1].s+=T[x].k;\n    T[x<<1].k+=T[x].k;\n    T[x<<1|1].s+=T[x].k;\n    T[x<<1|1].k+=T[x].k;\n    T[x].k=0;\n}\nvoid build(int x,int l,int r)\n{\n    T[x].l=l;\n    T[x].r=r;\n    T[x].s=T[x].k=0;\n    if(l==r) return;\n    int z=l+r>>1;\n    build(x<<1,l,z);\n    build(x<<1|1,z+1,r);\n    pushup(x);\n}\nvoid add(int x,int l,int r,int k)\n{\n    if(l>r) return;\n    if(T[x].l>=l&&T[x].r<=r)\n    {\n        T[x].s+=k;\n        T[x].k+=k;\n        return;\n    }\n    pushdown(x);\n    int z=T[x].l+T[x].r>>1;\n    if(l<=z) add(x<<1,l,r,k);\n    if(r>z) add(x<<1|1,l,r,k);\n    pushup(x);\n}\nvoid add_node(int u,node p1=node(1,3e4,1,3e4),node p2=node(1,3e4,1,3e4),node p3=node(1,3e4,1,3e4),node p4=node(1,3e4,1,3e4))\n{\n    int x1=max(max(p1.x1,p2.x1),max(p3.x1,p4.x1));\n    int x2=min(min(p1.x2,p2.x2),min(p3.x2,p4.x2));\n    int y1=max(max(p1.y1,p2.y1),max(p3.y1,p4.y1));\n    int y2=min(min(p1.y2,p2.y2),min(p3.y2,p4.y2));\n    if(x1<=x2&&y1<=y2)\n    {\n        c[++q]=line(x1,x2,y1,u);\n        c[++q]=line(x1,x2,y2+1,-u);\n    }\n}\nbool check()\n{\n    q=0;\n    for(int i=1;i<=n;++i)\n    {\n        add_node(1,b[i][0]);\n        add_node(1,b[i][1]);\n        add_node(1,b[i][2]);\n        add_node(1,b[i][3]);\n        add_node(-1,b[i][0],b[i][1]);\n        add_node(-1,b[i][0],b[i][2]);\n        add_node(-1,b[i][0],b[i][3]);\n        add_node(-1,b[i][1],b[i][2]);\n        add_node(-1,b[i][1],b[i][3]);\n        add_node(-1,b[i][2],b[i][3]);\n        add_node(1,b[i][0],b[i][1],b[i][2]);\n        add_node(1,b[i][0],b[i][1],b[i][3]);\n        add_node(1,b[i][0],b[i][2],b[i][3]);\n        add_node(1,b[i][1],b[i][2],b[i][3]);\n        add_node(-1,b[i][0],b[i][1],b[i][2],b[i][3]);\n    }\n    sort(c+1,c+q+1,cmp);\n    build(1,1,m);\n    int x=1;\n    for(int i=1;i<=m;++i)\n    {\n        while(x<=q&&c[x].h==i)\n        {\n            add(1,c[x].x1,c[x].x2,c[x].u);\n            ++x;\n        }\n        if(T[1].s==n) return true;\n    }\n    return false;\n}\nint find(int x)\n{\n    return lower_bound(e+1,e+m+1,x)-e;\n}\nbool solve(int x)\n{\n    for(int i=1;i<=3;++i)\n    {\n        for(int j=1;j<=n;++j)\n        {\n            for(int k=0;k<=3;++k) b[j][k]=node(1,1,0,0);\n        }\n        for(int j=1;j<=n;++j)\n        {\n            for(int k=0;k<=3;++k)\n            {\n                if(mx-a[j][k]>x||a[j][(k+i)%4]-mn>x) continue;\n                int z1=0,z2=0;\n                if(i==1) z1=a[j][(k+2)%4],z2=a[j][(k+3)%4];\n                if(i==2) z1=a[j][(k+1)%4],z2=a[j][(k+3)%4];\n                if(i==3) z1=a[j][(k+1)%4],z2=a[j][(k+2)%4];\n                b[j][k]=node(find(max(1,z1-x)),find(z1),find(max(1,z2-x)),find(z2));\n            }\n        }\n        if(check()) return true;\n    }\n    return false;\n}\nnamespace Solve2\n{\n    bool solve(int x)\n    {\n        for(int i=1;i<=n;++i)\n        {\n            bool u=false;\n            for(int j=0;j<=1;++j)\n            {\n                if(mx-a[i][j]>x||a[i][(j+1)%2]-mn>x) continue;\n                u=true;\n            }\n            if(!u) return false;\n        }\n        return true;\n    }\n}\nnamespace Solve3\n{\n    int c[N],q;\n    struct str\n    {\n        int x,h,u;\n        str() {}\n        str(int x,int h,int u):x(x),h(h),u(u) {}\n    }b[N];\n    bool cmp(str a,str b)\n    {\n        return a.h<b.h;\n    }\n    bool check()\n    {\n        sort(b+1,b+q+1,cmp);\n        for(int i=1;i<=n;++i) c[i]=0;\n        int x=1,s=0;\n        for(int i=1;i<=m;++i)\n        {\n            while(x<=q&&b[x].h==i)\n            {\n                if(c[b[x].x]==0) ++s;\n                c[b[x].x]+=b[x].u;\n                if(c[b[x].x]==0) --s;\n                ++x;\n            }\n            if(s==n) return true;\n        }\n        return false;\n    }\n    bool solve(int x)\n    {\n        for(int i=1;i<=2;++i)\n        {\n            q=0;\n            for(int j=1;j<=n;++j)\n            {\n                for(int k=0;k<=2;++k)\n                {\n                    if(mx-a[j][k]>x||a[j][(k+i)%3]-mn>x) continue;\n                    int z=0;\n                    if(i==1) z=a[j][(k+2)%3];\n                    if(i==2) z=a[j][(k+1)%3];\n                    b[++q]=str(j,find(max(1,z-x)),1);\n                    b[++q]=str(j,find(z+1),-1);\n                }\n            }\n            if(check()) return true;\n        }\n        return false;\n    }\n}\nvoid abc()\n{\n    scanf(\"%d\",&n);\n    mx=1,mn=3e4;\n    m=0;\n    for(int i=0;i<=k-1;++i)\n    {\n        for(int j=1;j<=n;++j)\n        {\n            scanf(\"%d\",&a[j][i]);\n            e[++m]=a[j][i];\n            mx=max(mx,a[j][i]);\n            mn=min(mn,a[j][i]);\n        }\n    }\n    if(k==1)\n    {\n        printf(\"%d\\n\",mx-mn);\n        return;\n    }\n    sort(e+1,e+m+1);\n    m=unique(e+1,e+m+1)-e-1;\n    auto chk=[&](int x)\n    {\n        if(k==2) return Solve2::solve(x);\n        if(k==3) return Solve3::solve(x);\n        if(k==4) return solve(x);\n        return false;\n    };\n    int l=0,r=3e4;\n    while(l<r)\n    {\n        int z=l+r>>1;\n        if(chk(z)) r=z;\n        else l=z+1;\n    }\n    printf(\"%d\\n\",l);\n}\nint main()\n{\n    int T;\n    scanf(\"%d%d\",&T,&k);\n    while(T--) abc();\n    return 0;\n}\n```\n\n","source":"_posts/NOI-spring-test-T4-solution.md","raw":"---\ntitle: 'NOI 春季测试 T4 密码锁题解'\ndate: 2023-03-06 19:02:44\ntags: ''\ndescription: ' '\n---\n\n## 题意\n\n给你一个 $k$ 行 $n$ 列的矩阵（$k \\leq 4$），每次可以选定一列进行一次循环位移，定义 $c(i)$ 为任意次操作后第 $i$ 行的最大值与最小值之差，求 $\\max c(i)$ 的最小值。\n\n## 提示\n\n尝试二分答案。\n\n考虑全局最大值一定是某一行的最大值，全局最小值一定是某一行最小值。\n\n最大值和最小值在不同行一定不劣于在同一行。\n\n## 思路\n\n最大值最小，考虑二分答案。\n\n接下来我们要判定 $\\forall i,c(i)\\leq x$。我们按 $k$ 从小到大解决。\n\n$k=1$ 显然等于最大值减最小值。\n\n假如我们已经钦定了某一行的最大值 $mx_i$，显然在这一行的每一数应该大于等于 $mx_i-x$。但是直接枚举显然不优。我们发现全局最大值 $mx$ 一定是某一行的最大值，由于行与行之间没有区别，我们直接钦定 $mx_1 = mx$。\n\n同理，我们也可以发现全局最小值 $mn$ 也一定是某一行的最小值。如果把 $mx$ 和 $mn$ 放在同一行，答案 $mx-mn$ 显然达到了上界，所以把 $mx$ 和 $mn$ 不同行一定不劣。所以我们钦定 $mx_1 = mx,mn_2 = mn$，就可以判断每一列是否可能满足限制。至此，我们已经解决了 $k=2$。\n\n对于 $k=3$ 的情况，我们可以钦定 $mx_1 = mx$，但是最小值在第二行或第三行实际上是不同的情况，所以我们需要枚举最小值所在的行，令剩下没有钦定的行为 $i$，钦定最小值为 $mn_i$。对于某一列，总共有三种情况，首先要去除不满足全局最大最小限制的情况，还要满足 $a_i \\leq mn_i + x$，即\n$$\na_i-x \\leq mn_i \\leq a_i\n$$\n总共有 $O(n)$ 个这样的式子，$mn_i$ 必须要满足每一列至少有一个式子成立。显然如果存在这样一个 $mn_i$，一定可以找到一个这一行的数满足每一列至少成立一个式子（即向上找到第一个上界）。问题转化为有 $n$ 种区间，求是否存在一个点使得每种区间都存在一个区间包含这个点。我们只需要使用扫描线，用一个数组记录当前点被第 $i$ 种区间包含了多少次即可。\n\n对于 $k=4$ 的情况，我们用一样的方法，发现变量变成了两个，即有 $O(n)$ 组\n\n{% raw %}\n$$\n\\left\\{\n\\begin{aligned}\na_i-x \\leq mn_i \\leq a_i\\\\\na_j-x \\leq mn_j \\leq a_j\n\\end{aligned}\n\\right.\n$$\n{% endraw %}\n\n这样的式子，$mn_i$ 与 $mn_j$ 必须满足每一列至少有一组式子成立。转换过来就变成了二维的，有 $n$ 种矩阵，求平面上是否存在一个点使得每种矩阵都存在一个矩阵包含这个点。同样考虑扫描线，用线段树维护当前高度的一条线上每个点被多少种区间覆盖，和这个的全局最大值，但是这里不好去重，我采用的比较暴力的方法：由于每种矩阵最多只有 $4$ 个，所以我们可以容斥一下变成至多 $15$ 个矩阵。我们只需要判断被覆盖的区间数的最大值是不是 $n$ 即可。\n\n## code\n\n```cpp\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\nconst int N=1000001;\nint n,m,k,q,mx,mn,a[N][4],e[N];\nstruct node\n{\n    int x1,x2,y1,y2;\n    node() {}\n    node(int x1,int x2,int y1,int y2):x1(x1),x2(x2),y1(y1),y2(y2) {}\n}b[N][4];\nstruct line\n{\n    int x1,x2,h,u;\n    line() {}\n    line(int x1,int x2,int h,int u):x1(x1),x2(x2),h(h),u(u) {}\n}c[N<<5];\nbool cmp(line a,line b)\n{\n    return a.h<b.h;\n}\nstruct tree\n{\n    int l,r,s,k;\n}T[N<<2];\nvoid pushup(int x)\n{\n    T[x].s=max(T[x<<1].s,T[x<<1|1].s);\n}\nvoid pushdown(int x)\n{\n    if(T[x].k==0) return;\n    T[x<<1].s+=T[x].k;\n    T[x<<1].k+=T[x].k;\n    T[x<<1|1].s+=T[x].k;\n    T[x<<1|1].k+=T[x].k;\n    T[x].k=0;\n}\nvoid build(int x,int l,int r)\n{\n    T[x].l=l;\n    T[x].r=r;\n    T[x].s=T[x].k=0;\n    if(l==r) return;\n    int z=l+r>>1;\n    build(x<<1,l,z);\n    build(x<<1|1,z+1,r);\n    pushup(x);\n}\nvoid add(int x,int l,int r,int k)\n{\n    if(l>r) return;\n    if(T[x].l>=l&&T[x].r<=r)\n    {\n        T[x].s+=k;\n        T[x].k+=k;\n        return;\n    }\n    pushdown(x);\n    int z=T[x].l+T[x].r>>1;\n    if(l<=z) add(x<<1,l,r,k);\n    if(r>z) add(x<<1|1,l,r,k);\n    pushup(x);\n}\nvoid add_node(int u,node p1=node(1,3e4,1,3e4),node p2=node(1,3e4,1,3e4),node p3=node(1,3e4,1,3e4),node p4=node(1,3e4,1,3e4))\n{\n    int x1=max(max(p1.x1,p2.x1),max(p3.x1,p4.x1));\n    int x2=min(min(p1.x2,p2.x2),min(p3.x2,p4.x2));\n    int y1=max(max(p1.y1,p2.y1),max(p3.y1,p4.y1));\n    int y2=min(min(p1.y2,p2.y2),min(p3.y2,p4.y2));\n    if(x1<=x2&&y1<=y2)\n    {\n        c[++q]=line(x1,x2,y1,u);\n        c[++q]=line(x1,x2,y2+1,-u);\n    }\n}\nbool check()\n{\n    q=0;\n    for(int i=1;i<=n;++i)\n    {\n        add_node(1,b[i][0]);\n        add_node(1,b[i][1]);\n        add_node(1,b[i][2]);\n        add_node(1,b[i][3]);\n        add_node(-1,b[i][0],b[i][1]);\n        add_node(-1,b[i][0],b[i][2]);\n        add_node(-1,b[i][0],b[i][3]);\n        add_node(-1,b[i][1],b[i][2]);\n        add_node(-1,b[i][1],b[i][3]);\n        add_node(-1,b[i][2],b[i][3]);\n        add_node(1,b[i][0],b[i][1],b[i][2]);\n        add_node(1,b[i][0],b[i][1],b[i][3]);\n        add_node(1,b[i][0],b[i][2],b[i][3]);\n        add_node(1,b[i][1],b[i][2],b[i][3]);\n        add_node(-1,b[i][0],b[i][1],b[i][2],b[i][3]);\n    }\n    sort(c+1,c+q+1,cmp);\n    build(1,1,m);\n    int x=1;\n    for(int i=1;i<=m;++i)\n    {\n        while(x<=q&&c[x].h==i)\n        {\n            add(1,c[x].x1,c[x].x2,c[x].u);\n            ++x;\n        }\n        if(T[1].s==n) return true;\n    }\n    return false;\n}\nint find(int x)\n{\n    return lower_bound(e+1,e+m+1,x)-e;\n}\nbool solve(int x)\n{\n    for(int i=1;i<=3;++i)\n    {\n        for(int j=1;j<=n;++j)\n        {\n            for(int k=0;k<=3;++k) b[j][k]=node(1,1,0,0);\n        }\n        for(int j=1;j<=n;++j)\n        {\n            for(int k=0;k<=3;++k)\n            {\n                if(mx-a[j][k]>x||a[j][(k+i)%4]-mn>x) continue;\n                int z1=0,z2=0;\n                if(i==1) z1=a[j][(k+2)%4],z2=a[j][(k+3)%4];\n                if(i==2) z1=a[j][(k+1)%4],z2=a[j][(k+3)%4];\n                if(i==3) z1=a[j][(k+1)%4],z2=a[j][(k+2)%4];\n                b[j][k]=node(find(max(1,z1-x)),find(z1),find(max(1,z2-x)),find(z2));\n            }\n        }\n        if(check()) return true;\n    }\n    return false;\n}\nnamespace Solve2\n{\n    bool solve(int x)\n    {\n        for(int i=1;i<=n;++i)\n        {\n            bool u=false;\n            for(int j=0;j<=1;++j)\n            {\n                if(mx-a[i][j]>x||a[i][(j+1)%2]-mn>x) continue;\n                u=true;\n            }\n            if(!u) return false;\n        }\n        return true;\n    }\n}\nnamespace Solve3\n{\n    int c[N],q;\n    struct str\n    {\n        int x,h,u;\n        str() {}\n        str(int x,int h,int u):x(x),h(h),u(u) {}\n    }b[N];\n    bool cmp(str a,str b)\n    {\n        return a.h<b.h;\n    }\n    bool check()\n    {\n        sort(b+1,b+q+1,cmp);\n        for(int i=1;i<=n;++i) c[i]=0;\n        int x=1,s=0;\n        for(int i=1;i<=m;++i)\n        {\n            while(x<=q&&b[x].h==i)\n            {\n                if(c[b[x].x]==0) ++s;\n                c[b[x].x]+=b[x].u;\n                if(c[b[x].x]==0) --s;\n                ++x;\n            }\n            if(s==n) return true;\n        }\n        return false;\n    }\n    bool solve(int x)\n    {\n        for(int i=1;i<=2;++i)\n        {\n            q=0;\n            for(int j=1;j<=n;++j)\n            {\n                for(int k=0;k<=2;++k)\n                {\n                    if(mx-a[j][k]>x||a[j][(k+i)%3]-mn>x) continue;\n                    int z=0;\n                    if(i==1) z=a[j][(k+2)%3];\n                    if(i==2) z=a[j][(k+1)%3];\n                    b[++q]=str(j,find(max(1,z-x)),1);\n                    b[++q]=str(j,find(z+1),-1);\n                }\n            }\n            if(check()) return true;\n        }\n        return false;\n    }\n}\nvoid abc()\n{\n    scanf(\"%d\",&n);\n    mx=1,mn=3e4;\n    m=0;\n    for(int i=0;i<=k-1;++i)\n    {\n        for(int j=1;j<=n;++j)\n        {\n            scanf(\"%d\",&a[j][i]);\n            e[++m]=a[j][i];\n            mx=max(mx,a[j][i]);\n            mn=min(mn,a[j][i]);\n        }\n    }\n    if(k==1)\n    {\n        printf(\"%d\\n\",mx-mn);\n        return;\n    }\n    sort(e+1,e+m+1);\n    m=unique(e+1,e+m+1)-e-1;\n    auto chk=[&](int x)\n    {\n        if(k==2) return Solve2::solve(x);\n        if(k==3) return Solve3::solve(x);\n        if(k==4) return solve(x);\n        return false;\n    };\n    int l=0,r=3e4;\n    while(l<r)\n    {\n        int z=l+r>>1;\n        if(chk(z)) r=z;\n        else l=z+1;\n    }\n    printf(\"%d\\n\",l);\n}\nint main()\n{\n    int T;\n    scanf(\"%d%d\",&T,&k);\n    while(T--) abc();\n    return 0;\n}\n```\n\n","slug":"NOI-spring-test-T4-solution","published":1,"updated":"2023-03-10T03:23:52.661Z","_id":"clewrree10000kkj7di5z6827","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h2><p>给你一个 $k$ 行 $n$ 列的矩阵（$k \\leq 4$），每次可以选定一列进行一次循环位移，定义 $c(i)$ 为任意次操作后第 $i$ 行的最大值与最小值之差，求 $\\max c(i)$ 的最小值。</p>\n<h2 id=\"提示\"><a href=\"#提示\" class=\"headerlink\" title=\"提示\"></a>提示</h2><p>尝试二分答案。</p>\n<p>考虑全局最大值一定是某一行的最大值，全局最小值一定是某一行最小值。</p>\n<p>最大值和最小值在不同行一定不劣于在同一行。</p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>最大值最小，考虑二分答案。</p>\n<p>接下来我们要判定 $\\forall i,c(i)\\leq x$。我们按 $k$ 从小到大解决。</p>\n<p>$k&#x3D;1$ 显然等于最大值减最小值。</p>\n<p>假如我们已经钦定了某一行的最大值 $mx_i$，显然在这一行的每一数应该大于等于 $mx_i-x$。但是直接枚举显然不优。我们发现全局最大值 $mx$ 一定是某一行的最大值，由于行与行之间没有区别，我们直接钦定 $mx_1 &#x3D; mx$。</p>\n<p>同理，我们也可以发现全局最小值 $mn$ 也一定是某一行的最小值。如果把 $mx$ 和 $mn$ 放在同一行，答案 $mx-mn$ 显然达到了上界，所以把 $mx$ 和 $mn$ 不同行一定不劣。所以我们钦定 $mx_1 &#x3D; mx,mn_2 &#x3D; mn$，就可以判断每一列是否可能满足限制。至此，我们已经解决了 $k&#x3D;2$。</p>\n<p>对于 $k&#x3D;3$ 的情况，我们可以钦定 $mx_1 &#x3D; mx$，但是最小值在第二行或第三行实际上是不同的情况，所以我们需要枚举最小值所在的行，令剩下没有钦定的行为 $i$，钦定最小值为 $mn_i$。对于某一列，总共有三种情况，首先要去除不满足全局最大最小限制的情况，还要满足 $a_i \\leq mn_i + x$，即<br>$$<br>a_i-x \\leq mn_i \\leq a_i<br>$$<br>总共有 $O(n)$ 个这样的式子，$mn_i$ 必须要满足每一列至少有一个式子成立。显然如果存在这样一个 $mn_i$，一定可以找到一个这一行的数满足每一列至少成立一个式子（即向上找到第一个上界）。问题转化为有 $n$ 种区间，求是否存在一个点使得每种区间都存在一个区间包含这个点。我们只需要使用扫描线，用一个数组记录当前点被第 $i$ 种区间包含了多少次即可。</p>\n<p>对于 $k&#x3D;4$ 的情况，我们用一样的方法，发现变量变成了两个，即有 $O(n)$ 组</p>\n\n$$\n\\left\\{\n\\begin{aligned}\na_i-x \\leq mn_i \\leq a_i\\\\\na_j-x \\leq mn_j \\leq a_j\n\\end{aligned}\n\\right.\n$$\n\n\n<p>这样的式子，$mn_i$ 与 $mn_j$ 必须满足每一列至少有一组式子成立。转换过来就变成了二维的，有 $n$ 种矩阵，求平面上是否存在一个点使得每种矩阵都存在一个矩阵包含这个点。同样考虑扫描线，用线段树维护当前高度的一条线上每个点被多少种区间覆盖，和这个的全局最大值，但是这里不好去重，我采用的比较暴力的方法：由于每种矩阵最多只有 $4$ 个，所以我们可以容斥一下变成至多 $15$ 个矩阵。我们只需要判断被覆盖的区间数的最大值是不是 $n$ 即可。</p>\n<h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1000001</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m,k,q,mx,mn,a[N][<span class=\"number\">4</span>],e[N];</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">node</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> x1,x2,y1,y2;</span><br><span class=\"line\">    <span class=\"built_in\">node</span>() &#123;&#125;</span><br><span class=\"line\">    <span class=\"built_in\">node</span>(<span class=\"type\">int</span> x1,<span class=\"type\">int</span> x2,<span class=\"type\">int</span> y1,<span class=\"type\">int</span> y2):<span class=\"built_in\">x1</span>(x1),<span class=\"built_in\">x2</span>(x2),<span class=\"built_in\">y1</span>(y1),<span class=\"built_in\">y2</span>(y2) &#123;&#125;</span><br><span class=\"line\">&#125;b[N][<span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">line</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> x1,x2,h,u;</span><br><span class=\"line\">    <span class=\"built_in\">line</span>() &#123;&#125;</span><br><span class=\"line\">    <span class=\"built_in\">line</span>(<span class=\"type\">int</span> x1,<span class=\"type\">int</span> x2,<span class=\"type\">int</span> h,<span class=\"type\">int</span> u):<span class=\"built_in\">x1</span>(x1),<span class=\"built_in\">x2</span>(x2),<span class=\"built_in\">h</span>(h),<span class=\"built_in\">u</span>(u) &#123;&#125;</span><br><span class=\"line\">&#125;c[N&lt;&lt;<span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(line a,line b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.h&lt;b.h;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">tree</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> l,r,s,k;</span><br><span class=\"line\">&#125;T[N&lt;&lt;<span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pushup</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    T[x].s=<span class=\"built_in\">max</span>(T[x&lt;&lt;<span class=\"number\">1</span>].s,T[x&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].s);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pushdown</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(T[x].k==<span class=\"number\">0</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    T[x&lt;&lt;<span class=\"number\">1</span>].s+=T[x].k;</span><br><span class=\"line\">    T[x&lt;&lt;<span class=\"number\">1</span>].k+=T[x].k;</span><br><span class=\"line\">    T[x&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].s+=T[x].k;</span><br><span class=\"line\">    T[x&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].k+=T[x].k;</span><br><span class=\"line\">    T[x].k=<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> l,<span class=\"type\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    T[x].l=l;</span><br><span class=\"line\">    T[x].r=r;</span><br><span class=\"line\">    T[x].s=T[x].k=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l==r) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> z=l+r&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(x&lt;&lt;<span class=\"number\">1</span>,l,z);</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(x&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>,z+<span class=\"number\">1</span>,r);</span><br><span class=\"line\">    <span class=\"built_in\">pushup</span>(x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> l,<span class=\"type\">int</span> r,<span class=\"type\">int</span> k)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l&gt;r) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(T[x].l&gt;=l&amp;&amp;T[x].r&lt;=r)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        T[x].s+=k;</span><br><span class=\"line\">        T[x].k+=k;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">pushdown</span>(x);</span><br><span class=\"line\">    <span class=\"type\">int</span> z=T[x].l+T[x].r&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l&lt;=z) <span class=\"built_in\">add</span>(x&lt;&lt;<span class=\"number\">1</span>,l,r,k);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r&gt;z) <span class=\"built_in\">add</span>(x&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>,l,r,k);</span><br><span class=\"line\">    <span class=\"built_in\">pushup</span>(x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add_node</span><span class=\"params\">(<span class=\"type\">int</span> u,node p1=node(<span class=\"number\">1</span>,<span class=\"number\">3e4</span>,<span class=\"number\">1</span>,<span class=\"number\">3e4</span>),node p2=node(<span class=\"number\">1</span>,<span class=\"number\">3e4</span>,<span class=\"number\">1</span>,<span class=\"number\">3e4</span>),node p3=node(<span class=\"number\">1</span>,<span class=\"number\">3e4</span>,<span class=\"number\">1</span>,<span class=\"number\">3e4</span>),node p4=node(<span class=\"number\">1</span>,<span class=\"number\">3e4</span>,<span class=\"number\">1</span>,<span class=\"number\">3e4</span>))</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> x1=<span class=\"built_in\">max</span>(<span class=\"built_in\">max</span>(p1.x1,p2.x1),<span class=\"built_in\">max</span>(p3.x1,p4.x1));</span><br><span class=\"line\">    <span class=\"type\">int</span> x2=<span class=\"built_in\">min</span>(<span class=\"built_in\">min</span>(p1.x2,p2.x2),<span class=\"built_in\">min</span>(p3.x2,p4.x2));</span><br><span class=\"line\">    <span class=\"type\">int</span> y1=<span class=\"built_in\">max</span>(<span class=\"built_in\">max</span>(p1.y1,p2.y1),<span class=\"built_in\">max</span>(p3.y1,p4.y1));</span><br><span class=\"line\">    <span class=\"type\">int</span> y2=<span class=\"built_in\">min</span>(<span class=\"built_in\">min</span>(p1.y2,p2.y2),<span class=\"built_in\">min</span>(p3.y2,p4.y2));</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x1&lt;=x2&amp;&amp;y1&lt;=y2)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        c[++q]=<span class=\"built_in\">line</span>(x1,x2,y1,u);</span><br><span class=\"line\">        c[++q]=<span class=\"built_in\">line</span>(x1,x2,y2+<span class=\"number\">1</span>,-u);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">check</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    q=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">add_node</span>(<span class=\"number\">1</span>,b[i][<span class=\"number\">0</span>]);</span><br><span class=\"line\">        <span class=\"built_in\">add_node</span>(<span class=\"number\">1</span>,b[i][<span class=\"number\">1</span>]);</span><br><span class=\"line\">        <span class=\"built_in\">add_node</span>(<span class=\"number\">1</span>,b[i][<span class=\"number\">2</span>]);</span><br><span class=\"line\">        <span class=\"built_in\">add_node</span>(<span class=\"number\">1</span>,b[i][<span class=\"number\">3</span>]);</span><br><span class=\"line\">        <span class=\"built_in\">add_node</span>(<span class=\"number\">-1</span>,b[i][<span class=\"number\">0</span>],b[i][<span class=\"number\">1</span>]);</span><br><span class=\"line\">        <span class=\"built_in\">add_node</span>(<span class=\"number\">-1</span>,b[i][<span class=\"number\">0</span>],b[i][<span class=\"number\">2</span>]);</span><br><span class=\"line\">        <span class=\"built_in\">add_node</span>(<span class=\"number\">-1</span>,b[i][<span class=\"number\">0</span>],b[i][<span class=\"number\">3</span>]);</span><br><span class=\"line\">        <span class=\"built_in\">add_node</span>(<span class=\"number\">-1</span>,b[i][<span class=\"number\">1</span>],b[i][<span class=\"number\">2</span>]);</span><br><span class=\"line\">        <span class=\"built_in\">add_node</span>(<span class=\"number\">-1</span>,b[i][<span class=\"number\">1</span>],b[i][<span class=\"number\">3</span>]);</span><br><span class=\"line\">        <span class=\"built_in\">add_node</span>(<span class=\"number\">-1</span>,b[i][<span class=\"number\">2</span>],b[i][<span class=\"number\">3</span>]);</span><br><span class=\"line\">        <span class=\"built_in\">add_node</span>(<span class=\"number\">1</span>,b[i][<span class=\"number\">0</span>],b[i][<span class=\"number\">1</span>],b[i][<span class=\"number\">2</span>]);</span><br><span class=\"line\">        <span class=\"built_in\">add_node</span>(<span class=\"number\">1</span>,b[i][<span class=\"number\">0</span>],b[i][<span class=\"number\">1</span>],b[i][<span class=\"number\">3</span>]);</span><br><span class=\"line\">        <span class=\"built_in\">add_node</span>(<span class=\"number\">1</span>,b[i][<span class=\"number\">0</span>],b[i][<span class=\"number\">2</span>],b[i][<span class=\"number\">3</span>]);</span><br><span class=\"line\">        <span class=\"built_in\">add_node</span>(<span class=\"number\">1</span>,b[i][<span class=\"number\">1</span>],b[i][<span class=\"number\">2</span>],b[i][<span class=\"number\">3</span>]);</span><br><span class=\"line\">        <span class=\"built_in\">add_node</span>(<span class=\"number\">-1</span>,b[i][<span class=\"number\">0</span>],b[i][<span class=\"number\">1</span>],b[i][<span class=\"number\">2</span>],b[i][<span class=\"number\">3</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(c+<span class=\"number\">1</span>,c+q+<span class=\"number\">1</span>,cmp);</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(<span class=\"number\">1</span>,<span class=\"number\">1</span>,m);</span><br><span class=\"line\">    <span class=\"type\">int</span> x=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(x&lt;=q&amp;&amp;c[x].h==i)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">add</span>(<span class=\"number\">1</span>,c[x].x1,c[x].x2,c[x].u);</span><br><span class=\"line\">            ++x;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(T[<span class=\"number\">1</span>].s==n) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">lower_bound</span>(e+<span class=\"number\">1</span>,e+m+<span class=\"number\">1</span>,x)-e;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">solve</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=<span class=\"number\">3</span>;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=n;++j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> k=<span class=\"number\">0</span>;k&lt;=<span class=\"number\">3</span>;++k) b[j][k]=<span class=\"built_in\">node</span>(<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=n;++j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> k=<span class=\"number\">0</span>;k&lt;=<span class=\"number\">3</span>;++k)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(mx-a[j][k]&gt;x||a[j][(k+i)%<span class=\"number\">4</span>]-mn&gt;x) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                <span class=\"type\">int</span> z1=<span class=\"number\">0</span>,z2=<span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(i==<span class=\"number\">1</span>) z1=a[j][(k+<span class=\"number\">2</span>)%<span class=\"number\">4</span>],z2=a[j][(k+<span class=\"number\">3</span>)%<span class=\"number\">4</span>];</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(i==<span class=\"number\">2</span>) z1=a[j][(k+<span class=\"number\">1</span>)%<span class=\"number\">4</span>],z2=a[j][(k+<span class=\"number\">3</span>)%<span class=\"number\">4</span>];</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(i==<span class=\"number\">3</span>) z1=a[j][(k+<span class=\"number\">1</span>)%<span class=\"number\">4</span>],z2=a[j][(k+<span class=\"number\">2</span>)%<span class=\"number\">4</span>];</span><br><span class=\"line\">                b[j][k]=<span class=\"built_in\">node</span>(<span class=\"built_in\">find</span>(<span class=\"built_in\">max</span>(<span class=\"number\">1</span>,z1-x)),<span class=\"built_in\">find</span>(z1),<span class=\"built_in\">find</span>(<span class=\"built_in\">max</span>(<span class=\"number\">1</span>,z2-x)),<span class=\"built_in\">find</span>(z2));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">check</span>()) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> Solve2</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">solve</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">bool</span> u=<span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;=<span class=\"number\">1</span>;++j)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(mx-a[i][j]&gt;x||a[i][(j+<span class=\"number\">1</span>)%<span class=\"number\">2</span>]-mn&gt;x) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                u=<span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!u) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> Solve3</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> c[N],q;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">str</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x,h,u;</span><br><span class=\"line\">        <span class=\"built_in\">str</span>() &#123;&#125;</span><br><span class=\"line\">        <span class=\"built_in\">str</span>(<span class=\"type\">int</span> x,<span class=\"type\">int</span> h,<span class=\"type\">int</span> u):<span class=\"built_in\">x</span>(x),<span class=\"built_in\">h</span>(h),<span class=\"built_in\">u</span>(u) &#123;&#125;</span><br><span class=\"line\">    &#125;b[N];</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(str a,str b)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a.h&lt;b.h;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">check</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">sort</span>(b+<span class=\"number\">1</span>,b+q+<span class=\"number\">1</span>,cmp);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i) c[i]=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> x=<span class=\"number\">1</span>,s=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(x&lt;=q&amp;&amp;b[x].h==i)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(c[b[x].x]==<span class=\"number\">0</span>) ++s;</span><br><span class=\"line\">                c[b[x].x]+=b[x].u;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(c[b[x].x]==<span class=\"number\">0</span>) --s;</span><br><span class=\"line\">                ++x;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(s==n) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">solve</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=<span class=\"number\">2</span>;++i)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            q=<span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=n;++j)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"type\">int</span> k=<span class=\"number\">0</span>;k&lt;=<span class=\"number\">2</span>;++k)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(mx-a[j][k]&gt;x||a[j][(k+i)%<span class=\"number\">3</span>]-mn&gt;x) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                    <span class=\"type\">int</span> z=<span class=\"number\">0</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(i==<span class=\"number\">1</span>) z=a[j][(k+<span class=\"number\">2</span>)%<span class=\"number\">3</span>];</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(i==<span class=\"number\">2</span>) z=a[j][(k+<span class=\"number\">1</span>)%<span class=\"number\">3</span>];</span><br><span class=\"line\">                    b[++q]=<span class=\"built_in\">str</span>(j,<span class=\"built_in\">find</span>(<span class=\"built_in\">max</span>(<span class=\"number\">1</span>,z-x)),<span class=\"number\">1</span>);</span><br><span class=\"line\">                    b[++q]=<span class=\"built_in\">str</span>(j,<span class=\"built_in\">find</span>(z+<span class=\"number\">1</span>),<span class=\"number\">-1</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"built_in\">check</span>()) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">abc</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">    mx=<span class=\"number\">1</span>,mn=<span class=\"number\">3e4</span>;</span><br><span class=\"line\">    m=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;=k<span class=\"number\">-1</span>;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=n;++j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;a[j][i]);</span><br><span class=\"line\">            e[++m]=a[j][i];</span><br><span class=\"line\">            mx=<span class=\"built_in\">max</span>(mx,a[j][i]);</span><br><span class=\"line\">            mn=<span class=\"built_in\">min</span>(mn,a[j][i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(k==<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,mx-mn);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(e+<span class=\"number\">1</span>,e+m+<span class=\"number\">1</span>);</span><br><span class=\"line\">    m=<span class=\"built_in\">unique</span>(e+<span class=\"number\">1</span>,e+m+<span class=\"number\">1</span>)-e<span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> chk=[&amp;](<span class=\"type\">int</span> x)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(k==<span class=\"number\">2</span>) <span class=\"keyword\">return</span> Solve2::<span class=\"built_in\">solve</span>(x);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(k==<span class=\"number\">3</span>) <span class=\"keyword\">return</span> Solve3::<span class=\"built_in\">solve</span>(x);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(k==<span class=\"number\">4</span>) <span class=\"keyword\">return</span> <span class=\"built_in\">solve</span>(x);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"type\">int</span> l=<span class=\"number\">0</span>,r=<span class=\"number\">3e4</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(l&lt;r)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> z=l+r&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">chk</span>(z)) r=z;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> l=z+<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,l);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> T;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;T,&amp;k);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(T--) <span class=\"built_in\">abc</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h2><p>给你一个 $k$ 行 $n$ 列的矩阵（$k \\leq 4$），每次可以选定一列进行一次循环位移，定义 $c(i)$ 为任意次操作后第 $i$ 行的最大值与最小值之差，求 $\\max c(i)$ 的最小值。</p>\n<h2 id=\"提示\"><a href=\"#提示\" class=\"headerlink\" title=\"提示\"></a>提示</h2><p>尝试二分答案。</p>\n<p>考虑全局最大值一定是某一行的最大值，全局最小值一定是某一行最小值。</p>\n<p>最大值和最小值在不同行一定不劣于在同一行。</p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>最大值最小，考虑二分答案。</p>\n<p>接下来我们要判定 $\\forall i,c(i)\\leq x$。我们按 $k$ 从小到大解决。</p>\n<p>$k&#x3D;1$ 显然等于最大值减最小值。</p>\n<p>假如我们已经钦定了某一行的最大值 $mx_i$，显然在这一行的每一数应该大于等于 $mx_i-x$。但是直接枚举显然不优。我们发现全局最大值 $mx$ 一定是某一行的最大值，由于行与行之间没有区别，我们直接钦定 $mx_1 &#x3D; mx$。</p>\n<p>同理，我们也可以发现全局最小值 $mn$ 也一定是某一行的最小值。如果把 $mx$ 和 $mn$ 放在同一行，答案 $mx-mn$ 显然达到了上界，所以把 $mx$ 和 $mn$ 不同行一定不劣。所以我们钦定 $mx_1 &#x3D; mx,mn_2 &#x3D; mn$，就可以判断每一列是否可能满足限制。至此，我们已经解决了 $k&#x3D;2$。</p>\n<p>对于 $k&#x3D;3$ 的情况，我们可以钦定 $mx_1 &#x3D; mx$，但是最小值在第二行或第三行实际上是不同的情况，所以我们需要枚举最小值所在的行，令剩下没有钦定的行为 $i$，钦定最小值为 $mn_i$。对于某一列，总共有三种情况，首先要去除不满足全局最大最小限制的情况，还要满足 $a_i \\leq mn_i + x$，即<br>$$<br>a_i-x \\leq mn_i \\leq a_i<br>$$<br>总共有 $O(n)$ 个这样的式子，$mn_i$ 必须要满足每一列至少有一个式子成立。显然如果存在这样一个 $mn_i$，一定可以找到一个这一行的数满足每一列至少成立一个式子（即向上找到第一个上界）。问题转化为有 $n$ 种区间，求是否存在一个点使得每种区间都存在一个区间包含这个点。我们只需要使用扫描线，用一个数组记录当前点被第 $i$ 种区间包含了多少次即可。</p>\n<p>对于 $k&#x3D;4$ 的情况，我们用一样的方法，发现变量变成了两个，即有 $O(n)$ 组</p>\n\n$$\n\\left\\{\n\\begin{aligned}\na_i-x \\leq mn_i \\leq a_i\\\\\na_j-x \\leq mn_j \\leq a_j\n\\end{aligned}\n\\right.\n$$\n\n\n<p>这样的式子，$mn_i$ 与 $mn_j$ 必须满足每一列至少有一组式子成立。转换过来就变成了二维的，有 $n$ 种矩阵，求平面上是否存在一个点使得每种矩阵都存在一个矩阵包含这个点。同样考虑扫描线，用线段树维护当前高度的一条线上每个点被多少种区间覆盖，和这个的全局最大值，但是这里不好去重，我采用的比较暴力的方法：由于每种矩阵最多只有 $4$ 个，所以我们可以容斥一下变成至多 $15$ 个矩阵。我们只需要判断被覆盖的区间数的最大值是不是 $n$ 即可。</p>\n<h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1000001</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m,k,q,mx,mn,a[N][<span class=\"number\">4</span>],e[N];</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">node</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> x1,x2,y1,y2;</span><br><span class=\"line\">    <span class=\"built_in\">node</span>() &#123;&#125;</span><br><span class=\"line\">    <span class=\"built_in\">node</span>(<span class=\"type\">int</span> x1,<span class=\"type\">int</span> x2,<span class=\"type\">int</span> y1,<span class=\"type\">int</span> y2):<span class=\"built_in\">x1</span>(x1),<span class=\"built_in\">x2</span>(x2),<span class=\"built_in\">y1</span>(y1),<span class=\"built_in\">y2</span>(y2) &#123;&#125;</span><br><span class=\"line\">&#125;b[N][<span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">line</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> x1,x2,h,u;</span><br><span class=\"line\">    <span class=\"built_in\">line</span>() &#123;&#125;</span><br><span class=\"line\">    <span class=\"built_in\">line</span>(<span class=\"type\">int</span> x1,<span class=\"type\">int</span> x2,<span class=\"type\">int</span> h,<span class=\"type\">int</span> u):<span class=\"built_in\">x1</span>(x1),<span class=\"built_in\">x2</span>(x2),<span class=\"built_in\">h</span>(h),<span class=\"built_in\">u</span>(u) &#123;&#125;</span><br><span class=\"line\">&#125;c[N&lt;&lt;<span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(line a,line b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.h&lt;b.h;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">tree</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> l,r,s,k;</span><br><span class=\"line\">&#125;T[N&lt;&lt;<span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pushup</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    T[x].s=<span class=\"built_in\">max</span>(T[x&lt;&lt;<span class=\"number\">1</span>].s,T[x&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].s);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pushdown</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(T[x].k==<span class=\"number\">0</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    T[x&lt;&lt;<span class=\"number\">1</span>].s+=T[x].k;</span><br><span class=\"line\">    T[x&lt;&lt;<span class=\"number\">1</span>].k+=T[x].k;</span><br><span class=\"line\">    T[x&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].s+=T[x].k;</span><br><span class=\"line\">    T[x&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].k+=T[x].k;</span><br><span class=\"line\">    T[x].k=<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> l,<span class=\"type\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    T[x].l=l;</span><br><span class=\"line\">    T[x].r=r;</span><br><span class=\"line\">    T[x].s=T[x].k=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l==r) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> z=l+r&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(x&lt;&lt;<span class=\"number\">1</span>,l,z);</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(x&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>,z+<span class=\"number\">1</span>,r);</span><br><span class=\"line\">    <span class=\"built_in\">pushup</span>(x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> l,<span class=\"type\">int</span> r,<span class=\"type\">int</span> k)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l&gt;r) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(T[x].l&gt;=l&amp;&amp;T[x].r&lt;=r)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        T[x].s+=k;</span><br><span class=\"line\">        T[x].k+=k;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">pushdown</span>(x);</span><br><span class=\"line\">    <span class=\"type\">int</span> z=T[x].l+T[x].r&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l&lt;=z) <span class=\"built_in\">add</span>(x&lt;&lt;<span class=\"number\">1</span>,l,r,k);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r&gt;z) <span class=\"built_in\">add</span>(x&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>,l,r,k);</span><br><span class=\"line\">    <span class=\"built_in\">pushup</span>(x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add_node</span><span class=\"params\">(<span class=\"type\">int</span> u,node p1=node(<span class=\"number\">1</span>,<span class=\"number\">3e4</span>,<span class=\"number\">1</span>,<span class=\"number\">3e4</span>),node p2=node(<span class=\"number\">1</span>,<span class=\"number\">3e4</span>,<span class=\"number\">1</span>,<span class=\"number\">3e4</span>),node p3=node(<span class=\"number\">1</span>,<span class=\"number\">3e4</span>,<span class=\"number\">1</span>,<span class=\"number\">3e4</span>),node p4=node(<span class=\"number\">1</span>,<span class=\"number\">3e4</span>,<span class=\"number\">1</span>,<span class=\"number\">3e4</span>))</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> x1=<span class=\"built_in\">max</span>(<span class=\"built_in\">max</span>(p1.x1,p2.x1),<span class=\"built_in\">max</span>(p3.x1,p4.x1));</span><br><span class=\"line\">    <span class=\"type\">int</span> x2=<span class=\"built_in\">min</span>(<span class=\"built_in\">min</span>(p1.x2,p2.x2),<span class=\"built_in\">min</span>(p3.x2,p4.x2));</span><br><span class=\"line\">    <span class=\"type\">int</span> y1=<span class=\"built_in\">max</span>(<span class=\"built_in\">max</span>(p1.y1,p2.y1),<span class=\"built_in\">max</span>(p3.y1,p4.y1));</span><br><span class=\"line\">    <span class=\"type\">int</span> y2=<span class=\"built_in\">min</span>(<span class=\"built_in\">min</span>(p1.y2,p2.y2),<span class=\"built_in\">min</span>(p3.y2,p4.y2));</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x1&lt;=x2&amp;&amp;y1&lt;=y2)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        c[++q]=<span class=\"built_in\">line</span>(x1,x2,y1,u);</span><br><span class=\"line\">        c[++q]=<span class=\"built_in\">line</span>(x1,x2,y2+<span class=\"number\">1</span>,-u);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">check</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    q=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">add_node</span>(<span class=\"number\">1</span>,b[i][<span class=\"number\">0</span>]);</span><br><span class=\"line\">        <span class=\"built_in\">add_node</span>(<span class=\"number\">1</span>,b[i][<span class=\"number\">1</span>]);</span><br><span class=\"line\">        <span class=\"built_in\">add_node</span>(<span class=\"number\">1</span>,b[i][<span class=\"number\">2</span>]);</span><br><span class=\"line\">        <span class=\"built_in\">add_node</span>(<span class=\"number\">1</span>,b[i][<span class=\"number\">3</span>]);</span><br><span class=\"line\">        <span class=\"built_in\">add_node</span>(<span class=\"number\">-1</span>,b[i][<span class=\"number\">0</span>],b[i][<span class=\"number\">1</span>]);</span><br><span class=\"line\">        <span class=\"built_in\">add_node</span>(<span class=\"number\">-1</span>,b[i][<span class=\"number\">0</span>],b[i][<span class=\"number\">2</span>]);</span><br><span class=\"line\">        <span class=\"built_in\">add_node</span>(<span class=\"number\">-1</span>,b[i][<span class=\"number\">0</span>],b[i][<span class=\"number\">3</span>]);</span><br><span class=\"line\">        <span class=\"built_in\">add_node</span>(<span class=\"number\">-1</span>,b[i][<span class=\"number\">1</span>],b[i][<span class=\"number\">2</span>]);</span><br><span class=\"line\">        <span class=\"built_in\">add_node</span>(<span class=\"number\">-1</span>,b[i][<span class=\"number\">1</span>],b[i][<span class=\"number\">3</span>]);</span><br><span class=\"line\">        <span class=\"built_in\">add_node</span>(<span class=\"number\">-1</span>,b[i][<span class=\"number\">2</span>],b[i][<span class=\"number\">3</span>]);</span><br><span class=\"line\">        <span class=\"built_in\">add_node</span>(<span class=\"number\">1</span>,b[i][<span class=\"number\">0</span>],b[i][<span class=\"number\">1</span>],b[i][<span class=\"number\">2</span>]);</span><br><span class=\"line\">        <span class=\"built_in\">add_node</span>(<span class=\"number\">1</span>,b[i][<span class=\"number\">0</span>],b[i][<span class=\"number\">1</span>],b[i][<span class=\"number\">3</span>]);</span><br><span class=\"line\">        <span class=\"built_in\">add_node</span>(<span class=\"number\">1</span>,b[i][<span class=\"number\">0</span>],b[i][<span class=\"number\">2</span>],b[i][<span class=\"number\">3</span>]);</span><br><span class=\"line\">        <span class=\"built_in\">add_node</span>(<span class=\"number\">1</span>,b[i][<span class=\"number\">1</span>],b[i][<span class=\"number\">2</span>],b[i][<span class=\"number\">3</span>]);</span><br><span class=\"line\">        <span class=\"built_in\">add_node</span>(<span class=\"number\">-1</span>,b[i][<span class=\"number\">0</span>],b[i][<span class=\"number\">1</span>],b[i][<span class=\"number\">2</span>],b[i][<span class=\"number\">3</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(c+<span class=\"number\">1</span>,c+q+<span class=\"number\">1</span>,cmp);</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(<span class=\"number\">1</span>,<span class=\"number\">1</span>,m);</span><br><span class=\"line\">    <span class=\"type\">int</span> x=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(x&lt;=q&amp;&amp;c[x].h==i)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">add</span>(<span class=\"number\">1</span>,c[x].x1,c[x].x2,c[x].u);</span><br><span class=\"line\">            ++x;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(T[<span class=\"number\">1</span>].s==n) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">lower_bound</span>(e+<span class=\"number\">1</span>,e+m+<span class=\"number\">1</span>,x)-e;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">solve</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=<span class=\"number\">3</span>;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=n;++j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> k=<span class=\"number\">0</span>;k&lt;=<span class=\"number\">3</span>;++k) b[j][k]=<span class=\"built_in\">node</span>(<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=n;++j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> k=<span class=\"number\">0</span>;k&lt;=<span class=\"number\">3</span>;++k)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(mx-a[j][k]&gt;x||a[j][(k+i)%<span class=\"number\">4</span>]-mn&gt;x) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                <span class=\"type\">int</span> z1=<span class=\"number\">0</span>,z2=<span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(i==<span class=\"number\">1</span>) z1=a[j][(k+<span class=\"number\">2</span>)%<span class=\"number\">4</span>],z2=a[j][(k+<span class=\"number\">3</span>)%<span class=\"number\">4</span>];</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(i==<span class=\"number\">2</span>) z1=a[j][(k+<span class=\"number\">1</span>)%<span class=\"number\">4</span>],z2=a[j][(k+<span class=\"number\">3</span>)%<span class=\"number\">4</span>];</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(i==<span class=\"number\">3</span>) z1=a[j][(k+<span class=\"number\">1</span>)%<span class=\"number\">4</span>],z2=a[j][(k+<span class=\"number\">2</span>)%<span class=\"number\">4</span>];</span><br><span class=\"line\">                b[j][k]=<span class=\"built_in\">node</span>(<span class=\"built_in\">find</span>(<span class=\"built_in\">max</span>(<span class=\"number\">1</span>,z1-x)),<span class=\"built_in\">find</span>(z1),<span class=\"built_in\">find</span>(<span class=\"built_in\">max</span>(<span class=\"number\">1</span>,z2-x)),<span class=\"built_in\">find</span>(z2));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">check</span>()) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> Solve2</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">solve</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">bool</span> u=<span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;=<span class=\"number\">1</span>;++j)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(mx-a[i][j]&gt;x||a[i][(j+<span class=\"number\">1</span>)%<span class=\"number\">2</span>]-mn&gt;x) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                u=<span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!u) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> Solve3</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> c[N],q;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">str</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x,h,u;</span><br><span class=\"line\">        <span class=\"built_in\">str</span>() &#123;&#125;</span><br><span class=\"line\">        <span class=\"built_in\">str</span>(<span class=\"type\">int</span> x,<span class=\"type\">int</span> h,<span class=\"type\">int</span> u):<span class=\"built_in\">x</span>(x),<span class=\"built_in\">h</span>(h),<span class=\"built_in\">u</span>(u) &#123;&#125;</span><br><span class=\"line\">    &#125;b[N];</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(str a,str b)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a.h&lt;b.h;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">check</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">sort</span>(b+<span class=\"number\">1</span>,b+q+<span class=\"number\">1</span>,cmp);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i) c[i]=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> x=<span class=\"number\">1</span>,s=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(x&lt;=q&amp;&amp;b[x].h==i)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(c[b[x].x]==<span class=\"number\">0</span>) ++s;</span><br><span class=\"line\">                c[b[x].x]+=b[x].u;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(c[b[x].x]==<span class=\"number\">0</span>) --s;</span><br><span class=\"line\">                ++x;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(s==n) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">solve</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=<span class=\"number\">2</span>;++i)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            q=<span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=n;++j)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"type\">int</span> k=<span class=\"number\">0</span>;k&lt;=<span class=\"number\">2</span>;++k)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(mx-a[j][k]&gt;x||a[j][(k+i)%<span class=\"number\">3</span>]-mn&gt;x) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                    <span class=\"type\">int</span> z=<span class=\"number\">0</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(i==<span class=\"number\">1</span>) z=a[j][(k+<span class=\"number\">2</span>)%<span class=\"number\">3</span>];</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(i==<span class=\"number\">2</span>) z=a[j][(k+<span class=\"number\">1</span>)%<span class=\"number\">3</span>];</span><br><span class=\"line\">                    b[++q]=<span class=\"built_in\">str</span>(j,<span class=\"built_in\">find</span>(<span class=\"built_in\">max</span>(<span class=\"number\">1</span>,z-x)),<span class=\"number\">1</span>);</span><br><span class=\"line\">                    b[++q]=<span class=\"built_in\">str</span>(j,<span class=\"built_in\">find</span>(z+<span class=\"number\">1</span>),<span class=\"number\">-1</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"built_in\">check</span>()) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">abc</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">    mx=<span class=\"number\">1</span>,mn=<span class=\"number\">3e4</span>;</span><br><span class=\"line\">    m=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;=k<span class=\"number\">-1</span>;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=n;++j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;a[j][i]);</span><br><span class=\"line\">            e[++m]=a[j][i];</span><br><span class=\"line\">            mx=<span class=\"built_in\">max</span>(mx,a[j][i]);</span><br><span class=\"line\">            mn=<span class=\"built_in\">min</span>(mn,a[j][i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(k==<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,mx-mn);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(e+<span class=\"number\">1</span>,e+m+<span class=\"number\">1</span>);</span><br><span class=\"line\">    m=<span class=\"built_in\">unique</span>(e+<span class=\"number\">1</span>,e+m+<span class=\"number\">1</span>)-e<span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> chk=[&amp;](<span class=\"type\">int</span> x)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(k==<span class=\"number\">2</span>) <span class=\"keyword\">return</span> Solve2::<span class=\"built_in\">solve</span>(x);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(k==<span class=\"number\">3</span>) <span class=\"keyword\">return</span> Solve3::<span class=\"built_in\">solve</span>(x);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(k==<span class=\"number\">4</span>) <span class=\"keyword\">return</span> <span class=\"built_in\">solve</span>(x);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"type\">int</span> l=<span class=\"number\">0</span>,r=<span class=\"number\">3e4</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(l&lt;r)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> z=l+r&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">chk</span>(z)) r=z;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> l=z+<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,l);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> T;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;T,&amp;k);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(T--) <span class=\"built_in\">abc</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cleid927700012sjf4lyad8ld","tag_id":"cleid927e00042sjf87cohr3t","_id":"cleid927k000f2sjf9h2e00wx"},{"post_id":"cleid927700012sjf4lyad8ld","tag_id":"cleid927i000a2sjf2xko4boh","_id":"cleid927l000h2sjfdp6mgg66"},{"post_id":"cleid927d00032sjf7jgu3bok","tag_id":"cleid927k000d2sjfeihnf3kt","_id":"cleid927m000k2sjf89h1hu32"},{"post_id":"cleid927g00062sjfbao28mzs","tag_id":"cleid927l000i2sjf16ck0ut3","_id":"cleid927t000v2sjf08pshxgf"},{"post_id":"cleid927g00062sjfbao28mzs","tag_id":"cleid927n000m2sjf5eypf91v","_id":"cleid927u000x2sjf95xb3les"},{"post_id":"cleid927g00062sjfbao28mzs","tag_id":"cleid927p000q2sjfd07ohrjb","_id":"cleid927v00102sjfacb6gjrb"},{"post_id":"cleid927h00082sjf2w45abmm","tag_id":"cleid927k000d2sjfeihnf3kt","_id":"cleid927v00122sjfelhsbbb7"},{"post_id":"cleid927i00092sjf8suf0nx4","tag_id":"cleid927u000y2sjf79480vq2","_id":"cleid927w00152sjffaaxha0r"},{"post_id":"cleid927j000b2sjfdbacdluq","tag_id":"cleid927v00132sjfhwdobyz6","_id":"cleid927x00192sjffj0l0n35"},{"post_id":"cleid927j000c2sjf824b1rcu","tag_id":"cleid927l000i2sjf16ck0ut3","_id":"cleid9281001m2sjf0z12agnd"},{"post_id":"cleid927j000c2sjf824b1rcu","tag_id":"cleid927y001b2sjf0441cof5","_id":"cleid9282001o2sjf3lee9mcd"},{"post_id":"cleid927j000c2sjf824b1rcu","tag_id":"cleid927n000m2sjf5eypf91v","_id":"cleid9282001r2sjf8fdm39sz"},{"post_id":"cleid927j000c2sjf824b1rcu","tag_id":"cleid927p000q2sjfd07ohrjb","_id":"cleid9283001t2sjf53i0h6mj"},{"post_id":"cleid927k000e2sjfevbr0nyb","tag_id":"cleid9281001l2sjfcvsfb786","_id":"cleid9284001x2sjf5vi33ysd"},{"post_id":"cleid927k000e2sjfevbr0nyb","tag_id":"cleid9282001q2sjf1zgbgrj4","_id":"cleid9284001z2sjfgpblb1em"},{"post_id":"cleid9283001w2sjf0gw9h8rf","tag_id":"cleid9281001l2sjfcvsfb786","_id":"cleid928500222sjf44j9glb8"},{"post_id":"cleid9283001w2sjf0gw9h8rf","tag_id":"cleid9282001q2sjf1zgbgrj4","_id":"cleid928600242sjf2hjidmo6"},{"post_id":"cleid927k000g2sjf44n1be47","tag_id":"cleid9281001l2sjfcvsfb786","_id":"cleid928700272sjfc1ul5u07"},{"post_id":"cleid927k000g2sjf44n1be47","tag_id":"cleid928400202sjffly3279h","_id":"cleid928800292sjff9q4bfos"},{"post_id":"cleid927m000j2sjf1b2b0yae","tag_id":"cleid9281001l2sjfcvsfb786","_id":"cleid928c002f2sjfafg9bauo"},{"post_id":"cleid927m000j2sjf1b2b0yae","tag_id":"cleid9282001q2sjf1zgbgrj4","_id":"cleid928d002h2sjfdlc73553"},{"post_id":"cleid928a002e2sjf544s1t3m","tag_id":"cleid9281001l2sjfcvsfb786","_id":"cleid928f002k2sjfgi8r3z9h"},{"post_id":"cleid928a002e2sjf544s1t3m","tag_id":"cleid9282001q2sjf1zgbgrj4","_id":"cleid928h002m2sjf09ntfefe"},{"post_id":"cleid927m000l2sjf1irbc40m","tag_id":"cleid9281001l2sjfcvsfb786","_id":"cleid928j002p2sjfdj1cgjus"},{"post_id":"cleid927m000l2sjf1irbc40m","tag_id":"cleid9282001q2sjf1zgbgrj4","_id":"cleid928k002r2sjfb739bkqo"},{"post_id":"cleid928f002l2sjf01wwgj1s","tag_id":"cleid9281001l2sjfcvsfb786","_id":"cleid928t002u2sjf20cagvem"},{"post_id":"cleid928f002l2sjf01wwgj1s","tag_id":"cleid9282001q2sjf1zgbgrj4","_id":"cleid928w002w2sjfalik10fh"},{"post_id":"cleid928h002o2sjf2xl20qjf","tag_id":"cleid9281001l2sjfcvsfb786","_id":"cleid928z002z2sjfbppmfjs1"},{"post_id":"cleid928h002o2sjf2xl20qjf","tag_id":"cleid9282001q2sjf1zgbgrj4","_id":"cleid929000312sjfaolyg99r"},{"post_id":"cleid928j002q2sjf3dfibvhb","tag_id":"cleid9281001l2sjfcvsfb786","_id":"cleid929200342sjfeu5n5eye"},{"post_id":"cleid928j002q2sjf3dfibvhb","tag_id":"cleid928400202sjffly3279h","_id":"cleid929200352sjfcrb38e4t"},{"post_id":"cleid928l002t2sjfh23lavx1","tag_id":"cleid9281001l2sjfcvsfb786","_id":"cleid929300372sjfgk7h877a"},{"post_id":"cleid928l002t2sjfh23lavx1","tag_id":"cleid928400202sjffly3279h","_id":"cleid929400382sjf1md9f6rj"},{"post_id":"cleid927n000n2sjfg1769o0o","tag_id":"cleid9281001l2sjfcvsfb786","_id":"cleid9295003a2sjfcbpfgm6b"},{"post_id":"cleid927n000n2sjfg1769o0o","tag_id":"cleid9282001q2sjf1zgbgrj4","_id":"cleid9295003b2sjf6qqq3xvs"},{"post_id":"cleid928t002v2sjf6jmp99wi","tag_id":"cleid9281001l2sjfcvsfb786","_id":"cleid9296003d2sjff7g9f5g4"},{"post_id":"cleid928t002v2sjf6jmp99wi","tag_id":"cleid928400202sjffly3279h","_id":"cleid9296003e2sjfcprn6dx6"},{"post_id":"cleid927n000o2sjf564e186p","tag_id":"cleid927l000i2sjf16ck0ut3","_id":"cleid9297003g2sjf7jrm0lvy"},{"post_id":"cleid927n000o2sjf564e186p","tag_id":"cleid927n000m2sjf5eypf91v","_id":"cleid9297003h2sjff55zeujl"},{"post_id":"cleid927n000o2sjf564e186p","tag_id":"cleid928w002x2sjf0yi3ho1l","_id":"cleid929b003j2sjfcnlf5s2y"},{"post_id":"cleid927o000p2sjf502n90zb","tag_id":"cleid9281001l2sjfcvsfb786","_id":"cleid929b003k2sjfggx005s7"},{"post_id":"cleid927o000p2sjf502n90zb","tag_id":"cleid9282001q2sjf1zgbgrj4","_id":"cleid929c003m2sjf36uzbyu7"},{"post_id":"cleid927p000r2sjfd36zemgi","tag_id":"cleid9281001l2sjfcvsfb786","_id":"cleid929c003n2sjfdon6022p"},{"post_id":"cleid927p000r2sjfd36zemgi","tag_id":"cleid928400202sjffly3279h","_id":"cleid929c003p2sjf2153hzfl"},{"post_id":"cleid927q000s2sjf80l34ggh","tag_id":"cleid9281001l2sjfcvsfb786","_id":"cleid929c003q2sjf5u084yhc"},{"post_id":"cleid927q000s2sjf80l34ggh","tag_id":"cleid9282001q2sjf1zgbgrj4","_id":"cleid929d003s2sjfbvy366ap"},{"post_id":"cleid927t000u2sjf6sr039m6","tag_id":"cleid9281001l2sjfcvsfb786","_id":"cleid929d003t2sjffobt6eyu"},{"post_id":"cleid927t000u2sjf6sr039m6","tag_id":"cleid9282001q2sjf1zgbgrj4","_id":"cleid929d003v2sjfgb61fg75"},{"post_id":"cleid927t000w2sjf0bip9203","tag_id":"cleid9281001l2sjfcvsfb786","_id":"cleid929d003x2sjfh8pne5wz"},{"post_id":"cleid927t000w2sjf0bip9203","tag_id":"cleid9282001q2sjf1zgbgrj4","_id":"cleid929d003y2sjf5qjkedp1"},{"post_id":"cleid927u000z2sjf7gf8746r","tag_id":"cleid9281001l2sjfcvsfb786","_id":"cleid929e00412sjfccuffl53"},{"post_id":"cleid927u000z2sjf7gf8746r","tag_id":"cleid9282001q2sjf1zgbgrj4","_id":"cleid929e00422sjf8yqj31ye"},{"post_id":"cleid927v00112sjfa9a557ac","tag_id":"cleid927l000i2sjf16ck0ut3","_id":"cleid929e00442sjffq3f7mx5"},{"post_id":"cleid927v00112sjfa9a557ac","tag_id":"cleid927n000m2sjf5eypf91v","_id":"cleid929e00452sjfawiq4zch"},{"post_id":"cleid927v00112sjfa9a557ac","tag_id":"cleid928w002x2sjf0yi3ho1l","_id":"cleid929e00472sjf1dpq2j5t"},{"post_id":"cleid927w00142sjf86n1b1o7","tag_id":"cleid9281001l2sjfcvsfb786","_id":"cleid929e00492sjf6nuw2v4m"},{"post_id":"cleid927w00142sjf86n1b1o7","tag_id":"cleid9282001q2sjf1zgbgrj4","_id":"cleid929e004a2sjfec50168w"},{"post_id":"cleid927w00162sjf6scd6v0y","tag_id":"cleid9281001l2sjfcvsfb786","_id":"cleid929f004d2sjf4b8gclbf"},{"post_id":"cleid927w00162sjf6scd6v0y","tag_id":"cleid9282001q2sjf1zgbgrj4","_id":"cleid929f004e2sjfbwwl94nc"},{"post_id":"cleid927x00182sjf8o2xg0l7","tag_id":"cleid9281001l2sjfcvsfb786","_id":"cleid929f004h2sjf9xxieefm"},{"post_id":"cleid927x00182sjf8o2xg0l7","tag_id":"cleid9282001q2sjf1zgbgrj4","_id":"cleid929f004i2sjfd4twe8vl"},{"post_id":"cleid927x001a2sjfcen754ae","tag_id":"cleid9281001l2sjfcvsfb786","_id":"cleid929g004l2sjfc29q0g5d"},{"post_id":"cleid927x001a2sjfcen754ae","tag_id":"cleid928400202sjffly3279h","_id":"cleid929g004m2sjf6bt75u7f"},{"post_id":"cleid927y001c2sjfbrxt1bub","tag_id":"cleid927l000i2sjf16ck0ut3","_id":"cleid929g004o2sjf9iv0dh6p"},{"post_id":"cleid927y001c2sjfbrxt1bub","tag_id":"cleid927n000m2sjf5eypf91v","_id":"cleid929g004p2sjfakitfeck"},{"post_id":"cleid927y001c2sjfbrxt1bub","tag_id":"cleid928w002x2sjf0yi3ho1l","_id":"cleid929g004r2sjfdsy5cn77"},{"post_id":"cleid927y001d2sjfczbfa57f","tag_id":"cleid927l000i2sjf16ck0ut3","_id":"cleid929g004s2sjfa10pczsg"},{"post_id":"cleid927y001d2sjfczbfa57f","tag_id":"cleid927n000m2sjf5eypf91v","_id":"cleid929g004u2sjfd27u9ow6"},{"post_id":"cleid927y001d2sjfczbfa57f","tag_id":"cleid928w002x2sjf0yi3ho1l","_id":"cleid929g004v2sjfg8om59c1"},{"post_id":"cleid927z001e2sjferfb6zyb","tag_id":"cleid9281001l2sjfcvsfb786","_id":"cleid929h004x2sjf46xtco1l"},{"post_id":"cleid927z001e2sjferfb6zyb","tag_id":"cleid928400202sjffly3279h","_id":"cleid929h004y2sjf5i051y5d"},{"post_id":"cleid927z001g2sjfasu12dn1","tag_id":"cleid9281001l2sjfcvsfb786","_id":"cleid929h00512sjfchlq4nsq"},{"post_id":"cleid927z001g2sjfasu12dn1","tag_id":"cleid928400202sjffly3279h","_id":"cleid929h00522sjfd11s602w"},{"post_id":"cleid9280001h2sjf5q1ugnil","tag_id":"cleid9282001q2sjf1zgbgrj4","_id":"cleid929i00552sjf26cn0j5t"},{"post_id":"cleid9280001h2sjf5q1ugnil","tag_id":"cleid928400202sjffly3279h","_id":"cleid929i00562sjf6todbs7k"},{"post_id":"cleid9280001j2sjfe746ek2n","tag_id":"cleid927l000i2sjf16ck0ut3","_id":"cleid929i00582sjfgtoif4qo"},{"post_id":"cleid9280001j2sjfe746ek2n","tag_id":"cleid927n000m2sjf5eypf91v","_id":"cleid929i00592sjf9te8g9l8"},{"post_id":"cleid9280001j2sjfe746ek2n","tag_id":"cleid928w002x2sjf0yi3ho1l","_id":"cleid929i005b2sjfe64z7bn8"},{"post_id":"cleid9281001k2sjf8bzq90od","tag_id":"cleid9281001l2sjfcvsfb786","_id":"cleid929j005d2sjfg8830ltf"},{"post_id":"cleid9281001k2sjf8bzq90od","tag_id":"cleid9282001q2sjf1zgbgrj4","_id":"cleid929j005e2sjfeei8apxv"},{"post_id":"cleid9281001n2sjf0p1ndnfg","tag_id":"cleid927l000i2sjf16ck0ut3","_id":"cleid929l005g2sjf6xz451k2"},{"post_id":"cleid9281001n2sjf0p1ndnfg","tag_id":"cleid927n000m2sjf5eypf91v","_id":"cleid929l005h2sjfaq6j9p57"},{"post_id":"cleid9281001n2sjf0p1ndnfg","tag_id":"cleid928w002x2sjf0yi3ho1l","_id":"cleid929l005j2sjf1maxh2s5"},{"post_id":"cleid9282001p2sjf6ym1fji2","tag_id":"cleid9281001l2sjfcvsfb786","_id":"cleid929m005k2sjfecgdgr7y"},{"post_id":"cleid9282001p2sjf6ym1fji2","tag_id":"cleid9282001q2sjf1zgbgrj4","_id":"cleid929m005m2sjfavdkfz81"},{"post_id":"cleid9282001s2sjfhn2n4dvm","tag_id":"cleid927l000i2sjf16ck0ut3","_id":"cleid929m005n2sjf2ksg0b7h"},{"post_id":"cleid9282001s2sjfhn2n4dvm","tag_id":"cleid928w002x2sjf0yi3ho1l","_id":"cleid929n005p2sjf57be0ocg"},{"post_id":"cleid9283001u2sjf5me8ff6x","tag_id":"cleid929m005l2sjf0kvbcnpo","_id":"cleid929n005s2sjf6rlbhkvb"},{"post_id":"cleid9283001u2sjf5me8ff6x","tag_id":"cleid929m005o2sjfda9a33at","_id":"cleid929n005t2sjff36ghtme"},{"post_id":"cleid9283001u2sjf5me8ff6x","tag_id":"cleid929n005q2sjf5e7p4sa3","_id":"cleid929o005v2sjfcwng0kxz"},{"post_id":"cleid9284001y2sjf8gt6gos4","tag_id":"cleid927l000i2sjf16ck0ut3","_id":"cleid929o005w2sjf3whlcim1"},{"post_id":"cleid9284001y2sjf8gt6gos4","tag_id":"cleid929n005r2sjferv426tf","_id":"cleid929o005y2sjf7woa5ewa"},{"post_id":"cleid928400212sjf5ro89s0l","tag_id":"cleid929n005u2sjf5zzqgr3a","_id":"cleid929p00602sjfez40ft46"},{"post_id":"cleid928400212sjf5ro89s0l","tag_id":"cleid929o005x2sjfd2s99209","_id":"cleid929p00612sjfh36a387w"},{"post_id":"cleid928500232sjfax8t22u3","tag_id":"cleid927l000i2sjf16ck0ut3","_id":"cleid929p00632sjffxy81spz"},{"post_id":"cleid928500232sjfax8t22u3","tag_id":"cleid927n000m2sjf5eypf91v","_id":"cleid929p00642sjfdzd15egn"},{"post_id":"cleid928500232sjfax8t22u3","tag_id":"cleid928w002x2sjf0yi3ho1l","_id":"cleid929q00662sjfdybo0of2"},{"post_id":"cleid928600262sjf81z67obe","tag_id":"cleid927l000i2sjf16ck0ut3","_id":"cleid929q00672sjfcabb2syi"},{"post_id":"cleid928600262sjf81z67obe","tag_id":"cleid927n000m2sjf5eypf91v","_id":"cleid929q00692sjfavbi2hlb"},{"post_id":"cleid928600262sjf81z67obe","tag_id":"cleid928w002x2sjf0yi3ho1l","_id":"cleid929q006a2sjfdzso3zt3"},{"post_id":"cleid928700282sjfghjkdqlz","tag_id":"cleid929m005l2sjf0kvbcnpo","_id":"cleid929q006c2sjfhmkahbxo"},{"post_id":"cleid928700282sjfghjkdqlz","tag_id":"cleid929m005o2sjfda9a33at","_id":"cleid929q006d2sjffqfa5zr2"},{"post_id":"cleid9288002b2sjf0ypuhfme","tag_id":"cleid929q006b2sjf1xx6h1qv","_id":"cleid929r006g2sjf9j13dlxe"},{"post_id":"cleid9288002b2sjf0ypuhfme","tag_id":"cleid929r006e2sjfgd2x71v8","_id":"cleid929r006h2sjfagpf3lnm"},{"post_id":"cleid9288002c2sjfa7g1feb7","tag_id":"cleid9281001l2sjfcvsfb786","_id":"cleid929s006j2sjf0z7hacmw"},{"post_id":"cleid9288002c2sjfa7g1feb7","tag_id":"cleid9282001q2sjf1zgbgrj4","_id":"cleid929s006k2sjf14ox7aan"},{"post_id":"cleid9288002c2sjfa7g1feb7","tag_id":"cleid929r006f2sjf0orx12da","_id":"cleid929s006m2sjf1en31hg9"},{"post_id":"cleid928c002g2sjfc0gzczy2","tag_id":"cleid929r006i2sjf8t2v2il2","_id":"cleid929s006n2sjf1t0ugg6o"},{"post_id":"cleid928x002y2sjfbko6b5ig","tag_id":"cleid929r006i2sjf8t2v2il2","_id":"cleid929t006r2sjf55j1f8f4"},{"post_id":"cleid929000322sjfbj1d8otc","tag_id":"cleid929r006i2sjf8t2v2il2","_id":"cleid929t006s2sjf0kko9lgt"},{"post_id":"cleieq3jv0000hkjf80nj19dd","tag_id":"cleid927u000y2sjf79480vq2","_id":"cleieq3k40001hkjf3j917spy"},{"post_id":"cleoevvse0000k8jf6kjs8mk0","tag_id":"cleid927u000y2sjf79480vq2","_id":"cleoevvsi0001k8jfgpn57rc6"}],"Tag":[{"name":"字符串算法","_id":"cleid927e00042sjf87cohr3t"},{"name":"AC自动机","_id":"cleid927i000a2sjf2xko4boh"},{"name":"平衡树","_id":"cleid927k000d2sjfeihnf3kt"},{"name":"动态规划","_id":"cleid927l000i2sjf16ck0ut3"},{"name":"单调队列","_id":"cleid927n000m2sjf5eypf91v"},{"name":"单调队列优化dp","_id":"cleid927p000q2sjfd07ohrjb"},{"name":"CF","_id":"cleid927u000y2sjf79480vq2"},{"name":"Orita","_id":"cleid927v00132sjfhwdobyz6"},{"name":"背包","_id":"cleid927y001b2sjf0441cof5"},{"name":"网络流","_id":"cleid9281001l2sjfcvsfb786"},{"name":"最大流","_id":"cleid9282001q2sjf1zgbgrj4"},{"name":"费用流","_id":"cleid928400202sjffly3279h"},{"name":"斜率优化dp","_id":"cleid928w002x2sjf0yi3ho1l"},{"name":"可持续化线段树","_id":"cleid929m005l2sjf0kvbcnpo"},{"name":"主席树","_id":"cleid929m005o2sjfda9a33at"},{"name":"NOIP","_id":"cleid929n005q2sjf5e7p4sa3"},{"name":"四边形不等式优化dp","_id":"cleid929n005r2sjferv426tf"},{"name":"扫描线","_id":"cleid929n005u2sjf5zzqgr3a"},{"name":"线段树","_id":"cleid929o005x2sjfd2s99209"},{"name":"树","_id":"cleid929q006b2sjf1xx6h1qv"},{"name":"树链剖分","_id":"cleid929r006e2sjfgd2x71v8"},{"name":"上下界网络流","_id":"cleid929r006f2sjf0orx12da"},{"name":"游记","_id":"cleid929r006i2sjf8t2v2il2"},{"name":"实用的东西","_id":"cleid929s006l2sjf40r49ws1"}]}}